{
  "address": "0x69b6D4E6e075a6E4D79F8c07C131944Da9754489",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "StrategyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "StrategyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "assetBalanceManaged",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllStrategies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_strategyAllocationRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_yieldFeeBps",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "removeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_yieldFeeBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_strategyAllocationRate",
          "type": "uint256"
        }
      ],
      "name": "setParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        }
      ],
      "name": "setStrategist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyAllocationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueInStrategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "totalValueInStrategy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd1dba8699ff1648e4b99749f4bf126743ef56341131ae3cbf4bf3aa0903e8ef",
  "receipt": {
    "to": null,
    "from": "0x83e50cD4123bAA60f6d6c8A83ca85Ac72e826bD0",
    "contractAddress": "0x69b6D4E6e075a6E4D79F8c07C131944Da9754489",
    "transactionIndex": 10,
    "gasUsed": "977710",
    "logsBloom": "0x
    "blockHash": "0x2ff2b772ab9f56dc24e7f7940dd63c3c21c7d5924f9df552e66c69ca094dae93",
    "transactionHash": "0xfd1dba8699ff1648e4b99749f4bf126743ef56341131ae3cbf4bf3aa0903e8ef",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 26201925,
        "transactionHash": "0xfd1dba8699ff1648e4b99749f4bf126743ef56341131ae3cbf4bf3aa0903e8ef",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000083e50cd4123baa60f6d6c8a83ca85ac72e826bd0",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001d8663360b416200000000000000000000000000000000000000000000000014a6e137c8b213970000000000000000000000000000000000000000000014cf2d804c5ed00549b400000000000000000000000000000000000000000000000014895ad492a6d2350000000000000000000000000000000000000000000014cf2d9dd2c206108b16",
        "logIndex": 120,
        "blockHash": "0x2ff2b772ab9f56dc24e7f7940dd63c3c21c7d5924f9df552e66c69ca094dae93"
      }
    ],
    "blockNumber": 26201925,
    "cumulativeGasUsed": "3718951",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c276bc92099fcbb92367a1ba0ee8e6a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"assetBalanceManaged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStrategies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_strategyAllocationRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_yieldFeeBps\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yieldFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strategyAllocationRate\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyAllocationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueInStrategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"totalValueInStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"StrategyAdded(address)\":{\"details\":\"Emitted when `_strategy` is added \"},\"StrategyRemoved(address)\":{\"details\":\"Emitted when `_strategy` is removed \"}},\"kind\":\"dev\",\"methods\":{\"assetBalanceManaged(address)\":{\"details\":\"total value of `_asset` under management\",\"params\":{\"_asset\":\"Asset address\"},\"returns\":{\"_0\":\"uint256 Balance of asset from all strategies\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalValueInStrategies()\":{\"details\":\"Get total value of all assets held in all strategies.\",\"returns\":{\"_0\":\"value Total value in all strategies denominated in baseAsset\"}},\"totalValueInStrategy(address)\":{\"details\":\"Get total value of all assets held by strategy.\",\"params\":{\"_strategy\":\"Address of the strategy\"},\"returns\":{\"_0\":\"value Total value in of all assets in strategy denominated in baseAsset\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"strategist\":{\"details\":\"strategist who manages the strategies. \"},\"strategyAllocationRate\":{\"details\":\"percentage to allocate to strategies in 18 decimals. 100% = 1e18. \"},\"vault\":{\"details\":\"vault being managed. \"},\"yieldFeeBps\":{\"details\":\"yield fee basis points. 2% = 200. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"CaskVaultOperator is where: - the list of strategies lives - allocation plans across strategies lives - strategy rebalancing happen, when needed - strategy harvesting happens - yield and performance fees are collected and managed\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/CaskVaultManager.sol\":\"CaskVaultManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n /**\\n  * @title  Interface for yield earning strategies.\\n  */\\n\\ninterface ICaskStrategy {\\n    /**\\n     * @dev Deposit an amount of asset into the strategy\\n     * @param _asset Asset address\\n     * @param _amount Amount of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit all assets in the contract to the strategy\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw an amount of asset from the strategy\\n     * @param _recipient Recipient of asset being withdrawn\\n     * @param _asset Asset address\\n     * @param _amount Amount of asset to withdraw\\n     */\\n    function withdraw(address _recipient, address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Withdraw all assets from the strategy and send to the vault\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Get the current balance of an asset in the strategy\\n     * @param _asset Asset address\\n     * @return balance Total balance of asset currently in the strategy\\n     */\\n    function assetBalance(address _asset) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Check if the strategy supports an asset\\n     * @param _asset Asset address\\n     * @return bool `true` if asset supported, `false` otherwise\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n}\",\"keccak256\":\"0xad4a06b8a51199757b1028765ee6576c87e9eeddaa19dc6f30b73693bc3ad398\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @title  Interface for vault\\n  */\\n\\ninterface ICaskVault is IERC20MetadataUpgradeable {\\n\\n    // whitelisted stablecoin assets supported by the vault\\n    struct Asset {\\n        address priceFeed;\\n        uint256 slippageBps;\\n        uint256 depositLimit;\\n        uint8 assetDecimals;\\n        uint8 priceFeedDecimals;\\n        bool allowed;\\n    }\\n\\n\\n    /**\\n      * @dev Get base asset of vault.\\n     */\\n    function getBaseAsset() external view returns (address);\\n\\n    /**\\n      * @dev Get all the assets supported by the vault.\\n     */\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Get asset details\\n     * @param _asset Asset address\\n     * @return Asset Asset details\\n     */\\n    function getAsset(address _asset) external view returns(Asset memory);\\n\\n    /**\\n     * @dev Check if the vault supports an asset\\n     * @param _asset Asset address\\n     * @return bool `true` if asset supported, `false` otherwise\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _value Amount of baseAsset value to transfer\\n     * @param _protocolFee Protocol fee to deduct from `_value`\\n     * @param _network Address of network fee collector\\n     * @param _networkFee Network fee to deduct from `_value`\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _protocolFee,\\n        address _network,\\n        uint256 _networkFee\\n    ) external;\\n\\n    /**\\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _value Amount of baseAsset value to transfer\\n     * @param _protocolFee Protocol fee to deduct from `_value`\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _protocolFee\\n    ) external;\\n\\n    /**\\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _value Amount of baseAsset value to transfer\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external;\\n\\n    /**\\n     * @dev Transfer the equivalent vault shares of base asset `value` to `_recipient`\\n     * @param _recipient To address\\n     * @param _value Amount of baseAsset value to transfer\\n     */\\n    function transferValue(\\n        address _recipient,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Transfer the equivalent vault shares of base asset `value` from `_sender` to `_recipient`\\n     * @param _sender From address\\n     * @param _recipient To address\\n     * @param _value Amount of baseAsset value to transfer\\n     */\\n    function transferValueFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\\n     * @param _asset Address of incoming asset\\n     * @param _assetAmount Amount of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _assetAmount) external;\\n\\n    /**\\n     * @dev Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\\n     * @param _to Recipient of funds\\n     * @param _asset Address of incoming asset\\n     * @param _assetAmount Amount of asset to deposit\\n     */\\n    function depositTo(address _to, address _asset, uint256 _assetAmount) external;\\n\\n    /**\\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\\n     * @param _asset Address of outgoing asset\\n     * @param _shares Amount of shares to withdraw\\n     */\\n    function withdraw(address _asset, uint256 _shares) external;\\n\\n    /**\\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\\n     * @param _recipient Recipient who will receive the withdrawn assets\\n     * @param _asset Address of outgoing asset\\n     * @param _shares Amount of shares to withdraw\\n     */\\n    function withdrawTo(address _recipient, address _asset, uint256 _shares) external;\\n\\n    /**\\n     * @dev Get total shares of vault\\n     */\\n//    function totalSupply() external view returns(uint256);\\n\\n    /**\\n     * @dev Get current balance of shares for an address\\n     * @param _address Address to check\\n     */\\n//    function balanceOf(address _address) external view returns(uint256);\\n\\n    /**\\n     * @dev Get current vault value of `_address` denominated in `baseAsset`\\n     * @param _address Address to check\\n     */\\n    function currentValueOf(address _address) external view returns(uint256);\\n\\n    /**\\n     * @dev Get current vault value a vault share\\n     */\\n    function pricePerShare() external view returns(uint256);\\n\\n    /**\\n     * @dev Get the number of vault shares that represents a given value of the base asset\\n     * @param _value Amount of value\\n     */\\n    function sharesForValue(uint256 _value) external view returns(uint256);\\n\\n    /**\\n     * @dev Get total value in vault and managed by admin - denominated in `baseAsset`\\n     */\\n    function totalValue() external view returns(uint256);\\n\\n    /**\\n     * @dev Get total amount of an asset held in vault and managed by admin\\n     * @param _asset Address of asset\\n     */\\n    function totalAssetBalance(address _asset) external view returns(uint256);\\n\\n    /**\\n     * @dev Send an amount of asset to a strategy\\n     * @param _strategy Address of strategy\\n     * @param _asset Address of asset\\n     * @param _assetAmount Amount of asset to send\\n     */\\n    function allocateToStrategy(address _strategy, address _asset, uint256 _assetAmount) external;\\n\\n\\n    /************************** EVENTS **************************/\\n\\n    /** @dev Emitted when `sender` transfers `baseAssetValue` (denominated in vault baseAsset) to `recipient` */\\n    event TransferValue(address indexed from, address indexed to, uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when an amount of `baseAsset` is paid from `from` to `to` within the vault */\\n    event Payment(address indexed from, address indexed to, uint256 baseAssetAmount, uint256 shares,\\n        uint256 protocolFee, uint256 protocolFeeShares,\\n        address indexed network, uint256 networkFee, uint256 networkFeeShares);\\n\\n    /** @dev Emitted when `asset` is added as a new supported asset */\\n    event AllowedAsset(address indexed asset);\\n\\n    /** @dev Emitted when `asset` is disallowed t */\\n    event DisallowedAsset(address indexed asset);\\n\\n    /** @dev Emitted when `participant` deposits `asset` */\\n    event AssetDeposited(address indexed participant, address indexed asset, uint256 assetAmount,\\n        uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when `participant` withdraws `asset` */\\n    event AssetWithdrawn(address indexed participant, address indexed asset, uint256 assetAmount,\\n        uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when `asset` is allocated to strategy `strategy` */\\n    event AllocatedToStrategy(address indexed strategy, address indexed asset, uint256 assetAmount);\\n\\n}\",\"keccak256\":\"0x1c373716f31f70fc87365133927099aaaa0e98b37a5f408df07bb3ef0720fb6f\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title  Interface for vault admin\\n  */\\n\\ninterface ICaskVaultManager {\\n\\n    /**\\n      * @dev total value of `_asset` managed by admin - denominated in native asset\\n     */\\n    function assetBalanceManaged(address _asset) external view returns(uint256);\\n\\n}\\n\",\"keccak256\":\"0x96c15c51ecabdfb6093f5bc04ca6c761117ffcb77bb9c6ba6f720588fce1eb47\",\"license\":\"MIT\"},\"contracts/vault/CaskVaultManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n\\nimport \\\"../interfaces/ICaskVault.sol\\\";\\nimport \\\"../interfaces/ICaskStrategy.sol\\\";\\nimport \\\"../interfaces/ICaskVaultManager.sol\\\";\\n\\n/**\\nCaskVaultOperator is where:\\n\\n- the list of strategies lives\\n- allocation plans across strategies lives\\n- strategy rebalancing happen, when needed\\n- strategy harvesting happens\\n- yield and performance fees are collected and managed\\n\\n*/\\n\\ncontract CaskVaultManager is\\nICaskVaultManager,\\nOwnableUpgradeable,\\nPausableUpgradeable,\\nReentrancyGuardUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    /** @dev vault being managed. */\\n    address public vault;\\n\\n    /** @dev percentage to allocate to strategies in 18 decimals. 100% = 1e18. */\\n    uint256 public strategyAllocationRate;\\n\\n    /** @dev yield fee basis points. 2% = 200. */\\n    uint256 public yieldFeeBps;\\n\\n    /** @dev strategist who manages the strategies. */\\n    address public strategist;\\n\\n    // strategies available for use\\n    mapping(address => bool) internal strategies; // strategy contract -> enabled map\\n    address[] internal allStrategies;\\n\\n\\n    modifier onlyStrategist {\\n        require(msg.sender == strategist, \\\"!auth\\\");\\n        _;\\n    }\\n\\n\\n    function initialize(\\n        uint256 _strategyAllocationRate,\\n        uint256 _yieldFeeBps\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        strategist = msg.sender;\\n        strategyAllocationRate = _strategyAllocationRate;\\n        yieldFeeBps = _yieldFeeBps;\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n\\n\\n    /************************** STRATEGY FUNCTIONS **************************/\\n\\n\\n    function getAllStrategies() public view returns(address[] memory) {\\n        return allStrategies;\\n    }\\n\\n    function addStrategy(\\n        address _strategy\\n    ) external onlyOwner {\\n        require(!strategies[_strategy], \\\"!added\\\");\\n        strategies[_strategy] = true;\\n        allStrategies.push(_strategy);\\n        emit StrategyAdded(_strategy);\\n    }\\n\\n    function removeStrategy(\\n        address _strategy\\n    ) external onlyOwner {\\n        require(strategies[_strategy], \\\"!notfound\\\");\\n\\n        uint256 strategyIndex = allStrategies.length;\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            if (allStrategies[i] == _strategy) {\\n                strategyIndex = i;\\n                break;\\n            }\\n        }\\n\\n        if (strategyIndex < allStrategies.length) {\\n            allStrategies[strategyIndex] = allStrategies[allStrategies.length - 1];\\n            allStrategies.pop();\\n\\n            // Withdraw all from strategy\\n            ICaskStrategy strategy = ICaskStrategy(_strategy);\\n            strategy.withdrawAll();\\n\\n            // Mark the asset as not allowed\\n            strategies[_strategy] = false;\\n            emit StrategyRemoved(_strategy);\\n        }\\n    }\\n\\n\\n    /************************** ADMIN FUNCTIONS **************************/\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setVault(\\n        address _vault\\n    ) external onlyOwner {\\n        vault = _vault;\\n    }\\n\\n    function setStrategist(\\n        address _strategist\\n    ) external onlyOwner {\\n        strategist = _strategist;\\n    }\\n\\n    function setParameters(\\n        uint256 _yieldFeeBps,\\n        uint256 _strategyAllocationRate\\n    ) external onlyOwner {\\n        yieldFeeBps = _yieldFeeBps;\\n        strategyAllocationRate = _strategyAllocationRate;\\n    }\\n\\n\\n    /************************** TOTALS FUNCTIONS **************************/\\n\\n\\n    /**\\n     * @dev total value of `_asset` under management\\n     * @param _asset Asset address\\n     * @return uint256 Balance of asset from all strategies\\n     */\\n    function assetBalanceManaged(address _asset) external view returns (uint256)\\n    {\\n        uint256 balance = 0;\\n        IERC20 asset = IERC20(_asset);\\n        balance = asset.balanceOf(address(this));\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            ICaskStrategy strategy = ICaskStrategy(allStrategies[i]);\\n            if (strategy.supportsAsset(_asset)) {\\n                balance = balance + strategy.assetBalance(_asset);\\n            }\\n        }\\n        return balance;\\n    }\\n\\n\\n    /**\\n     * @dev Get total value of all assets held by strategy.\\n     * @param _strategy Address of the strategy\\n     * @return value Total value in of all assets in strategy denominated in baseAsset\\n     */\\n    function totalValueInStrategy(address _strategy) public view returns (uint256) {\\n        uint256 value = 0;\\n        // TODO: get asset list from vault?\\n//        //FIXME: scale each asset to base asset price\\n//        ICaskStrategy strategy = ICaskStrategy(_strategy);\\n//        for (uint256 y = 0; y < allAssets.length; y++) {\\n//            //            uint256 assetDecimals = Helpers.getDecimals(allAssets[y]);\\n//            uint256 assetDecimals = 1e8;\\n//            if (strategy.supportsAsset(allAssets[y])) {\\n//                uint256 balance = strategy.assetBalance(allAssets[y]);\\n//                if (balance > 0) {\\n//                    //                    value = value + balance.scaleBy(18, assetDecimals);\\n//                }\\n//            }\\n//        }\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Get total value of all assets held in all strategies.\\n     * @return value Total value in all strategies denominated in baseAsset\\n     */\\n    function totalValueInStrategies() public view returns (uint256) {\\n        uint256 value = 0;\\n        for (uint256 i = 0; i < allStrategies.length; i++) {\\n            value = value + totalValueInStrategy(allStrategies[i]);\\n        }\\n        return value;\\n    }\\n\\n\\n    /** @dev Emitted when `_strategy` is added */\\n    event StrategyAdded(address indexed _strategy);\\n\\n    /** @dev Emitted when `_strategy` is removed */\\n    event StrategyRemoved(address indexed _strategy);\\n\\n}\",\"keccak256\":\"0x100a5d7f267fcedefdce4cc85a4d31c8512236acb8c11ed18b4d5aaa9a4959fa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c806375a323b2116100ad578063c7b9d53011610071578063c7b9d5301461023f578063da0c5f0414610252578063e4a3011614610265578063f2fde38b14610278578063fbfa77cf1461028b57600080fd5b806375a323b2146101f55780638456cb59146101fe578063884870c7146102065780638da5cb5b14610219578063c3b288641461022a57600080fd5b806359c1c142116100f457806359c1c142146101a75780635c975abb146101b057806362b1ad7f146101c65780636817031b146101da578063715018a6146101ed57600080fd5b8063175188e81461013157806317852264146101465780631fe4a68614610161578063223e54791461018c5780633f4ba83a1461019f575b600080fd5b61014461013f366004610e23565b61029e565b005b61014e6104e9565b6040519081526020015b60405180910390f35b60cc54610174906001600160a01b031681565b6040516001600160a01b039091168152602001610158565b61014461019a366004610e23565b61053b565b610144610643565b61014e60cb5481565b60655460ff166040519015158152602001610158565b61014e6101d4366004610e23565b50600090565b6101446101e8366004610e23565b610677565b6101446106c3565b61014e60ca5481565b6101446106f7565b610144610214366004610e53565b610729565b6033546001600160a01b0316610174565b61023261075e565b6040516101589190610e75565b61014461024d366004610e23565b6107c0565b61014e610260366004610e23565b61080c565b610144610273366004610e53565b6109de565b610144610286366004610e23565b610acd565b60c954610174906001600160a01b031681565b6033546001600160a01b031633146102d15760405162461bcd60e51b81526004016102c890610ec2565b60405180910390fd5b6001600160a01b038116600090815260cd602052604090205460ff166103255760405162461bcd60e51b8152602060048201526009602482015268085b9bdd199bdd5b9960ba1b60448201526064016102c8565b60ce5460005b60ce5481101561038757826001600160a01b031660ce828154811061035257610352610ef7565b6000918252602090912001546001600160a01b0316141561037557809150610387565b8061037f81610f23565b91505061032b565b5060ce548110156104e55760ce80546103a290600190610f3e565b815481106103b2576103b2610ef7565b60009182526020909120015460ce80546001600160a01b0390921691839081106103de576103de610ef7565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060ce80548061041d5761041d610f55565b6001900381819060005260206000200160006101000a8154906001600160a01b03021916905590556000829050806001600160a01b031663853828b66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561048557600080fd5b505af1158015610499573d6000803e3d6000fd5b505050506001600160a01b038316600081815260cd6020526040808220805460ff19169055517f09a1db4b80c32706328728508c941a6b954f31eb5affd32f236c1fd405f8fea49190a2505b5050565b600080805b60ce548110156105355761051760ce828154811061050e5761050e610ef7565b50600090815290565b6105219083610f6b565b91508061052d81610f23565b9150506104ee565b50919050565b6033546001600160a01b031633146105655760405162461bcd60e51b81526004016102c890610ec2565b6001600160a01b038116600090815260cd602052604090205460ff16156105b75760405162461bcd60e51b815260206004820152600660248201526508585919195960d21b60448201526064016102c8565b6001600160a01b038116600081815260cd6020526040808220805460ff1916600190811790915560ce8054918201815583527fd36cd1c74ef8d7326d8021b776c18fb5a5724b7f7bc93c2f42e43e10ef27d12a0180546001600160a01b03191684179055517f3f008fd510eae7a9e7bee13513d7b83bef8003d488b5a3d0b0da4de71d6846f19190a250565b6033546001600160a01b0316331461066d5760405162461bcd60e51b81526004016102c890610ec2565b610675610b6e565b565b6033546001600160a01b031633146106a15760405162461bcd60e51b81526004016102c890610ec2565b60c980546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146106ed5760405162461bcd60e51b81526004016102c890610ec2565b6106756000610c01565b6033546001600160a01b031633146107215760405162461bcd60e51b81526004016102c890610ec2565b610675610c53565b6033546001600160a01b031633146107535760405162461bcd60e51b81526004016102c890610ec2565b60cb9190915560ca55565b606060ce8054806020026020016040519081016040528092919081815260200182805480156107b657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610798575b5050505050905090565b6033546001600160a01b031633146107ea5760405162461bcd60e51b81526004016102c890610ec2565b60cc80546001600160a01b0319166001600160a01b0392909216919091179055565b6040516370a0823160e01b8152306004820152600090819083906001600160a01b038216906370a082319060240160206040518083038186803b15801561085257600080fd5b505afa158015610866573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088a9190610f83565b915060005b60ce548110156109d557600060ce82815481106108ae576108ae610ef7565b60009182526020909120015460405163551c457b60e11b81526001600160a01b0388811660048301529091169150819063aa388af69060240160206040518083038186803b1580156108ff57600080fd5b505afa158015610913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109379190610f9c565b156109c2576040516319b11cab60e31b81526001600160a01b03878116600483015282169063cd88e5589060240160206040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190610f83565b6109bf9085610f6b565b93505b50806109cd81610f23565b91505061088f565b50909392505050565b600054610100900460ff166109f95760005460ff16156109fd565b303b155b610a605760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102c8565b600054610100900460ff16158015610a82576000805461ffff19166101011790555b610a8a610cce565b610a92610d05565b610a9a610d3c565b60cc80546001600160a01b0319163317905560ca83905560cb8290558015610ac8576000805461ff00191690555b505050565b6033546001600160a01b03163314610af75760405162461bcd60e51b81526004016102c890610ec2565b6001600160a01b038116610b5c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102c8565b610b6581610c01565b50565b3b151590565b60655460ff16610bb75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102c8565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff1615610c995760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102c8565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610be43390565b600054610100900460ff16610cf55760405162461bcd60e51b81526004016102c890610fbe565b610cfd610d6b565b610675610d92565b600054610100900460ff16610d2c5760405162461bcd60e51b81526004016102c890610fbe565b610d34610d6b565b610675610dc2565b600054610100900460ff16610d635760405162461bcd60e51b81526004016102c890610fbe565b610675610df5565b600054610100900460ff166106755760405162461bcd60e51b81526004016102c890610fbe565b600054610100900460ff16610db95760405162461bcd60e51b81526004016102c890610fbe565b61067533610c01565b600054610100900460ff16610de95760405162461bcd60e51b81526004016102c890610fbe565b6065805460ff19169055565b600054610100900460ff16610e1c5760405162461bcd60e51b81526004016102c890610fbe565b6001609755565b600060208284031215610e3557600080fd5b81356001600160a01b0381168114610e4c57600080fd5b9392505050565b60008060408385031215610e6657600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015610eb65783516001600160a01b031683529284019291840191600101610e91565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610f3757610f37610f0d565b5060010190565b600082821015610f5057610f50610f0d565b500390565b634e487b7160e01b600052603160045260246000fd5b60008219821115610f7e57610f7e610f0d565b500190565b600060208284031215610f9557600080fd5b5051919050565b600060208284031215610fae57600080fd5b81518015158114610e4c57600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220d61922fc154e6cda33a60706b4fbea188dde2f46cd228fcf37f634da1fd223b464736f6c63430008090033",
  "devdoc": {
    "events": {
      "StrategyAdded(address)": {
        "details": "Emitted when `_strategy` is added "
      },
      "StrategyRemoved(address)": {
        "details": "Emitted when `_strategy` is removed "
      }
    },
    "kind": "dev",
    "methods": {
      "assetBalanceManaged(address)": {
        "details": "total value of `_asset` under management",
        "params": {
          "_asset": "Asset address"
        },
        "returns": {
          "_0": "uint256 Balance of asset from all strategies"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "totalValueInStrategies()": {
        "details": "Get total value of all assets held in all strategies.",
        "returns": {
          "_0": "value Total value in all strategies denominated in baseAsset"
        }
      },
      "totalValueInStrategy(address)": {
        "details": "Get total value of all assets held by strategy.",
        "params": {
          "_strategy": "Address of the strategy"
        },
        "returns": {
          "_0": "value Total value in of all assets in strategy denominated in baseAsset"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "strategist": {
        "details": "strategist who manages the strategies. "
      },
      "strategyAllocationRate": {
        "details": "percentage to allocate to strategies in 18 decimals. 100% = 1e18. "
      },
      "vault": {
        "details": "vault being managed. "
      },
      "yieldFeeBps": {
        "details": "yield fee basis points. 2% = 200. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "CaskVaultOperator is where: - the list of strategies lives - allocation plans across strategies lives - strategy rebalancing happen, when needed - strategy harvesting happens - yield and performance fees are collected and managed",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 327,
        "contract": "contracts/vault/CaskVaultManager.sol:CaskVaultManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 330,
        "contract": "contracts/vault/CaskVaultManager.sol:CaskVaultManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2551,
        "contract": "contracts/vault/CaskVaultManager.sol:CaskVaultManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 205,
        "contract": "contracts/vault/CaskVaultManager.sol:CaskVaultManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 319,
        "contract": "contracts/vault/CaskVaultManager.sol:CaskVaultManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 415,
        "contract": "contracts/vault/CaskVaultManager.sol:CaskVaultManager",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 506,
        "contract": "contracts/vault/CaskVaultManager.sol:CaskVaultManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 521,
        "contract": "contracts/vault/CaskVaultManager.sol:CaskVaultManager",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 564,
        "contract": "contracts/vault/CaskVaultManager.sol:CaskVaultManager",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15201,
        "contract": "contracts/vault/CaskVaultManager.sol:CaskVaultManager",
        "label": "vault",
        "offset": 0,
        "slot": "201",
        "type": "t_address"
      },
      {
        "astId": 15204,
        "contract": "contracts/vault/CaskVaultManager.sol:CaskVaultManager",
        "label": "strategyAllocationRate",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 15207,
        "contract": "contracts/vault/CaskVaultManager.sol:CaskVaultManager",
        "label": "yieldFeeBps",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 15210,
        "contract": "contracts/vault/CaskVaultManager.sol:CaskVaultManager",
        "label": "strategist",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 15214,
        "contract": "contracts/vault/CaskVaultManager.sol:CaskVaultManager",
        "label": "strategies",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 15217,
        "contract": "contracts/vault/CaskVaultManager.sol:CaskVaultManager",
        "label": "allStrategies",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}