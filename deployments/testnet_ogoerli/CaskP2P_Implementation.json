{
  "address": "0x97Ef63CA0520012949B160f2f8393C96Da9477fB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "p2pId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "P2PCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "p2pId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "P2PCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "p2pId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "period",
          "type": "uint32"
        }
      ],
      "name": "P2PCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "p2pId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "P2PPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "p2pId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "P2PProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "p2pId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "P2PResumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "p2pId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "P2PSkipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_p2pId",
          "type": "bytes32"
        }
      ],
      "name": "cancelP2P",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_period",
          "type": "uint32"
        }
      ],
      "name": "createP2P",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_p2pId",
          "type": "bytes32"
        }
      ],
      "name": "getP2P",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numPayments",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numSkips",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "period",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "createdAt",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "processAt",
              "type": "uint32"
            },
            {
              "internalType": "enum ICaskP2P.P2PStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct ICaskP2P.P2P",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getUserP2P",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserP2PCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_p2pId",
          "type": "bytes32"
        },
        {
          "internalType": "enum ICaskP2P.ManagerCommand",
          "name": "_command",
          "type": "uint8"
        }
      ],
      "name": "managerCommand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_p2pId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "managerProcessed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPeriod",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "p2pManager",
      "outputs": [
        {
          "internalType": "contract ICaskP2PManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_p2pId",
          "type": "bytes32"
        }
      ],
      "name": "pauseP2P",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_p2pId",
          "type": "bytes32"
        }
      ],
      "name": "resumeP2P",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_p2pManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_minPeriod",
          "type": "uint32"
        }
      ],
      "name": "setMinPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x3951a580ee78fca7c2e37d324812fb40afc6da88c679cd1687fa203d84bd578e",
  "receipt": {
    "to": null,
    "from": "0x83e50cD4123bAA60f6d6c8A83ca85Ac72e826bD0",
    "contractAddress": "0x97Ef63CA0520012949B160f2f8393C96Da9477fB",
    "transactionIndex": 0,
    "gasUsed": "1531669",
    "logsBloom": "0x
    "blockHash": "0x354ec8936eeeb1d46f77f5a545625b53a4233e1f242ec268a29c0e1aed16edbf",
    "transactionHash": "0x3951a580ee78fca7c2e37d324812fb40afc6da88c679cd1687fa203d84bd578e",
    "logs": [],
    "blockNumber": 683594,
    "cumulativeGasUsed": "1531669",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "a625c3a04b11d531fbd8cb0bf313e233",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"P2PCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"P2PCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"}],\"name\":\"P2PCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"P2PPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"P2PProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"P2PResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"p2pId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"P2PSkipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_p2pId\",\"type\":\"bytes32\"}],\"name\":\"cancelP2P\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_period\",\"type\":\"uint32\"}],\"name\":\"createP2P\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_p2pId\",\"type\":\"bytes32\"}],\"name\":\"getP2P\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPayments\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSkips\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"processAt\",\"type\":\"uint32\"},{\"internalType\":\"enum ICaskP2P.P2PStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ICaskP2P.P2P\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getUserP2P\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserP2PCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_p2pId\",\"type\":\"bytes32\"},{\"internalType\":\"enum ICaskP2P.ManagerCommand\",\"name\":\"_command\",\"type\":\"uint8\"}],\"name\":\"managerCommand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_p2pId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"managerProcessed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"p2pManager\",\"outputs\":[{\"internalType\":\"contract ICaskP2PManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_p2pId\",\"type\":\"bytes32\"}],\"name\":\"pauseP2P\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_p2pId\",\"type\":\"bytes32\"}],\"name\":\"resumeP2P\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_p2pManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minPeriod\",\"type\":\"uint32\"}],\"name\":\"setMinPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"minAmount\":{\"details\":\"minimum amount of vault base asset for a P2P. \"},\"minPeriod\":{\"details\":\"minimum period for a P2P. \"},\"p2pManager\":{\"details\":\"contract to manage P2P executions. \"},\"p2pMap\":{\"details\":\"map of P2P ID to P2P info. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/p2p/CaskP2P.sol\":\"CaskP2P\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    function trustedForwarder() public virtual view returns (address){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce3168b37fc87ec34a18b56b4b16a06432119c07fd2e1d864b871dcf40372ebe\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0x199e82e0a2833a97213b5c16ac9b4e2b1814f2e90a4c4916855cbc21e710ad5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskP2P.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskP2P {\\n\\n    enum P2PStatus {\\n        None,\\n        Active,\\n        Paused,\\n        Canceled,\\n        Complete\\n    }\\n\\n    enum ManagerCommand {\\n        None,\\n        Cancel,\\n        Skip,\\n        Pause\\n    }\\n\\n    struct P2P {\\n        address user;\\n        address to;\\n        uint256 amount;\\n        uint256 totalAmount;\\n        uint256 currentAmount;\\n        uint256 numPayments;\\n        uint256 numSkips;\\n        uint32 period;\\n        uint32 createdAt;\\n        uint32 processAt;\\n        P2PStatus status;\\n    }\\n\\n    function createP2P(\\n        address _to,\\n        uint256 _amount,\\n        uint256 _totalAmount,\\n        uint32 _period\\n    ) external returns(bytes32);\\n\\n    function getP2P(bytes32 _p2pId) external view returns (P2P memory);\\n\\n    function getUserP2P(address _user, uint256 _idx) external view returns (bytes32);\\n\\n    function getUserP2PCount(address _user) external view returns (uint256);\\n\\n    function cancelP2P(bytes32 _p2pId) external;\\n\\n    function pauseP2P(bytes32 _p2pId) external;\\n\\n    function resumeP2P(bytes32 _p2pId) external;\\n\\n    function managerCommand(bytes32 _p2pId, ManagerCommand _command) external;\\n\\n    function managerProcessed(bytes32 _p2pId, uint256 amount, uint256 _fee) external;\\n\\n\\n    event P2PCreated(bytes32 indexed p2pId, address indexed user, address indexed to,\\n        uint256 amount, uint256 totalAmount, uint32 period);\\n\\n    event P2PPaused(bytes32 indexed p2pId, address indexed user);\\n\\n    event P2PResumed(bytes32 indexed p2pId, address indexed user);\\n\\n    event P2PSkipped(bytes32 indexed p2pId, address indexed user);\\n\\n    event P2PProcessed(bytes32 indexed p2pId, address indexed user, uint256 amount, uint256 fee);\\n\\n    event P2PCanceled(bytes32 indexed p2pId, address indexed user);\\n\\n    event P2PCompleted(bytes32 indexed p2pId, address indexed user);\\n}\",\"keccak256\":\"0xed02b03a1f52f1abcbc081443568cdd6e0ffe4c847ed2f422a6a962c435ba77d\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskP2PManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskP2PManager {\\n\\n    function registerP2P(bytes32 _p2pId) external;\\n\\n    /** @dev Emitted when manager parameters are changed. */\\n    event SetParameters();\\n\\n}\",\"keccak256\":\"0x619ddd9fc0331007894061bd9062c79ec5ce5b948d2ea4a74fbba7603f737038\",\"license\":\"MIT\"},\"contracts/p2p/CaskP2P.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@opengsn/contracts/src/BaseRelayRecipient.sol\\\";\\n\\nimport \\\"../interfaces/ICaskP2P.sol\\\";\\nimport \\\"../interfaces/ICaskP2PManager.sol\\\";\\n\\ncontract CaskP2P is\\nICaskP2P,\\nInitializable,\\nOwnableUpgradeable,\\nPausableUpgradeable,\\nBaseRelayRecipient\\n{\\n    using SafeERC20 for IERC20Metadata;\\n\\n    /** @dev contract to manage P2P executions. */\\n    ICaskP2PManager public p2pManager;\\n\\n    /** @dev map of P2P ID to P2P info. */\\n    mapping(bytes32 => P2P) private p2pMap; // p2pId => P2P\\n    mapping(address => bytes32[]) private userP2Ps; // user => p2pId[]\\n\\n\\n    /** @dev minimum amount of vault base asset for a P2P. */\\n    uint256 public minAmount;\\n\\n    /** @dev minimum period for a P2P. */\\n    uint32 public minPeriod;\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n\\n        minAmount = 1;\\n        minPeriod = 86400;\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function versionRecipient() public pure override returns(string memory) { return \\\"2.2.0\\\"; }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (address sender) {\\n        sender = BaseRelayRecipient._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (bytes calldata) {\\n        return BaseRelayRecipient._msgData();\\n    }\\n\\n    modifier onlyUser(bytes32 _p2pId) {\\n        require(_msgSender() == p2pMap[_p2pId].user, \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(_msgSender() == address(p2pManager), \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n\\n    function createP2P(\\n        address _to,\\n        uint256 _amount,\\n        uint256 _totalAmount,\\n        uint32 _period\\n    ) external override returns(bytes32) {\\n        require(_amount >= minAmount, \\\"!INVALID(amount)\\\");\\n        require(_period >= minPeriod, \\\"!INVALID(period)\\\");\\n\\n        bytes32 p2pId = keccak256(abi.encodePacked(_msgSender(), _amount, _period, block.number, block.timestamp));\\n\\n        uint32 timestamp = uint32(block.timestamp);\\n\\n        P2P storage p2p = p2pMap[p2pId];\\n        p2p.user = _msgSender();\\n        p2p.to = _to;\\n        p2p.amount = _amount;\\n        p2p.totalAmount = _totalAmount;\\n        p2p.period = _period;\\n        p2p.createdAt = timestamp;\\n        p2p.processAt = timestamp;\\n        p2p.status = P2PStatus.Active;\\n\\n        userP2Ps[_msgSender()].push(p2pId);\\n\\n        p2pManager.registerP2P(p2pId);\\n\\n        require(p2p.status == P2PStatus.Active, \\\"!UNPROCESSABLE\\\");\\n        require(p2p.numPayments == 1, \\\"!UNPROCESSABLE\\\"); // make sure first P2P payment succeeded\\n\\n        emit P2PCreated(p2pId, p2p.user, p2p.to, _amount, _totalAmount, _period);\\n\\n        return p2pId;\\n    }\\n\\n    function pauseP2P(\\n        bytes32 _p2pId\\n    ) external override onlyUser(_p2pId) {\\n        P2P storage p2p = p2pMap[_p2pId];\\n        require(p2p.status == P2PStatus.Active, \\\"!NOT_ACTIVE\\\");\\n\\n        p2p.status = P2PStatus.Paused;\\n\\n        emit P2PPaused(_p2pId, p2p.user);\\n    }\\n\\n    function resumeP2P(\\n        bytes32 _p2pId\\n    ) external override onlyUser(_p2pId) {\\n        P2P storage p2p = p2pMap[_p2pId];\\n        require(p2p.status == P2PStatus.Paused, \\\"!NOT_PAUSED\\\");\\n\\n        p2p.status = P2PStatus.Active;\\n\\n        if (p2p.processAt < uint32(block.timestamp)) {\\n            p2p.processAt = uint32(block.timestamp);\\n        }\\n\\n        p2pManager.registerP2P(_p2pId);\\n\\n        emit P2PResumed(_p2pId, p2p.user);\\n    }\\n\\n    function cancelP2P(\\n        bytes32 _p2pId\\n    ) external override onlyUser(_p2pId) {\\n        P2P storage p2p = p2pMap[_p2pId];\\n        require(p2p.status == P2PStatus.Active ||\\n            p2p.status == P2PStatus.Paused, \\\"!INVALID(status)\\\");\\n\\n        p2p.status = P2PStatus.Canceled;\\n\\n        emit P2PCanceled(_p2pId, p2p.user);\\n    }\\n\\n    function getP2P(\\n        bytes32 _p2pId\\n    ) external override view returns (P2P memory) {\\n        return p2pMap[_p2pId];\\n    }\\n\\n    function getUserP2P(\\n        address _user,\\n        uint256 _idx\\n    ) external override view returns (bytes32) {\\n        return userP2Ps[_user][_idx];\\n    }\\n\\n    function getUserP2PCount(\\n        address _user\\n    ) external override view returns (uint256) {\\n        return userP2Ps[_user].length;\\n    }\\n\\n\\n    /************************** MANAGER FUNCTIONS **************************/\\n\\n    function managerCommand(\\n        bytes32 _p2pId,\\n        ManagerCommand _command\\n    ) external override onlyManager {\\n\\n        P2P storage p2p = p2pMap[_p2pId];\\n\\n        if (_command == ManagerCommand.Skip) {\\n\\n            p2p.processAt = p2p.processAt + p2p.period;\\n            p2p.numSkips += 1;\\n\\n            emit P2PSkipped(_p2pId, p2p.user);\\n\\n        } else if (_command == ManagerCommand.Pause) {\\n\\n            p2p.status = P2PStatus.Paused;\\n\\n            emit P2PPaused(_p2pId, p2p.user);\\n\\n        } else if (_command == ManagerCommand.Cancel) {\\n\\n            p2p.status = P2PStatus.Canceled;\\n\\n            emit P2PCanceled(_p2pId, p2p.user);\\n\\n        }\\n    }\\n\\n    function managerProcessed(\\n        bytes32 _p2pId,\\n        uint256 _amount,\\n        uint256 _fee\\n    ) external override onlyManager {\\n        P2P storage p2p = p2pMap[_p2pId];\\n\\n        p2p.processAt = p2p.processAt + p2p.period;\\n        p2p.currentAmount += _amount;\\n        p2p.numPayments += 1;\\n\\n        emit P2PProcessed(_p2pId, p2p.user, _amount, _fee);\\n\\n        if (p2p.totalAmount > 0 && p2p.currentAmount >= p2p.totalAmount) {\\n            p2p.status = P2PStatus.Complete;\\n            emit P2PCompleted(_p2pId, p2p.user);\\n        }\\n\\n    }\\n\\n    /************************** ADMIN FUNCTIONS **************************/\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setManager(\\n        address _p2pManager\\n    ) external onlyOwner {\\n        p2pManager = ICaskP2PManager(_p2pManager);\\n    }\\n\\n    function setTrustedForwarder(\\n        address _forwarder\\n    ) external onlyOwner {\\n        _setTrustedForwarder(_forwarder);\\n    }\\n\\n    function setMinAmount(\\n        uint256 _minAmount\\n    ) external onlyOwner {\\n        minAmount = _minAmount;\\n    }\\n\\n    function setMinPeriod(\\n        uint32 _minPeriod\\n    ) external onlyOwner {\\n        minPeriod = _minPeriod;\\n    }\\n}\",\"keccak256\":\"0x0751741581a0c27d2a8f60ee6cf0ad98435911c33d34f3230ce0b4374853fe1c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b620013b61760201c565b15905090565b3b151590565b611a4380620001126000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063897b0637116100de578063b30f8a1311610097578063da74222811610071578063da74222814610372578063ded6da0114610385578063f2fde38b14610398578063ffd49c84146103ab57600080fd5b8063b30f8a1314610323578063c453824f1461034c578063d0ebdbe71461035f57600080fd5b8063897b0637146102b05780638da5cb5b146102c35780639b2cb5d8146102d4578063a0b029a9146102dd578063a80cfd51146102fd578063aa2f79be1461031057600080fd5b80635c975abb1161014b578063715018a611610125578063715018a6146102735780637da0a8771461027b5780638129fc1c146102a05780638456cb59146102a857600080fd5b80635c975abb1461024257806361e6c40a1461024d5780636537eace1461026057600080fd5b806317380c34146101935780631b6f39d7146101a85780633f4ba83a146101ce578063486ff0cd146101d6578063572b6c05146101fd5780635ba581cd1461022f575b600080fd5b6101a66101a1366004611665565b6103d0565b005b6101bb6101b636600461169a565b61057c565b6040519081526020015b60405180910390f35b6101a66105b9565b60408051808201825260058152640322e322e360dc1b602082015290516101c591906116c4565b61021f61020b366004611719565b6097546001600160a01b0391821691161490565b60405190151581526020016101c5565b6101a661023d36600461173b565b61060c565b60655460ff1661021f565b6101bb61025b366004611783565b6107ea565b6101a661026e366004611665565b610b3e565b6101a6610c44565b6097546001600160a01b03165b6040516001600160a01b0390911681526020016101c5565b6101a6610c97565b6101a6610d77565b6101a66102be366004611665565b610dc8565b6033546001600160a01b0316610288565b6101bb609b5481565b6102f06102eb366004611665565b610e16565b6040516101c59190611801565b609854610288906001600160a01b031681565b6101a661031e366004611665565b610f4d565b6101bb610331366004611719565b6001600160a01b03166000908152609a602052604090205490565b6101a661035a3660046118bb565b61104b565b6101a661036d366004611719565b6110b0565b6101a6610380366004611719565b61111b565b6101a66103933660046118d6565b611182565b6101a66103a6366004611719565b6112ff565b609c546103bb9063ffffffff1681565b60405163ffffffff90911681526020016101c5565b60008181526099602052604090205481906001600160a01b03166103f26113bc565b6001600160a01b0316146104215760405162461bcd60e51b815260040161041890611902565b60405180910390fd5b600082815260996020526040902060026007820154600160601b900460ff166004811115610451576104516117c9565b1461048c5760405162461bcd60e51b815260206004820152600b60248201526a085393d517d4105554d15160aa1b6044820152606401610418565b60078101805460ff60601b1916600160601b179081905563ffffffff428116600160401b9092041610156104e0576007810180546bffffffff00000000000000001916600160401b4263ffffffff16021790555b609854604051630d64dffd60e21b8152600481018590526001600160a01b03909116906335937ff490602401600060405180830381600087803b15801561052657600080fd5b505af115801561053a573d6000803e3d6000fd5b505082546040516001600160a01b0390911692508591507f90c8a0ae7f3edae1d7211626fda3659920bf9f37e7b6a4a24b01030a832b8fd190600090a3505050565b6001600160a01b0382166000908152609a602052604081208054839081106105a6576105a6611921565b9060005260206000200154905092915050565b6105c16113bc565b6001600160a01b03166105dc6033546001600160a01b031690565b6001600160a01b0316146106025760405162461bcd60e51b815260040161041890611937565b61060a6113cb565b565b6098546001600160a01b03166106206113bc565b6001600160a01b0316146106465760405162461bcd60e51b815260040161041890611902565b60008281526099602052604090206002826003811115610668576106686117c9565b141561070757600781015461068d9063ffffffff80821691600160401b900416611982565b8160070160086101000a81548163ffffffff021916908363ffffffff16021790555060018160060160008282546106c491906119aa565b909155505080546040516001600160a01b039091169084907fe98881c5e1c5fc67607a3f2e92bba431ee626fadd3dbdfaa1d5858c424fb7e7790600090a3505050565b600382600381111561071b5761071b6117c9565b14156107745760078101805460ff60601b1916600160611b17905580546040516001600160a01b039091169084907fec20a78248e90cc1381729a407ac4b26bd962380aab6b8a498e767c26c0f495490600090a3505050565b6001826003811115610788576107886117c9565b14156107e5576007810180546003919060ff60601b1916600160601b835b021790555080546040516001600160a01b039091169084907fdc7a5f3d2133ce8a7112247032e67648de955ec683416a76ee9ea018e7ece3fe90600090a35b505050565b6000609b548410156108315760405162461bcd60e51b815260206004820152601060248201526f21494e56414c494428616d6f756e742960801b6044820152606401610418565b609c5463ffffffff90811690831610156108805760405162461bcd60e51b815260206004820152601060248201526f21494e56414c494428706572696f642960801b6044820152606401610418565b600061088a6113bc565b60405160609190911b6bffffffffffffffffffffffff191660208201526034810186905260e084901b6001600160e01b031916605482015243605882015242607882015260980160408051601f19818403018152918152815160209283012060008181526099909352912090915042906109026113bc565b81546001600160a01b03199081166001600160a01b03928316178355600183018054909116918a16919091179055600281018790556003810186905560078101805463ffffffff87811667ffffffffffffffff1990921691909117640100000000918516918202176cffffffffff00000000000000001916600160401b9190910260ff60601b191617600160601b179055609a600061099f6113bc565b6001600160a01b0390811682526020808301939093526040918201600090812080546001810182559082529390209092018590556098549051630d64dffd60e21b8152600481018690529116906335937ff490602401600060405180830381600087803b158015610a0f57600080fd5b505af1158015610a23573d6000803e3d6000fd5b5060019250610a30915050565b6007820154600160601b900460ff166004811115610a5057610a506117c9565b14610a8e5760405162461bcd60e51b815260206004820152600e60248201526d21554e50524f4345535341424c4560901b6044820152606401610418565b8060050154600114610ad35760405162461bcd60e51b815260206004820152600e60248201526d21554e50524f4345535341424c4560901b6044820152606401610418565b60018101548154604080518a8152602081018a905263ffffffff89168183015290516001600160a01b03938416939092169186917fc306823dfef6d5d873e71870af06b7f6e7c919637db106e3e2b5c8d1e6f0bd0e919081900360600190a450909695505050505050565b60008181526099602052604090205481906001600160a01b0316610b606113bc565b6001600160a01b031614610b865760405162461bcd60e51b815260040161041890611902565b600082815260996020526040902060016007820154600160601b900460ff166004811115610bb657610bb66117c9565b14610bf15760405162461bcd60e51b815260206004820152600b60248201526a214e4f545f41435449564560a81b6044820152606401610418565b60078101805460ff60601b1916600160611b17905580546040516001600160a01b039091169084907fec20a78248e90cc1381729a407ac4b26bd962380aab6b8a498e767c26c0f495490600090a3505050565b610c4c6113bc565b6001600160a01b0316610c676033546001600160a01b031690565b6001600160a01b031614610c8d5760405162461bcd60e51b815260040161041890611937565b61060a6000611464565b600054610100900460ff16610cb25760005460ff1615610cb6565b303b155b610d195760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610418565b600054610100900460ff16158015610d3b576000805461ffff19166101011790555b610d436114b6565b610d4b6114ed565b6001609b55609c805463ffffffff1916620151801790558015610d74576000805461ff00191690555b50565b610d7f6113bc565b6001600160a01b0316610d9a6033546001600160a01b031690565b6001600160a01b031614610dc05760405162461bcd60e51b815260040161041890611937565b61060a611524565b610dd06113bc565b6001600160a01b0316610deb6033546001600160a01b031690565b6001600160a01b031614610e115760405162461bcd60e51b815260040161041890611937565b609b55565b610e736040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290529061014082015290565b60008281526099602090815260409182902082516101608101845281546001600160a01b03908116825260018301541692810192909252600281015492820192909252600382015460608201526004808301546080830152600583015460a0830152600683015460c0830152600783015463ffffffff80821660e085015264010000000082048116610100850152600160401b820416610120840152919291610140840191600160601b90910460ff1690811115610f3357610f336117c9565b6004811115610f4457610f446117c9565b90525092915050565b60008181526099602052604090205481906001600160a01b0316610f6f6113bc565b6001600160a01b031614610f955760405162461bcd60e51b815260040161041890611902565b600082815260996020526040902060016007820154600160601b900460ff166004811115610fc557610fc56117c9565b1480610ff0575060026007820154600160601b900460ff166004811115610fee57610fee6117c9565b145b61102f5760405162461bcd60e51b815260206004820152601060248201526f21494e56414c4944287374617475732960801b6044820152606401610418565b6007810180546003919060ff60601b1916600160601b836107a6565b6110536113bc565b6001600160a01b031661106e6033546001600160a01b031690565b6001600160a01b0316146110945760405162461bcd60e51b815260040161041890611937565b609c805463ffffffff191663ffffffff92909216919091179055565b6110b86113bc565b6001600160a01b03166110d36033546001600160a01b031690565b6001600160a01b0316146110f95760405162461bcd60e51b815260040161041890611937565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b6111236113bc565b6001600160a01b031661113e6033546001600160a01b031690565b6001600160a01b0316146111645760405162461bcd60e51b815260040161041890611937565b609780546001600160a01b0319166001600160a01b03831617905550565b6098546001600160a01b03166111966113bc565b6001600160a01b0316146111bc5760405162461bcd60e51b815260040161041890611902565b600083815260996020526040902060078101546111e99063ffffffff80821691600160401b900416611982565b8160070160086101000a81548163ffffffff021916908363ffffffff1602179055508281600401600082825461121f91906119aa565b92505081905550600181600501600082825461123b91906119aa565b9091555050805460408051858152602081018590526001600160a01b039092169186917f502ad10f9f6152a1a8763fddc9bab46f67f6acf78ef795b586774e9bae329247910160405180910390a3600081600301541180156112a557508060030154816004015410155b156112f95760078101805460ff60601b1916600160621b17905580546040516001600160a01b039091169085907ff5c7f3c79bb644866beab12f4e904c0f8b7b56e318ebceb77c2b13d0a710482690600090a35b50505050565b6113076113bc565b6001600160a01b03166113226033546001600160a01b031690565b6001600160a01b0316146113485760405162461bcd60e51b815260040161041890611937565b6001600160a01b0381166113ad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610418565b610d7481611464565b3b151590565b60006113c66115a0565b905090565b60655460ff166114145760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610418565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6114476113bc565b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166114dd5760405162461bcd60e51b8152600401610418906119c2565b6114e56115d4565b61060a6115fb565b600054610100900460ff166115145760405162461bcd60e51b8152600401610418906119c2565b61151c6115d4565b61060a611632565b60655460ff161561156a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610418565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586114476113bc565b6000601436108015906115bd57506097546001600160a01b031633145b156115cf575060131936013560601c90565b503390565b600054610100900460ff1661060a5760405162461bcd60e51b8152600401610418906119c2565b600054610100900460ff166116225760405162461bcd60e51b8152600401610418906119c2565b61060a61162d6113bc565b611464565b600054610100900460ff166116595760405162461bcd60e51b8152600401610418906119c2565b6065805460ff19169055565b60006020828403121561167757600080fd5b5035919050565b80356001600160a01b038116811461169557600080fd5b919050565b600080604083850312156116ad57600080fd5b6116b68361167e565b946020939093013593505050565b600060208083528351808285015260005b818110156116f1578581018301518582016040015282016116d5565b81811115611703576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561172b57600080fd5b6117348261167e565b9392505050565b6000806040838503121561174e57600080fd5b8235915060208301356004811061176457600080fd5b809150509250929050565b803563ffffffff8116811461169557600080fd5b6000806000806080858703121561179957600080fd5b6117a28561167e565b935060208501359250604085013591506117be6060860161176f565b905092959194509250565b634e487b7160e01b600052602160045260246000fd5b600581106117fd57634e487b7160e01b600052602160045260246000fd5b9052565b81516001600160a01b031681526101608101602083015161182d60208401826001600160a01b03169052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015161187760e084018263ffffffff169052565b506101008381015163ffffffff81168483015250506101208381015163ffffffff8116848301525050610140808401516118b3828501826117df565b505092915050565b6000602082840312156118cd57600080fd5b6117348261176f565b6000806000606084860312156118eb57600080fd5b505081359360208301359350604090920135919050565b60208082526005908201526404282aaa8960db1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168185168083038211156119a1576119a161196c565b01949350505050565b600082198211156119bd576119bd61196c565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212205bed5f026162c9315ea88a3be807f6959701b9dcfa902e01871fc4509e943c8a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063897b0637116100de578063b30f8a1311610097578063da74222811610071578063da74222814610372578063ded6da0114610385578063f2fde38b14610398578063ffd49c84146103ab57600080fd5b8063b30f8a1314610323578063c453824f1461034c578063d0ebdbe71461035f57600080fd5b8063897b0637146102b05780638da5cb5b146102c35780639b2cb5d8146102d4578063a0b029a9146102dd578063a80cfd51146102fd578063aa2f79be1461031057600080fd5b80635c975abb1161014b578063715018a611610125578063715018a6146102735780637da0a8771461027b5780638129fc1c146102a05780638456cb59146102a857600080fd5b80635c975abb1461024257806361e6c40a1461024d5780636537eace1461026057600080fd5b806317380c34146101935780631b6f39d7146101a85780633f4ba83a146101ce578063486ff0cd146101d6578063572b6c05146101fd5780635ba581cd1461022f575b600080fd5b6101a66101a1366004611665565b6103d0565b005b6101bb6101b636600461169a565b61057c565b6040519081526020015b60405180910390f35b6101a66105b9565b60408051808201825260058152640322e322e360dc1b602082015290516101c591906116c4565b61021f61020b366004611719565b6097546001600160a01b0391821691161490565b60405190151581526020016101c5565b6101a661023d36600461173b565b61060c565b60655460ff1661021f565b6101bb61025b366004611783565b6107ea565b6101a661026e366004611665565b610b3e565b6101a6610c44565b6097546001600160a01b03165b6040516001600160a01b0390911681526020016101c5565b6101a6610c97565b6101a6610d77565b6101a66102be366004611665565b610dc8565b6033546001600160a01b0316610288565b6101bb609b5481565b6102f06102eb366004611665565b610e16565b6040516101c59190611801565b609854610288906001600160a01b031681565b6101a661031e366004611665565b610f4d565b6101bb610331366004611719565b6001600160a01b03166000908152609a602052604090205490565b6101a661035a3660046118bb565b61104b565b6101a661036d366004611719565b6110b0565b6101a6610380366004611719565b61111b565b6101a66103933660046118d6565b611182565b6101a66103a6366004611719565b6112ff565b609c546103bb9063ffffffff1681565b60405163ffffffff90911681526020016101c5565b60008181526099602052604090205481906001600160a01b03166103f26113bc565b6001600160a01b0316146104215760405162461bcd60e51b815260040161041890611902565b60405180910390fd5b600082815260996020526040902060026007820154600160601b900460ff166004811115610451576104516117c9565b1461048c5760405162461bcd60e51b815260206004820152600b60248201526a085393d517d4105554d15160aa1b6044820152606401610418565b60078101805460ff60601b1916600160601b179081905563ffffffff428116600160401b9092041610156104e0576007810180546bffffffff00000000000000001916600160401b4263ffffffff16021790555b609854604051630d64dffd60e21b8152600481018590526001600160a01b03909116906335937ff490602401600060405180830381600087803b15801561052657600080fd5b505af115801561053a573d6000803e3d6000fd5b505082546040516001600160a01b0390911692508591507f90c8a0ae7f3edae1d7211626fda3659920bf9f37e7b6a4a24b01030a832b8fd190600090a3505050565b6001600160a01b0382166000908152609a602052604081208054839081106105a6576105a6611921565b9060005260206000200154905092915050565b6105c16113bc565b6001600160a01b03166105dc6033546001600160a01b031690565b6001600160a01b0316146106025760405162461bcd60e51b815260040161041890611937565b61060a6113cb565b565b6098546001600160a01b03166106206113bc565b6001600160a01b0316146106465760405162461bcd60e51b815260040161041890611902565b60008281526099602052604090206002826003811115610668576106686117c9565b141561070757600781015461068d9063ffffffff80821691600160401b900416611982565b8160070160086101000a81548163ffffffff021916908363ffffffff16021790555060018160060160008282546106c491906119aa565b909155505080546040516001600160a01b039091169084907fe98881c5e1c5fc67607a3f2e92bba431ee626fadd3dbdfaa1d5858c424fb7e7790600090a3505050565b600382600381111561071b5761071b6117c9565b14156107745760078101805460ff60601b1916600160611b17905580546040516001600160a01b039091169084907fec20a78248e90cc1381729a407ac4b26bd962380aab6b8a498e767c26c0f495490600090a3505050565b6001826003811115610788576107886117c9565b14156107e5576007810180546003919060ff60601b1916600160601b835b021790555080546040516001600160a01b039091169084907fdc7a5f3d2133ce8a7112247032e67648de955ec683416a76ee9ea018e7ece3fe90600090a35b505050565b6000609b548410156108315760405162461bcd60e51b815260206004820152601060248201526f21494e56414c494428616d6f756e742960801b6044820152606401610418565b609c5463ffffffff90811690831610156108805760405162461bcd60e51b815260206004820152601060248201526f21494e56414c494428706572696f642960801b6044820152606401610418565b600061088a6113bc565b60405160609190911b6bffffffffffffffffffffffff191660208201526034810186905260e084901b6001600160e01b031916605482015243605882015242607882015260980160408051601f19818403018152918152815160209283012060008181526099909352912090915042906109026113bc565b81546001600160a01b03199081166001600160a01b03928316178355600183018054909116918a16919091179055600281018790556003810186905560078101805463ffffffff87811667ffffffffffffffff1990921691909117640100000000918516918202176cffffffffff00000000000000001916600160401b9190910260ff60601b191617600160601b179055609a600061099f6113bc565b6001600160a01b0390811682526020808301939093526040918201600090812080546001810182559082529390209092018590556098549051630d64dffd60e21b8152600481018690529116906335937ff490602401600060405180830381600087803b158015610a0f57600080fd5b505af1158015610a23573d6000803e3d6000fd5b5060019250610a30915050565b6007820154600160601b900460ff166004811115610a5057610a506117c9565b14610a8e5760405162461bcd60e51b815260206004820152600e60248201526d21554e50524f4345535341424c4560901b6044820152606401610418565b8060050154600114610ad35760405162461bcd60e51b815260206004820152600e60248201526d21554e50524f4345535341424c4560901b6044820152606401610418565b60018101548154604080518a8152602081018a905263ffffffff89168183015290516001600160a01b03938416939092169186917fc306823dfef6d5d873e71870af06b7f6e7c919637db106e3e2b5c8d1e6f0bd0e919081900360600190a450909695505050505050565b60008181526099602052604090205481906001600160a01b0316610b606113bc565b6001600160a01b031614610b865760405162461bcd60e51b815260040161041890611902565b600082815260996020526040902060016007820154600160601b900460ff166004811115610bb657610bb66117c9565b14610bf15760405162461bcd60e51b815260206004820152600b60248201526a214e4f545f41435449564560a81b6044820152606401610418565b60078101805460ff60601b1916600160611b17905580546040516001600160a01b039091169084907fec20a78248e90cc1381729a407ac4b26bd962380aab6b8a498e767c26c0f495490600090a3505050565b610c4c6113bc565b6001600160a01b0316610c676033546001600160a01b031690565b6001600160a01b031614610c8d5760405162461bcd60e51b815260040161041890611937565b61060a6000611464565b600054610100900460ff16610cb25760005460ff1615610cb6565b303b155b610d195760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610418565b600054610100900460ff16158015610d3b576000805461ffff19166101011790555b610d436114b6565b610d4b6114ed565b6001609b55609c805463ffffffff1916620151801790558015610d74576000805461ff00191690555b50565b610d7f6113bc565b6001600160a01b0316610d9a6033546001600160a01b031690565b6001600160a01b031614610dc05760405162461bcd60e51b815260040161041890611937565b61060a611524565b610dd06113bc565b6001600160a01b0316610deb6033546001600160a01b031690565b6001600160a01b031614610e115760405162461bcd60e51b815260040161041890611937565b609b55565b610e736040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290529061014082015290565b60008281526099602090815260409182902082516101608101845281546001600160a01b03908116825260018301541692810192909252600281015492820192909252600382015460608201526004808301546080830152600583015460a0830152600683015460c0830152600783015463ffffffff80821660e085015264010000000082048116610100850152600160401b820416610120840152919291610140840191600160601b90910460ff1690811115610f3357610f336117c9565b6004811115610f4457610f446117c9565b90525092915050565b60008181526099602052604090205481906001600160a01b0316610f6f6113bc565b6001600160a01b031614610f955760405162461bcd60e51b815260040161041890611902565b600082815260996020526040902060016007820154600160601b900460ff166004811115610fc557610fc56117c9565b1480610ff0575060026007820154600160601b900460ff166004811115610fee57610fee6117c9565b145b61102f5760405162461bcd60e51b815260206004820152601060248201526f21494e56414c4944287374617475732960801b6044820152606401610418565b6007810180546003919060ff60601b1916600160601b836107a6565b6110536113bc565b6001600160a01b031661106e6033546001600160a01b031690565b6001600160a01b0316146110945760405162461bcd60e51b815260040161041890611937565b609c805463ffffffff191663ffffffff92909216919091179055565b6110b86113bc565b6001600160a01b03166110d36033546001600160a01b031690565b6001600160a01b0316146110f95760405162461bcd60e51b815260040161041890611937565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b6111236113bc565b6001600160a01b031661113e6033546001600160a01b031690565b6001600160a01b0316146111645760405162461bcd60e51b815260040161041890611937565b609780546001600160a01b0319166001600160a01b03831617905550565b6098546001600160a01b03166111966113bc565b6001600160a01b0316146111bc5760405162461bcd60e51b815260040161041890611902565b600083815260996020526040902060078101546111e99063ffffffff80821691600160401b900416611982565b8160070160086101000a81548163ffffffff021916908363ffffffff1602179055508281600401600082825461121f91906119aa565b92505081905550600181600501600082825461123b91906119aa565b9091555050805460408051858152602081018590526001600160a01b039092169186917f502ad10f9f6152a1a8763fddc9bab46f67f6acf78ef795b586774e9bae329247910160405180910390a3600081600301541180156112a557508060030154816004015410155b156112f95760078101805460ff60601b1916600160621b17905580546040516001600160a01b039091169085907ff5c7f3c79bb644866beab12f4e904c0f8b7b56e318ebceb77c2b13d0a710482690600090a35b50505050565b6113076113bc565b6001600160a01b03166113226033546001600160a01b031690565b6001600160a01b0316146113485760405162461bcd60e51b815260040161041890611937565b6001600160a01b0381166113ad5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610418565b610d7481611464565b3b151590565b60006113c66115a0565b905090565b60655460ff166114145760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610418565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6114476113bc565b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166114dd5760405162461bcd60e51b8152600401610418906119c2565b6114e56115d4565b61060a6115fb565b600054610100900460ff166115145760405162461bcd60e51b8152600401610418906119c2565b61151c6115d4565b61060a611632565b60655460ff161561156a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610418565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586114476113bc565b6000601436108015906115bd57506097546001600160a01b031633145b156115cf575060131936013560601c90565b503390565b600054610100900460ff1661060a5760405162461bcd60e51b8152600401610418906119c2565b600054610100900460ff166116225760405162461bcd60e51b8152600401610418906119c2565b61060a61162d6113bc565b611464565b600054610100900460ff166116595760405162461bcd60e51b8152600401610418906119c2565b6065805460ff19169055565b60006020828403121561167757600080fd5b5035919050565b80356001600160a01b038116811461169557600080fd5b919050565b600080604083850312156116ad57600080fd5b6116b68361167e565b946020939093013593505050565b600060208083528351808285015260005b818110156116f1578581018301518582016040015282016116d5565b81811115611703576000604083870101525b50601f01601f1916929092016040019392505050565b60006020828403121561172b57600080fd5b6117348261167e565b9392505050565b6000806040838503121561174e57600080fd5b8235915060208301356004811061176457600080fd5b809150509250929050565b803563ffffffff8116811461169557600080fd5b6000806000806080858703121561179957600080fd5b6117a28561167e565b935060208501359250604085013591506117be6060860161176f565b905092959194509250565b634e487b7160e01b600052602160045260246000fd5b600581106117fd57634e487b7160e01b600052602160045260246000fd5b9052565b81516001600160a01b031681526101608101602083015161182d60208401826001600160a01b03169052565b5060408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015161187760e084018263ffffffff169052565b506101008381015163ffffffff81168483015250506101208381015163ffffffff8116848301525050610140808401516118b3828501826117df565b505092915050565b6000602082840312156118cd57600080fd5b6117348261176f565b6000806000606084860312156118eb57600080fd5b505081359360208301359350604090920135919050565b60208082526005908201526404282aaa8960db1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168185168083038211156119a1576119a161196c565b01949350505050565b600082198211156119bd576119bd61196c565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212205bed5f026162c9315ea88a3be807f6959701b9dcfa902e01871fc4509e943c8a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "minAmount": {
        "details": "minimum amount of vault base asset for a P2P. "
      },
      "minPeriod": {
        "details": "minimum period for a P2P. "
      },
      "p2pManager": {
        "details": "contract to manage P2P executions. "
      },
      "p2pMap": {
        "details": "map of P2P ID to P2P info. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 327,
        "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 330,
        "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2551,
        "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 205,
        "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 319,
        "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 415,
        "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 506,
        "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 72,
        "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 15015,
        "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
        "label": "p2pManager",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(ICaskP2PManager)12914"
      },
      {
        "astId": 15021,
        "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
        "label": "p2pMap",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes32,t_struct(P2P)12779_storage)"
      },
      {
        "astId": 15026,
        "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
        "label": "userP2Ps",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 15029,
        "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
        "label": "minAmount",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 15032,
        "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
        "label": "minPeriod",
        "offset": 0,
        "slot": "156",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICaskP2PManager)12914": {
        "encoding": "inplace",
        "label": "contract ICaskP2PManager",
        "numberOfBytes": "20"
      },
      "t_enum(P2PStatus)12750": {
        "encoding": "inplace",
        "label": "enum ICaskP2P.P2PStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_struct(P2P)12779_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ICaskP2P.P2P)",
        "numberOfBytes": "32",
        "value": "t_struct(P2P)12779_storage"
      },
      "t_struct(P2P)12779_storage": {
        "encoding": "inplace",
        "label": "struct ICaskP2P.P2P",
        "members": [
          {
            "astId": 12757,
            "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12759,
            "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 12761,
            "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12763,
            "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
            "label": "totalAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12765,
            "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
            "label": "currentAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12767,
            "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
            "label": "numPayments",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 12769,
            "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
            "label": "numSkips",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 12771,
            "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
            "label": "period",
            "offset": 0,
            "slot": "7",
            "type": "t_uint32"
          },
          {
            "astId": 12773,
            "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
            "label": "createdAt",
            "offset": 4,
            "slot": "7",
            "type": "t_uint32"
          },
          {
            "astId": 12775,
            "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
            "label": "processAt",
            "offset": 8,
            "slot": "7",
            "type": "t_uint32"
          },
          {
            "astId": 12778,
            "contract": "contracts/p2p/CaskP2P.sol:CaskP2P",
            "label": "status",
            "offset": 12,
            "slot": "7",
            "type": "t_enum(P2PStatus)12750"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}