{
  "language": "Solidity",
  "sources": {
    "contracts/core/CaskToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\ncontract CaskToken is ERC20, Ownable {\n    using Address for address;\n\n    constructor() ERC20(\"Cask Token\", \"CASK\") {\n    }\n\n    function mint(\n        address _to,\n        uint256 _amount\n    ) external onlyOwner {\n        if(totalSupply() == 0){\n            // one shot, one opportunity. moms spaghetti.\n            _mint(_to,_amount);\n            renounceOwnership();\n            return;\n        }\n    }\n\n}"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/mocks/MintableERC20.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ninterface IMintableERC20 {\n    function mint(uint256 value) external;\n\n    function mintTo(address to, uint256 value) external;\n}\n\n/**\n * @title MintableERC20\n * @dev Exposes the mint function of ERC20 for tests\n */\nabstract contract MintableERC20 is IMintableERC20, ERC20 {\n    /**\n     * @dev Function to mint tokens\n     * @param _value The amount of tokens to mint.\n     */\n    function mint(uint256 _value) public virtual override {\n        _mint(msg.sender, _value);\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to Address to mint to.\n     * @param _value The amount of tokens to mint.\n     */\n    function mintTo(address _to, uint256 _value) public virtual override {\n        _mint(_to, _value);\n    }\n}\n"
    },
    "contracts/mocks/MockWETH.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"./MintableERC20.sol\";\n\ncontract MockWETH is MintableERC20 {\n    constructor() ERC20(\"WETH\", \"WETH\") {}\n}\n"
    },
    "contracts/mocks/MockUSDT.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"./MintableERC20.sol\";\n\ncontract MockUSDT is MintableERC20 {\n    constructor() ERC20(\"USDT Coin\", \"USDT\") {}\n\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/mocks/MockUSDC.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"./MintableERC20.sol\";\n\ncontract MockUSDC is MintableERC20 {\n    constructor() ERC20(\"USDC Coin\", \"USDC\") {}\n\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/mocks/MockDAI.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"./MintableERC20.sol\";\n\ncontract MockDAI is MintableERC20 {\n    constructor() ERC20(\"DAI\", \"DAI\") {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/presets/ERC20PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/fakes/FakeWETH.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\ncontract FakeWETH is ERC20PresetMinterPauser {\n    constructor() ERC20PresetMinterPauser(\"Cask Fake WETH\", \"WETH\") {}\n}\n"
    },
    "contracts/fakes/FakeUSDT.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\ncontract FakeUSDT is ERC20PresetMinterPauser {\n    constructor() ERC20PresetMinterPauser(\"Cask Fake USDT\", \"USDT\") {}\n\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/fakes/FakeUSDC.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\ncontract FakeUSDC is ERC20PresetMinterPauser {\n    constructor() ERC20PresetMinterPauser(\"Cask Fake USDC\", \"USDC\") {}\n\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/fakes/FakeDAI.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\ncontract FakeDAI is ERC20PresetMinterPauser {\n    constructor() ERC20PresetMinterPauser(\"Cask Fake DAI\", \"DAI\") {}\n}\n"
    },
    "contracts/core/CaskTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/*\nUpdated Convex TreasuryFunds (https://github.com/convex-eth/platform/blob/main/contracts/contracts/TreasuryFunds.sol)\n\nChanges:\n- update to solidity 0.8\n- use openzeppelin ownable\n*/\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\ncontract CaskTreasury is Ownable {\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    event WithdrawTo(address indexed _to, address _asset, uint256 _amount);\n\n    function withdrawTo(\n        address _to,\n        address _asset,\n        uint256 _amount\n    ) external onlyOwner {\n        IERC20(_asset).safeTransfer(_to, _amount);\n        emit WithdrawTo(_to, _asset, _amount);\n    }\n\n    function execute(\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external onlyOwner returns(bool, bytes memory) {\n        (bool success, bytes memory result) = _to.call{value:_value}(_data);\n\n        return (success, result);\n    }\n\n}"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/strategies/CaskBaseStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n\nabstract contract CaskBaseStrategy is Initializable, AccessControlEnumerableUpgradeable, PausableUpgradeable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n\n    // (un)pause contract, ...\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n\n    // deposit/withdraw funds,...\n    bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\n\n    // add/remove strategies, set strategy settings, ...\n    bytes32 public constant STRATEGIST_ROLE = keccak256(\"STRATEGIST_ROLE\");\n\n\n    function initialize(address _operator, address _strategist) public initializer {\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(OPERATOR_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(STRATEGIST_ROLE, ADMIN_ROLE);\n        _setupRole(ADMIN_ROLE, msg.sender);\n        _setupRole(OPERATOR_ROLE, _operator);\n        _setupRole(STRATEGIST_ROLE, _strategist);\n    }\n\n    function pause() external onlyRole(ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpause() external onlyRole(ADMIN_ROLE) {\n        _unpause();\n    }\n\n    /**\n     * @dev Deposit an amount of asset into the strategy\n     * @param _asset Asset address\n     * @param _amount Amount of asset to deposit\n     */\n    function deposit(address _asset, uint256 _amount) external virtual;\n\n    /**\n     * @dev Deposit all assets in the contract to the strategy\n     */\n    function depositAll() external virtual;\n\n    /**\n     * @dev Withdraw an amount of asset from the strategy\n     * @param _recipient Recipient of asset being withdrawn\n     * @param _asset Asset address\n     * @param _amount Amount of asset to withdraw\n     */\n    function withdraw(address _recipient, address _asset, uint256 _amount) external virtual;\n\n    /**\n     * @dev Withdraw all assets from the strategy and send to the vault\n     */\n    function withdrawAll() external virtual;\n\n    /**\n     * @dev Get the current balance of an asset in the strategy\n     * @param _asset Asset address\n     * @return balance Total balance of asset currently in the strategy\n     */\n    function assetBalance(address _asset) external view virtual returns (uint256 balance);\n\n    /**\n     * @dev Check if the strategy supports an asset\n     * @param _asset Asset address\n     * @return bool `true` if asset supported, `false` otherwise\n     */\n    function supportsAsset(address _asset) external view virtual returns (bool);\n}"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n        __AccessControlEnumerable_init_unchained();\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/vault/CaskVaultAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../interfaces/ICaskVault.sol\";\nimport \"../interfaces/ICaskStrategy.sol\";\nimport \"../interfaces/ICaskVaultAdmin.sol\";\n\n/**\nCaskVaultOperator is where:\n\n- the list of strategies lives\n- allocation plans across strategies lives\n- strategy rebalancing happen, when needed\n- strategy harvesting happens\n- yield and performance fees are collected and managed\n\n*/\n\ncontract CaskVaultAdmin is\nICaskVaultAdmin,\nOwnableUpgradeable,\nPausableUpgradeable,\nReentrancyGuardUpgradeable\n{\n\n    /** @dev vault being managed. */\n    address public vault;\n\n    /** @dev percentage to allocate to strategies in 18 decimals. 100% = 1e18. */\n    uint256 public strategyAllocationRate;\n\n    /** @dev yield fee basis points. 2% = 200. */\n    uint256 public yieldFeeBps;\n\n    /** @dev strategist who manages the strategies. */\n    address public strategist;\n\n    // strategies available for use\n    mapping(address => bool) internal strategies; // strategy contract -> enabled map\n    address[] internal allStrategies;\n\n\n    modifier onlyStrategist {\n        require(msg.sender == strategist, \"!auth\");\n        _;\n    }\n\n\n    function initialize(\n        uint256 _strategyAllocationRate,\n        uint256 _yieldFeeBps\n    ) public initializer {\n        __Ownable_init();\n        __Pausable_init();\n        __ReentrancyGuard_init();\n\n        strategist = msg.sender; // TODO: is msg.sender the ProxyAdmin??\n        strategyAllocationRate = _strategyAllocationRate;\n        yieldFeeBps = _yieldFeeBps;\n    }\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    //    constructor() initializer {}\n\n\n\n    /************************** STRATEGY FUNCTIONS **************************/\n\n\n    function getAllStrategies() public view returns(address[] memory) {\n        return allStrategies;\n    }\n\n    function addStrategy(\n        address _strategy\n    ) external onlyOwner {\n        require(!strategies[_strategy], \"!added\");\n        strategies[_strategy] = true;\n        allStrategies.push(_strategy);\n        emit StrategyAdded(_strategy);\n    }\n\n    function removeStrategy(\n        address _strategy\n    ) external onlyOwner {\n        require(strategies[_strategy], \"!notfound\");\n\n        uint256 strategyIndex = allStrategies.length;\n        for (uint256 i = 0; i < allStrategies.length; i++) {\n            if (allStrategies[i] == _strategy) {\n                strategyIndex = i;\n                break;\n            }\n        }\n\n        if (strategyIndex < allStrategies.length) {\n            allStrategies[strategyIndex] = allStrategies[allStrategies.length - 1];\n            allStrategies.pop();\n\n            // Withdraw all from strategy\n            ICaskStrategy strategy = ICaskStrategy(_strategy);\n            strategy.withdrawAll();\n\n            // Mark the asset as not allowed\n            strategies[_strategy] = false;\n            emit StrategyRemoved(_strategy);\n        }\n    }\n\n\n    /************************** ADMIN FUNCTIONS **************************/\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function setVault(\n        address _vault\n    ) external onlyOwner {\n        vault = _vault;\n    }\n\n    function setStrategist(\n        address _strategist\n    ) external onlyOwner {\n        strategist = _strategist;\n    }\n\n    function setParameters(\n        uint256 _yieldFeeBps,\n        uint256 _strategyAllocationRate\n    ) external onlyOwner {\n        yieldFeeBps = _yieldFeeBps;\n        strategyAllocationRate = _strategyAllocationRate;\n    }\n\n\n    /************************** TOTALS FUNCTIONS **************************/\n\n\n    /**\n     * @dev total value of `_asset` under management\n     * @param _asset Asset address\n     * @return uint256 Balance of asset from all strategies\n     */\n    function assetBalanceManaged(address _asset) external view returns (uint256)\n    {\n        uint256 balance = 0;\n        IERC20 asset = IERC20(_asset);\n        balance = asset.balanceOf(address(this));\n        for (uint256 i = 0; i < allStrategies.length; i++) {\n            ICaskStrategy strategy = ICaskStrategy(allStrategies[i]);\n            if (strategy.supportsAsset(_asset)) {\n                balance = balance + strategy.assetBalance(_asset);\n            }\n        }\n        return balance;\n    }\n\n\n    /**\n     * @dev Get total value of all assets held by strategy.\n     * @param _strategy Address of the strategy\n     * @return value Total value in of all assets in strategy denominated in baseAsset\n     */\n    function totalValueInStrategy(address _strategy) public view returns (uint256) {\n        uint256 value = 0;\n        // TODO: get asset list from vault?\n//        //FIXME: scale each asset to base asset price\n//        ICaskStrategy strategy = ICaskStrategy(_strategy);\n//        for (uint256 y = 0; y < allAssets.length; y++) {\n//            //            uint256 assetDecimals = Helpers.getDecimals(allAssets[y]);\n//            uint256 assetDecimals = 1e8;\n//            if (strategy.supportsAsset(allAssets[y])) {\n//                uint256 balance = strategy.assetBalance(allAssets[y]);\n//                if (balance > 0) {\n//                    //                    value = value + balance.scaleBy(18, assetDecimals);\n//                }\n//            }\n//        }\n        return value;\n    }\n\n    /**\n     * @dev Get total value of all assets held in all strategies.\n     * @return value Total value in all strategies denominated in baseAsset\n     */\n    function totalValueInStrategies() public view returns (uint256) {\n        uint256 value = 0;\n        for (uint256 i = 0; i < allStrategies.length; i++) {\n            value = value + totalValueInStrategy(allStrategies[i]);\n        }\n        return value;\n    }\n\n\n    /** @dev Emitted when `_strategy` is added */\n    event StrategyAdded(address indexed _strategy);\n\n    /** @dev Emitted when `_strategy` is removed */\n    event StrategyRemoved(address indexed _strategy);\n\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/ICaskVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title  Interface for vault\n  */\n\ninterface ICaskVault {\n\n    // whitelisted stablecoin assets supported by the vault\n    struct Asset {\n        address priceFeed;\n        uint256 slippageBps;\n        uint256 depositLimit;\n        uint8 assetDecimals;\n        uint8 priceFeedDecimals;\n        bool allowed;\n    }\n\n\n    /**\n      * @dev Get base asset of vault.\n     */\n    function getBaseAsset() external view returns (address);\n\n    /**\n      * @dev Get all the assets supported by the vault.\n     */\n    function getAllAssets() external view returns (address[] memory);\n\n    /**\n     * @dev Get asset details\n     * @param _asset Asset address\n     * @return Asset Asset details\n     */\n    function getAsset(address _asset) external view returns(Asset memory);\n\n    /**\n     * @dev Check if the vault supports an asset\n     * @param _asset Asset address\n     * @return bool `true` if asset supported, `false` otherwise\n     */\n    function supportsAsset(address _asset) external view returns (bool);\n\n    /**\n     * @dev Pay `_baseAssetAmount` of `baseAsset` from `_from` to `_to`\n     * @param _from From address\n     * @param _to To address\n     * @param _baseAssetAmount Amount of asset to transfer\n     * @param _baseAssetFee Fee to deduct from `_baseAssetAmount`\n     */\n    function payment(address _from, address _to, uint256 _baseAssetAmount, uint256 _baseAssetFee) external;\n\n    /**\n     * @dev Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\n     * @param _asset Address of incoming asset\n     * @param _assetAmount Amount of asset to deposit\n     */\n    function deposit(address _asset, uint256 _assetAmount) external;\n\n    /**\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\n     * @param _recipient Recipient who will receive the withdrawn assets\n     * @param _asset Address of outgoing asset\n     * @param _shares Amount of shares to withdraw\n     */\n    function withdraw(address _recipient, address _asset, uint256 _shares) external;\n\n    /**\n     * @dev Get total shares of vault\n     */\n    function totalSupply() external view returns(uint256);\n\n    /**\n     * @dev Get current balance of shares for an address\n     * @param _address Address to check\n     */\n    function balanceOf(address _address) external view returns(uint256);\n\n    /**\n     * @dev Get current vault value of `_address` denominated in `baseAsset`\n     * @param _address Address to check\n     */\n    function currentValueOf(address _address) external view returns(uint256);\n\n    /**\n     * @dev Get total value in vault and managed by admin - denominated in `baseAsset`\n     */\n    function totalValue() external view returns(uint256);\n\n    /**\n     * @dev Get total amount of an asset held in vault and managed by admin\n     * @param _asset Address of asset\n     */\n    function totalAssetBalance(address _asset) external view returns(uint256);\n\n    /**\n     * @dev Send an amount of asset to a strategy\n     * @param _asset Address of strategy\n     * @param _asset Address of asset\n     * @param _assetAmount Amount of asset to send\n     */\n    function allocateToStrategy(address _strategy, address _asset, uint256 _assetAmount) external;\n\n\n    /************************** EVENTS **************************/\n\n    /** @dev Emitted when an amount of `baseAsset` is paid from `from` to `to` within the vault */\n    event Payment(address indexed from, address indexed to, uint256 baseAssetAmount, uint256 baseAssetFee,\n        uint256 shares);\n\n    /** @dev Emitted when `asset` is added as a new supported asset */\n    event AllowedAsset(address indexed asset);\n\n    /** @dev Emitted when `participant` deposits `asset` */\n    event AssetDeposited(address indexed participant, address indexed asset, uint256 assetAmount,\n        uint256 baseAssetAmount, uint256 shares);\n\n    /** @dev Emitted when `participant` withdraws `asset` */\n    event AssetWithdrawn(address indexed participant, address indexed asset, uint256 assetAmount,\n        uint256 baseAssetAmount, uint256 shares);\n\n    /** @dev Emitted when `asset` is allocated to strategy `strategy` */\n    event AllocatedToStrategy(address indexed strategy, address indexed asset, uint256 assetAmount);\n\n}"
    },
    "contracts/interfaces/ICaskStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n /**\n  * @title  Interface for yield earning strategies.\n  */\n\ninterface ICaskStrategy {\n    /**\n     * @dev Deposit an amount of asset into the strategy\n     * @param _asset Asset address\n     * @param _amount Amount of asset to deposit\n     */\n    function deposit(address _asset, uint256 _amount) external;\n\n    /**\n     * @dev Deposit all assets in the contract to the strategy\n     */\n    function depositAll() external;\n\n    /**\n     * @dev Withdraw an amount of asset from the strategy\n     * @param _recipient Recipient of asset being withdrawn\n     * @param _asset Asset address\n     * @param _amount Amount of asset to withdraw\n     */\n    function withdraw(address _recipient, address _asset, uint256 _amount) external;\n\n    /**\n     * @dev Withdraw all assets from the strategy and send to the vault\n     */\n    function withdrawAll() external;\n\n    /**\n     * @dev Get the current balance of an asset in the strategy\n     * @param _asset Asset address\n     * @return balance Total balance of asset currently in the strategy\n     */\n    function assetBalance(address _asset) external view returns (uint256 balance);\n\n    /**\n     * @dev Check if the strategy supports an asset\n     * @param _asset Asset address\n     * @return bool `true` if asset supported, `false` otherwise\n     */\n    function supportsAsset(address _asset) external view returns (bool);\n}"
    },
    "contracts/interfaces/ICaskVaultAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title  Interface for vault admin\n  */\n\ninterface ICaskVaultAdmin {\n\n    /**\n      * @dev total value of `_asset` managed by admin - denominated in native asset\n     */\n    function assetBalanceManaged(address _asset) external view returns(uint256);\n\n}\n"
    },
    "contracts/vault/CaskVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n\nimport \"../interfaces/ICaskVault.sol\";\nimport \"../interfaces/ICaskVaultAdmin.sol\";\nimport \"../interfaces/ICaskStrategy.sol\";\n\n/**\nCaskVault is where:\n\n- the approved asset list lives\n- users deposit/withdraw approved assets which results in a mint/burn of the vault token\n- a minimum reserve rate is enforced\n- vault operators can tell the vault to send unallocated assets to strategies\n- protocols can process a payment between parties\n- one can query the value of all unallocated assets\n\n*/\n\ncontract CaskVault is\nICaskVault,\nOwnableUpgradeable,\nPausableUpgradeable,\nReentrancyGuardUpgradeable\n{\n\n    modifier onlyOperator {\n        bool isOperator = false;\n        for (uint256 i = 0; i < operators.length; i++) {\n            if (msg.sender == operators[i]) {\n                isOperator = true;\n                break;\n            }\n        }\n        require(isOperator, \"!auth\");\n        _;\n    }\n\n\n    /************************** STATE **************************/\n\n    // address of ICaskVaultAdmin that administers the vault\n    address public vaultAdmin;\n\n    // base asset for vault - much is denominated in this\n    address public baseAsset;\n\n    // share balance handling\n    mapping(address => uint256) internal balances;\n    uint256 internal supply;\n\n    // assets supported by vault\n    mapping(address => Asset) internal assets;\n    address[] internal allAssets;\n\n    /** @dev total fees collected by vault - denominated in vault shares */\n    uint256 public feeBalance;\n\n\n    address[] public operators;\n\n    function initialize(\n        address _vaultAdmin,\n        address _baseAsset\n    ) public initializer {\n        __Ownable_init();\n        __Pausable_init();\n        __ReentrancyGuard_init();\n\n        vaultAdmin = _vaultAdmin;\n        baseAsset = _baseAsset;\n\n        feeBalance = 0;\n    }\n    /// @custom:oz-upgrades-unsafe-allow constructor\n//    constructor() initializer {}\n\n\n    /**\n     * @dev Pay `_baseAssetAmount` of `baseAsset` from `_from` to `_to`\n     * @param _from From address\n     * @param _to To address\n     * @param _baseAssetAmount Amount of baseAsset to transfer\n     * @param _baseAssetFee Fee to deduct from `_baseAssetAmount`\n     */\n    function payment(\n        address _from,\n        address _to,\n        uint256 _baseAssetAmount,\n        uint256 _baseAssetFee\n    ) external override nonReentrant onlyOperator {\n        uint256 shares = _sharesForAmount(_baseAssetAmount);\n        require(balances[_from] >= shares, \"!balance\");\n\n        uint256 feeShares = _sharesForAmount(_baseAssetFee);\n\n        balances[_from] = balances[_from] - shares;\n        balances[_to] = balances[_to] + shares - feeShares;\n\n        feeBalance = feeBalance + feeShares; // add fee to total fees owed to protocol\n\n        emit Payment(_from, _to, _baseAssetAmount, _baseAssetFee, shares);\n    }\n\n    /**\n     * @dev Deposit an amount of `_asset` into the vault and credit the equal value of `baseAsset`\n     * @param _asset Address of incoming asset\n     * @param _assetAmount Amount of asset to deposit\n     */\n    function deposit(\n        address _asset,\n        uint256 _assetAmount\n    ) external override nonReentrant {\n        require(_asset == baseAsset || assets[_asset].allowed, \"!invalid(_asset)\");\n        require(_assetAmount > 0, \"!invalid(_assetAmount)\");\n\n        // calculate shares before transferring new asset into vault\n        uint256 shares = _sharesForAmount(_assetAmount);\n\n        IERC20(_asset).transferFrom(msg.sender, address(this), _assetAmount);\n\n        uint256 baseAssetAmount;\n        if (_asset != baseAsset) {\n            Asset storage asset = assets[_asset];\n\n            // subtract slippage bps from deposited amount\n            uint256 slippage = _assetAmount * asset.slippageBps / 10000;\n\n            baseAssetAmount = _convertPrice(_asset, baseAsset, _assetAmount - slippage);\n        } else {\n            baseAssetAmount = _assetAmount;\n        }\n\n        supply = supply + shares;\n        balances[msg.sender] = balances[msg.sender] + shares;\n\n        emit AssetDeposited(msg.sender, _asset, _assetAmount, baseAssetAmount, shares);\n    }\n\n    /**\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\n     * @param _recipient Recipient who will receive the withdrawn assets\n     * @param _asset Address of outgoing asset\n     * @param _shares Amount of shares to withdraw\n     */\n    function withdraw(\n        address _recipient,\n        address _asset,\n        uint256 _shares\n    ) external override nonReentrant {\n        require(assets[_asset].allowed, \"!invalid(_asset)\");\n        require(_shares > 0, \"!invalid(_sharesAmount)\");\n\n        require(balances[msg.sender] >= _shares, \"!balance\");\n\n        // calculate amount before supply adjustment\n        uint256 baseAmount = _shareValue(_shares);\n\n        supply = supply - _shares;\n        balances[msg.sender] = balances[msg.sender] - _shares;\n\n        uint256 assetAmount;\n        if (_asset != baseAsset) {\n            Asset storage asset = assets[_asset];\n\n            assetAmount = _convertPrice(baseAsset, _asset, baseAmount);\n\n            // subtract slippage bps from withdrawing amount\n            uint256 slippage = assetAmount * asset.slippageBps / 10000;\n            assetAmount = assetAmount - slippage;\n        } else {\n            assetAmount = baseAmount;\n        }\n\n        // transfer requested stablecoin to _recipient\n        IERC20(_asset).transfer(_recipient, assetAmount);\n\n        emit AssetWithdrawn(_recipient, _asset, assetAmount, baseAmount, _shares);\n    }\n\n    function totalSupply() external override view returns(uint256) {\n        return supply;\n    }\n\n    function balanceOf(\n        address _address\n    ) external override view returns(uint256) {\n        return balances[_address];\n    }\n\n    function currentValueOf(\n        address _address\n    ) external override view returns(uint256) {\n        return _shareValue(balances[_address]);\n    }\n\n    /************************** SHARES FUNCTIONS **************************/\n\n    function _sharesForAmount(\n        uint256 _amount\n    ) internal view returns(uint256) {\n        if (_totalValue() > 0) {\n            return _amount * supply / _totalValue();\n        } else {\n            return _amount;\n        }\n    }\n\n    function _shareValue(\n        uint256 _shares\n    ) internal view returns(uint256) {\n        if (supply == 0) {\n            return _shares;\n        }\n        return _shares * _totalValue() / supply;\n    }\n\n\n    function totalValue() external override view returns(uint256) {\n        return _totalValue();\n    }\n    function _totalValue() internal view returns(uint256) {\n        uint256 total = 0;\n\n        for (uint256 i = 0; i < allAssets.length; i++) {\n            if (allAssets[i] == baseAsset) {\n                total = total + _totalAssetBalance(baseAsset);\n            } else {\n                total = total + _convertPrice(allAssets[i], baseAsset, _totalAssetBalance(allAssets[i]));\n            }\n        }\n\n        return total;\n    }\n    function totalAssetBalance(\n        address _asset\n    ) external override view returns(uint256) {\n        return _totalAssetBalance(_asset);\n    }\n    function _totalAssetBalance(\n        address _asset\n    ) internal view returns(uint256) {\n        return IERC20(_asset).balanceOf(address(this)) + ICaskVaultAdmin(vaultAdmin).assetBalanceManaged(_asset);\n    }\n\n    function allocateToStrategy(\n        address _strategy,\n        address _asset,\n        uint256 _assetAmount\n    ) external override onlyOperator {\n        require(assets[_asset].allowed, \"!allowed\");\n        IERC20(_asset).transfer(_strategy, _assetAmount);\n        emit AllocatedToStrategy(_strategy, _asset, _assetAmount);\n    }\n\n\n    /************************** ADMIN FUNCTIONS **************************/\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function addOperator(\n        address _operator\n    ) external onlyOwner {\n        operators.push(_operator);\n    }\n\n    function removeOperator(\n        address _operator\n    ) external onlyOwner {\n        uint256 idx = operators.length;\n        for (uint256 i = 0; i < operators.length; i++) {\n            if (operators[i] == _operator) {\n                idx = i;\n                break;\n            }\n        }\n        if (idx < operators.length) {\n            operators[idx] = operators[operators.length - 1];\n            operators.pop();\n        }\n    }\n\n    function operatorCount() external view returns(uint256) {\n        return operators.length;\n    }\n\n    /**\n    * @dev Withdraw an amount of accumulated share fees in the form of `baseAsset`\n     * @param _recipient Recipient who will receive the withdrawn assets\n     * @param _sharesAmount Amount of shares to withdraw\n     */\n    function withdrawFees(\n        address _recipient,\n        uint256 _sharesAmount\n    ) external onlyOwner {\n        require(_sharesAmount <= feeBalance, \"!balance\");\n\n        // calculate amount before supply adjustment\n        uint256 baseAmount = _shareValue(_sharesAmount);\n\n        supply = supply - _sharesAmount; // reduce supply\n        feeBalance = feeBalance - _sharesAmount; // reduce owed fees\n\n        // transfer fees in the form of baseAsset to _recipient\n        IERC20(baseAsset).transfer(_recipient, baseAmount);\n\n        emit AssetWithdrawn(_recipient, baseAsset, baseAmount, baseAmount, _sharesAmount);\n    }\n\n    /************************** ASSET FUNCTIONS **************************/\n\n    function setBaseAsset(\n        address _baseAsset\n    ) external onlyOwner {\n        baseAsset = _baseAsset;\n    }\n\n    function getBaseAsset() external view override returns(address) {\n        return baseAsset;\n    }\n\n    function getAllAssets() external view override returns(address[] memory) {\n        return allAssets;\n    }\n\n    function getAsset(\n        address _asset\n    ) external view override returns(Asset memory) {\n        return assets[_asset];\n    }\n\n    /**\n     * @dev Check if the vault supports an asset\n     * @param _asset Asset address\n     * @return bool `true` if asset supported, `false` otherwise\n     */\n    function supportsAsset(\n        address _asset\n    ) external view override returns (bool) {\n        return assets[_asset].allowed;\n    }\n\n    /**\n     * @dev Add an allowed asset to be deposited into the vault\n     * @param _asset Address of new ERC20 asset\n     * @param _priceFeed Address of a chainlink-compatible price oracle for the asset\n     * @param _slippageBps Slippage basis points to use when depositing/withdrawing this asset\n     */\n    function allowAsset(\n        address _asset,\n        address _priceFeed,\n        uint256 _depositLimit,\n        uint256 _slippageBps\n    ) external onlyOwner {\n        require(IERC20Metadata(_asset).decimals() > 0, \"!invalid(_asset)\");\n        require(AggregatorV3Interface(_priceFeed).decimals() > 0, \"!invalid(_priceFeed)\");\n\n        Asset storage asset = assets[_asset];\n        asset.priceFeed = _priceFeed;\n        asset.depositLimit = _depositLimit;\n        asset.slippageBps = _slippageBps;\n\n        asset.assetDecimals = IERC20Metadata(_asset).decimals();\n        asset.priceFeedDecimals = AggregatorV3Interface(_priceFeed).decimals();\n\n        if (!asset.allowed) {\n            asset.allowed = true;\n            allAssets.push(_asset); // just once\n        }\n\n        emit AllowedAsset(_asset);\n    }\n\n    function convertPrice(\n        address _fromAsset,\n        address _toAsset,\n        uint256 _fromAmount\n    ) external view returns(uint256) {\n        return _convertPrice(_fromAsset, _toAsset, _fromAmount);\n    }\n\n    /**\n     * @dev Convert _amount from one asset price to another\n     */\n    function _convertPrice(\n        address _fromAsset,\n        address _toAsset,\n        uint256 _fromAmount\n    ) internal view returns(uint256) {\n        require(_fromAsset != _toAsset, \"!invalid\");\n        require(assets[_fromAsset].allowed, \"!invalid(_fromAsset)\");\n        require(assets[_toAsset].allowed, \"!invalid(_toAsset)\");\n\n        if (_fromAmount == 0) {\n            return 0;\n        }\n\n        int256 oraclePrice;\n\n        ( , oraclePrice, , , ) = AggregatorV3Interface(assets[_fromAsset].priceFeed).latestRoundData();\n        uint256 fromOraclePrice = uint256(oraclePrice);\n        ( , oraclePrice, , , ) = AggregatorV3Interface(assets[_toAsset].priceFeed).latestRoundData();\n        uint256 toOraclePrice = uint256(oraclePrice);\n\n        if (assets[_fromAsset].priceFeedDecimals != assets[_toAsset].priceFeedDecimals) {\n            // since oracle precision is different, scale everything\n            // to _toAsset precision and do conversion\n            return _scalePrice(_fromAmount, assets[_fromAsset].assetDecimals, assets[_toAsset].assetDecimals) *\n                    _scalePrice(fromOraclePrice, assets[_fromAsset].priceFeedDecimals, assets[_toAsset].assetDecimals) /\n                    _scalePrice(toOraclePrice, assets[_toAsset].priceFeedDecimals, assets[_toAsset].assetDecimals);\n        } else {\n            // oracles are already in same precision, so just scale _amount to oracle precision,\n            // do the price conversion and convert back to _toAsset precision\n            return _scalePrice(\n                    _scalePrice(_fromAmount, assets[_fromAsset].assetDecimals, assets[_toAsset].priceFeedDecimals) *\n                            fromOraclePrice / toOraclePrice,\n                        assets[_toAsset].priceFeedDecimals,\n                        assets[_toAsset].assetDecimals\n            );\n        }\n    }\n\n    function _scalePrice(\n        uint256 _price,\n        uint8 _priceDecimals,\n        uint8 _decimals\n    ) internal pure returns (uint256){\n        if (_priceDecimals < _decimals) {\n            return _price * uint256(10 ** uint256(_decimals - _priceDecimals));\n        } else if (_priceDecimals > _decimals) {\n            return _price / uint256(10 ** uint256(_priceDecimals - _decimals));\n        }\n        return _price;\n    }\n\n}"
    },
    "contracts/protocol/CaskSubscriptions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n\nimport \"../interfaces/ICaskSubscriptions.sol\";\nimport \"../interfaces/ICaskSubscriptionPlans.sol\";\nimport \"../interfaces/ICaskVault.sol\";\n\ncontract CaskSubscriptions is\nICaskSubscriptions,\nInitializable,\nOwnableUpgradeable,\nPausableUpgradeable,\nKeeperCompatibleInterface\n{\n\n    /************************** STATE **************************/\n\n    /** @dev contract to manage subscription plan definitions. */\n    address public subscriptionPlans;\n\n    /** @dev vault to use for payments. */\n    address public vault;\n\n    /** @dev fixed fee to charge on payments, in baseAsset decimal units. */\n    uint256 public paymentFeeFixed;\n\n    /** @dev percentage to charge on payments in 18 decimals. 100% = 1e18. */\n    uint256 public paymentFeeRate;\n\n    /** @dev max gas refund for subscription creation transactions, in wei */\n    uint256 public gasRefundLimit;\n\n\n    bytes32[] internal allSubscriptions;\n\n    /** @dev Maps for consumer to list of subscriptions. */\n    mapping(address => bytes32[]) internal consumerSubscriptions; // consumer => subscriptionId[]\n    mapping(bytes32 => Subscription) internal subscriptions; // subscriptionId => Subscription\n\n    /** @dev Maps for provider to list of subscriptions and plans. */\n    mapping(address => bytes32[]) internal providerSubscriptions; // provider => subscriptionId[]\n    mapping(address => uint256) internal providerActiveSubscriptionCount; // provider => count\n\n    modifier onlySubscriber(bytes32 _subscriptionId) {\n        require(msg.sender == subscriptions[_subscriptionId].consumer, \"!auth\");\n        _;\n    }\n\n    modifier onlySubscriberOrProvider(bytes32 _subscriptionId) {\n        require(\n            msg.sender == subscriptions[_subscriptionId].consumer||\n            msg.sender == subscriptions[_subscriptionId].provider,\n            \"!auth\"\n        );\n        _;\n    }\n\n    modifier onlyProvider(bytes32 _subscriptionId) {\n        require(msg.sender == subscriptions[_subscriptionId].provider, \"!auth\");\n        _;\n    }\n\n\n    function initialize(\n        address _subscriptionPlans,\n        address _vault\n    ) public initializer {\n        __Ownable_init();\n        __Pausable_init();\n\n        subscriptionPlans = _subscriptionPlans;\n        vault = _vault;\n\n        // parameter defaults\n        paymentFeeFixed = 0;\n        paymentFeeRate = 0;\n        gasRefundLimit = 0;\n    }\n    /// @custom:oz-upgrades-unsafe-allow constructor\n//    constructor() initializer {}\n\n\n\n    /************************** SUBSCRIPTION METHODS **************************/\n\n    function createSubscription(\n        bytes32 _planId,\n        bytes32 _discountProof,\n        bytes32 _ref,\n        uint32 _cancelAt,\n        bytes32 _metaHash,\n        uint8 _metaHF,\n        uint8 _metaSize\n    ) external override whenNotPaused {\n        uint256 initialGasLeft = gasleft();\n        initialGasLeft = initialGasLeft + 3000;\n\n        ICaskSubscriptionPlans.Plan memory plan = ICaskSubscriptionPlans(subscriptionPlans).getSubscriptionPlan(_planId);\n\n        require(plan.provider != address(0), \"!invalid(_plan)\");\n        require(plan.status == ICaskSubscriptionPlans.PlanStatus.Enabled, \"!disabled\");\n\n        bytes32 subscriptionId = keccak256(abi.encodePacked(msg.sender, plan.provider, _planId, block.number));\n\n        Subscription storage subscription = subscriptions[subscriptionId];\n        subscription.consumer = msg.sender;\n        subscription.provider = plan.provider;\n        subscription.planId = _planId;\n        subscription.pendingPlanId = 0;\n        subscription.ref = _ref;\n        subscription.cancelAt = _cancelAt;\n        subscription.discountId = ICaskSubscriptionPlans(subscriptionPlans).verifyDiscount(_planId, _discountProof);\n        subscription.metaHash = _metaHash;\n        subscription.metaHF = _metaHF;\n        subscription.metaSize = _metaSize;\n        subscription.createdAt = uint32(block.timestamp);\n\n        if (plan.freeTrialDays > 0) {\n            // if no trial period, charge now. If trial period, charge will happen after trial is over\n            subscription.status = SubscriptionStatus.Trialing;\n            subscription.renewAt = uint32(block.timestamp) + (plan.freeTrialDays * 1 days);\n        } else {\n            _renewSubscription(subscriptionId);\n            subscription.status = SubscriptionStatus.Active;\n        }\n\n        emit SubscriptionCreated(subscription.consumer, subscription.provider,\n            subscription.subscriptionId, subscription.ref, plan.planCode);\n\n        consumerSubscriptions[msg.sender].push(subscriptionId);\n        providerSubscriptions[plan.provider].push(subscriptionId);\n        providerActiveSubscriptionCount[plan.provider] = providerActiveSubscriptionCount[plan.provider] + 1;\n        allSubscriptions.push(subscriptionId);\n        _rebateGas(initialGasLeft);\n    }\n\n    function changeSubscriptionPlan(\n        bytes32 _subscriptionId,\n        bytes32 _planId\n    ) external override onlySubscriber(_subscriptionId) whenNotPaused {\n        Subscription storage subscription = subscriptions[_subscriptionId];\n        require(subscription.renewAt < uint32(block.timestamp), \"!need_renewal\");\n        require(subscription.planId != _planId, \"!invalid(_planId)\");\n        require(subscription.status == SubscriptionStatus.Active ||\n                subscription.status == SubscriptionStatus.Trialing, \"!invalid(status)\");\n\n        ICaskSubscriptionPlans.Plan memory plan = ICaskSubscriptionPlans(subscriptionPlans).getSubscriptionPlan(_planId);\n        require(plan.status == ICaskSubscriptionPlans.PlanStatus.Enabled, \"!disabled\");\n\n        ICaskSubscriptionPlans.Plan memory curPlan = ICaskSubscriptionPlans(subscriptionPlans).getSubscriptionPlan(subscription.planId);\n\n        if (subscription.status == SubscriptionStatus.Trialing) {\n\n            if (plan.freeTrialDays > curPlan.freeTrialDays) {\n                // new plan has moar days than the old plan, adjust renewAt out further\n                subscription.renewAt = subscription.renewAt + ((plan.freeTrialDays - curPlan.freeTrialDays) * 1 days);\n            } else if (plan.freeTrialDays < curPlan.freeTrialDays) {\n                // new plan has less days than the old plan, adjust renewAt in closer\n                subscription.renewAt = subscription.renewAt - ((curPlan.freeTrialDays - plan.freeTrialDays) * 1 days);\n                if (subscription.renewAt <= uint32(block.timestamp)) {\n                    // if new plan trial days would have caused trial to already be over, end trial as of now\n                    // subscription will be charged and converted to active during next keeper run\n                    subscription.renewAt = uint32(block.timestamp);\n                }\n            }\n\n            // freely allow plans to change while trialing\n            subscription.planId = _planId;\n\n            emit SubscriptionChangedPlan(subscription.consumer, subscription.provider, subscription.subscriptionId,\n                subscription.ref, curPlan.planCode, plan.planCode);\n\n        } else if (plan.price / plan.period > curPlan.price / curPlan.period) { // upgrade\n            uint256 newAmount = ((plan.price / plan.period) - (curPlan.price / curPlan.period)) *\n                                 (subscription.renewAt - uint32(block.timestamp));\n            _processPayment(subscription.consumer, plan.paymentAddress, newAmount);\n\n            subscription.planId = _planId;\n\n            emit SubscriptionChangedPlan(subscription.consumer, subscription.provider, subscription.subscriptionId,\n                subscription.ref, curPlan.planCode, plan.planCode);\n\n        } else { // downgrade\n\n            // possible usecase someday: code to immediately downgrade and extend renewal date based on plan value diff\n//            uint256 credit = ((curPlan.price / curPlan.period) - (plan.price / plan.period)) *\n//                                (subscription.renewAt - uint32(block.timestamp));\n//            // calculate how many seconds the credit amount buys of the new plan and extend\n//            // the renewal date that amount\n//            subscription.renewAt = subscription.renewAt + uint32(credit / (plan.price / plan.period));\n\n            subscription.pendingPlanId = _planId; // will be activated at next renewal\n\n            emit SubscriptionPendingChangePlan(subscription.consumer, subscription.provider, subscription.subscriptionId,\n                subscription.ref, curPlan.planCode, plan.planCode);\n        }\n\n    }\n\n    function changeSubscriptionCancelAt(\n        bytes32 _subscriptionId,\n        uint32 _cancelAt\n    ) external override onlySubscriber(_subscriptionId) whenNotPaused {\n        Subscription storage subscription = subscriptions[_subscriptionId];\n\n        subscription.cancelAt = _cancelAt;\n    }\n\n    function changeSubscriptionDiscount(\n        bytes32 _subscriptionId,\n        bytes32 _discountProof\n    ) external override onlySubscriberOrProvider(_subscriptionId) whenNotPaused {\n        Subscription storage subscription = subscriptions[_subscriptionId];\n\n        ICaskSubscriptionPlans.Plan memory plan;\n        if (subscription.pendingPlanId != 0 && subscription.planId != subscription.pendingPlanId) {\n            // pending downgrade, get discount for new plan\n            plan = ICaskSubscriptionPlans(subscriptionPlans).getSubscriptionPlan(subscription.pendingPlanId);\n\n            subscription.discountId = ICaskSubscriptionPlans(subscriptionPlans).verifyDiscount(subscription.pendingPlanId, _discountProof);\n\n            emit SubscriptionChangedDiscount(subscription.consumer, subscription.provider, subscription.subscriptionId,\n                subscription.ref, plan.planCode, subscription.discountId);\n\n        } else {\n            plan = ICaskSubscriptionPlans(subscriptionPlans).getSubscriptionPlan(subscription.planId);\n\n            subscription.discountId = ICaskSubscriptionPlans(subscriptionPlans).verifyDiscount(subscription.planId, _discountProof);\n\n            emit SubscriptionChangedDiscount(subscription.consumer, subscription.provider, subscription.subscriptionId,\n                subscription.ref, plan.planCode, subscription.discountId);\n        }\n    }\n\n    function pauseSubscription(\n        bytes32 _subscriptionId\n    ) external override onlySubscriberOrProvider(_subscriptionId) whenNotPaused {\n        Subscription storage subscription = subscriptions[_subscriptionId];\n        ICaskSubscriptionPlans.Plan memory plan = ICaskSubscriptionPlans(subscriptionPlans).getSubscriptionPlan(subscription.planId);\n\n        require(plan.canPause, \"!unpausable\");\n        require(subscription.status != SubscriptionStatus.Paused &&\n                subscription.status != SubscriptionStatus.PastDue &&\n                subscription.status != SubscriptionStatus.Canceled &&\n                subscription.status != SubscriptionStatus.PendingCancel, \"!invalid\");\n\n        subscription.status = SubscriptionStatus.Paused;\n\n        emit SubscriptionPaused(subscription.consumer, subscription.provider, subscription.subscriptionId,\n            subscription.ref, plan.planCode);\n    }\n\n    function resumeSubscription(\n        bytes32 _subscriptionId\n    ) external override onlySubscriber(_subscriptionId) whenNotPaused {\n        Subscription storage subscription = subscriptions[_subscriptionId];\n        ICaskSubscriptionPlans.Plan memory plan = ICaskSubscriptionPlans(subscriptionPlans).getSubscriptionPlan(subscription.planId);\n\n        require(subscription.status == SubscriptionStatus.Paused, \"!not_paused\");\n\n        subscription.status = SubscriptionStatus.Active;\n\n        // if renewal date has already passed, set it to now so consumer is not charged for the time it was paused\n        if (subscription.renewAt < uint32(block.timestamp)) {\n            subscription.renewAt = uint32(block.timestamp);\n        }\n\n        emit SubscriptionResumed(subscription.consumer, subscription.provider, subscription.subscriptionId,\n            subscription.ref, plan.planCode);\n    }\n\n    function cancelSubscription(\n        bytes32 _subscriptionId\n    ) external override onlySubscriberOrProvider(_subscriptionId) whenNotPaused {\n        Subscription storage subscription = subscriptions[_subscriptionId];\n\n        require(subscription.status != SubscriptionStatus.PendingCancel &&\n                subscription.status != SubscriptionStatus.Canceled, \"!invalid(status)\");\n\n        ICaskSubscriptionPlans.Plan memory plan = ICaskSubscriptionPlans(subscriptionPlans).getSubscriptionPlan(subscription.planId);\n\n        subscription.status = SubscriptionStatus.PendingCancel;\n\n        emit SubscriptionPendingCancel(subscription.consumer, subscription.provider, subscription.subscriptionId,\n            subscription.ref, plan.planCode);\n    }\n\n    function getSubscription(\n        bytes32 _subscriptionId\n    ) external override view returns (Subscription memory) {\n        return subscriptions[_subscriptionId];\n    }\n\n    function getConsumerSubscriptions(\n        address _consumer, uint256 limit, uint256 offset\n    ) external override view returns (bytes32[] memory) {\n        bytes32[] memory subscriptionIds = new bytes32[](limit);\n        for (uint256 i = 0; i < limit; i++) {\n            subscriptionIds[i] = consumerSubscriptions[_consumer][i+offset];\n        }\n        return subscriptionIds;\n    }\n\n    function getConsumerSubscriptionCount(\n        address _consumer\n    ) external override view returns (uint256) {\n        return consumerSubscriptions[_consumer].length;\n    }\n\n    function getProviderSubscriptions(\n        address _provider, uint256 limit, uint256 offset\n    ) external override view returns (bytes32[] memory) {\n        bytes32[] memory subscriptionIds = new bytes32[](limit);\n        for (uint256 i = 0; i < limit + offset; i++) {\n            subscriptionIds[i] = providerSubscriptions[_provider][i+offset];\n        }\n        return subscriptionIds;\n    }\n\n    function getProviderSubscriptionCount(\n        address _provider\n    ) external override view returns (uint256) {\n        return providerSubscriptions[_provider].length;\n    }\n\n\n    /************************** OPERATIONAL METHODS **************************/\n\n    function checkUpkeep(\n        bytes calldata checkData\n    ) external view override returns(bool upkeepNeeded, bytes memory performData) {\n        uint256 limit = abi.decode(checkData, (uint256));\n        bytes32[] memory subscriptionIds = _subscriptionsRenewable(limit);\n        if (subscriptionIds.length > 0) {\n            upkeepNeeded = true;\n            performData = abi.encode(subscriptionIds);\n        } else {\n            upkeepNeeded = false;\n            performData = bytes(\"\");\n        }\n    }\n\n    function _subscriptionsRenewable(\n        uint256 _limit\n    ) internal view returns(bytes32[] memory) {\n        bytes32[] memory renewables = new bytes32[](_limit);\n\n        uint256 foundRenewable = 0;\n        for (uint256 i = 0; i < allSubscriptions.length; i++) {\n            Subscription memory subscription = subscriptions[allSubscriptions[i]];\n            if (subscription.renewAt <= uint32(block.timestamp) &&\n                subscription.status != SubscriptionStatus.Canceled &&\n                subscription.status != SubscriptionStatus.Paused)\n            {\n                renewables[foundRenewable] = allSubscriptions[i];\n                foundRenewable = foundRenewable + 1;\n                if (foundRenewable >= _limit) {\n                    break;\n                }\n            }\n        }\n        return renewables;\n    }\n\n    function performUpkeep(\n        bytes calldata performData\n    ) external override whenNotPaused {\n        bytes32[] memory subscriptionIds = abi.decode(performData, (bytes32[]));\n        for (uint256 i = 0; i < subscriptionIds.length; i++) {\n            if (subscriptionIds[i] != \"\") {\n                _renewSubscription(subscriptionIds[i]);\n            }\n        }\n    }\n\n    function _renewSubscription(\n        bytes32 _subscriptionId\n    ) internal {\n        Subscription storage subscription = subscriptions[_subscriptionId];\n\n        // not time to renew yet or is paused\n        if (subscription.renewAt > uint32(block.timestamp) ||\n            subscription.status == SubscriptionStatus.Paused) {\n            return;\n        }\n\n        ICaskSubscriptionPlans.Plan memory plan = ICaskSubscriptionPlans(subscriptionPlans).getSubscriptionPlan(subscription.planId);\n\n        // subscription scheduled to be canceled by consumer or has hit its cancelAt time\n        if (subscription.status == SubscriptionStatus.PendingCancel ||\n            (subscription.cancelAt > 0 && subscription.cancelAt <= uint32(block.timestamp))) {\n\n            subscription.status = SubscriptionStatus.Canceled;\n            providerActiveSubscriptionCount[subscription.provider] =\n                providerActiveSubscriptionCount[subscription.provider] - 1;\n\n            emit SubscriptionCanceled(subscription.consumer, subscription.provider, subscription.subscriptionId,\n                subscription.ref, plan.planCode);\n\n        } else {\n\n            ICaskSubscriptionPlans.Discount memory discount;\n\n            // if a plan change is pending, switch to use new plan info\n            if (subscription.pendingPlanId != 0 && subscription.pendingPlanId != subscription.planId) {\n                plan = ICaskSubscriptionPlans(subscriptionPlans).getSubscriptionPlan(subscription.pendingPlanId);\n                discount = ICaskSubscriptionPlans(subscriptionPlans).getSubscriptionPlanDiscount(subscription.pendingPlanId, subscription.discountId);\n            } else {\n                discount = ICaskSubscriptionPlans(subscriptionPlans).getSubscriptionPlanDiscount(subscription.planId, subscription.discountId);\n            }\n\n            uint256 chargeAmount = plan.price;\n            bool usedDiscount = false;\n            if (discount.percent > 0 && discount.expiresAt < uint32(block.timestamp)) {\n                if (discount.maxUses == 0 || discount.uses < discount.maxUses) {\n                    usedDiscount = true;\n                    chargeAmount = chargeAmount - (chargeAmount * discount.percent / 10000);\n                }\n            }\n\n            // consumer does not have enough balance to cover payment\n            if (ICaskVault(vault).currentValueOf(subscription.consumer) < chargeAmount) {\n\n                // if have not been able to renew for 7 days, cancel subscription\n                if (subscription.renewAt < uint32(block.timestamp - 7 days)) {\n\n                    providerActiveSubscriptionCount[subscription.provider] =\n                        providerActiveSubscriptionCount[subscription.provider] - 1;\n                    subscription.status = SubscriptionStatus.Canceled;\n\n                    emit SubscriptionCanceled(subscription.consumer, subscription.provider,\n                        subscription.subscriptionId, subscription.ref, plan.planCode);\n\n                } else if (subscription.status != SubscriptionStatus.PastDue) {\n\n                    subscription.status = SubscriptionStatus.PastDue;\n\n                    emit SubscriptionPastDue(subscription.consumer, subscription.provider,\n                        subscription.subscriptionId, subscription.ref, plan.planCode);\n                }\n\n            } else if (chargeAmount > 0) {\n\n                subscription.renewAt = subscription.renewAt + plan.period;\n                subscription.paymentNumber = subscription.paymentNumber + 1;\n\n                _processPayment(subscription.consumer, plan.paymentAddress, chargeAmount);\n\n                if (subscription.pendingPlanId != 0 && subscription.pendingPlanId != subscription.planId) {\n                    ICaskSubscriptionPlans.Plan memory oldPlan = ICaskSubscriptionPlans(subscriptionPlans).getSubscriptionPlan(subscription.planId);\n\n                    subscription.planId = subscription.pendingPlanId;\n                    subscription.pendingPlanId = 0;\n\n                    emit SubscriptionChangedPlan(subscription.consumer, subscription.provider,\n                        subscription.subscriptionId, subscription.ref, oldPlan.planCode, plan.planCode);\n                }\n\n                if (usedDiscount && discount.maxUses > 0) {\n                    // consume discount and if no more uses remain, drop discount from subscription (gas optimization)\n                    if (!ICaskSubscriptionPlans(subscriptionPlans).consumeDiscount(subscription.planId, subscription.discountId)) {\n                        subscription.discountId = 0; // clear discount since no more uses are available\n                    }\n                }\n\n                if (subscription.status == SubscriptionStatus.Trialing) {\n                    emit SubscriptionTrialEnded(subscription.consumer, subscription.provider,\n                        subscription.subscriptionId, subscription.ref, plan.planCode);\n                }\n\n                subscription.status = SubscriptionStatus.Active;\n\n                emit SubscriptionRenewed(subscription.consumer, subscription.provider, subscription.subscriptionId,\n                    subscription.ref, plan.planCode);\n            } else {\n                subscription.renewAt = subscription.renewAt + plan.period;\n\n                emit SubscriptionRenewed(subscription.consumer, subscription.provider, subscription.subscriptionId,\n                    subscription.ref, plan.planCode);\n            }\n\n        }\n\n    }\n\n    function _processPayment(\n        address _consumer,\n        address _provider,\n        uint256 _amount\n    ) internal {\n        // TODO: calculate the fee rate discount based on staked CASK\n        uint256 paymentFeeRateAdjusted = paymentFeeRate;\n        uint256 fee = paymentFeeFixed + (_amount * paymentFeeRateAdjusted / 10000);\n        ICaskVault(vault).payment(_consumer, _provider, _amount, fee);\n    }\n\n    function _rebateGas(\n        uint256 _initialGasLeft\n    ) internal {\n        if (gasRefundLimit == 0) {\n            return;\n        }\n\n        // assume a fixed 30000 wei for transaction overhead and stuff performed after this snapshot\n        uint256 weiRebate = (_initialGasLeft - gasleft() + 30000) * tx.gasprice;\n        if (weiRebate > gasRefundLimit) {\n            weiRebate = gasRefundLimit;\n        }\n\n//        CaskTreasury.refundGas(msg.sender, weiRebate);\n    }\n\n\n    /************************** ADMIN FUNCTIONS **************************/\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function setParameters(\n        uint256 _paymentFeeFixed,\n        uint256 _paymentFeeRate,\n        uint256 _gasRefundLimit\n    ) external onlyOwner {\n        paymentFeeFixed = _paymentFeeFixed;\n        paymentFeeRate = _paymentFeeRate;\n        gasRefundLimit = _gasRefundLimit;\n    }\n\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easilly be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "contracts/interfaces/ICaskSubscriptions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICaskSubscriptions {\n\n    enum SubscriptionStatus {\n        None,\n        Trialing,\n        Active,\n        Paused,\n        Canceled,\n        PendingCancel,\n        PastDue,\n        Invalid\n    }\n\n    struct Subscription {\n        bytes32 subscriptionId;\n        bytes32 planId;\n        bytes32 pendingPlanId;\n        bytes32 discountId;\n        address consumer;\n        address provider;\n        bytes32 metaHash; // the three meta* members are used to build an IPFS CID efficiently\n        bytes32 ref;\n        uint32 createdAt;\n        uint32 renewAt;\n        uint32 cancelAt;\n        uint16 paymentNumber;\n        uint8 metaHF;\n        uint8 metaSize;\n        SubscriptionStatus status;\n    }\n\n\n    /************************** SUBSCRIPTION INSTANCE METHODS **************************/\n\n    function createSubscription(bytes32 _planId, bytes32 _discountProof, bytes32 _ref, uint32 _cancelAt,\n        bytes32 _metaHash, uint8 _metaHF, uint8 _metaSize) external;\n\n    function changeSubscriptionPlan(bytes32 _subscriptionId, bytes32 _planId) external;\n\n    function changeSubscriptionCancelAt(bytes32 _subscriptionId, uint32 _cancelAt) external;\n\n    function changeSubscriptionDiscount(bytes32 _subscriptionId, bytes32 _discountProof) external;\n\n    function pauseSubscription(bytes32 _subscriptionId) external;\n\n    function resumeSubscription(bytes32 _subscriptionId) external;\n\n    function cancelSubscription(bytes32 _subscriptionId) external;\n\n    function getSubscription(bytes32 _subscriptionId) external view returns (Subscription memory);\n\n    function getConsumerSubscriptions(address _consumer, uint256 limit,\n        uint256 offset) external view returns (bytes32[] memory);\n\n    function getConsumerSubscriptionCount(address _consumer) external view returns (uint256);\n\n    function getProviderSubscriptions(address _provider, uint256 limit,\n        uint256 offset) external view returns (bytes32[] memory);\n\n    function getProviderSubscriptionCount(address _provider) external view returns (uint256);\n\n\n    /************************** SUBSCRIPTION EVENTS **************************/\n\n    /** @dev Emitted when `consumer` subscribes to `provider` plan `planId` */\n    event SubscriptionCreated(address indexed consumer, address indexed provider,\n        bytes32 indexed subscriptionId, bytes32 ref, bytes32 planCode);\n\n    /** @dev Emitted when `provider` verifies subscription `subscriptionId` */\n    event SubscriptionVerified(address indexed consumer, address indexed provider,\n        bytes32 indexed subscriptionId, bytes32 ref, bytes32 planCode);\n\n    /** @dev Emitted when `consumer` changes the plan to `provider` on subscription `subscriptionId` */\n    event SubscriptionChangedPlan(address indexed consumer, address indexed provider,\n        bytes32 indexed subscriptionId, bytes32 ref, bytes32 oldPlanCode, bytes32 planCode);\n\n    /** @dev Emitted when `consumer` changes the plan to `provider` on subscription `subscriptionId` */\n    event SubscriptionPendingChangePlan(address indexed consumer, address indexed provider,\n        bytes32 indexed subscriptionId, bytes32 ref, bytes32 oldPlanCode, bytes32 planCode);\n\n    /** @dev Emitted when `consumer` changes the discount on subscription `subscriptionId` */\n    event SubscriptionChangedDiscount(address indexed consumer, address indexed provider,\n        bytes32 indexed subscriptionId, bytes32 ref, bytes32 planCode, bytes32 discountId);\n\n    /** @dev Emitted when `consumer` pauses the subscription to `provider` on subscription `subscriptionId` */\n    event SubscriptionPaused(address indexed consumer, address indexed provider,\n        bytes32 indexed subscriptionId, bytes32 ref, bytes32 planCode);\n\n    /** @dev Emitted when `consumer` resumes the subscription to `provider` on subscription `subscriptionId` */\n    event SubscriptionResumed(address indexed consumer, address indexed provider,\n        bytes32 indexed subscriptionId, bytes32 ref, bytes32 planCode);\n\n    /** @dev Emitted when `consumer` unsubscribes to `provider` on subscription `subscriptionId` */\n    event SubscriptionPendingCancel(address indexed consumer, address indexed provider,\n        bytes32 indexed subscriptionId, bytes32 ref, bytes32 planCode);\n\n    /** @dev Emitted when `consumer` has canceled and the current period is over on subscription `subscriptionId` */\n    event SubscriptionCanceled(address indexed consumer, address indexed provider,\n        bytes32 indexed subscriptionId, bytes32 ref, bytes32 planCode);\n\n    /** @dev Emitted when `consumer` successfully renews to `provider` on subscription `subscriptionId` */\n    event SubscriptionRenewed(address indexed consumer, address indexed provider,\n        bytes32 indexed subscriptionId, bytes32 ref, bytes32 planCode);\n\n    /** @dev Emitted when `consumer` subscription trial ends and goes active to `provider` on subscription `subscriptionId` */\n    event SubscriptionTrialEnded(address indexed consumer, address indexed provider,\n        bytes32 indexed subscriptionId, bytes32 ref, bytes32 planCode);\n\n    /** @dev Emitted when `consumer` renewal fails to `provider` on subscription `subscriptionId` */\n    event SubscriptionPastDue(address indexed consumer, address indexed provider,\n        bytes32 indexed subscriptionId, bytes32 ref, bytes32 planCode);\n\n}\n\n"
    },
    "contracts/interfaces/ICaskSubscriptionPlans.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICaskSubscriptionPlans {\n\n    enum PlanStatus {\n        None,\n        Enabled,\n        Disabled\n    }\n\n    struct Plan {\n        address provider;\n        address paymentAddress;\n        uint256 price; // denominated in baseAsset\n        bytes32 planCode;\n        bytes32 metaHash; // the three meta* members are used to build an IPFS CID efficiently\n        uint8 metaHF;\n        uint8 metaSize;\n        uint32 period; // in seconds\n        uint16 freeTrialDays; // in days\n        bool canPause;\n        PlanStatus status;\n    }\n\n    struct Discount {\n        uint16 percent; // percent in bps. 50% = 5000.\n        uint32 expiresAt;\n        uint32 maxUses;\n        uint32 uses;\n    }\n\n    struct Provider {\n        bytes32 metaHash; // the three meta* members are used to build an IPFS CID efficiently\n        uint8 metaHF;\n        uint8 metaSize;\n    }\n\n    function setProviderProfile(bytes32 _metaHash, uint8 _metaHF, uint8 _metaSize) external;\n\n    function getProviderProfile(address _provider) external view returns(Provider memory);\n\n    function createSubscriptionPlan(bytes32 _planCode, uint32 _period,\n        uint256 _price, uint16 _freeTrialDays, bool _canPause, address _payoutAddress,\n        bytes32 _metaHash, uint8 _metaHF, uint8 _metaSize) external;\n\n    function updateSubscriptionPlan(bytes32 _planId, uint32 _period, uint256 _price,\n        uint16 _freeTrialDays, bool canPause) external;\n\n    function setSubscriptionPlanDiscount(bytes32 _planId, bytes32 _discountId,\n        uint8 _percent, uint32 expiresAt, uint32 maxUses) external;\n\n    function consumeDiscount(bytes32 _planId, bytes32 _discountId) external returns(bool);\n\n    function disableSubscriptionPlan(bytes32 _planId) external;\n\n    function enableSubscriptionPlan(bytes32 _planId) external;\n\n    function verifyDiscount(bytes32 _planId, bytes32 _discountProof) external view returns(bytes32);\n\n    function getSubscriptionPlans(address _provider) external view returns(bytes32[] memory);\n\n    function getSubscriptionPlan(bytes32 _planId) external view returns(Plan memory);\n\n    function getSubscriptionPlanDiscount(bytes32 _planId, bytes32 _discountId) external view returns(Discount memory);\n\n    function getSubscriptionPlanDiscounts(bytes32 _planId) external view returns (bytes32[] memory);\n\n\n\n    /** @dev Emitted when `provider` creates a new subscription plan */\n    event SubscriptionPlanCreated(address indexed provider, bytes32 indexed planId, bytes32 indexed planCode);\n\n    /** @dev Emitted when `provider` updates a subscription plan */\n    event SubscriptionPlanUpdated(address indexed provider, bytes32 indexed planId, bytes32 indexed planCode);\n\n    /** @dev Emitted when `provider` adds a discount to a subscription plan */\n    event SubscriptionPlanSetDiscount(address indexed provider, bytes32 indexed planId,\n        bytes32 indexed planCode, bytes32 discountId);\n\n    /** @dev Emitted when `provider` disables a subscription plan */\n    event SubscriptionPlanDisabled(address indexed provider, bytes32 indexed planId, bytes32 indexed planCode);\n\n    /** @dev Emitted when `provider` enables a subscription plan */\n    event SubscriptionPlanEnabled(address indexed provider, bytes32 indexed planId, bytes32 indexed planCode);\n\n}"
    },
    "contracts/protocol/CaskSubscriptionPlans.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\nimport \"../interfaces/ICaskSubscriptionPlans.sol\";\n\ncontract CaskSubscriptionPlans is\nICaskSubscriptionPlans,\nInitializable,\nOwnableUpgradeable,\nPausableUpgradeable\n{\n    /** @dev Address of subscriptions protocol. */\n    address public protocol;\n\n    /** @dev Map for provider to profile info. */\n    mapping(address => Provider) internal providerProfiles;\n\n    /** @dev Maps for provider to plans. */\n    mapping(address => bytes32[]) internal providerSubscriptionPlans; // provider => planId[]\n    mapping(bytes32 => Plan) internal subscriptionPlans; // planId => Plan\n\n    /** @dev Maps for discounts. */\n    mapping(bytes32 => bytes32[]) internal subscriptionPlanDiscounts; // planId => discountHash[]\n    mapping(bytes32 => mapping(bytes32 => Discount)) internal discounts; // planId => discountHash => Discount\n\n\n    modifier onlyProvider(bytes32 _planId) {\n        require(msg.sender == subscriptionPlans[_planId].provider, \"!auth\");\n        _;\n    }\n\n    modifier onlyProtocol() {\n        require(msg.sender == protocol, \"!auth\");\n        _;\n    }\n\n    function initialize() public initializer {\n        __Ownable_init();\n        __Pausable_init();\n    }\n    /// @custom:oz-upgrades-unsafe-allow constructor\n//    constructor() initializer {}\n\n\n    function setProtocol(address _protocol) external onlyOwner {\n        protocol = _protocol;\n    }\n\n    function setProviderProfile(\n        bytes32 _metaHash,\n        uint8 _metaHF,\n        uint8 _metaSize\n    ) external override {\n        Provider storage profile = providerProfiles[msg.sender];\n        profile.metaHash = _metaHash;\n        profile.metaHF = _metaHF;\n        profile.metaSize = _metaSize;\n    }\n\n    function getProviderProfile(\n        address _provider\n    ) external override view returns(Provider memory) {\n        return providerProfiles[_provider];\n    }\n\n    function createSubscriptionPlan(\n        bytes32 _planCode,\n        uint32 _period,\n        uint256 _price,\n        uint16 _freeTrialDays,\n        bool _canPause,\n        address _paymentAddress,\n        bytes32 _metaHash,\n        uint8 _metaHF,\n        uint8 _metaSize\n    ) external override {\n        require(_period > 0, \"!invalid(_period)\");\n        require(_price > 0, \"!invalid(_price)\");\n\n        bytes32 planId = keccak256(abi.encodePacked(msg.sender, _planCode, block.number));\n\n        providerSubscriptionPlans[msg.sender].push(planId);\n\n        Plan storage plan = subscriptionPlans[planId];\n        plan.provider = msg.sender;\n        plan.planCode = _planCode;\n        plan.period = _period;\n        plan.price = _price;\n        plan.freeTrialDays = _freeTrialDays;\n        plan.canPause = _canPause;\n        plan.paymentAddress = _paymentAddress;\n        plan.metaHash = _metaHash;\n        plan.metaHF = _metaHF;\n        plan.metaSize = _metaSize;\n        plan.status = PlanStatus.Enabled;\n\n        emit SubscriptionPlanCreated(plan.provider, planId, plan.planCode);\n    }\n\n    function updateSubscriptionPlan(\n        bytes32 _planId,\n        uint32 _period,\n        uint256 _price,\n        uint16 _freeTrialDays,\n        bool _canPause\n    ) external override onlyProvider(_planId) {\n        require(_period > 0, \"!invalid(_period)\");\n        require(_price > 0, \"!invalid(_price)\");\n\n        Plan storage plan = subscriptionPlans[_planId];\n        plan.period = _period;\n        plan.price = _price;\n        plan.freeTrialDays = _freeTrialDays;\n        plan.canPause = _canPause;\n\n        emit SubscriptionPlanUpdated(plan.provider, _planId, plan.planCode);\n    }\n\n    function setSubscriptionPlanDiscount(\n        bytes32 _planId,\n        bytes32 _discountId,\n        uint8 _percent,\n        uint32 _expiresAt,\n        uint32 _maxUses\n    ) external override onlyProvider(_planId) {\n        require(_percent > 0, \"!invalid(_percent)\");\n\n        Plan memory plan = subscriptionPlans[_planId];\n        Discount storage discount = discounts[_planId][_discountId];\n\n        discount.percent = _percent;\n        discount.expiresAt = _expiresAt;\n        discount.maxUses = _maxUses;\n\n        emit SubscriptionPlanSetDiscount(plan.provider, _planId, plan.planCode, _discountId);\n    }\n\n    function consumeDiscount(\n        bytes32 _planId,\n        bytes32 _discountId\n    ) external override onlyProtocol returns(bool) {\n        Discount storage discount = discounts[_planId][_discountId];\n        require(discount.maxUses == 0 || discount.uses < discount.maxUses, \"!exhausted\");\n        discount.uses = discount.uses - 1;\n        return discount.maxUses == 0 || discount.uses < discount.maxUses;\n    }\n\n    function disableSubscriptionPlan(\n        bytes32 _planId\n    ) external override onlyProvider(_planId) {\n        Plan storage plan = subscriptionPlans[_planId];\n        require(plan.status != PlanStatus.Disabled, \"!disabled\");\n\n        plan.status = PlanStatus.Disabled;\n\n        emit SubscriptionPlanDisabled(plan.provider, _planId, plan.planCode);\n    }\n\n    function enableSubscriptionPlan(\n        bytes32 _planId\n    ) external override onlyProvider(_planId) {\n        Plan storage plan = subscriptionPlans[_planId];\n        require(plan.status != PlanStatus.Enabled, \"!enabled\");\n\n        plan.status = PlanStatus.Enabled;\n\n        emit SubscriptionPlanEnabled(plan.provider, _planId, plan.planCode);\n    }\n\n    function verifyDiscount(\n        bytes32 _planId,\n        bytes32 _discountProof\n    ) external override view returns(bytes32) {\n        bytes32 discountHash = keccak256(abi.encodePacked(_discountProof));\n        Discount memory discount = discounts[_planId][discountHash];\n        if (discount.percent > 0 && discount.expiresAt < uint32(block.timestamp)) {\n            return discountHash;\n        }\n        return 0; // no discount\n    }\n\n    function getSubscriptionPlans(\n        address _provider\n    ) external override view returns(bytes32[] memory) {\n        return providerSubscriptionPlans[_provider];\n    }\n\n    function getSubscriptionPlan(\n        bytes32 _planId\n    ) external override view returns(Plan memory) {\n        return subscriptionPlans[_planId];\n    }\n\n    function getSubscriptionPlanDiscount(\n        bytes32 _planId,\n        bytes32 _discountId\n    ) external override view returns(Discount memory) {\n        return discounts[_planId][_discountId];\n    }\n\n    function getSubscriptionPlanDiscounts(\n        bytes32 _planId\n    ) external override view returns(bytes32[] memory) {\n        return subscriptionPlanDiscounts[_planId];\n    }\n\n}"
    },
    "contracts/mocks/MockVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/ICaskVault.sol\";\n\ncontract MockVault is ICaskVault {\n\n    address baseAsset;\n\n    constructor(address _baseAsset) {\n        baseAsset = _baseAsset;\n    }\n\n    function getBaseAsset() external override view returns (address) {\n        return baseAsset;\n    }\n\n    function getAllAssets() external override view returns (address[] memory) {\n        return new address[](0);\n    }\n\n    function getAsset(address _asset) external override view returns (Asset memory) {\n        return Asset({\n            priceFeed: address(0),\n            slippageBps: 0,\n            depositLimit: 0,\n            allowed: true,\n            assetDecimals: 18,\n            priceFeedDecimals: 18\n        });\n    }\n\n    function payment(address _from, address _to, uint256 _amount, uint256 _fee) external override {\n    }\n\n    function deposit(address _asset, uint256 _amount) external override {\n    }\n\n    function withdraw(address _recipient, address _asset, uint256 _amount) external override {\n\n    }\n\n    function totalSupply() external override view returns(uint256) {\n        return 0;\n    }\n\n    function balanceOf(address _address) external override view returns(uint256) {\n        return 0;\n    }\n\n    function currentValueOf(address _address) external override view returns (uint256) {\n        return 0;\n    }\n\n    function supportsAsset(address _asset) external override view returns (bool) {\n        return true;\n    }\n\n    function totalValue() external override view returns(uint256) {\n        return 0;\n    }\n\n    function totalAssetBalance(address _asset) external override view returns(uint256) {\n        return 0;\n    }\n\n    function allocateToStrategy(address _strategy, address _asset, uint256 _amount) external override {\n\n    }\n\n\n}"
    },
    "contracts/dao/CaskVestedEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/*\nUpdated Convex VestedEscrow\nfound at https://github.com/convex-eth/platform/blob/main/contracts/contracts/VestedEscrow.sol\n\nChanges:\n- update to solidity 0.8\n- added back disable feature\n- remove staking\n- implement per address vesting start time\n- implemented cliff\n*/\n\nimport \"../utils/MathUtil.sol\";\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n\ncontract CaskVestedEscrow is ReentrancyGuard{\n    using SafeERC20 for IERC20;\n\n    IERC20 public rewardToken;\n    address public admin;\n    address public fundAdmin;\n\n    uint256 public startAfter;\n    uint256 public duration;\n\n    uint256 public initialLockedSupply;\n    uint256 public unallocatedSupply;\n\n    mapping(address => uint256) public startedAt;\n    mapping(address => uint256) public cliffAt;\n    mapping(address => uint256) public initialLocked;\n    mapping(address => uint256) public totalClaimed;\n\n    bool public canDisable;\n    mapping(address => uint256) public disabledAt;\n\n    address[] public members;\n\n    event Fund(address indexed recipient, uint256 reward);\n    event Claim(address indexed user, uint256 amount);\n    event ToggleDisable(address recipient, bool disabled);\n\n    constructor(\n        address rewardToken_,\n        uint256 startafter_,\n        uint256 duration_,\n        bool canDisable_,\n        address fundAdmin_\n    ) public {\n        require(startafter_ >= block.timestamp,\"start must be future\");\n        require(duration_ > 0,\"duration must be greater\");\n\n        rewardToken = IERC20(rewardToken_);\n        startAfter = startafter_;\n        duration = duration_;\n        canDisable = canDisable_;\n        admin = msg.sender;\n        fundAdmin = fundAdmin_;\n    }\n\n    function setAdmin(address _admin) external {\n        require(msg.sender == admin, \"!auth\");\n        admin = _admin;\n    }\n\n    function setFundAdmin(address _fundadmin) external {\n        require(msg.sender == admin, \"!auth\");\n        fundAdmin = _fundadmin;\n    }\n\n    function addTokens(uint256 _amount) external returns(bool){\n        require(msg.sender == admin, \"!auth\");\n\n        rewardToken.safeTransferFrom(msg.sender, address(this), _amount);\n        unallocatedSupply = unallocatedSupply + _amount;\n        return true;\n    }\n\n    function fund(\n        uint256 _startAt,\n        uint256 _cliffDuration,\n        address[] calldata _recipient,\n        uint256[] calldata _amount\n    ) external nonReentrant returns(bool){\n        return _fund(_startAt, _cliffDuration, _recipient, _amount);\n    }\n\n    function fund(\n        uint256 _startAt,\n        address[] calldata _recipient,\n        uint256[] calldata _amount\n    ) external nonReentrant returns(bool){\n        return _fund(_startAt, 0, _recipient, _amount);\n    }\n\n    function fund(\n        address[] calldata _recipient,\n        uint256[] calldata _amount\n    ) external nonReentrant returns(bool){\n        return _fund(startAfter, 0, _recipient, _amount);\n    }\n\n    function _fund(\n        uint256 _startAt,\n        uint256 _cliffDuration,\n        address[] calldata _recipient,\n        uint256[] calldata _amount\n    ) internal returns(bool){\n        require(msg.sender == fundAdmin || msg.sender == admin, \"!auth\");\n\n        // startAt for this new batch is not allowed to start\n        // before the global escrow startAfter date\n        uint256 startAt = _startAt;\n        if (startAt < startAfter) {\n            startAt = startAfter;\n        }\n\n        uint256 totalAmount = 0;\n        for(uint256 i = 0; i < _recipient.length; i++){\n            uint256 amount = _amount[i];\n            // can only set startedAt and cliffDuration on first funding\n            if (startedAt[_recipient[i]] == 0){\n                members.push(_recipient[i]);\n                startedAt[_recipient[i]] = startAt;\n                cliffAt[_recipient[i]] = startAt + _cliffDuration;\n            }\n            initialLocked[_recipient[i]] = initialLocked[_recipient[i]] + amount;\n            totalAmount = totalAmount + amount;\n            emit Fund(_recipient[i],amount);\n        }\n\n        require(totalAmount <= unallocatedSupply, \"!balance\");\n\n        initialLockedSupply = initialLockedSupply + totalAmount;\n        unallocatedSupply = unallocatedSupply - totalAmount;\n        return true;\n    }\n\n    function toggle_disable(address _recipient) external {\n        require(msg.sender == admin, \"!auth\");\n        require(canDisable, \"!canDisable\");\n\n        bool isEnabled = disabledAt[_recipient] == 0;\n        if (isEnabled) {\n            disabledAt[_recipient] = block.timestamp;\n        } else {\n            disabledAt[_recipient] = 0;\n        }\n\n        emit ToggleDisable(_recipient, isEnabled);\n    }\n\n    function disableCanDisable() external {\n        require(msg.sender == admin, \"!auth\");\n        canDisable = false;\n    }\n\n    function _totalVestedOf(address _recipient) internal view returns(uint256){\n        uint256 startTime = startedAt[_recipient];\n        uint256 endTime = disabledAt[_recipient];\n        if (endTime == 0) {\n            endTime = block.timestamp;\n        }\n        if(endTime < startTime){ // not started yet\n            return 0;\n        }\n        if (cliffAt[_recipient] > endTime){ // cliff end not happened yet\n            return 0;\n        }\n        uint256 locked = initialLocked[_recipient];\n        uint256 elapsed = endTime - startTime;\n        uint256 total = MathUtil.min(locked * elapsed / duration, locked );\n        return total;\n    }\n\n    function _totalVested() internal view returns(uint256){\n        if(block.timestamp < startAfter){\n            return 0;\n        }\n        uint256 total = 0;\n        for (uint256 i = 0; i < members.length; i++) {\n            total = total + _totalVestedOf(members[i]);\n        }\n        return total;\n    }\n\n    function vestedSupply() external view returns(uint256){\n        return _totalVested();\n    }\n\n    function lockedSupply() external view returns(uint256){\n        return initialLockedSupply - _totalVested();\n    }\n\n    function vestedOf(address _recipient) external view returns(uint256){\n        return _totalVestedOf(_recipient);\n    }\n\n    function balanceOf(address _recipient) external view returns(uint256){\n        return _totalVestedOf(_recipient) - totalClaimed[_recipient];\n    }\n\n    function lockedOf(address _recipient) external view returns(uint256){\n        return initialLocked[_recipient] - _totalVestedOf(_recipient);\n    }\n\n    function claim(address _recipient) public nonReentrant{\n        uint256 vested = _totalVestedOf(_recipient);\n        uint256 claimable = vested - totalClaimed[_recipient];\n\n        totalClaimed[_recipient] = totalClaimed[_recipient] + claimable;\n        rewardToken.safeTransfer(_recipient, claimable);\n\n        emit Claim(msg.sender, claimable);\n    }\n\n    function claim() external{\n        claim(msg.sender);\n    }\n\n}"
    },
    "contracts/utils/MathUtil.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUtil {\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/mocks/MockChainlinkOracleFeed.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract MockChainlinkOracleFeed is AggregatorV3Interface {\n    int256 price;\n    uint8 numDecimals;\n\n    constructor(int256 _price, uint8 _decimals) {\n        price = _price;\n        numDecimals = _decimals;\n    }\n\n    function decimals() external view override returns (uint8) {\n        return numDecimals;\n    }\n\n    function description() external pure override returns (string memory) {\n        return \"MockOracleEthFeed\";\n    }\n\n    function version() external pure override returns (uint256) {\n        return 1;\n    }\n\n    function setPrice(int256 _price) public {\n        price = _price;\n    }\n\n    function setDecimals(uint8 _decimals) public {\n        numDecimals = _decimals;\n    }\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n    external\n    view\n    override\n    returns (\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    )\n    {\n        roundId = _roundId;\n        answer = price;\n        startedAt = 0;\n        updatedAt = 0;\n        answeredInRound = 0;\n    }\n\n    function latestRoundData()\n    external\n    view\n    override\n    returns (\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    )\n    {\n        roundId = 0;\n        answer = price;\n        startedAt = 0;\n        updatedAt = 0;\n        answeredInRound = 0;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}