{
  "address": "0x27FDa4a5eF22e479097768Fa0a3D33BbD6165012",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "PlanDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eolAt",
          "type": "uint32"
        }
      ],
      "name": "PlanEOL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "PlanEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_planPeriod",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_subscriptionCreatedAt",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_discountId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_discountData",
          "type": "bytes32"
        }
      ],
      "name": "consumeDiscount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "disablePlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "enablePlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "getPlanEOL",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "getPlanStatus",
      "outputs": [
        {
          "internalType": "enum ICaskSubscriptionPlans.PlanStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "getProviderProfile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "paymentAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            }
          ],
          "internalType": "struct ICaskSubscriptionPlans.Provider",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_eolAt",
          "type": "uint32"
        }
      ],
      "name": "killPlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subscriptionManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        }
      ],
      "name": "setProviderProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_discountId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_discountData",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyDiscount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_planData",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyPlan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb51c00b66cb6c596c63967e61f4fe23417858a208d2f1a92f6378c1754d6bf07",
  "receipt": {
    "to": null,
    "from": "0x83e50cD4123bAA60f6d6c8A83ca85Ac72e826bD0",
    "contractAddress": "0x27FDa4a5eF22e479097768Fa0a3D33BbD6165012",
    "transactionIndex": 1,
    "gasUsed": "1574511",
    "logsBloom": "0x
    "blockHash": "0xad91d3e1088ac43ff3d590696701debd75dba8bda11536997d4599b83b16c6a6",
    "transactionHash": "0xb51c00b66cb6c596c63967e61f4fe23417858a208d2f1a92f6378c1754d6bf07",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 24980306,
        "transactionHash": "0xb51c00b66cb6c596c63967e61f4fe23417858a208d2f1a92f6378c1754d6bf07",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000083e50cd4123baa60f6d6c8a83ca85ac72e826bd0",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002cc013460c7c880000000000000000000000000000000000000000000000000d42909ad7df488b0000000000000000000000000000000000000000000006fc4d93baba68f168190000000000000000000000000000000000000000000000000d15d08791d2cc030000000000000000000000000000000000000000000006fc4dc07acdaefde4a1",
        "logIndex": 1,
        "blockHash": "0xad91d3e1088ac43ff3d590696701debd75dba8bda11536997d4599b83b16c6a6"
      }
    ],
    "blockNumber": 24980306,
    "cumulativeGasUsed": "1837088",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4d49416dce2f6b5170ba81e669bb2887",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"PlanDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eolAt\",\"type\":\"uint32\"}],\"name\":\"PlanEOL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"PlanEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_planPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_subscriptionCreatedAt\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_discountId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_discountData\",\"type\":\"bytes32\"}],\"name\":\"consumeDiscount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"disablePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"enablePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"getPlanEOL\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"getPlanStatus\",\"outputs\":[{\"internalType\":\"enum ICaskSubscriptionPlans.PlanStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"internalType\":\"struct ICaskSubscriptionPlans.Provider\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_eolAt\",\"type\":\"uint32\"}],\"name\":\"killPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriptionManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"setProviderProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_discountId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_discountData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyDiscount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_planData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyPlan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"discountUses\":{\"details\":\"Maps for discounts. \"},\"planStatus\":{\"details\":\"Map for current plan status. \"},\"providerProfiles\":{\"details\":\"Map for provider to profile info. \"},\"subscriptionManager\":{\"details\":\"Address of subscription manager. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/CaskSubscriptionPlans.sol\":\"CaskSubscriptionPlans\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    function trustedForwarder() public virtual view returns (address){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce3168b37fc87ec34a18b56b4b16a06432119c07fd2e1d864b871dcf40372ebe\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0x199e82e0a2833a97213b5c16ac9b4e2b1814f2e90a4c4916855cbc21e710ad5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskSubscriptionPlans.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskSubscriptionPlans {\\n\\n    enum PlanStatus {\\n        Enabled,\\n        Disabled,\\n        EndOfLife\\n    }\\n\\n    struct Discount {\\n        uint256 value;\\n        uint32 validAfter;\\n        uint32 expiresAt;\\n        uint32 maxUses;\\n        uint32 planId;\\n        uint16 applyPeriods;\\n        bool isFixed;\\n    }\\n\\n    struct Provider {\\n        address paymentAddress;\\n        string cid;\\n    }\\n\\n    function setProviderProfile(address _paymentAddress, string calldata _cid) external;\\n\\n    function getProviderProfile(address _provider) external view returns(Provider memory);\\n\\n    function consumeDiscount(address _provider, uint32 _planId, uint32 _planPeriod, uint32 _subscriptionCreatedAt,\\n        bytes32 _discountId, bytes32 _discountData) external returns(bool);\\n\\n    function getPlanStatus(address _provider, uint32 _planId) external view returns (PlanStatus);\\n\\n    function getPlanEOL(address _provider, uint32 _planId) external view returns (uint32);\\n\\n    function disablePlan(uint32 _planId) external;\\n\\n    function enablePlan(uint32 _planId) external;\\n\\n    function killPlan(uint32 _planId, uint32 _eolAt) external;\\n\\n    function verifyPlan(bytes32 _planData, bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof) external view returns(bool);\\n\\n    function verifyDiscount(address _provider, uint32 _planId, bytes32 _discountId, bytes32 _discountData,\\n        bytes32 _merkleRoot, bytes32[] calldata _merkleProof) external view returns(bool);\\n\\n\\n    /** @dev Emitted when `provider` disables a subscription plan */\\n    event PlanDisabled(address indexed provider, uint32 indexed planId);\\n\\n    /** @dev Emitted when `provider` enables a subscription plan */\\n    event PlanEnabled(address indexed provider, uint32 indexed planId);\\n\\n    /** @dev Emitted when `provider` end-of-lifes a subscription plan */\\n    event PlanEOL(address indexed provider, uint32 indexed planId, uint32 eolAt);\\n\\n}\",\"keccak256\":\"0x7d3469dbaf33f3be8ea5551a66452acd7adfaf89d7ff3ae5b46db21826de27aa\",\"license\":\"MIT\"},\"contracts/protocol/CaskSubscriptionPlans.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nimport \\\"@opengsn/contracts/src/BaseRelayRecipient.sol\\\";\\n\\n\\nimport \\\"../interfaces/ICaskSubscriptionPlans.sol\\\";\\n\\ncontract CaskSubscriptionPlans is\\nICaskSubscriptionPlans,\\nBaseRelayRecipient,\\nOwnableUpgradeable,\\nPausableUpgradeable\\n{\\n    /** @dev Address of subscription manager. */\\n    address public subscriptionManager;\\n\\n    /** @dev Map for provider to profile info. */\\n    mapping(address => Provider) internal providerProfiles;\\n\\n    /** @dev Map for current plan status. */\\n    // provider->planId => Plan\\n    mapping(address => mapping(uint32 => PlanStatus)) internal planStatus;\\n    mapping(address => mapping(uint32 => uint32)) internal planEol;\\n\\n    /** @dev Maps for discounts. */\\n    mapping(address => mapping(uint32 => mapping(bytes32 => uint256))) internal discountUses;\\n\\n    modifier onlyManager() {\\n        require(_msgSender() == subscriptionManager, \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    string public override versionRecipient = \\\"2.2.0\\\";\\n\\n    function _msgSender() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (address sender) {\\n        sender = BaseRelayRecipient._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (bytes memory) {\\n        return BaseRelayRecipient._msgData();\\n    }\\n\\n\\n    function setProviderProfile(\\n        address _paymentAddress,\\n        string calldata _cid\\n    ) external override {\\n        Provider storage profile = providerProfiles[_msgSender()];\\n        profile.paymentAddress = _paymentAddress;\\n        profile.cid = _cid;\\n    }\\n\\n    function getProviderProfile(\\n        address _provider\\n    ) external override view returns(Provider memory) {\\n        return providerProfiles[_provider];\\n    }\\n\\n    function verifyPlan(\\n        bytes32 _planData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof\\n    ) external override pure returns(bool) {\\n        return MerkleProof.verify(_merkleProof, _merkleRoot, keccak256(abi.encode(_planData)));\\n    }\\n\\n    function verifyDiscount(\\n        address _provider,\\n        uint32 _planId,\\n        bytes32 _discountId,\\n        bytes32 _discountData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof\\n    ) external override view returns(bool) {\\n        if (MerkleProof.verify(_merkleProof, _merkleRoot,\\n            keccak256(abi.encode(_discountId, _discountData))))\\n        {\\n            Discount memory discountInfo = _parseDiscountData(_discountData);\\n            require(discountInfo.planId == 0 || discountInfo.planId == _planId, \\\"!INVALID(planId)\\\");\\n\\n            return ( (discountInfo.maxUses == 0 ||\\n                     discountUses[_provider][discountInfo.planId][_discountId] < discountInfo.maxUses) &&\\n                     (discountInfo.validAfter == 0 || discountInfo.validAfter >= uint32(block.timestamp)) &&\\n                     (discountInfo.expiresAt == 0 || discountInfo.expiresAt < uint32(block.timestamp)) );\\n        }\\n\\n        return false;\\n    }\\n\\n    function consumeDiscount(\\n        address _provider,\\n        uint32 _planId,\\n        uint32 _planPeriod,\\n        uint32 _subscriptionCreatedAt,\\n        bytes32 _discountId,\\n        bytes32 _discountData\\n    ) external override onlyManager returns(bool) {\\n        Discount memory discountInfo = _parseDiscountData(_discountData);\\n\\n        require(discountInfo.maxUses == 0 ||\\n            discountUses[_provider][_planId][_discountId] < discountInfo.maxUses, \\\"!DISCOUNT_MAX_USES\\\");\\n        require(discountInfo.validAfter == 0 ||\\n            discountInfo.validAfter >= uint32(block.timestamp), \\\"!DISCOUNT_NOT_VALID_YET\\\");\\n        require(discountInfo.applyPeriods == 0 || _subscriptionCreatedAt +\\n                    (_planPeriod * discountInfo.applyPeriods) < uint32(block.timestamp), \\\"!DISCOUNT_EXHAUSTED\\\");\\n\\n        discountUses[_provider][_planId][_discountId] += 1;\\n\\n        return discountInfo.maxUses == 0 || discountUses[_provider][_planId][_discountId] < discountInfo.maxUses;\\n    }\\n\\n    function getPlanStatus(\\n        address _provider,\\n        uint32 _planId\\n    ) external view returns (PlanStatus) {\\n        return planStatus[_provider][_planId];\\n    }\\n\\n    function getPlanEOL(\\n        address _provider,\\n        uint32 _planId\\n    ) external view returns (uint32) {\\n        return planEol[_provider][_planId];\\n    }\\n\\n    function disablePlan(\\n        uint32 _planId\\n    ) external override {\\n        require(planStatus[_msgSender()][_planId] == PlanStatus.Enabled, \\\"!NOT_ENABLED\\\");\\n\\n        planStatus[_msgSender()][_planId] = PlanStatus.Disabled;\\n\\n        emit PlanDisabled(_msgSender(), _planId);\\n    }\\n\\n    function enablePlan(\\n        uint32 _planId\\n    ) external override {\\n        require(planStatus[_msgSender()][_planId] == PlanStatus.Disabled, \\\"!NOT_DISABLED\\\");\\n\\n        planStatus[_msgSender()][_planId] = PlanStatus.Enabled;\\n\\n        emit PlanEnabled(_msgSender(), _planId);\\n    }\\n\\n    function killPlan(\\n        uint32 _planId,\\n        uint32 _eolAt\\n    ) external override {\\n        planStatus[_msgSender()][_planId] = PlanStatus.EndOfLife;\\n        planEol[_msgSender()][_planId] = _eolAt;\\n\\n        emit PlanEOL(_msgSender(), _planId, _eolAt);\\n    }\\n\\n    /************************** ADMIN FUNCTIONS **************************/\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setManager(\\n        address _subscriptionManager\\n    ) external onlyOwner {\\n        subscriptionManager = _subscriptionManager;\\n    }\\n\\n    function setTrustedForwarder(\\n        address _forwarder\\n    ) external onlyOwner {\\n        _setTrustedForwarder(_forwarder);\\n    }\\n\\n\\n    function _parseDiscountData(\\n        bytes32 _discountData\\n    ) internal pure returns(Discount memory) {\\n        bytes2 options = bytes2(_discountData << 240);\\n        return Discount({\\n            value: uint256(_discountData >> 160),\\n            validAfter: uint32(bytes4(_discountData << 96)),\\n            expiresAt: uint32(bytes4(_discountData << 128)),\\n            maxUses: uint32(bytes4(_discountData << 160)),\\n            planId: uint32(bytes4(_discountData << 192)),\\n            applyPeriods: uint16(bytes2(_discountData << 224)),\\n            isFixed: options & 0x0001 == 0x0001\\n        });\\n    }\\n\\n}\",\"keccak256\":\"0xf35c2bbc3810fb5d5b806ecda6520ab7b0642eba787eac6065cef16d13fc9be5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c806372212e76116100c3578063b6ab359f1161007c578063b6ab359f146102e7578063bf158fd214610335578063d0ebdbe714610348578063da7422281461035b578063f2fde38b1461036e578063fdfca0d31461038157600080fd5b806372212e761461027b5780637da0a8771461028e5780638129fc1c146102b35780638456cb59146102bb5780638da5cb5b146102c35780639c5c3eb4146102d457600080fd5b8063486ff0cd11610115578063486ff0cd146101fb578063551d937f14610210578063572b6c05146102335780635c975abb14610255578063715018a61461026057806371ce3e661461026857600080fd5b8063025b6875146101525780631bc569b5146101ab578063256c6ba9146101c05780633c17dac8146101d35780633f4ba83a146101f3575b600080fd5b610191610160366004611580565b6001600160a01b03919091166000908152609a6020908152604080832063ffffffff94851684529091529020541690565b60405163ffffffff90911681526020015b60405180910390f35b6101be6101b93660046115b3565b610394565b005b6101be6101ce3660046115b3565b6104c4565b6101e66101e13660046115d5565b6105f0565b6040516101a2919061163d565b6101be6106cc565b61020361071f565b6040516101a29190611672565b61022361021e366004611685565b6107ad565b60405190151581526020016101a2565b6102236102413660046115d5565b6000546001600160a01b0391821691161490565b60655460ff16610223565b6101be610a37565b610223610276366004611737565b610a8a565b61022361028936600461178a565b610af6565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016101a2565b6101be610c8a565b6101be610d66565b6033546001600160a01b031661029b565b6101be6102e236600461180c565b610db7565b6103286102f5366004611580565b6001600160a01b038216600090815260996020908152604080832063ffffffff8516845290915290205460ff1692915050565b6040516101a2919061183e565b60975461029b906001600160a01b031681565b6101be6103563660046115d5565b610eb2565b6101be6103693660046115d5565b610f1d565b6101be61037c3660046115d5565b610f84565b6101be61038f366004611866565b61103b565b6000609960006103a2611096565b6001600160a01b031681526020808201929092526040908101600090812063ffffffff8616825290925290205460ff1660028111156103e3576103e3611828565b146104245760405162461bcd60e51b815260206004820152600c60248201526b085393d517d153905093115160a21b60448201526064015b60405180910390fd5b600160996000610432611096565b6001600160a01b031681526020808201929092526040908101600090812063ffffffff861682529092529020805460ff1916600183600281111561047857610478611828565b02179055508063ffffffff1661048c611096565b6001600160a01b03167f50ec551c598cd517a78f91d12398f4f1d95e0171a4393505d01401f8b6c940a760405160405180910390a350565b6001609960006104d2611096565b6001600160a01b031681526020808201929092526040908101600090812063ffffffff8616825290925290205460ff16600281111561051357610513611828565b146105505760405162461bcd60e51b815260206004820152600d60248201526c085393d517d11254d050931151609a1b604482015260640161041b565b60006099600061055e611096565b6001600160a01b031681526020808201929092526040908101600090812063ffffffff861682529092529020805460ff191660018360028111156105a4576105a4611828565b02179055508063ffffffff166105b8611096565b6001600160a01b03167fb6af1d2951898e17e763c18b77daf0ada2f2753802d37868e67797e87991a29860405160405180910390a350565b604080518082018252600080825260606020808401919091526001600160a01b038581168352609882529184902084518086019095528054909216845260018201805493949391840191610643906118e9565b80601f016020809104026020016040519081016040528092919081815260200182805461066f906118e9565b80156106bc5780601f10610691576101008083540402835291602001916106bc565b820191906000526020600020905b81548152906001019060200180831161069f57829003601f168201915b5050505050815250509050919050565b6106d4611096565b6001600160a01b03166106ef6033546001600160a01b031690565b6001600160a01b0316146107155760405162461bcd60e51b815260040161041b90611924565b61071d6110a5565b565b609c805461072c906118e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610758906118e9565b80156107a55780601f1061077a576101008083540402835291602001916107a5565b820191906000526020600020905b81548152906001019060200180831161078857829003601f168201915b505050505081565b6097546000906001600160a01b03166107c4611096565b6001600160a01b0316146108025760405162461bcd60e51b815260206004820152600560248201526404282aaa8960db1b604482015260640161041b565b600061080d8361113e565b9050806060015163ffffffff1660001480610861575060608101516001600160a01b0389166000908152609b6020908152604080832063ffffffff8c81168552908352818420898552909252909120549116115b6108a25760405162461bcd60e51b815260206004820152601260248201527121444953434f554e545f4d41585f5553455360701b604482015260640161041b565b602081015163ffffffff1615806108c957504263ffffffff16816020015163ffffffff1610155b6109155760405162461bcd60e51b815260206004820152601760248201527f21444953434f554e545f4e4f545f56414c49445f594554000000000000000000604482015260640161041b565b60a081015161ffff16158061095257504263ffffffff168160a0015161ffff1687610940919061196f565b61094a908761199b565b63ffffffff16105b6109945760405162461bcd60e51b815260206004820152601360248201527208511254d0d3d5539517d15612105554d51151606a1b604482015260640161041b565b6001600160a01b0388166000908152609b6020908152604080832063ffffffff8b168452825280832087845290915281208054600192906109d69084906119c3565b9091555050606081015163ffffffff161580610a2b575060608101516001600160a01b0389166000908152609b6020908152604080832063ffffffff8c81168552908352818420898552909252909120549116115b98975050505050505050565b610a3f611096565b6001600160a01b0316610a5a6033546001600160a01b031690565b6001600160a01b031614610a805760405162461bcd60e51b815260040161041b90611924565b61071d60006111ea565b6000610aed8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602081018b90528993500190505b6040516020818303038152906040528051906020012061123c565b95945050505050565b6000610b4a8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602081018c90529081018a90528892506060019050610ad2565b15610c7b576000610b5a8661113e565b9050806080015163ffffffff1660001480610b8457508763ffffffff16816080015163ffffffff16145b610bc35760405162461bcd60e51b815260206004820152601060248201526f21494e56414c494428706c616e49642960801b604482015260640161041b565b606081015163ffffffff161580610c18575060608101516001600160a01b038a166000908152609b60209081526040808320608086015163ffffffff90811685529083528184208c8552909252909120549116115b8015610c465750602081015163ffffffff161580610c4657504263ffffffff16816020015163ffffffff1610155b8015610c735750604081015163ffffffff161580610c7357504263ffffffff16816040015163ffffffff16105b915050610c7f565b5060005b979650505050505050565b600054600160a81b900460ff16610cae57600054600160a01b900460ff1615610cb2565b303b155b610d155760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161041b565b600054600160a81b900460ff16158015610d3f576000805461ffff60a01b191661010160a01b1790555b610d47611252565b610d4f61128b565b8015610d63576000805460ff60a81b191690555b50565b610d6e611096565b6001600160a01b0316610d896033546001600160a01b031690565b6001600160a01b031614610daf5760405162461bcd60e51b815260040161041b90611924565b61071d6112c4565b600260996000610dc5611096565b6001600160a01b031681526020808201929092526040908101600090812063ffffffff871682529092529020805460ff19166001836002811115610e0b57610e0b611828565b021790555080609a6000610e1d611096565b6001600160a01b031681526020808201929092526040908101600090812063ffffffff87811680845291909452919020805463ffffffff191693909216929092179055610e68611096565b60405163ffffffff841681526001600160a01b0391909116907f4594a2f1d5b5d27b7b29f7c73ec2f5f23b7a97269ec277e84619bcfffe9c13dc9060200160405180910390a35050565b610eba611096565b6001600160a01b0316610ed56033546001600160a01b031690565b6001600160a01b031614610efb5760405162461bcd60e51b815260040161041b90611924565b609780546001600160a01b0319166001600160a01b0392909216919091179055565b610f25611096565b6001600160a01b0316610f406033546001600160a01b031690565b6001600160a01b031614610f665760405162461bcd60e51b815260040161041b90611924565b600080546001600160a01b0319166001600160a01b03831617905550565b610f8c611096565b6001600160a01b0316610fa76033546001600160a01b031690565b6001600160a01b031614610fcd5760405162461bcd60e51b815260040161041b90611924565b6001600160a01b0381166110325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161041b565b610d63816111ea565b600060986000611049611096565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b03191691861691909117815590506110896001820184846114b7565b5050505050565b3b151590565b60006110a0611340565b905090565b60655460ff166110ee5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161041b565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611121611096565b6040516001600160a01b03909116815260200160405180910390a1565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e08101825260a083811c825263ffffffff608085811c8216602080860191909152606087811c8416868801529587901c8316958501959095529385901c169282019290925261ffff601084901c1691810191909152600160f01b60f09290921b821690911460c082015290565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000826112498584611374565b14949350505050565b600054600160a81b900460ff1661127b5760405162461bcd60e51b815260040161041b906119db565b611283611420565b61071d611449565b600054600160a81b900460ff166112b45760405162461bcd60e51b815260040161041b906119db565b6112bc611420565b61071d611482565b60655460ff161561130a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161041b565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611121611096565b60006014361080159061135d57506000546001600160a01b031633145b1561136f575060131936013560601c90565b503390565b600081815b845181101561141857600085828151811061139657611396611a26565b602002602001015190508083116113d8576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250611405565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061141081611a3c565b915050611379565b509392505050565b600054600160a81b900460ff1661071d5760405162461bcd60e51b815260040161041b906119db565b600054600160a81b900460ff166114725760405162461bcd60e51b815260040161041b906119db565b61071d61147d611096565b6111ea565b600054600160a81b900460ff166114ab5760405162461bcd60e51b815260040161041b906119db565b6065805460ff19169055565b8280546114c3906118e9565b90600052602060002090601f0160209004810192826114e5576000855561152b565b82601f106114fe5782800160ff1982351617855561152b565b8280016001018555821561152b579182015b8281111561152b578235825591602001919060010190611510565b5061153792915061153b565b5090565b5b80821115611537576000815560010161153c565b80356001600160a01b038116811461156757600080fd5b919050565b803563ffffffff8116811461156757600080fd5b6000806040838503121561159357600080fd5b61159c83611550565b91506115aa6020840161156c565b90509250929050565b6000602082840312156115c557600080fd5b6115ce8261156c565b9392505050565b6000602082840312156115e757600080fd5b6115ce82611550565b6000815180845260005b81811015611616576020818501810151868301820152016115fa565b81811115611628576000602083870101525b50601f01601f19169290920160200192915050565b602080825282516001600160a01b03168282015282015160408083015260009061166a60608401826115f0565b949350505050565b6020815260006115ce60208301846115f0565b60008060008060008060c0878903121561169e57600080fd5b6116a787611550565b95506116b56020880161156c565b94506116c36040880161156c565b93506116d16060880161156c565b92506080870135915060a087013590509295509295509295565b60008083601f8401126116fd57600080fd5b50813567ffffffffffffffff81111561171557600080fd5b6020830191508360208260051b850101111561173057600080fd5b9250929050565b6000806000806060858703121561174d57600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561177257600080fd5b61177e878288016116eb565b95989497509550505050565b600080600080600080600060c0888a0312156117a557600080fd5b6117ae88611550565b96506117bc6020890161156c565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff8111156117ed57600080fd5b6117f98a828b016116eb565b989b979a50959850939692959293505050565b6000806040838503121561181f57600080fd5b61159c8361156c565b634e487b7160e01b600052602160045260246000fd5b602081016003831061186057634e487b7160e01b600052602160045260246000fd5b91905290565b60008060006040848603121561187b57600080fd5b61188484611550565b9250602084013567ffffffffffffffff808211156118a157600080fd5b818601915086601f8301126118b557600080fd5b8135818111156118c457600080fd5b8760208285010111156118d657600080fd5b6020830194508093505050509250925092565b600181811c908216806118fd57607f821691505b6020821081141561191e57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff8083168185168183048111821515161561199257611992611959565b02949350505050565b600063ffffffff8083168185168083038211156119ba576119ba611959565b01949350505050565b600082198211156119d6576119d6611959565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611a5057611a50611959565b506001019056fea264697066735822122061269413f62263a7e72d0ad1fef6929d55d5c637b45c6c7cdc6f74a7c39c99e364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "discountUses": {
        "details": "Maps for discounts. "
      },
      "planStatus": {
        "details": "Map for current plan status. "
      },
      "providerProfiles": {
        "details": "Map for provider to profile info. "
      },
      "subscriptionManager": {
        "details": "Address of subscription manager. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 72,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 918,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 921,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3142,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 796,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 910,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1006,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 1097,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11268,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "subscriptionManager",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 11274,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "providerProfiles",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_struct(Provider)8778_storage)"
      },
      {
        "astId": 11282,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "planStatus",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_enum(PlanStatus)8758))"
      },
      {
        "astId": 11288,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "planEol",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_uint32))"
      },
      {
        "astId": 11297,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "discountUses",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_bytes32,t_uint256)))"
      },
      {
        "astId": 11332,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "versionRecipient",
        "offset": 0,
        "slot": "156",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(PlanStatus)8758": {
        "encoding": "inplace",
        "label": "enum ICaskSubscriptionPlans.PlanStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_enum(PlanStatus)8758))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => enum ICaskSubscriptionPlans.PlanStatus))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_enum(PlanStatus)8758)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_bytes32,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => mapping(bytes32 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_mapping(t_bytes32,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_uint32))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => uint32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_uint32)"
      },
      "t_mapping(t_address,t_struct(Provider)8778_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICaskSubscriptionPlans.Provider)",
        "numberOfBytes": "32",
        "value": "t_struct(Provider)8778_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_enum(PlanStatus)8758)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => enum ICaskSubscriptionPlans.PlanStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(PlanStatus)8758"
      },
      "t_mapping(t_uint32,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Provider)8778_storage": {
        "encoding": "inplace",
        "label": "struct ICaskSubscriptionPlans.Provider",
        "members": [
          {
            "astId": 8775,
            "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
            "label": "paymentAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8777,
            "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
            "label": "cid",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}