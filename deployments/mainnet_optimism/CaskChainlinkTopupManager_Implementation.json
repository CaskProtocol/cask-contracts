{
  "address": "0x3e321356724A88fA1737ef589f3e4c269963200b",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jobsProcessed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "queueId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "queueRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "currentBucket",
          "type": "uint32"
        }
      ],
      "name": "QueueRunReport",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "RegistryAllowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        }
      ],
      "name": "RegistryDisallowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SetChainlinkAddresses",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeDistributor",
          "type": "address"
        }
      ],
      "name": "SetFeeDistributor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SetParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "queueId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "workUnit",
          "type": "bytes32"
        }
      ],
      "name": "WorkUnitProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "queueId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "workUnit",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "processAt",
          "type": "uint32"
        }
      ],
      "name": "WorkUnitQueued",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "allowRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedRegistries",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "caskChainlinkTopup",
      "outputs": [
        {
          "internalType": "contract ICaskChainlinkTopup",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "caskVault",
      "outputs": [
        {
          "internalType": "contract ICaskVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "disallowRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caskChainlinkTopup",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_caskVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeDistributor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkBridgeToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkFundingToken",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkSwapData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "linkSwapPath",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkSwapProtocol",
      "outputs": [
        {
          "internalType": "enum ICaskChainlinkTopupManager.SwapProtocol",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkSwapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPriceFeedAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxQueueAge",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSkips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSwapSlippageBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTopupsPerGroupRun",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pegswap",
      "outputs": [
        {
          "internalType": "contract IPegSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queueBucketSize",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_queueId",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "_bucket",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "queueItem",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_queueId",
          "type": "uint8"
        }
      ],
      "name": "queuePosition",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_queueId",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "_bucket",
          "type": "uint32"
        }
      ],
      "name": "queueSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dest",
          "type": "address"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_chainlinkTopupId",
          "type": "bytes32"
        }
      ],
      "name": "registerChainlinkTopup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "name": "registryAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_linkBridgeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkFundingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkSwapRouter",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_linkSwapPath",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_pegswap",
          "type": "address"
        },
        {
          "internalType": "enum ICaskChainlinkTopupManager.SwapProtocol",
          "name": "_linkSwapProtocol",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_linkSwapData",
          "type": "bytes"
        }
      ],
      "name": "setChainklinkAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDistributor",
          "type": "address"
        }
      ],
      "name": "setFeeDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_maxQueueAge",
          "type": "uint32"
        }
      ],
      "name": "setMaxQueueAge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSkips",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_topupFeeBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_topupFeeMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPriceFeedAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTopupsPerGroupRun",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSwapSlippageBps",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_queueBucketSize",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_maxQueueAge",
          "type": "uint32"
        }
      ],
      "name": "setParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_queueBucketSize",
          "type": "uint32"
        }
      ],
      "name": "setQueueBucketSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_queueId",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "_timestamp",
          "type": "uint32"
        }
      ],
      "name": "setQueuePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "topupFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "topupFeeMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x19eb745539de3c39a7f0a3f7e1d8dc829bd865eb43ea3bab59fe1aa9154e7485",
  "receipt": {
    "to": null,
    "from": "0x54812dBaB593674CD4F1216264895be48B55C5e3",
    "contractAddress": "0x3e321356724A88fA1737ef589f3e4c269963200b",
    "transactionIndex": 0,
    "gasUsed": "4330166",
    "logsBloom": "0x
    "blockHash": "0x8582d8dc8f475fad9548a6ba103c9efc2a813d9da6f67c0124c83b8a8946454e",
    "transactionHash": "0x19eb745539de3c39a7f0a3f7e1d8dc829bd865eb43ea3bab59fe1aa9154e7485",
    "logs": [],
    "blockNumber": 64505534,
    "cumulativeGasUsed": "4330166",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6f022096d1f3dc4cfe7a982abf34a86d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jobsProcessed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"queueId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"queueRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"currentBucket\",\"type\":\"uint32\"}],\"name\":\"QueueRunReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"RegistryAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"}],\"name\":\"RegistryDisallowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SetChainlinkAddresses\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeDistributor\",\"type\":\"address\"}],\"name\":\"SetFeeDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SetParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"queueId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"workUnit\",\"type\":\"bytes32\"}],\"name\":\"WorkUnitProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"queueId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"workUnit\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"processAt\",\"type\":\"uint32\"}],\"name\":\"WorkUnitQueued\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"allowRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedRegistries\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caskChainlinkTopup\",\"outputs\":[{\"internalType\":\"contract ICaskChainlinkTopup\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caskVault\",\"outputs\":[{\"internalType\":\"contract ICaskVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"disallowRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caskChainlinkTopup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_caskVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkBridgeToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkFundingToken\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkSwapData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"linkSwapPath\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkSwapProtocol\",\"outputs\":[{\"internalType\":\"enum ICaskChainlinkTopupManager.SwapProtocol\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkSwapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceFeedAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxQueueAge\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSkips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapSlippageBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTopupsPerGroupRun\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pegswap\",\"outputs\":[{\"internalType\":\"contract IPegSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queueBucketSize\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_queueId\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_bucket\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"queueItem\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_queueId\",\"type\":\"uint8\"}],\"name\":\"queuePosition\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_queueId\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_bucket\",\"type\":\"uint32\"}],\"name\":\"queueSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dest\",\"type\":\"address\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainlinkTopupId\",\"type\":\"bytes32\"}],\"name\":\"registerChainlinkTopup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"registryAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_linkBridgeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkFundingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkSwapRouter\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_linkSwapPath\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_pegswap\",\"type\":\"address\"},{\"internalType\":\"enum ICaskChainlinkTopupManager.SwapProtocol\",\"name\":\"_linkSwapProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_linkSwapData\",\"type\":\"bytes\"}],\"name\":\"setChainklinkAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maxQueueAge\",\"type\":\"uint32\"}],\"name\":\"setMaxQueueAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSkips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_topupFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_topupFeeMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPriceFeedAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTopupsPerGroupRun\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSwapSlippageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_queueBucketSize\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_maxQueueAge\",\"type\":\"uint32\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_queueBucketSize\",\"type\":\"uint32\"}],\"name\":\"setQueueBucketSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_queueId\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_timestamp\",\"type\":\"uint32\"}],\"name\":\"setQueuePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topupFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topupFeeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easilly be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"allowedRegistries\":{\"details\":\"map of registries address that are allowed \"},\"caskChainlinkTopup\":{\"details\":\"Pointer to CaskChainlinkTopup contract \"},\"caskVault\":{\"details\":\"vault to use for ChainlinkTopup funding. \"},\"feeDistributor\":{\"details\":\"Address to receive DCA fees. \"},\"maxPriceFeedAge\":{\"details\":\"max allowable age for price feed data. \"},\"maxSkips\":{\"details\":\"max number of failed ChainlinkTopup purchases before ChainlinkTopup is permanently canceled. \"},\"maxSwapSlippageBps\":{\"details\":\"max slippage allowed when buying LINK on the DEX for a topup. \"},\"maxTopupsPerGroupRun\":{\"details\":\"max number of topups to do per each run of a group. \"},\"topupFeeBps\":{\"details\":\"ChainlinkTopup transaction fee bps and min. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chainlink_topup/CaskChainlinkTopupManager.sol\":\"CaskChainlinkTopupManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easilly be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xc4a031d4b6e3fa6d40a09bfbf99d3fdd22bbe77ba97065bc790b4cab22adee85\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/chainlink_topup/CaskChainlinkTopupManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport \\\"../interfaces/IGMXRouter.sol\\\";\\nimport \\\"../interfaces/AutomationRegistryBaseInterface.sol\\\";\\nimport \\\"../interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"../interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"../interfaces/IPegSwap.sol\\\";\\n\\nimport \\\"../interfaces/ICaskVault.sol\\\";\\nimport \\\"../job_queue/CaskJobQueue.sol\\\";\\nimport \\\"./ICaskChainlinkTopupManager.sol\\\";\\nimport \\\"./ICaskChainlinkTopup.sol\\\";\\n\\n\\ncontract CaskChainlinkTopupManager is\\nInitializable,\\nReentrancyGuardUpgradeable,\\nCaskJobQueue,\\nICaskChainlinkTopupManager\\n{\\n    using SafeERC20 for IERC20Metadata;\\n\\n    uint8 private constant QUEUE_ID_KEEPER_TOPUP = 1;\\n\\n\\n    /** @dev map of registries address that are allowed */\\n    mapping(address => bool) public allowedRegistries;\\n\\n    /** @dev Pointer to CaskChainlinkTopup contract */\\n    ICaskChainlinkTopup public caskChainlinkTopup;\\n\\n    /** @dev vault to use for ChainlinkTopup funding. */\\n    ICaskVault public caskVault;\\n\\n    IERC20Metadata public linkBridgeToken;\\n    LinkTokenInterface public linkFundingToken;\\n    AggregatorV3Interface public linkPriceFeed;\\n    address[] public linkSwapPath;\\n    address public linkSwapRouter;\\n    IPegSwap public pegswap;\\n    SwapProtocol public linkSwapProtocol;\\n    bytes public linkSwapData;\\n\\n\\n    /************************** PARAMETERS **************************/\\n\\n    /** @dev max number of failed ChainlinkTopup purchases before ChainlinkTopup is permanently canceled. */\\n    uint256 public maxSkips;\\n\\n    /** @dev ChainlinkTopup transaction fee bps and min. */\\n    uint256 public topupFeeBps;\\n    uint256 public topupFeeMin;\\n\\n    /** @dev max allowable age for price feed data. */\\n    uint256 public maxPriceFeedAge;\\n\\n    /** @dev max number of topups to do per each run of a group. */\\n    uint256 public maxTopupsPerGroupRun;\\n\\n    /** @dev max slippage allowed when buying LINK on the DEX for a topup. */\\n    uint256 public maxSwapSlippageBps;\\n\\n    /** @dev Address to receive DCA fees. */\\n    address public feeDistributor;\\n\\n\\n    function initialize(\\n        address _caskChainlinkTopup,\\n        address _caskVault,\\n        address _feeDistributor\\n    ) public initializer {\\n        require(_caskChainlinkTopup != address(0), \\\"!INVALID(caskChainlinkTopup)\\\");\\n        require(_caskVault != address(0), \\\"!INVALID(caskVault)\\\");\\n        require(_feeDistributor != address(0), \\\"!INVALID(feeDistributor)\\\");\\n        caskChainlinkTopup = ICaskChainlinkTopup(_caskChainlinkTopup);\\n        caskVault = ICaskVault(_caskVault);\\n        feeDistributor = _feeDistributor;\\n\\n        maxSkips = 0;\\n        topupFeeBps = 0;\\n        topupFeeMin = 0;\\n        maxPriceFeedAge = 0;\\n        maxTopupsPerGroupRun = 1;\\n        maxSwapSlippageBps = 100;\\n\\n        __CaskJobQueue_init(12 hours);\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function registerChainlinkTopup(\\n        bytes32 _chainlinkTopupId\\n    ) override external nonReentrant whenNotPaused {\\n\\n        ICaskChainlinkTopup.ChainlinkTopup memory chainlinkTopup =\\n            caskChainlinkTopup.getChainlinkTopup(_chainlinkTopupId);\\n        require(chainlinkTopup.groupId > 0, \\\"!INVALID(groupId)\\\");\\n\\n        _processChainlinkTopup(_chainlinkTopupId);\\n\\n        ICaskChainlinkTopup.ChainlinkTopupGroup memory chainlinkTopupGroup =\\n            caskChainlinkTopup.getChainlinkTopupGroup(chainlinkTopup.groupId);\\n\\n        if (chainlinkTopupGroup.chainlinkTopups.length == 1) { // register only if new/reinitialized group\\n            scheduleWorkUnit(QUEUE_ID_KEEPER_TOPUP, bytes32(chainlinkTopup.groupId), uint32(block.timestamp));\\n        }\\n    }\\n\\n    function processWorkUnit(\\n        uint8 _queueId,\\n        bytes32 _chainlinkTopupGroupId\\n    ) override internal {\\n\\n        ICaskChainlinkTopup.ChainlinkTopupGroup memory chainlinkTopupGroup =\\n            caskChainlinkTopup.getChainlinkTopupGroup(uint256(_chainlinkTopupGroupId));\\n\\n        // empty group - stop processing\\n        if (chainlinkTopupGroup.chainlinkTopups.length == 0) {\\n            return;\\n        }\\n\\n        uint256 count = 0;\\n\\n        for (uint256 i = 0; i < chainlinkTopupGroup.chainlinkTopups.length && count < maxTopupsPerGroupRun; i++) {\\n            if (_processChainlinkTopup(chainlinkTopupGroup.chainlinkTopups[i])) {\\n                count += 1;\\n            }\\n        }\\n\\n        if (count >= chainlinkTopupGroup.chainlinkTopups.length || count < maxTopupsPerGroupRun) {\\n            scheduleWorkUnit(_queueId, _chainlinkTopupGroupId, uint32(block.timestamp));\\n        } else {\\n            // still more to do - schedule an immediate re-run\\n            requeueWorkUnit(_queueId, _chainlinkTopupGroupId);\\n        }\\n\\n    }\\n\\n    function registryAllowed(\\n        address _registry\\n    ) override external view returns(bool) {\\n        return allowedRegistries[_registry];\\n    }\\n\\n    function _processChainlinkTopup(\\n        bytes32 _chainlinkTopupId\\n    ) internal returns(bool) {\\n        ICaskChainlinkTopup.ChainlinkTopup memory chainlinkTopup =\\n            caskChainlinkTopup.getChainlinkTopup(_chainlinkTopupId);\\n\\n        if (chainlinkTopup.status != ICaskChainlinkTopup.ChainlinkTopupStatus.Active){\\n            return false;\\n        }\\n\\n        if (chainlinkTopup.retryAfter >= uint32(block.timestamp)) {\\n            return false;\\n        }\\n\\n        // topup target not active or registry not allowed\\n        if (!_topupValid(_chainlinkTopupId) ||\\n            (chainlinkTopup.topupType != ICaskChainlinkTopup.TopupType.Direct &&\\n                !allowedRegistries[chainlinkTopup.registry]))\\n        {\\n            caskChainlinkTopup.managerCommand(_chainlinkTopupId, ICaskChainlinkTopup.ManagerCommand.Cancel);\\n            return false;\\n        }\\n\\n        // balance is ok - check again next period\\n        if (_topupBalance(_chainlinkTopupId) >= chainlinkTopup.lowBalance) {\\n            return false;\\n        }\\n\\n        uint256 topupFee = (chainlinkTopup.topupAmount * topupFeeBps) / 10000;\\n        if (topupFee < topupFeeMin) {\\n            topupFee = topupFeeMin;\\n        }\\n\\n        uint256 buyQty = _performChainlinkTopup(_chainlinkTopupId, topupFee);\\n\\n        // did a topup happen successfully?\\n        if (buyQty > 0) {\\n            caskChainlinkTopup.managerProcessed(_chainlinkTopupId, chainlinkTopup.topupAmount, buyQty, topupFee);\\n        } else {\\n            if (maxSkips > 0 && chainlinkTopup.numSkips >= maxSkips) {\\n                caskChainlinkTopup.managerCommand(_chainlinkTopupId, ICaskChainlinkTopup.ManagerCommand.Pause);\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    function _performChainlinkTopup(\\n        bytes32 _chainlinkTopupId,\\n        uint256 _protocolFee\\n    ) internal returns(uint256) {\\n        require(linkSwapRouter != address(0), \\\"!NOT_CONFIGURED\\\");\\n\\n        ICaskChainlinkTopup.ChainlinkTopup memory chainlinkTopup =\\n            caskChainlinkTopup.getChainlinkTopup(_chainlinkTopupId);\\n\\n        uint256 beforeBalance = IERC20Metadata(linkSwapPath[0]).balanceOf(address(this));\\n\\n        // perform a 'payment' to this contract, fee is taken out manually after a successful swap\\n        try caskVault.protocolPayment(chainlinkTopup.user, address(this), chainlinkTopup.topupAmount, 0) {\\n            // noop\\n        } catch (bytes memory) {\\n            caskChainlinkTopup.managerSkipped(\\n                _chainlinkTopupId,\\n                uint32(block.timestamp) + queueBucketSize,\\n                ICaskChainlinkTopup.SkipReason.PaymentFailed\\n            );\\n            return 0;\\n        }\\n\\n        // then withdraw the MASH received above as input asset to fund swap\\n        uint256 withdrawShares = caskVault.sharesForValue(chainlinkTopup.topupAmount - _protocolFee);\\n        if (withdrawShares > caskVault.balanceOf(address(this))) {\\n            withdrawShares = caskVault.balanceOf(address(this));\\n        }\\n        caskVault.withdraw(linkSwapPath[0], withdrawShares);\\n\\n        // calculate actual amount of baseAsset that was received from payment/withdraw\\n        uint256 amountIn = IERC20Metadata(linkSwapPath[0]).balanceOf(address(this)) - beforeBalance;\\n        require(amountIn > 0, \\\"!INVALID(amountIn)\\\");\\n\\n        uint256 amountOutMin = 0;\\n\\n        // if there is a pricefeed calc max slippage\\n        if (address(linkPriceFeed) != address(0)) {\\n            amountOutMin = _convertPrice(\\n                caskVault.getAsset(linkSwapPath[0]),\\n                linkSwapPath[linkSwapPath.length - 1],\\n                address(linkPriceFeed),\\n                amountIn);\\n            amountOutMin = amountOutMin - ((amountOutMin * maxSwapSlippageBps) / 10000);\\n        }\\n\\n        uint256 amountFundingTokenBefore = linkFundingToken.balanceOf(address(this));\\n\\n        if (linkSwapProtocol == SwapProtocol.UNIV2) {\\n            _performSwapUniV2(amountIn, amountOutMin);\\n        } else if (linkSwapProtocol == SwapProtocol.UNIV3) {\\n            _performSwapUniV3(amountIn, amountOutMin);\\n        } else if (linkSwapProtocol == SwapProtocol.GMX) {\\n            _performSwapGMX(amountIn, amountOutMin);\\n        }\\n\\n        // any non-withdrawn shares are the fee portion - send to fee distributor\\n        caskVault.transfer(feeDistributor, caskVault.balanceOf(address(this)));\\n\\n        if (address(pegswap) != address(0)) {\\n            uint256 amountBridgeOut = linkBridgeToken.balanceOf(address(this));\\n            IERC20Metadata(address(linkBridgeToken)).safeIncreaseAllowance(address(pegswap), amountBridgeOut);\\n            pegswap.swap(amountBridgeOut, address(linkBridgeToken), address(linkFundingToken));\\n            require(linkFundingToken.balanceOf(address(this)) >= amountBridgeOut, \\\"!PEG_SWAP\\\");\\n        }\\n\\n        uint256 amountFundingTokenOut = linkFundingToken.balanceOf(address(this)) - amountFundingTokenBefore;\\n\\n        _doTopup(_chainlinkTopupId, amountFundingTokenOut);\\n\\n        return amountFundingTokenOut;\\n    }\\n\\n    function _performSwapUniV2(\\n        uint256 _inputAmount,\\n        uint256 _minOutput\\n    ) internal {\\n        IERC20Metadata(linkSwapPath[0]).safeIncreaseAllowance(linkSwapRouter, _inputAmount);\\n        IUniswapV2Router02(linkSwapRouter).swapExactTokensForTokens(\\n            _inputAmount,\\n            _minOutput,\\n            linkSwapPath,\\n            address(this),\\n            block.timestamp + 1 hours\\n        );\\n    }\\n\\n    function _performSwapUniV3(\\n        uint256 _inputAmount,\\n        uint256 _minOutput\\n    ) internal {\\n        IERC20Metadata(linkSwapPath[0]).safeIncreaseAllowance(linkSwapRouter, _inputAmount);\\n        ISwapRouter.ExactInputParams memory params =\\n            ISwapRouter.ExactInputParams({\\n                path: linkSwapData,\\n                recipient: address(this),\\n                deadline: block.timestamp + 60,\\n                amountIn: _inputAmount,\\n                amountOutMinimum: _minOutput\\n            });\\n        ISwapRouter(linkSwapRouter).exactInput(params);\\n    }\\n\\n    function _performSwapGMX(\\n        uint256 _inputAmount,\\n        uint256 _minOutput\\n    ) internal {\\n        IERC20Metadata(linkSwapPath[0]).safeIncreaseAllowance(linkSwapRouter, _inputAmount);\\n        IGMXRouter(linkSwapRouter).swap(linkSwapPath, _inputAmount, _minOutput, address(this));\\n    }\\n\\n    function _topupBalance(\\n        bytes32 _chainlinkTopupId\\n    ) internal view returns(uint256) {\\n        ICaskChainlinkTopup.ChainlinkTopup memory chainlinkTopup =\\n            caskChainlinkTopup.getChainlinkTopup(_chainlinkTopupId);\\n\\n        uint96 balance = type(uint96).max;\\n\\n        if (chainlinkTopup.topupType == ICaskChainlinkTopup.TopupType.Automation) {\\n            AutomationRegistryBaseInterface automationRegistry = AutomationRegistryBaseInterface(chainlinkTopup.registry);\\n            (,,,balance,,,) = automationRegistry.getUpkeep(chainlinkTopup.targetId);\\n\\n        } else if (chainlinkTopup.topupType == ICaskChainlinkTopup.TopupType.VRF) {\\n            VRFCoordinatorV2Interface coordinator = VRFCoordinatorV2Interface(chainlinkTopup.registry);\\n            (balance,,,) = coordinator.getSubscription(uint64(chainlinkTopup.targetId));\\n\\n        } else if (chainlinkTopup.topupType == ICaskChainlinkTopup.TopupType.Direct) {\\n            balance = uint96(linkFundingToken.balanceOf(chainlinkTopup.registry));\\n        }\\n\\n        return uint256(balance);\\n    }\\n\\n    function _topupValid(\\n        bytes32 _chainlinkTopupId\\n    ) internal view returns(bool) {\\n        ICaskChainlinkTopup.ChainlinkTopup memory chainlinkTopup =\\n            caskChainlinkTopup.getChainlinkTopup(_chainlinkTopupId);\\n\\n        if (chainlinkTopup.topupType == ICaskChainlinkTopup.TopupType.Automation) {\\n            AutomationRegistryBaseInterface automationRegistry = AutomationRegistryBaseInterface(chainlinkTopup.registry);\\n            try automationRegistry.getUpkeep(chainlinkTopup.targetId) returns (\\n                address target,\\n                uint32 executeGas,\\n                bytes memory checkData,\\n                uint96 balance,\\n                address lastKeeper,\\n                address admin,\\n                uint64 maxValidBlocknumber\\n            ) {\\n                return maxValidBlocknumber == type(uint32).max;\\n            } catch {\\n                return false;\\n            }\\n\\n        } else if (chainlinkTopup.topupType == ICaskChainlinkTopup.TopupType.VRF) {\\n            VRFCoordinatorV2Interface coordinator = VRFCoordinatorV2Interface(chainlinkTopup.registry);\\n            try coordinator.getSubscription(uint64(chainlinkTopup.targetId)) returns (\\n                uint96 balance,\\n                uint64 reqCount,\\n                address owner,\\n                address[] memory consumers\\n            ) {\\n                return owner != address(0);\\n            } catch {\\n                return false;\\n            }\\n\\n        } else if (chainlinkTopup.topupType == ICaskChainlinkTopup.TopupType.Direct) {\\n            return chainlinkTopup.registry != address(0);\\n        }\\n\\n        return false;\\n    }\\n\\n    function _doTopup(\\n        bytes32 _chainlinkTopupId,\\n        uint256 _amount\\n    ) internal {\\n        ICaskChainlinkTopup.ChainlinkTopup memory chainlinkTopup =\\n            caskChainlinkTopup.getChainlinkTopup(_chainlinkTopupId);\\n\\n        if (chainlinkTopup.topupType == ICaskChainlinkTopup.TopupType.Automation) {\\n            linkFundingToken.transferAndCall(chainlinkTopup.registry, _amount,\\n                abi.encode(chainlinkTopup.targetId));\\n\\n        } else if (chainlinkTopup.topupType == ICaskChainlinkTopup.TopupType.VRF) {\\n            linkFundingToken.transferAndCall(chainlinkTopup.registry, _amount,\\n                abi.encode(uint64(chainlinkTopup.targetId)));\\n\\n        } else if (chainlinkTopup.topupType == ICaskChainlinkTopup.TopupType.Direct) {\\n            if (chainlinkTopup.targetId > 0) {\\n                linkFundingToken.transferAndCall(chainlinkTopup.registry, _amount,\\n                    abi.encode(chainlinkTopup.targetId));\\n            } else {\\n                linkFundingToken.transfer(chainlinkTopup.registry, _amount);\\n            }\\n        }\\n    }\\n\\n    function _convertPrice(\\n        ICaskVault.Asset memory _fromAsset,\\n        address _toAsset,\\n        address _toPriceFeed,\\n        uint256 _amount\\n    ) internal view returns(uint256) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n\\n        int256 oraclePrice;\\n        uint256 updatedAt;\\n\\n        uint8 toAssetDecimals = IERC20Metadata(_toAsset).decimals();\\n        uint8 toFeedDecimals = AggregatorV3Interface(_toPriceFeed).decimals();\\n\\n        ( , oraclePrice, , updatedAt, ) = AggregatorV3Interface(_fromAsset.priceFeed).latestRoundData();\\n        uint256 fromOraclePrice = uint256(oraclePrice);\\n        require(maxPriceFeedAge == 0 || block.timestamp - updatedAt <= maxPriceFeedAge, \\\"!PRICE_OUTDATED\\\");\\n        ( , oraclePrice, , updatedAt, ) = AggregatorV3Interface(_toPriceFeed).latestRoundData();\\n        uint256 toOraclePrice = uint256(oraclePrice);\\n        require(maxPriceFeedAge == 0 || block.timestamp - updatedAt <= maxPriceFeedAge, \\\"!PRICE_OUTDATED\\\");\\n\\n        if (_fromAsset.priceFeedDecimals != toFeedDecimals) {\\n            // since oracle precision is different, scale everything\\n            // to _toAsset precision and do conversion\\n            return _scalePrice(_amount, _fromAsset.assetDecimals, toAssetDecimals) *\\n            _scalePrice(fromOraclePrice, _fromAsset.priceFeedDecimals, toAssetDecimals) /\\n            _scalePrice(toOraclePrice, toFeedDecimals, toAssetDecimals);\\n        } else {\\n            // oracles are already in same precision, so just scale _amount to asset precision,\\n            // and multiply by the price feed ratio\\n            return _scalePrice(_amount, _fromAsset.assetDecimals, toAssetDecimals) * fromOraclePrice / toOraclePrice;\\n        }\\n    }\\n\\n    function _scalePrice(\\n        uint256 _price,\\n        uint8 _priceDecimals,\\n        uint8 _decimals\\n    ) internal pure returns (uint256){\\n        if (_priceDecimals < _decimals) {\\n            return _price * uint256(10 ** uint256(_decimals - _priceDecimals));\\n        } else if (_priceDecimals > _decimals) {\\n            return _price / uint256(10 ** uint256(_priceDecimals - _decimals));\\n        }\\n        return _price;\\n    }\\n\\n    function setParameters(\\n        uint256 _maxSkips,\\n        uint256 _topupFeeBps,\\n        uint256 _topupFeeMin,\\n        uint256 _maxPriceFeedAge,\\n        uint256 _maxTopupsPerGroupRun,\\n        uint256 _maxSwapSlippageBps,\\n        uint32 _queueBucketSize,\\n        uint32 _maxQueueAge\\n    ) external onlyOwner {\\n        require(_topupFeeBps < 10000, \\\"!INVALID(topupFeeBps)\\\");\\n\\n        maxSkips = _maxSkips;\\n        topupFeeBps = _topupFeeBps;\\n        topupFeeMin = _topupFeeMin;\\n        maxPriceFeedAge = _maxPriceFeedAge;\\n        maxTopupsPerGroupRun = _maxTopupsPerGroupRun;\\n        maxSwapSlippageBps = _maxSwapSlippageBps;\\n        queueBucketSize = _queueBucketSize;\\n        maxQueueAge = _maxQueueAge;\\n        emit SetParameters();\\n    }\\n\\n    function setChainklinkAddresses(\\n        address _linkBridgeToken,\\n        address _linkFundingToken,\\n        address _linkPriceFeed,\\n        address _linkSwapRouter,\\n        address[] calldata _linkSwapPath,\\n        address _pegswap,\\n        SwapProtocol _linkSwapProtocol,\\n        bytes calldata _linkSwapData\\n    ) external onlyOwner {\\n        linkBridgeToken = IERC20Metadata(_linkBridgeToken);\\n        linkFundingToken = LinkTokenInterface(_linkFundingToken);\\n        linkPriceFeed = AggregatorV3Interface(_linkPriceFeed);\\n        linkSwapRouter = _linkSwapRouter;\\n        linkSwapPath = _linkSwapPath;\\n        pegswap = IPegSwap(_pegswap);\\n        linkSwapProtocol = _linkSwapProtocol;\\n        linkSwapData = _linkSwapData;\\n        emit SetChainlinkAddresses();\\n    }\\n\\n    function setFeeDistributor(\\n        address _feeDistributor\\n    ) external onlyOwner {\\n        require(_feeDistributor != address(0), \\\"!INVALID(feeDistributor)\\\");\\n        feeDistributor = _feeDistributor;\\n        emit SetFeeDistributor(_feeDistributor);\\n    }\\n\\n    function allowRegistry(\\n        address _registry\\n    ) external onlyOwner {\\n        require(_registry != address(0), \\\"!INVALID(registry)\\\");\\n        allowedRegistries[_registry] = true;\\n\\n        emit RegistryAllowed(_registry);\\n    }\\n\\n    function disallowRegistry(\\n        address _registry\\n    ) external onlyOwner {\\n        require(allowedRegistries[_registry], \\\"!REGISTRY_NOT_ALLOWED\\\");\\n        allowedRegistries[_registry] = false;\\n\\n        emit RegistryDisallowed(_registry);\\n    }\\n\\n    function recoverFunds(\\n        address _asset,\\n        address _dest\\n    ) external onlyOwner {\\n        IERC20Metadata(_asset).transfer(_dest, IERC20Metadata(_asset).balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0xba87e09e66c876afcc9d3c4913e39c88f57e717d7e9fffbd9cce9f895546ac06\",\"license\":\"MIT\"},\"contracts/chainlink_topup/ICaskChainlinkTopup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskChainlinkTopup {\\n\\n    enum ChainlinkTopupStatus {\\n        None,\\n        Active,\\n        Paused,\\n        Canceled\\n    }\\n\\n    enum ManagerCommand {\\n        None,\\n        Cancel,\\n        Pause\\n    }\\n\\n    enum SkipReason {\\n        None,\\n        PaymentFailed,\\n        SwapFailed\\n    }\\n\\n    enum TopupType {\\n        None,\\n        Automation,\\n        VRF,\\n        Direct\\n    }\\n\\n    struct ChainlinkTopup {\\n        address user;\\n        uint256 groupId;\\n        uint256 lowBalance;\\n        uint256 topupAmount;\\n        uint256 currentAmount;\\n        uint256 currentBuyQty;\\n        uint256 numTopups;\\n        uint256 numSkips;\\n        uint32 createdAt;\\n        uint256 targetId;\\n        address registry;\\n        TopupType topupType;\\n        ChainlinkTopupStatus status;\\n        uint32 retryAfter;\\n    }\\n\\n    struct ChainlinkTopupGroup {\\n        bytes32[] chainlinkTopups;\\n    }\\n\\n    function createChainlinkTopup(\\n        uint256 _lowBalance,\\n        uint256 _topupAmount,\\n        uint256 _targetId,\\n        address _registry,\\n        TopupType _topupType\\n    ) external returns(bytes32);\\n\\n    function getChainlinkTopup(bytes32 _chainlinkTopupId) external view returns (ChainlinkTopup memory);\\n\\n    function getChainlinkTopupGroup(uint256 _chainlinkTopupGroupId) external view returns (ChainlinkTopupGroup memory);\\n\\n    function getUserChainlinkTopup(address _user, uint256 _idx) external view returns (bytes32);\\n\\n    function getUserChainlinkTopupCount(address _user) external view returns (uint256);\\n\\n    function cancelChainlinkTopup(bytes32 _chainlinkTopupId) external;\\n\\n    function pauseChainlinkTopup(bytes32 _chainlinkTopupId) external;\\n\\n    function resumeChainlinkTopup(bytes32 _chainlinkTopupId) external;\\n\\n    function managerCommand(bytes32 _chainlinkTopupId, ManagerCommand _command) external;\\n\\n    function managerProcessed(bytes32 _chainlinkTopupId, uint256 _amount, uint256 _buyQty, uint256 _fee) external;\\n\\n    function managerSkipped(bytes32 _chainlinkTopupId, uint32 _retryAfter, SkipReason _skipReason) external;\\n\\n    event ChainlinkTopupCreated(bytes32 indexed chainlinkTopupId, address indexed user, uint256 lowBalance,\\n        uint256 topupAmount, uint256 targetId, address registry, TopupType topupType);\\n\\n    event ChainlinkTopupPaused(bytes32 indexed chainlinkTopupId, address indexed user, uint256 targetId,\\n        address registry, TopupType topupType);\\n\\n    event ChainlinkTopupResumed(bytes32 indexed chainlinkTopupId, address indexed user, uint256 targetId,\\n        address registry, TopupType topupType);\\n\\n    event ChainlinkTopupSkipped(bytes32 indexed chainlinkTopupId, address indexed user, uint256 targetId,\\n        address registry, TopupType topupType, SkipReason skipReason);\\n\\n    event ChainlinkTopupProcessed(bytes32 indexed chainlinkTopupId, address indexed user, uint256 targetId,\\n        address registry, TopupType topupType, uint256 amount, uint256 buyQty, uint256 fee);\\n\\n    event ChainlinkTopupCanceled(bytes32 indexed chainlinkTopupId, address indexed user, uint256 targetId,\\n        address registry, TopupType topupType);\\n}\",\"keccak256\":\"0xb60aa6a945ce7e6d1f824b45c9bd6d7d53852a2c45bb98441b6f494179cc2e94\",\"license\":\"MIT\"},\"contracts/chainlink_topup/ICaskChainlinkTopupManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskChainlinkTopupManager {\\n\\n    enum SwapProtocol {\\n        UNIV2,\\n        UNIV3,\\n        GMX\\n    }\\n\\n    function registerChainlinkTopup(bytes32 _chainlinkTopupId) external;\\n\\n    function registryAllowed(address _registry) external view returns(bool);\\n\\n    /** @dev Emitted the feeDistributor is changed. */\\n    event SetFeeDistributor(address feeDistributor);\\n\\n    /** @dev Emitted when a registry is allowed. */\\n    event RegistryAllowed(address registry);\\n\\n    /** @dev Emitted when a registry is disallowed. */\\n    event RegistryDisallowed(address registry);\\n\\n    /** @dev Emitted when manager parameters are changed. */\\n    event SetParameters();\\n\\n    /** @dev Emitted when chainlink addresses are changed. */\\n    event SetChainlinkAddresses();\\n}\",\"keccak256\":\"0x25d3a9fccb1514cb0ba38b1fea93b44e2d699e1049fd85d03947f6f1498b4063\",\"license\":\"MIT\"},\"contracts/interfaces/AutomationRegistryBaseInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationRegistryBaseInterface {\\n    function registerUpkeep(\\n        address target,\\n        uint32 gasLimit,\\n        address admin,\\n        bytes calldata checkData\\n    ) external returns (\\n        uint256 id\\n    );\\n    function performUpkeep(\\n        uint256 id,\\n        bytes calldata performData\\n    ) external returns (\\n        bool success\\n    );\\n    function cancelUpkeep(\\n        uint256 id\\n    ) external;\\n    function addFunds(\\n        uint256 id,\\n        uint96 amount\\n    ) external;\\n\\n    function getUpkeep(uint256 id)\\n    external view returns (\\n        address target,\\n        uint32 executeGas,\\n        bytes memory checkData,\\n        uint96 balance,\\n        address lastKeeper,\\n        address admin,\\n        uint64 maxValidBlocknumber\\n    );\\n    function getUpkeepCount()\\n    external view returns (uint256);\\n    function getCanceledUpkeepList()\\n    external view returns (uint256[] memory);\\n    function getKeeperList()\\n    external view returns (address[] memory);\\n    function getKeeperInfo(address query)\\n    external view returns (\\n        address payee,\\n        bool active,\\n        uint96 balance\\n    );\\n    function getConfig()\\n    external view returns (\\n        uint32 paymentPremiumPPB,\\n        uint24 checkFrequencyBlocks,\\n        uint32 checkGasLimit,\\n        uint24 stalenessSeconds,\\n        uint16 gasCeilingMultiplier,\\n        uint256 fallbackGasPrice,\\n        uint256 fallbackLinkPrice\\n    );\\n}\",\"keccak256\":\"0xc924f25110230e51118b76ae133a64bfe96f959054c6a8273b944b5112253797\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskJobQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract ICaskJobQueue is Initializable {\\n\\n    function __ICaskJobQueue_init() internal onlyInitializing {\\n        __ICaskJobQueue_init_unchained();\\n    }\\n\\n    function __ICaskJobQueue_init_unchained() internal onlyInitializing {\\n    }\\n\\n\\n    function processWorkUnit(uint8 _queueId, bytes32 _workUnit) virtual internal;\\n\\n    function requeueWorkUnit(uint8 _queueId, bytes32 _workUnit) virtual internal;\\n\\n    function scheduleWorkUnit(uint8 _queueId, bytes32 _workUnit, uint32 _processAt) virtual internal;\\n\\n    function queueItem(uint8 _queueId, uint32 _bucket, uint256 _idx) virtual external view returns(bytes32);\\n\\n    function queueSize(uint8 _queueId, uint32 _bucket) virtual external view returns(uint256);\\n\\n    function queuePosition(uint8 _queueId) virtual external view returns(uint32);\\n\\n    function setQueuePosition(uint8 _queueId, uint32 _timestamp) virtual external;\\n\\n    function setQueueBucketSize(uint32 _queueBucketSize) virtual external;\\n\\n    function setMaxQueueAge(uint32 _maxQueueAge) virtual external;\\n\\n\\n    event WorkUnitProcessed(uint8 queueId, bytes32 workUnit);\\n\\n    event WorkUnitQueued(uint8 queueId, bytes32 workUnit, uint32 processAt);\\n\\n    /** @dev Emitted when a queue run is finished */\\n    event QueueRunReport(uint256 limit, uint256 jobsProcessed, uint256 depth, uint8 queueId,\\n        uint256 queueRemaining, uint32 currentBucket);\\n\\n}\",\"keccak256\":\"0x9182697e421c1c21a615a0caec2ca4c1aa712fedccf29d51f81e26c9020d623c\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @title  Interface for vault\\n  */\\n\\ninterface ICaskVault is IERC20MetadataUpgradeable {\\n\\n    // whitelisted stablecoin assets supported by the vault\\n    struct Asset {\\n        address priceFeed;\\n        uint256 slippageBps;\\n        uint256 depositLimit;\\n        uint8 assetDecimals;\\n        uint8 priceFeedDecimals;\\n        bool allowed;\\n    }\\n\\n    // sources for payments\\n    enum FundingSource {\\n        Cask,\\n        Personal\\n    }\\n\\n    // funding profile for a given address\\n    struct FundingProfile {\\n        FundingSource fundingSource;\\n        address fundingAsset;\\n    }\\n\\n    /**\\n      * @dev Get base asset of vault.\\n     */\\n    function getBaseAsset() external view returns (address);\\n\\n    /**\\n      * @dev Get all the assets supported by the vault.\\n     */\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Get asset details\\n     * @param _asset Asset address\\n     * @return Asset Asset details\\n     */\\n    function getAsset(address _asset) external view returns(Asset memory);\\n\\n    /**\\n     * @dev Check if the vault supports an asset\\n     * @param _asset Asset address\\n     * @return bool `true` if asset supported, `false` otherwise\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _value Amount of baseAsset value to transfer\\n     * @param _protocolFee Protocol fee to deduct from `_value`\\n     * @param _network Address of network fee collector\\n     * @param _networkFee Network fee to deduct from `_value`\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _protocolFee,\\n        address _network,\\n        uint256 _networkFee\\n    ) external;\\n\\n    /**\\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _value Amount of baseAsset value to transfer\\n     * @param _protocolFee Protocol fee to deduct from `_value`\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _protocolFee\\n    ) external;\\n\\n    /**\\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _value Amount of baseAsset value to transfer\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external;\\n\\n    /**\\n     * @dev Transfer the equivalent vault shares of base asset `value` to `_recipient`\\n     * @param _recipient To address\\n     * @param _value Amount of baseAsset value to transfer\\n     */\\n    function transferValue(\\n        address _recipient,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Transfer the equivalent vault shares of base asset `value` from `_sender` to `_recipient`\\n     * @param _sender From address\\n     * @param _recipient To address\\n     * @param _value Amount of baseAsset value to transfer\\n     */\\n    function transferValueFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\\n     * @param _asset Address of incoming asset\\n     * @param _assetAmount Amount of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _assetAmount) external;\\n\\n    /**\\n     * @dev Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\\n     * @param _to Recipient of funds\\n     * @param _asset Address of incoming asset\\n     * @param _assetAmount Amount of asset to deposit\\n     */\\n    function depositTo(address _to, address _asset, uint256 _assetAmount) external;\\n\\n    /**\\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\\n     * @param _asset Address of outgoing asset\\n     * @param _shares Amount of shares to withdraw\\n     */\\n    function withdraw(address _asset, uint256 _shares) external;\\n\\n    /**\\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\\n     * @param _recipient Recipient who will receive the withdrawn assets\\n     * @param _asset Address of outgoing asset\\n     * @param _shares Amount of shares to withdraw\\n     */\\n    function withdrawTo(address _recipient, address _asset, uint256 _shares) external;\\n\\n    /**\\n     * @dev Retrieve the funding source for an address\\n     * @param _address Address for lookup\\n     */\\n    function fundingSource(address _address) external view returns(FundingProfile memory);\\n\\n    /**\\n     * @dev Set the funding source and, if using a personal wallet, the asset to use for funding payments\\n     * @param _fundingSource Funding source to use\\n     * @param _fundingAsset Asset to use for payments (if using personal funding source)\\n     */\\n    function setFundingSource(FundingSource _fundingSource, address _fundingAsset) external;\\n\\n    /**\\n     * @dev Get current vault value of `_address` denominated in `baseAsset`\\n     * @param _address Address to check\\n     */\\n    function currentValueOf(address _address) external view returns(uint256);\\n\\n    /**\\n     * @dev Get current vault value a vault share\\n     */\\n    function pricePerShare() external view returns(uint256);\\n\\n    /**\\n     * @dev Get the number of vault shares that represents a given value of the base asset\\n     * @param _value Amount of value\\n     */\\n    function sharesForValue(uint256 _value) external view returns(uint256);\\n\\n    /**\\n     * @dev Get total value in vault and managed by admin - denominated in `baseAsset`\\n     */\\n    function totalValue() external view returns(uint256);\\n\\n    /**\\n     * @dev Get total amount of an asset held in vault and managed by admin\\n     * @param _asset Address of asset\\n     */\\n    function totalAssetBalance(address _asset) external view returns(uint256);\\n\\n\\n    /************************** EVENTS **************************/\\n\\n    /** @dev Emitted when `sender` transfers `baseAssetValue` (denominated in vault baseAsset) to `recipient` */\\n    event TransferValue(address indexed from, address indexed to, uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when an amount of `baseAsset` is paid from `from` to `to` within the vault */\\n    event Payment(address indexed from, address indexed to, uint256 baseAssetAmount, uint256 shares,\\n        uint256 protocolFee, uint256 protocolFeeShares,\\n        address indexed network, uint256 networkFee, uint256 networkFeeShares);\\n\\n    /** @dev Emitted when `asset` is added as a new supported asset */\\n    event AllowedAsset(address indexed asset);\\n\\n    /** @dev Emitted when `asset` is disallowed t */\\n    event DisallowedAsset(address indexed asset);\\n\\n    /** @dev Emitted when `participant` deposits `asset` */\\n    event AssetDeposited(address indexed participant, address indexed asset, uint256 assetAmount,\\n        uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when `participant` withdraws `asset` */\\n    event AssetWithdrawn(address indexed participant, address indexed asset, uint256 assetAmount,\\n        uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when `participant` sets their funding source */\\n    event SetFundingSource(address indexed participant, FundingSource fundingSource, address fundingAsset);\\n\\n    /** @dev Emitted when a new protocol is allowed to use the vault */\\n    event AddProtocol(address indexed protocol);\\n\\n    /** @dev Emitted when a protocol is no longer allowed to use the vault */\\n    event RemoveProtocol(address indexed protocol);\\n\\n    /** @dev Emitted when the vault fee distributor is changed */\\n    event SetFeeDistributor(address indexed feeDistributor);\\n\\n    /** @dev Emitted when minDeposit is changed */\\n    event SetMinDeposit(uint256 minDeposit);\\n\\n    /** @dev Emitted when maxPriceFeedAge is changed */\\n    event SetMaxPriceFeedAge(uint256 maxPriceFeedAge);\\n\\n    /** @dev Emitted when the trustedForwarder address is changed */\\n    event SetTrustedForwarder(address indexed feeDistributor);\\n}\",\"keccak256\":\"0x4aabade5025aef5bfe39e3d487b0b93d896a4cbea5ccf8d1fde2f02e5792330c\",\"license\":\"MIT\"},\"contracts/interfaces/IGMXRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGMXRouter {\\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\\n}\",\"keccak256\":\"0xf6200cb30588e9b4a00dcdc64c622ca1d4a092f9a82cae553621cf0b34d714a9\",\"license\":\"MIT\"},\"contracts/interfaces/IPegSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPegSwap {\\n    function swap(uint256 amount, address source, address target) external;\\n}\",\"keccak256\":\"0xd99ff49ae4965129e86172362fca1b0ce27e1f120460caa68ba9cdb418fac833\",\"license\":\"MIT\"},\"contracts/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    function approve(address spender, uint256 value) external returns (bool success);\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    function decimals() external view returns (uint8 decimalPlaces);\\n\\n    function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n    function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n    function name() external view returns (string memory tokenName);\\n\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n    function transfer(address to, uint256 value) external returns (bool success);\\n\\n    function transferAndCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool success);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool success);\\n}\",\"keccak256\":\"0x5c0afbbda1035ab2c4a64d7d18b18d1b2a5a88ef0168fc574667f0ab1382c378\",\"license\":\"MIT\"},\"contracts/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n    /**\\n     * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n    function getRequestConfig()\\n    external\\n    view\\n    returns (\\n        uint16,\\n        uint32,\\n        bytes32[] memory\\n    );\\n\\n    /**\\n     * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint64 subId,\\n        uint16 minimumRequestConfirmations,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external returns (uint256 requestId);\\n\\n    /**\\n     * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n    function createSubscription() external returns (uint64 subId);\\n\\n    /**\\n     * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n    function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n        uint96 balance,\\n        uint64 reqCount,\\n        address owner,\\n        address[] memory consumers\\n    );\\n\\n    /**\\n     * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n    function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n    /**\\n     * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n    function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n    /**\\n     * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n    function addConsumer(uint64 subId, address consumer) external;\\n\\n    /**\\n     * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n    function removeConsumer(uint64 subId, address consumer) external;\\n\\n    /**\\n     * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n    function cancelSubscription(uint64 subId, address to) external;\\n}\",\"keccak256\":\"0xe8ca3d2b6a9de6ab86549f1f87f2aae33b77f08396937e3b466e387fbaa3bee5\",\"license\":\"MIT\"},\"contracts/job_queue/CaskJobQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ICaskJobQueue.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\n\\nabstract contract CaskJobQueue is\\nInitializable,\\nOwnableUpgradeable,\\nPausableUpgradeable,\\nKeeperCompatibleInterface,\\nReentrancyGuardUpgradeable,\\nICaskJobQueue\\n{\\n\\n    /** @dev size (in seconds) of buckets to group jobs into for processing */\\n    uint32 public queueBucketSize;\\n\\n    /** @dev max age (in seconds) of a bucket before a processing is triggered */\\n    uint32 public maxQueueAge;\\n\\n    /** @dev map used to track jobs in the queues */\\n    mapping(uint8 => mapping(uint32 => bytes32[])) private queue; // renewal bucket => workUnit[]\\n    mapping(uint8 => uint32) private queueBucket; // current bucket being processed\\n\\n\\n    function __CaskJobQueue_init(\\n        uint32 _queueBucketSize\\n    ) internal onlyInitializing {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ICaskJobQueue_init_unchained();\\n        __CaskJobQueue_init_unchained(_queueBucketSize);\\n    }\\n\\n    function __CaskJobQueue_init_unchained(\\n        uint32 _queueBucketSize\\n    ) internal onlyInitializing {\\n        queueBucketSize = _queueBucketSize;\\n        maxQueueAge = queueBucketSize * 20;\\n    }\\n\\n\\n    function bucketAt(\\n        uint32 _timestamp\\n    ) internal view returns(uint32) {\\n        return _timestamp - (_timestamp % queueBucketSize) + queueBucketSize;\\n    }\\n\\n    function currentBucket() internal view returns(uint32) {\\n        uint32 timestamp = uint32(block.timestamp);\\n        return timestamp - (timestamp % queueBucketSize);\\n    }\\n\\n    function queueItem(\\n        uint8 _queueId,\\n        uint32 _bucket,\\n        uint256 _idx\\n    ) external override view returns(bytes32) {\\n        return queue[_queueId][_bucket][_idx];\\n    }\\n\\n    function queueSize(\\n        uint8 _queueId,\\n        uint32 _bucket\\n    ) external override view returns(uint256) {\\n        return queue[_queueId][_bucket].length;\\n    }\\n\\n    function queuePosition(\\n        uint8 _queueId\\n    ) external override view returns(uint32) {\\n        return queueBucket[_queueId];\\n    }\\n\\n    function setQueuePosition(\\n        uint8 _queueId,\\n        uint32 _timestamp\\n    ) external override onlyOwner {\\n        queueBucket[_queueId] = bucketAt(_timestamp);\\n    }\\n\\n    function checkUpkeep(\\n        bytes calldata checkData\\n    ) external view override returns(bool upkeepNeeded, bytes memory performData) {\\n        (\\n        uint256 limit,\\n        uint256 minDepth,\\n        uint8 queueId\\n        ) = abi.decode(checkData, (uint256, uint256, uint8));\\n\\n        uint32 bucket = currentBucket();\\n        upkeepNeeded = false;\\n\\n        uint32 checkBucket = queueBucket[queueId];\\n        if (checkBucket == 0) {\\n            checkBucket = bucket;\\n        }\\n\\n        // if queue is over maxQueueAge and needs upkeep regardless of anything queued\\n        if (bucket >= checkBucket && bucket - checkBucket >= maxQueueAge) {\\n            upkeepNeeded = true;\\n        } else {\\n            while (checkBucket <= bucket) {\\n                if (queue[queueId][checkBucket].length > 0 &&\\n                    queue[queueId][checkBucket].length >= minDepth)\\n                {\\n                    upkeepNeeded = true;\\n                    break;\\n                }\\n                checkBucket += queueBucketSize;\\n            }\\n        }\\n\\n        performData = abi.encode(limit, queue[queueId][checkBucket].length, queueId);\\n    }\\n\\n\\n    function performUpkeep(\\n        bytes calldata performData\\n    ) external override whenNotPaused nonReentrant {\\n        (\\n        uint256 limit,\\n        uint256 depth,\\n        uint8 queueId\\n        ) = abi.decode(performData, (uint256, uint256, uint8));\\n\\n        uint32 bucket = currentBucket();\\n        uint256 jobsProcessed = 0;\\n        uint256 maxBucketChecks = limit * 5;\\n\\n        if (queueBucket[queueId] == 0) {\\n            queueBucket[queueId] = bucket;\\n        }\\n\\n        require(queueBucket[queueId] <= bucket, \\\"!TOO_EARLY\\\");\\n\\n        while (jobsProcessed < limit && maxBucketChecks > 0 && queueBucket[queueId] <= bucket) {\\n            uint256 queueLen = queue[queueId][queueBucket[queueId]].length;\\n            if (queueLen > 0) {\\n                bytes32 workUnit = queue[queueId][queueBucket[queueId]][queueLen-1];\\n                queue[queueId][queueBucket[queueId]].pop();\\n                processWorkUnit(queueId, workUnit);\\n                emit WorkUnitProcessed(queueId, workUnit);\\n                jobsProcessed += 1;\\n            } else {\\n                if (queueBucket[queueId] < bucket) {\\n                    queueBucket[queueId] += queueBucketSize;\\n                    maxBucketChecks -= 1;\\n                } else {\\n                    break; // nothing left to do\\n                }\\n            }\\n        }\\n\\n        emit QueueRunReport(limit, jobsProcessed, depth, queueId,\\n            queue[queueId][queueBucket[queueId]].length, queueBucket[queueId]);\\n    }\\n\\n\\n    function requeueWorkUnit(\\n        uint8 _queueId,\\n        bytes32 _workUnit\\n    ) internal override {\\n        uint32 bucket = currentBucket();\\n        queue[_queueId][bucket].push(_workUnit);\\n        emit WorkUnitQueued(_queueId, _workUnit, bucket);\\n    }\\n\\n    function scheduleWorkUnit(\\n        uint8 _queueId,\\n        bytes32 _workUnit,\\n        uint32 _processAt\\n    ) internal override {\\n        // make sure we don't queue something in the past that will never get processed\\n        uint32 bucket = bucketAt(_processAt);\\n        if (bucket < queueBucket[_queueId]) {\\n            bucket = queueBucket[_queueId];\\n        }\\n        queue[_queueId][bucket].push(_workUnit);\\n        emit WorkUnitQueued(_queueId, _workUnit, bucket);\\n    }\\n\\n    function setQueueBucketSize(\\n        uint32 _queueBucketSize\\n    ) external override onlyOwner {\\n        queueBucketSize = _queueBucketSize;\\n    }\\n\\n    function setMaxQueueAge(\\n        uint32 _maxQueueAge\\n    ) external override onlyOwner {\\n        maxQueueAge = _maxQueueAge;\\n    }\\n\\n}\",\"keccak256\":\"0xc57d98c90ec0f25846a91263971e7efd5d587c1ace2c12f092993985ed9509b3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b620018081760201c565b15905090565b3b151590565b614ce580620001126000396000f3fe608060405234801561001057600080fd5b50600436106102525760003560e01c80638bddd2e411610146578063c6f8806c116100c3578063e6cab67111610087578063e6cab6711461055a578063f009451e1461056d578063f2fde38b14610580578063faec9c2214610593578063fce02400146105a6578063ff7137fd146105b957600080fd5b8063c6f8806c146104dd578063ccfc2e8d146104f5578063cd48a61414610508578063d5f59fb91461051b578063dfd609bb1461054757600080fd5b8063b7c3565d1161010a578063b7c3565d1461049c578063b95f1624146104a5578063c0c53b8b146104b8578063c29c0e9c146104cb578063c5064653146104d457600080fd5b80638bddd2e4146104425780638da5cb5b146104525780638dc9bc0414610463578063a47755d114610476578063aa878f761461048957600080fd5b80632f77bb66116101d45780635d59efb7116101985780635d59efb7146103de5780636e04ff0d146103f3578063715018a614610414578063729d81071461041c57806384b4609f1461042f57600080fd5b80632f77bb6614610363578063301cce601461036c5780634585e33b1461038d5780635bd482fd146103a05780635c975abb146103d357600080fd5b80630d43e8ad1161021b5780630d43e8ad146102d957806314fad707146102ec578063191888f6146102ff5780631c39033c1461031257806324ae6a271461035057600080fd5b8062912b371461025757806305f2becf1461028757806306cd9e181461029a5780630816c847146102af5780630caae41d146102c6575b600080fd5b60d15461026a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b60cd5461026a906001600160a01b031681565b6102ad6102a8366004613cd5565b6105c2565b005b6102b860d95481565b60405190815260200161027e565b6102ad6102d4366004613d13565b6106ad565b60dc5461026a906001600160a01b031681565b6102b86102fa366004613d4c565b61070f565b60cf5461026a906001600160a01b031681565b61033b610320366004613d8d565b60ff16600090815260cb602052604090205463ffffffff1690565b60405163ffffffff909116815260200161027e565b6102ad61035e366004613daa565b610759565b6102b860da5481565b60d45461038090600160a01b900460ff1681565b60405161027e9190613e0c565b6102ad61039b366004613e67565b610887565b6103c36103ae366004613cd5565b60cc6020526000908152604090205460ff1681565b604051901515815260200161027e565b60655460ff166103c3565b6103e6610c7f565b60405161027e9190613f00565b610406610401366004613e67565b610d0d565b60405161027e929190613f13565b6102ad610e8c565b6102ad61042a366004613f2e565b610ec2565b6102ad61043d366004613cd5565b610f14565b60c95461033b9063ffffffff1681565b6033546001600160a01b031661026a565b6102ad610471366004613f5a565b610fdd565b60ce5461026a906001600160a01b031681565b6102b8610497366004613d13565b6110e7565b6102b860db5481565b61026a6104b3366004614067565b611112565b6102ad6104c6366004614080565b61113c565b6102b860d75481565b6102b860d65481565b60c95461033b90640100000000900463ffffffff1681565b6102ad610503366004613cd5565b611351565b6102ad610516366004613f2e565b61141a565b6103c3610529366004613cd5565b6001600160a01b0316600090815260cc602052604090205460ff1690565b6102ad6105553660046140cb565b611460565b6102ad610568366004614067565b61154b565b60d45461026a906001600160a01b031681565b6102ad61058e366004613cd5565b61176d565b60d35461026a906001600160a01b031681565b60d05461026a906001600160a01b031681565b6102b860d85481565b6033546001600160a01b031633146105f55760405162461bcd60e51b81526004016105ec9061413e565b60405180910390fd5b6001600160a01b038116600090815260cc602052604090205460ff166106555760405162461bcd60e51b815260206004820152601560248201527408549151d254d5149657d393d517d0531313d5d151605a1b60448201526064016105ec565b6001600160a01b038116600081815260cc6020908152604091829020805460ff1916905590519182527f41ff3cbb6d9f3c743a5fd7b126595848bf20fe04ced3af1bcfc8313f20f925c391015b60405180910390a150565b6033546001600160a01b031633146106d75760405162461bcd60e51b81526004016105ec9061413e565b6106e08161180e565b60ff92909216600090815260cb60205260409020805463ffffffff191663ffffffff9093169290921790915550565b60ff8316600090815260ca6020908152604080832063ffffffff86168452909152812080548390811061074457610744614173565b906000526020600020015490505b9392505050565b6033546001600160a01b031633146107835760405162461bcd60e51b81526004016105ec9061413e565b6040516370a0823160e01b81523060048201526001600160a01b0383169063a9059cbb90839083906370a082319060240160206040518083038186803b1580156107cc57600080fd5b505afa1580156107e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108049190614189565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561084a57600080fd5b505af115801561085e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088291906141b2565b505050565b60655460ff16156108cd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105ec565b600260975414156109205760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105ec565b600260975560008080610935848601866141cd565b9250925092506000610945611838565b9050600080610955866005614211565b60ff8516600090815260cb602052604090205490915063ffffffff1661099b5760ff8416600090815260cb60205260409020805463ffffffff191663ffffffff85161790555b60ff8416600090815260cb602052604090205463ffffffff808516911611156109f35760405162461bcd60e51b815260206004820152600a60248201526921544f4f5f4541524c5960b01b60448201526064016105ec565b8582108015610a025750600081115b8015610a29575060ff8416600090815260cb602052604090205463ffffffff808516911611155b15610be85760ff8416600090815260ca6020908152604080832060cb83528184205463ffffffff1684529091529020548015610b585760ff8516600090815260ca6020908152604080832060cb83528184205463ffffffff1684529091528120610a94600184614230565b81548110610aa457610aa4614173565b600091825260208083209091015460ff8916835260ca8252604080842060cb84528185205463ffffffff168552909252912080549192509080610ae957610ae9614247565b60019003818190600052602060002001600090559055610b098682611860565b6040805160ff88168152602081018390527f58c7ae721fd25aaf84e68db9ce9ac6fed4f08438a370a4299d19f8c1425c499e910160405180910390a1610b5060018561425d565b935050610be2565b60ff8516600090815260cb602052604090205463ffffffff80861691161015610bdc5760c95460ff8616600090815260cb60205260408120805463ffffffff93841693919291610baa91859116614275565b92506101000a81548163ffffffff021916908363ffffffff160217905550600182610bd59190614230565b9150610be2565b50610be8565b506109f3565b60ff8416600081815260ca6020908152604080832060cb8084528285205463ffffffff168086529184528285205494869052835281518b81529283018790528282018a90526060830194909452608082019290925260a0810192909252517fd69140f88b9a25350749bb371882f4479133fc8b65602aac60f6c1b3598f08329181900360c00190a150506001609755505050505050565b60d58054610c8c9061429d565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb89061429d565b8015610d055780601f10610cda57610100808354040283529160200191610d05565b820191906000526020600020905b815481529060010190602001808311610ce857829003601f168201915b505050505081565b60006060818080610d20868801886141cd565b9250925092506000610d30611838565b60ff8316600090815260cb602052604081205490975090915063ffffffff1680610d575750805b8063ffffffff168263ffffffff1610158015610d92575060c954640100000000900463ffffffff16610d8982846142d8565b63ffffffff1610155b15610da05760019650610e30565b8163ffffffff168163ffffffff1611610e305760ff8316600090815260ca6020908152604080832063ffffffff8516845290915290205415801590610e08575060ff8316600090815260ca6020908152604080832063ffffffff851684529091529020548411155b15610e165760019650610e30565b60c954610e299063ffffffff1682614275565b9050610da0565b60ff8316600081815260ca6020908152604080832063ffffffff86168452825291829020548251918201899052918101919091526060810191909152608001604051602081830303815290604052955050505050509250929050565b6033546001600160a01b03163314610eb65760405162461bcd60e51b81526004016105ec9061413e565b610ec06000611988565b565b6033546001600160a01b03163314610eec5760405162461bcd60e51b81526004016105ec9061413e565b60c9805463ffffffff9092166401000000000267ffffffff0000000019909216919091179055565b6033546001600160a01b03163314610f3e5760405162461bcd60e51b81526004016105ec9061413e565b6001600160a01b038116610f895760405162461bcd60e51b815260206004820152601260248201527121494e56414c49442872656769737472792960701b60448201526064016105ec565b6001600160a01b038116600081815260cc6020908152604091829020805460ff1916600117905590519182527faa9fd3a8c3d93ebd697846ec56ec5fa196deef170601239a813cae8d80dfcddb91016106a2565b6033546001600160a01b031633146110075760405162461bcd60e51b81526004016105ec9061413e565b60cf80546001600160a01b03808d166001600160a01b03199283161790925560d080548c841690831617905560d180548b841690831617905560d38054928a169290911691909117905561105d60d28787613bc4565b5060d480546001600160a01b0386166001600160a01b03198216811783558592916001600160a81b03191617600160a01b8360028111156110a0576110a0613dd8565b02179055506110b160d58383613c27565b506040517f2a77e01e84a8eac1e6bcac9bde4e5227a63842990baacef9e711c666f86ff1c090600090a150505050505050505050565b60ff8216600090815260ca6020908152604080832063ffffffff851684529091529020545b92915050565b60d2818154811061112257600080fd5b6000918252602090912001546001600160a01b0316905081565b600054610100900460ff166111575760005460ff161561115b565b303b155b6111be5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105ec565b600054610100900460ff161580156111e0576000805461ffff19166101011790555b6001600160a01b0384166112365760405162461bcd60e51b815260206004820152601c60248201527f21494e56414c4944286361736b436861696e6c696e6b546f707570290000000060448201526064016105ec565b6001600160a01b0383166112825760405162461bcd60e51b815260206004820152601360248201527221494e56414c4944286361736b5661756c742960681b60448201526064016105ec565b6001600160a01b0382166112d35760405162461bcd60e51b815260206004820152601860248201527721494e56414c4944286665654469737472696275746f722960401b60448201526064016105ec565b60cd80546001600160a01b038087166001600160a01b03199283161790925560ce805486841690831617905560dc805492851692909116919091179055600060d681905560d781905560d881905560d955600160da55606460db5561133961a8c06119da565b801561134b576000805461ff00191690555b50505050565b6033546001600160a01b0316331461137b5760405162461bcd60e51b81526004016105ec9061413e565b6001600160a01b0381166113cc5760405162461bcd60e51b815260206004820152601860248201527721494e56414c4944286665654469737472696275746f722960401b60448201526064016105ec565b60dc80546001600160a01b0319166001600160a01b0383169081179091556040519081527f9e9a9a4a82acd1b28aab6bf1d43aad70ae6d290549c0d6183e2e91ebcdf57441906020016106a2565b6033546001600160a01b031633146114445760405162461bcd60e51b81526004016105ec9061413e565b60c9805463ffffffff191663ffffffff92909216919091179055565b6033546001600160a01b0316331461148a5760405162461bcd60e51b81526004016105ec9061413e565b61271087106114d35760405162461bcd60e51b815260206004820152601560248201527421494e56414c494428746f7075704665654270732960581b60448201526064016105ec565b60d688905560d787905560d886905560d985905560da84905560db83905560c9805463ffffffff8381166401000000000267ffffffffffffffff19909216908516171790556040517f3b5fda6f71b960b21be0b432d9b7c87d9c8c996477ea1eba5c19cb77d1e027aa90600090a15050505050505050565b6002609754141561159e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105ec565b600260975560655460ff16156115e95760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105ec565b60cd5460405163c68f5eb360e01b8152600481018390526000916001600160a01b03169063c68f5eb3906024016101c06040518083038186803b15801561162f57600080fd5b505afa158015611643573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166791906143b3565b905060008160200151116116b15760405162461bcd60e51b815260206004820152601160248201527021494e56414c49442867726f757049642960781b60448201526064016105ec565b6116ba82611a22565b5060cd54602082015160405163552de85160e11b815260048101919091526000916001600160a01b03169063aa5bd0a29060240160006040518083038186803b15801561170657600080fd5b505afa15801561171a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261174291908101906144ae565b80515190915060011415611763576117636001836020015160001b42611d24565b5050600160975550565b6033546001600160a01b031633146117975760405162461bcd60e51b81526004016105ec9061413e565b6001600160a01b0381166117fc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ec565b61180581611988565b50565b3b151590565b60c95460009063ffffffff16611824818461458d565b61182e90846142d8565b61110c9190614275565b60c95460009042906118509063ffffffff168261458d565b61185a90826142d8565b91505090565b60cd5460405163552de85160e11b8152600481018390526000916001600160a01b03169063aa5bd0a29060240160006040518083038186803b1580156118a557600080fd5b505afa1580156118b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118e191908101906144ae565b8051519091506118f057505050565b6000805b82515181108015611906575060da5482105b15611956576119318360000151828151811061192457611924614173565b6020026020010151611a22565b156119445761194160018361425d565b91505b8061194e816145b0565b9150506118f4565b5081515181101580611969575060da5481105b1561197e57611979848442611d24565b61134b565b61134b8484611dec565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611a015760405162461bcd60e51b81526004016105ec906145cb565b611a09611e73565b611a11611eaa565b611a19611ee1565b61180581611f08565b60cd5460405163c68f5eb360e01b81526004810183905260009182916001600160a01b039091169063c68f5eb3906024016101c06040518083038186803b158015611a6c57600080fd5b505afa158015611a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa491906143b3565b905060018161018001516003811115611abf57611abf613dd8565b14611acd5750600092915050565b4263ffffffff16816101a0015163ffffffff1610611aee5750600092915050565b611af783611f75565b1580611b43575060038161016001516003811115611b1757611b17613dd8565b14158015611b4357506101408101516001600160a01b0316600090815260cc602052604090205460ff16155b15611bb65760cd54604051635ba581cd60e01b81526001600160a01b0390911690635ba581cd90611b7b908690600190600401614616565b600060405180830381600087803b158015611b9557600080fd5b505af1158015611ba9573d6000803e3d6000fd5b5060009695505050505050565b8060400151611bc4846121d0565b10611bd25750600092915050565b600061271060d7548360600151611be99190614211565b611bf39190614633565b905060d854811015611c04575060d8545b6000611c108583612485565b90508015611c965760cd546060840151604051632d32f27960e21b815260048101889052602481019190915260448101839052606481018490526001600160a01b039091169063b4cbc9e490608401600060405180830381600087803b158015611c7957600080fd5b505af1158015611c8d573d6000803e3d6000fd5b50505050611d19565b600060d654118015611cae575060d6548360e0015110155b15611d195760cd54604051635ba581cd60e01b81526001600160a01b0390911690635ba581cd90611ce6908890600290600401614616565b600060405180830381600087803b158015611d0057600080fd5b505af1158015611d14573d6000803e3d6000fd5b505050505b506001949350505050565b6000611d2f8261180e565b60ff8516600090815260cb602052604090205490915063ffffffff9081169082161015611d71575060ff8316600090815260cb602052604090205463ffffffff165b60ff8416600081815260ca6020908152604080832063ffffffff861680855290835281842080546001810182559085529383902090930187905580519384529083018690528201527f67778e52b18dcf574ab071142a886fce91a8ce5e60e176229fdadb8c063caaed9060600160405180910390a150505050565b6000611df6611838565b60ff8416600081815260ca6020908152604080832063ffffffff861680855290835281842080546001810182559085529383902090930187905580519384529083018690528201529091507f67778e52b18dcf574ab071142a886fce91a8ce5e60e176229fdadb8c063caaed9060600160405180910390a1505050565b600054610100900460ff16611e9a5760405162461bcd60e51b81526004016105ec906145cb565b611ea2611ee1565b610ec0612ff6565b600054610100900460ff16611ed15760405162461bcd60e51b81526004016105ec906145cb565b611ed9611ee1565b610ec0613026565b600054610100900460ff16610ec05760405162461bcd60e51b81526004016105ec906145cb565b600054610100900460ff16611f2f5760405162461bcd60e51b81526004016105ec906145cb565b60c9805463ffffffff191663ffffffff8316908117909155611f52906014614647565b60c960046101000a81548163ffffffff021916908363ffffffff16021790555050565b60cd5460405163c68f5eb360e01b81526004810183905260009182916001600160a01b039091169063c68f5eb3906024016101c06040518083038186803b158015611fbf57600080fd5b505afa158015611fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff791906143b3565b90506001816101600151600381111561201257612012613dd8565b14156120c5576101408101516101208201516040516363e1d0cd60e11b815260048101919091526001600160a01b0382169063c7c3a19a9060240160006040518083038186803b15801561206557600080fd5b505afa92505050801561209a57506040513d6000823e601f3d908101601f1916820160405261209791908101906146a1565b60015b6120a8575060009392505050565b6001600160401b031663ffffffff149a9950505050505050505050565b600281610160015160038111156120de576120de613dd8565b14156121925761014081015161012082015160405163523e3b4b60e11b81526001600160401b0390911660048201526001600160a01b0382169063a47c76969060240160006040518083038186803b15801561213957600080fd5b505afa92505050801561216e57506040513d6000823e601f3d908101601f1916820160405261216b919081019061479f565b60015b61217c575060009392505050565b506001600160a01b031615159695505050505050565b600381610160015160038111156121ab576121ab613dd8565b14156121c75761014001516001600160a01b0316151592915050565b50600092915050565b60cd5460405163c68f5eb360e01b81526004810183905260009182916001600160a01b039091169063c68f5eb3906024016101c06040518083038186803b15801561221a57600080fd5b505afa15801561222e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225291906143b3565b90506001600160601b036001826101600151600381111561227557612275613dd8565b1415612314576101408201516101208301516040516363e1d0cd60e11b815260048101919091526001600160a01b0382169063c7c3a19a9060240160006040518083038186803b1580156122c857600080fd5b505afa1580156122dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261230491908101906146a1565b5091965061247595505050505050565b6002826101600151600381111561232d5761232d613dd8565b14156123d15761014082015161012083015160405163523e3b4b60e11b81526001600160401b0390911660048201526001600160a01b0382169063a47c76969060240160006040518083038186803b15801561238857600080fd5b505afa15801561239c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123c4919081019061479f565b5091935061247592505050565b600382610160015160038111156123ea576123ea613dd8565b14156124755760d0546101408301516040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b15801561243a57600080fd5b505afa15801561244e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124729190614189565b90505b6001600160601b03169392505050565b60d3546000906001600160a01b03166124d25760405162461bcd60e51b815260206004820152600f60248201526e085393d517d0d3d3919251d5549151608a1b60448201526064016105ec565b60cd5460405163c68f5eb360e01b8152600481018590526000916001600160a01b03169063c68f5eb3906024016101c06040518083038186803b15801561251857600080fd5b505afa15801561252c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255091906143b3565b9050600060d260008154811061256857612568614173565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156125b457600080fd5b505afa1580156125c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ec9190614189565b60ce548351606085015160405163fcd6a25b60e01b81526001600160a01b039283166004820152306024820152604481019190915260006064820152929350169063fcd6a25b90608401600060405180830381600087803b15801561265057600080fd5b505af1925050508015612661575060015b61271d573d80801561268f576040519150601f19603f3d011682016040523d82523d6000602084013e612694565b606091505b5060cd5460c9546001600160a01b0390911690630d4d98a59088906126bf9063ffffffff1642614275565b60016040518463ffffffff1660e01b81526004016126df9392919061486d565b600060405180830381600087803b1580156126f957600080fd5b505af115801561270d573d6000803e3d6000fd5b505050506000935050505061110c565b60ce5460608301516000916001600160a01b03169063e1ded2de90612743908890614230565b6040518263ffffffff1660e01b815260040161276191815260200190565b60206040518083038186803b15801561277957600080fd5b505afa15801561278d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b19190614189565b60ce546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b1580156127f557600080fd5b505afa158015612809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282d9190614189565b8111156128b25760ce546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561287757600080fd5b505afa15801561288b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128af9190614189565b90505b60ce5460d280546001600160a01b039092169163f3fef3a391906000906128db576128db614173565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561292f57600080fd5b505af1158015612943573d6000803e3d6000fd5b5050505060008260d260008154811061295e5761295e614173565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156129aa57600080fd5b505afa1580156129be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e29190614189565b6129ec9190614230565b905060008111612a335760405162461bcd60e51b815260206004820152601260248201527121494e56414c494428616d6f756e74496e2960701b60448201526064016105ec565b60d1546000906001600160a01b031615612b605760ce5460d28054612b36926001600160a01b0316916330b8b2c691600090612a7157612a71614173565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260240160c06040518083038186803b158015612abc57600080fd5b505afa158015612ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af49190614897565b60d28054612b0490600190614230565b81548110612b1457612b14614173565b60009182526020909120015460d1546001600160a01b03918216911685613059565b905061271060db5482612b499190614211565b612b539190614633565b612b5d9082614230565b90505b60d0546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612ba457600080fd5b505afa158015612bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bdc9190614189565b9050600060d454600160a01b900460ff166002811115612bfe57612bfe613dd8565b1415612c1357612c0e8383613373565b612c73565b600160d454600160a01b900460ff166002811115612c3357612c33613dd8565b1415612c4357612c0e838361344d565b600260d454600160a01b900460ff166002811115612c6357612c63613dd8565b1415612c7357612c7383836135b5565b60ce5460dc546040516370a0823160e01b81523060048201526001600160a01b039283169263a9059cbb92169083906370a082319060240160206040518083038186803b158015612cc357600080fd5b505afa158015612cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cfb9190614189565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015612d4157600080fd5b505af1158015612d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7991906141b2565b5060d4546001600160a01b031615612f535760cf546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612dcf57600080fd5b505afa158015612de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e079190614189565b60d45460cf54919250612e27916001600160a01b03908116911683613648565b60d45460cf5460d054604051632b7f092360e01b8152600481018590526001600160a01b0392831660248201529082166044820152911690632b7f092390606401600060405180830381600087803b158015612e8257600080fd5b505af1158015612e96573d6000803e3d6000fd5b505060d0546040516370a0823160e01b81523060048201528493506001600160a01b0390911691506370a082319060240160206040518083038186803b158015612edf57600080fd5b505afa158015612ef3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f179190614189565b1015612f515760405162461bcd60e51b81526020600482015260096024820152680215045475f535741560bc1b60448201526064016105ec565b505b60d0546040516370a0823160e01b815230600482015260009183916001600160a01b03909116906370a082319060240160206040518083038186803b158015612f9b57600080fd5b505afa158015612faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd39190614189565b612fdd9190614230565b9050612fe98a8261372b565b9998505050505050505050565b600054610100900460ff1661301d5760405162461bcd60e51b81526004016105ec906145cb565b610ec033611988565b600054610100900460ff1661304d5760405162461bcd60e51b81526004016105ec906145cb565b6065805460ff19169055565b6000816130685750600061336b565b6000806000866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156130a657600080fd5b505afa1580156130ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130de919061492f565b90506000866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561311b57600080fd5b505afa15801561312f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613153919061492f565b905088600001516001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561319257600080fd5b505afa1580156131a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ca9190614966565b5060d95492975095508692505015806131ee575060d9546131eb8542614230565b11155b61322c5760405162461bcd60e51b815260206004820152600f60248201526e0854149250d157d3d5551110551151608a1b60448201526064016105ec565b876001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561326557600080fd5b505afa158015613279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329d9190614966565b5060d95492985096508792505015806132c1575060d9546132be8642614230565b11155b6132ff5760405162461bcd60e51b815260206004820152600f60248201526e0854149250d157d3d5551110551151608a1b60448201526064016105ec565b8260ff168b6080015160ff161461335a5761331b818486613976565b61332a838d6080015187613976565b6133398a8e6060015188613976565b6133439190614211565b61334d9190614633565b965050505050505061336b565b80826133398a8e6060015188613976565b949350505050565b60d35460d280546133b5926001600160a01b031691859160009061339957613399614173565b6000918252602090912001546001600160a01b03169190613648565b60d3546001600160a01b03166338ed1739838360d2306133d742610e1061425d565b6040518663ffffffff1660e01b81526004016133f79594939291906149ff565b600060405180830381600087803b15801561341157600080fd5b505af1158015613425573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108829190810190614a3b565b60d35460d28054613473926001600160a01b031691859160009061339957613399614173565b60006040518060a0016040528060d5805461348d9061429d565b80601f01602080910402602001604051908101604052809291908181526020018280546134b99061429d565b80156135065780601f106134db57610100808354040283529160200191613506565b820191906000526020600020905b8154815290600101906020018083116134e957829003601f168201915b505050918352505030602082015260400161352242603c61425d565b815260208101859052604090810184905260d354905163c04b8d5960e01b81529192506001600160a01b03169063c04b8d5990613563908490600401614ac0565b602060405180830381600087803b15801561357d57600080fd5b505af1158015613591573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b9190614189565b60d35460d280546135db926001600160a01b031691859160009061339957613399614173565b60d354604051633011f4b360e11b81526001600160a01b0390911690636023e966906136129060d290869086903090600401614b18565b600060405180830381600087803b15801561362c57600080fd5b505af1158015613640573d6000803e3d6000fd5b505050505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561369457600080fd5b505afa1580156136a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136cc9190614189565b6136d6919061425d565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905290915061134b9085906139e7565b60cd5460405163c68f5eb360e01b8152600481018490526000916001600160a01b03169063c68f5eb3906024016101c06040518083038186803b15801561377157600080fd5b505afa158015613785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137a991906143b3565b9050600181610160015160038111156137c4576137c4613dd8565b141561387b5760d0546101408201516101208301516040805160208101929092526001600160a01b0390931692634000aea092918691015b6040516020818303038152906040526040518463ffffffff1660e01b815260040161382993929190614b50565b602060405180830381600087803b15801561384357600080fd5b505af1158015613857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b91906141b2565b6002816101600151600381111561389457613894613dd8565b14156138d85760d054610140820151610120830151604080516001600160401b0390921660208301526001600160a01b0390931692634000aea092918691016137fc565b600381610160015160038111156138f1576138f1613dd8565b141561088257610120810151156139385760d0546101408201516101208301516040805160208101929092526001600160a01b0390931692634000aea092918691016137fc565b60d05461014082015160405163a9059cbb60e01b81526001600160a01b0391821660048201526024810185905291169063a9059cbb90604401613829565b60008160ff168360ff1610156139af576139908383614b80565b61399e9060ff16600a614c87565b6139a89085614211565b9050610752565b8160ff168360ff1611156139df576139c78284614b80565b6139d59060ff16600a614c87565b6139a89085614633565b509192915050565b6000613a3c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ab99092919063ffffffff16565b8051909150156108825780806020019051810190613a5a91906141b2565b6108825760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105ec565b606061336b848460008585843b613b125760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ec565b600080866001600160a01b03168587604051613b2e9190614c93565b60006040518083038185875af1925050503d8060008114613b6b576040519150601f19603f3d011682016040523d82523d6000602084013e613b70565b606091505b5091509150613b80828286613b8b565b979650505050505050565b60608315613b9a575081610752565b825115613baa5782518084602001fd5b8160405162461bcd60e51b81526004016105ec9190613f00565b828054828255906000526020600020908101928215613c17579160200282015b82811115613c175781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190613be4565b50613c23929150613c9b565b5090565b828054613c339061429d565b90600052602060002090601f016020900481019282613c555760008555613c17565b82601f10613c6e5782800160ff19823516178555613c17565b82800160010185558215613c17579182015b82811115613c17578235825591602001919060010190613c80565b5b80821115613c235760008155600101613c9c565b6001600160a01b038116811461180557600080fd5b8035613cd081613cb0565b919050565b600060208284031215613ce757600080fd5b813561075281613cb0565b60ff8116811461180557600080fd5b63ffffffff8116811461180557600080fd5b60008060408385031215613d2657600080fd5b8235613d3181613cf2565b91506020830135613d4181613d01565b809150509250929050565b600080600060608486031215613d6157600080fd5b8335613d6c81613cf2565b92506020840135613d7c81613d01565b929592945050506040919091013590565b600060208284031215613d9f57600080fd5b813561075281613cf2565b60008060408385031215613dbd57600080fd5b8235613dc881613cb0565b91506020830135613d4181613cb0565b634e487b7160e01b600052602160045260246000fd5b6003811061180557634e487b7160e01b600052602160045260246000fd5b60208101613e1983613dee565b91905290565b60008083601f840112613e3157600080fd5b5081356001600160401b03811115613e4857600080fd5b602083019150836020828501011115613e6057600080fd5b9250929050565b60008060208385031215613e7a57600080fd5b82356001600160401b03811115613e9057600080fd5b613e9c85828601613e1f565b90969095509350505050565b60005b83811015613ec3578181015183820152602001613eab565b8381111561134b5750506000910152565b60008151808452613eec816020860160208601613ea8565b601f01601f19169290920160200192915050565b6020815260006107526020830184613ed4565b821515815260406020820152600061336b6040830184613ed4565b600060208284031215613f4057600080fd5b813561075281613d01565b803560038110613cd057600080fd5b6000806000806000806000806000806101008b8d031215613f7a57600080fd5b8a35613f8581613cb0565b995060208b0135613f9581613cb0565b985060408b0135613fa581613cb0565b975060608b0135613fb581613cb0565b965060808b01356001600160401b0380821115613fd157600080fd5b818d0191508d601f830112613fe557600080fd5b813581811115613ff457600080fd5b8e60208260051b850101111561400957600080fd5b602083019850965061401d60a08e01613cc5565b955061402b60c08e01613f4b565b945060e08d013591508082111561404157600080fd5b5061404e8d828e01613e1f565b915080935050809150509295989b9194979a5092959850565b60006020828403121561407957600080fd5b5035919050565b60008060006060848603121561409557600080fd5b83356140a081613cb0565b925060208401356140b081613cb0565b915060408401356140c081613cb0565b809150509250925092565b600080600080600080600080610100898b0312156140e857600080fd5b883597506020890135965060408901359550606089013594506080890135935060a0890135925060c089013561411d81613d01565b915060e089013561412d81613d01565b809150509295985092959890939650565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561419b57600080fd5b5051919050565b80518015158114613cd057600080fd5b6000602082840312156141c457600080fd5b610752826141a2565b6000806000606084860312156141e257600080fd5b833592506020840135915060408401356140c081613cf2565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561422b5761422b6141fb565b500290565b600082821015614242576142426141fb565b500390565b634e487b7160e01b600052603160045260246000fd5b60008219821115614270576142706141fb565b500190565b600063ffffffff808316818516808303821115614294576142946141fb565b01949350505050565b600181811c908216806142b157607f821691505b602082108114156142d257634e487b7160e01b600052602260045260246000fd5b50919050565b600063ffffffff838116908316818110156142f5576142f56141fb565b039392505050565b634e487b7160e01b600052604160045260246000fd5b6040516101c081016001600160401b0381118282101715614336576143366142fd565b60405290565b604051602081016001600160401b0381118282101715614336576143366142fd565b604051601f8201601f191681016001600160401b0381118282101715614386576143866142fd565b604052919050565b8051613cd081613cb0565b8051613cd081613d01565b805160048110613cd057600080fd5b60006101c082840312156143c657600080fd5b6143ce614313565b6143d78361438e565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015261010061442d818501614399565b90820152610120838101519082015261014061444a81850161438e565b9082015261016061445c8482016143a4565b9082015261018061446e8482016143a4565b908201526101a0614480848201614399565b908201529392505050565b60006001600160401b038211156144a4576144a46142fd565b5060051b60200190565b600060208083850312156144c157600080fd5b82516001600160401b03808211156144d857600080fd5b81850191508282870312156144ec57600080fd5b6144f461433c565b82518281111561450357600080fd5b80840193505086601f84011261451857600080fd5b8251915061452d6145288361448b565b61435e565b82815260059290921b8301840191848101908884111561454c57600080fd5b938501935b8385101561456a57845182529385019390850190614551565b8252509695505050505050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff808416806145a4576145a4614577565b92169190910692915050565b60006000198214156145c4576145c46141fb565b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8281526040810161462683613dee565b8260208301529392505050565b60008261464257614642614577565b500490565b600063ffffffff8083168185168183048111821515161561466a5761466a6141fb565b02949350505050565b80516001600160601b0381168114613cd057600080fd5b80516001600160401b0381168114613cd057600080fd5b600080600080600080600060e0888a0312156146bc57600080fd5b87516146c781613cb0565b60208901519097506146d881613d01565b60408901519096506001600160401b03808211156146f557600080fd5b818a0191508a601f83011261470957600080fd5b81518181111561471b5761471b6142fd565b61472e601f8201601f191660200161435e565b91508082528b602082850101111561474557600080fd5b614756816020840160208601613ea8565b509550614767905060608901614673565b93506147756080890161438e565b925061478360a0890161438e565b915061479160c0890161468a565b905092959891949750929550565b600080600080608085870312156147b557600080fd5b6147be85614673565b935060206147cd81870161468a565b935060408601516147dd81613cb0565b60608701519093506001600160401b038111156147f957600080fd5b8601601f8101881361480a57600080fd5b80516148186145288261448b565b81815260059190911b8201830190838101908a83111561483757600080fd5b928401925b8284101561485e57835161484f81613cb0565b8252928401929084019061483c565b979a9699509497505050505050565b83815263ffffffff831660208201526060810161488983613dee565b826040830152949350505050565b600060c082840312156148a957600080fd5b60405160c081018181106001600160401b03821117156148cb576148cb6142fd565b60405282516148d981613cb0565b80825250602083015160208201526040830151604082015260608301516148ff81613cf2565b6060820152608083015161491281613cf2565b608082015261492360a084016141a2565b60a08201529392505050565b60006020828403121561494157600080fd5b815161075281613cf2565b805169ffffffffffffffffffff81168114613cd057600080fd5b600080600080600060a0868803121561497e57600080fd5b6149878661494c565b94506020860151935060408601519250606086015191506149aa6080870161494c565b90509295509295909350565b6000815480845260208085019450836000528060002060005b838110156149f45781546001600160a01b0316875295820195600191820191016149cf565b509495945050505050565b85815284602082015260a060408201526000614a1e60a08301866149b6565b6001600160a01b0394909416606083015250608001529392505050565b60006020808385031215614a4e57600080fd5b82516001600160401b03811115614a6457600080fd5b8301601f81018513614a7557600080fd5b8051614a836145288261448b565b81815260059190911b82018301908381019087831115614aa257600080fd5b928401925b82841015613b8057835182529284019290840190614aa7565b602081526000825160a06020840152614adc60c0840182613ed4565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b608081526000614b2b60808301876149b6565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b60018060a01b0384168152826020820152606060408201526000614b776060830184613ed4565b95945050505050565b600060ff821660ff841680821015614b9a57614b9a6141fb565b90039392505050565b600181815b80851115614bde578160001904821115614bc457614bc46141fb565b80851615614bd157918102915b93841c9390800290614ba8565b509250929050565b600082614bf55750600161110c565b81614c025750600061110c565b8160018114614c185760028114614c2257614c3e565b600191505061110c565b60ff841115614c3357614c336141fb565b50506001821b61110c565b5060208310610133831016604e8410600b8410161715614c61575081810a61110c565b614c6b8383614ba3565b8060001904821115614c7f57614c7f6141fb565b029392505050565b60006107528383614be6565b60008251614ca5818460208701613ea8565b919091019291505056fea26469706673582212206754ac20ec7578abf459f1cd866a6cb1df5a5659f4e20709ed84abb5e17e9e1264736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102525760003560e01c80638bddd2e411610146578063c6f8806c116100c3578063e6cab67111610087578063e6cab6711461055a578063f009451e1461056d578063f2fde38b14610580578063faec9c2214610593578063fce02400146105a6578063ff7137fd146105b957600080fd5b8063c6f8806c146104dd578063ccfc2e8d146104f5578063cd48a61414610508578063d5f59fb91461051b578063dfd609bb1461054757600080fd5b8063b7c3565d1161010a578063b7c3565d1461049c578063b95f1624146104a5578063c0c53b8b146104b8578063c29c0e9c146104cb578063c5064653146104d457600080fd5b80638bddd2e4146104425780638da5cb5b146104525780638dc9bc0414610463578063a47755d114610476578063aa878f761461048957600080fd5b80632f77bb66116101d45780635d59efb7116101985780635d59efb7146103de5780636e04ff0d146103f3578063715018a614610414578063729d81071461041c57806384b4609f1461042f57600080fd5b80632f77bb6614610363578063301cce601461036c5780634585e33b1461038d5780635bd482fd146103a05780635c975abb146103d357600080fd5b80630d43e8ad1161021b5780630d43e8ad146102d957806314fad707146102ec578063191888f6146102ff5780631c39033c1461031257806324ae6a271461035057600080fd5b8062912b371461025757806305f2becf1461028757806306cd9e181461029a5780630816c847146102af5780630caae41d146102c6575b600080fd5b60d15461026a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b60cd5461026a906001600160a01b031681565b6102ad6102a8366004613cd5565b6105c2565b005b6102b860d95481565b60405190815260200161027e565b6102ad6102d4366004613d13565b6106ad565b60dc5461026a906001600160a01b031681565b6102b86102fa366004613d4c565b61070f565b60cf5461026a906001600160a01b031681565b61033b610320366004613d8d565b60ff16600090815260cb602052604090205463ffffffff1690565b60405163ffffffff909116815260200161027e565b6102ad61035e366004613daa565b610759565b6102b860da5481565b60d45461038090600160a01b900460ff1681565b60405161027e9190613e0c565b6102ad61039b366004613e67565b610887565b6103c36103ae366004613cd5565b60cc6020526000908152604090205460ff1681565b604051901515815260200161027e565b60655460ff166103c3565b6103e6610c7f565b60405161027e9190613f00565b610406610401366004613e67565b610d0d565b60405161027e929190613f13565b6102ad610e8c565b6102ad61042a366004613f2e565b610ec2565b6102ad61043d366004613cd5565b610f14565b60c95461033b9063ffffffff1681565b6033546001600160a01b031661026a565b6102ad610471366004613f5a565b610fdd565b60ce5461026a906001600160a01b031681565b6102b8610497366004613d13565b6110e7565b6102b860db5481565b61026a6104b3366004614067565b611112565b6102ad6104c6366004614080565b61113c565b6102b860d75481565b6102b860d65481565b60c95461033b90640100000000900463ffffffff1681565b6102ad610503366004613cd5565b611351565b6102ad610516366004613f2e565b61141a565b6103c3610529366004613cd5565b6001600160a01b0316600090815260cc602052604090205460ff1690565b6102ad6105553660046140cb565b611460565b6102ad610568366004614067565b61154b565b60d45461026a906001600160a01b031681565b6102ad61058e366004613cd5565b61176d565b60d35461026a906001600160a01b031681565b60d05461026a906001600160a01b031681565b6102b860d85481565b6033546001600160a01b031633146105f55760405162461bcd60e51b81526004016105ec9061413e565b60405180910390fd5b6001600160a01b038116600090815260cc602052604090205460ff166106555760405162461bcd60e51b815260206004820152601560248201527408549151d254d5149657d393d517d0531313d5d151605a1b60448201526064016105ec565b6001600160a01b038116600081815260cc6020908152604091829020805460ff1916905590519182527f41ff3cbb6d9f3c743a5fd7b126595848bf20fe04ced3af1bcfc8313f20f925c391015b60405180910390a150565b6033546001600160a01b031633146106d75760405162461bcd60e51b81526004016105ec9061413e565b6106e08161180e565b60ff92909216600090815260cb60205260409020805463ffffffff191663ffffffff9093169290921790915550565b60ff8316600090815260ca6020908152604080832063ffffffff86168452909152812080548390811061074457610744614173565b906000526020600020015490505b9392505050565b6033546001600160a01b031633146107835760405162461bcd60e51b81526004016105ec9061413e565b6040516370a0823160e01b81523060048201526001600160a01b0383169063a9059cbb90839083906370a082319060240160206040518083038186803b1580156107cc57600080fd5b505afa1580156107e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108049190614189565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561084a57600080fd5b505af115801561085e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088291906141b2565b505050565b60655460ff16156108cd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105ec565b600260975414156109205760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105ec565b600260975560008080610935848601866141cd565b9250925092506000610945611838565b9050600080610955866005614211565b60ff8516600090815260cb602052604090205490915063ffffffff1661099b5760ff8416600090815260cb60205260409020805463ffffffff191663ffffffff85161790555b60ff8416600090815260cb602052604090205463ffffffff808516911611156109f35760405162461bcd60e51b815260206004820152600a60248201526921544f4f5f4541524c5960b01b60448201526064016105ec565b8582108015610a025750600081115b8015610a29575060ff8416600090815260cb602052604090205463ffffffff808516911611155b15610be85760ff8416600090815260ca6020908152604080832060cb83528184205463ffffffff1684529091529020548015610b585760ff8516600090815260ca6020908152604080832060cb83528184205463ffffffff1684529091528120610a94600184614230565b81548110610aa457610aa4614173565b600091825260208083209091015460ff8916835260ca8252604080842060cb84528185205463ffffffff168552909252912080549192509080610ae957610ae9614247565b60019003818190600052602060002001600090559055610b098682611860565b6040805160ff88168152602081018390527f58c7ae721fd25aaf84e68db9ce9ac6fed4f08438a370a4299d19f8c1425c499e910160405180910390a1610b5060018561425d565b935050610be2565b60ff8516600090815260cb602052604090205463ffffffff80861691161015610bdc5760c95460ff8616600090815260cb60205260408120805463ffffffff93841693919291610baa91859116614275565b92506101000a81548163ffffffff021916908363ffffffff160217905550600182610bd59190614230565b9150610be2565b50610be8565b506109f3565b60ff8416600081815260ca6020908152604080832060cb8084528285205463ffffffff168086529184528285205494869052835281518b81529283018790528282018a90526060830194909452608082019290925260a0810192909252517fd69140f88b9a25350749bb371882f4479133fc8b65602aac60f6c1b3598f08329181900360c00190a150506001609755505050505050565b60d58054610c8c9061429d565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb89061429d565b8015610d055780601f10610cda57610100808354040283529160200191610d05565b820191906000526020600020905b815481529060010190602001808311610ce857829003601f168201915b505050505081565b60006060818080610d20868801886141cd565b9250925092506000610d30611838565b60ff8316600090815260cb602052604081205490975090915063ffffffff1680610d575750805b8063ffffffff168263ffffffff1610158015610d92575060c954640100000000900463ffffffff16610d8982846142d8565b63ffffffff1610155b15610da05760019650610e30565b8163ffffffff168163ffffffff1611610e305760ff8316600090815260ca6020908152604080832063ffffffff8516845290915290205415801590610e08575060ff8316600090815260ca6020908152604080832063ffffffff851684529091529020548411155b15610e165760019650610e30565b60c954610e299063ffffffff1682614275565b9050610da0565b60ff8316600081815260ca6020908152604080832063ffffffff86168452825291829020548251918201899052918101919091526060810191909152608001604051602081830303815290604052955050505050509250929050565b6033546001600160a01b03163314610eb65760405162461bcd60e51b81526004016105ec9061413e565b610ec06000611988565b565b6033546001600160a01b03163314610eec5760405162461bcd60e51b81526004016105ec9061413e565b60c9805463ffffffff9092166401000000000267ffffffff0000000019909216919091179055565b6033546001600160a01b03163314610f3e5760405162461bcd60e51b81526004016105ec9061413e565b6001600160a01b038116610f895760405162461bcd60e51b815260206004820152601260248201527121494e56414c49442872656769737472792960701b60448201526064016105ec565b6001600160a01b038116600081815260cc6020908152604091829020805460ff1916600117905590519182527faa9fd3a8c3d93ebd697846ec56ec5fa196deef170601239a813cae8d80dfcddb91016106a2565b6033546001600160a01b031633146110075760405162461bcd60e51b81526004016105ec9061413e565b60cf80546001600160a01b03808d166001600160a01b03199283161790925560d080548c841690831617905560d180548b841690831617905560d38054928a169290911691909117905561105d60d28787613bc4565b5060d480546001600160a01b0386166001600160a01b03198216811783558592916001600160a81b03191617600160a01b8360028111156110a0576110a0613dd8565b02179055506110b160d58383613c27565b506040517f2a77e01e84a8eac1e6bcac9bde4e5227a63842990baacef9e711c666f86ff1c090600090a150505050505050505050565b60ff8216600090815260ca6020908152604080832063ffffffff851684529091529020545b92915050565b60d2818154811061112257600080fd5b6000918252602090912001546001600160a01b0316905081565b600054610100900460ff166111575760005460ff161561115b565b303b155b6111be5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105ec565b600054610100900460ff161580156111e0576000805461ffff19166101011790555b6001600160a01b0384166112365760405162461bcd60e51b815260206004820152601c60248201527f21494e56414c4944286361736b436861696e6c696e6b546f707570290000000060448201526064016105ec565b6001600160a01b0383166112825760405162461bcd60e51b815260206004820152601360248201527221494e56414c4944286361736b5661756c742960681b60448201526064016105ec565b6001600160a01b0382166112d35760405162461bcd60e51b815260206004820152601860248201527721494e56414c4944286665654469737472696275746f722960401b60448201526064016105ec565b60cd80546001600160a01b038087166001600160a01b03199283161790925560ce805486841690831617905560dc805492851692909116919091179055600060d681905560d781905560d881905560d955600160da55606460db5561133961a8c06119da565b801561134b576000805461ff00191690555b50505050565b6033546001600160a01b0316331461137b5760405162461bcd60e51b81526004016105ec9061413e565b6001600160a01b0381166113cc5760405162461bcd60e51b815260206004820152601860248201527721494e56414c4944286665654469737472696275746f722960401b60448201526064016105ec565b60dc80546001600160a01b0319166001600160a01b0383169081179091556040519081527f9e9a9a4a82acd1b28aab6bf1d43aad70ae6d290549c0d6183e2e91ebcdf57441906020016106a2565b6033546001600160a01b031633146114445760405162461bcd60e51b81526004016105ec9061413e565b60c9805463ffffffff191663ffffffff92909216919091179055565b6033546001600160a01b0316331461148a5760405162461bcd60e51b81526004016105ec9061413e565b61271087106114d35760405162461bcd60e51b815260206004820152601560248201527421494e56414c494428746f7075704665654270732960581b60448201526064016105ec565b60d688905560d787905560d886905560d985905560da84905560db83905560c9805463ffffffff8381166401000000000267ffffffffffffffff19909216908516171790556040517f3b5fda6f71b960b21be0b432d9b7c87d9c8c996477ea1eba5c19cb77d1e027aa90600090a15050505050505050565b6002609754141561159e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105ec565b600260975560655460ff16156115e95760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016105ec565b60cd5460405163c68f5eb360e01b8152600481018390526000916001600160a01b03169063c68f5eb3906024016101c06040518083038186803b15801561162f57600080fd5b505afa158015611643573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166791906143b3565b905060008160200151116116b15760405162461bcd60e51b815260206004820152601160248201527021494e56414c49442867726f757049642960781b60448201526064016105ec565b6116ba82611a22565b5060cd54602082015160405163552de85160e11b815260048101919091526000916001600160a01b03169063aa5bd0a29060240160006040518083038186803b15801561170657600080fd5b505afa15801561171a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261174291908101906144ae565b80515190915060011415611763576117636001836020015160001b42611d24565b5050600160975550565b6033546001600160a01b031633146117975760405162461bcd60e51b81526004016105ec9061413e565b6001600160a01b0381166117fc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ec565b61180581611988565b50565b3b151590565b60c95460009063ffffffff16611824818461458d565b61182e90846142d8565b61110c9190614275565b60c95460009042906118509063ffffffff168261458d565b61185a90826142d8565b91505090565b60cd5460405163552de85160e11b8152600481018390526000916001600160a01b03169063aa5bd0a29060240160006040518083038186803b1580156118a557600080fd5b505afa1580156118b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118e191908101906144ae565b8051519091506118f057505050565b6000805b82515181108015611906575060da5482105b15611956576119318360000151828151811061192457611924614173565b6020026020010151611a22565b156119445761194160018361425d565b91505b8061194e816145b0565b9150506118f4565b5081515181101580611969575060da5481105b1561197e57611979848442611d24565b61134b565b61134b8484611dec565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16611a015760405162461bcd60e51b81526004016105ec906145cb565b611a09611e73565b611a11611eaa565b611a19611ee1565b61180581611f08565b60cd5460405163c68f5eb360e01b81526004810183905260009182916001600160a01b039091169063c68f5eb3906024016101c06040518083038186803b158015611a6c57600080fd5b505afa158015611a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa491906143b3565b905060018161018001516003811115611abf57611abf613dd8565b14611acd5750600092915050565b4263ffffffff16816101a0015163ffffffff1610611aee5750600092915050565b611af783611f75565b1580611b43575060038161016001516003811115611b1757611b17613dd8565b14158015611b4357506101408101516001600160a01b0316600090815260cc602052604090205460ff16155b15611bb65760cd54604051635ba581cd60e01b81526001600160a01b0390911690635ba581cd90611b7b908690600190600401614616565b600060405180830381600087803b158015611b9557600080fd5b505af1158015611ba9573d6000803e3d6000fd5b5060009695505050505050565b8060400151611bc4846121d0565b10611bd25750600092915050565b600061271060d7548360600151611be99190614211565b611bf39190614633565b905060d854811015611c04575060d8545b6000611c108583612485565b90508015611c965760cd546060840151604051632d32f27960e21b815260048101889052602481019190915260448101839052606481018490526001600160a01b039091169063b4cbc9e490608401600060405180830381600087803b158015611c7957600080fd5b505af1158015611c8d573d6000803e3d6000fd5b50505050611d19565b600060d654118015611cae575060d6548360e0015110155b15611d195760cd54604051635ba581cd60e01b81526001600160a01b0390911690635ba581cd90611ce6908890600290600401614616565b600060405180830381600087803b158015611d0057600080fd5b505af1158015611d14573d6000803e3d6000fd5b505050505b506001949350505050565b6000611d2f8261180e565b60ff8516600090815260cb602052604090205490915063ffffffff9081169082161015611d71575060ff8316600090815260cb602052604090205463ffffffff165b60ff8416600081815260ca6020908152604080832063ffffffff861680855290835281842080546001810182559085529383902090930187905580519384529083018690528201527f67778e52b18dcf574ab071142a886fce91a8ce5e60e176229fdadb8c063caaed9060600160405180910390a150505050565b6000611df6611838565b60ff8416600081815260ca6020908152604080832063ffffffff861680855290835281842080546001810182559085529383902090930187905580519384529083018690528201529091507f67778e52b18dcf574ab071142a886fce91a8ce5e60e176229fdadb8c063caaed9060600160405180910390a1505050565b600054610100900460ff16611e9a5760405162461bcd60e51b81526004016105ec906145cb565b611ea2611ee1565b610ec0612ff6565b600054610100900460ff16611ed15760405162461bcd60e51b81526004016105ec906145cb565b611ed9611ee1565b610ec0613026565b600054610100900460ff16610ec05760405162461bcd60e51b81526004016105ec906145cb565b600054610100900460ff16611f2f5760405162461bcd60e51b81526004016105ec906145cb565b60c9805463ffffffff191663ffffffff8316908117909155611f52906014614647565b60c960046101000a81548163ffffffff021916908363ffffffff16021790555050565b60cd5460405163c68f5eb360e01b81526004810183905260009182916001600160a01b039091169063c68f5eb3906024016101c06040518083038186803b158015611fbf57600080fd5b505afa158015611fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff791906143b3565b90506001816101600151600381111561201257612012613dd8565b14156120c5576101408101516101208201516040516363e1d0cd60e11b815260048101919091526001600160a01b0382169063c7c3a19a9060240160006040518083038186803b15801561206557600080fd5b505afa92505050801561209a57506040513d6000823e601f3d908101601f1916820160405261209791908101906146a1565b60015b6120a8575060009392505050565b6001600160401b031663ffffffff149a9950505050505050505050565b600281610160015160038111156120de576120de613dd8565b14156121925761014081015161012082015160405163523e3b4b60e11b81526001600160401b0390911660048201526001600160a01b0382169063a47c76969060240160006040518083038186803b15801561213957600080fd5b505afa92505050801561216e57506040513d6000823e601f3d908101601f1916820160405261216b919081019061479f565b60015b61217c575060009392505050565b506001600160a01b031615159695505050505050565b600381610160015160038111156121ab576121ab613dd8565b14156121c75761014001516001600160a01b0316151592915050565b50600092915050565b60cd5460405163c68f5eb360e01b81526004810183905260009182916001600160a01b039091169063c68f5eb3906024016101c06040518083038186803b15801561221a57600080fd5b505afa15801561222e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225291906143b3565b90506001600160601b036001826101600151600381111561227557612275613dd8565b1415612314576101408201516101208301516040516363e1d0cd60e11b815260048101919091526001600160a01b0382169063c7c3a19a9060240160006040518083038186803b1580156122c857600080fd5b505afa1580156122dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261230491908101906146a1565b5091965061247595505050505050565b6002826101600151600381111561232d5761232d613dd8565b14156123d15761014082015161012083015160405163523e3b4b60e11b81526001600160401b0390911660048201526001600160a01b0382169063a47c76969060240160006040518083038186803b15801561238857600080fd5b505afa15801561239c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526123c4919081019061479f565b5091935061247592505050565b600382610160015160038111156123ea576123ea613dd8565b14156124755760d0546101408301516040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b15801561243a57600080fd5b505afa15801561244e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124729190614189565b90505b6001600160601b03169392505050565b60d3546000906001600160a01b03166124d25760405162461bcd60e51b815260206004820152600f60248201526e085393d517d0d3d3919251d5549151608a1b60448201526064016105ec565b60cd5460405163c68f5eb360e01b8152600481018590526000916001600160a01b03169063c68f5eb3906024016101c06040518083038186803b15801561251857600080fd5b505afa15801561252c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255091906143b3565b9050600060d260008154811061256857612568614173565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156125b457600080fd5b505afa1580156125c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ec9190614189565b60ce548351606085015160405163fcd6a25b60e01b81526001600160a01b039283166004820152306024820152604481019190915260006064820152929350169063fcd6a25b90608401600060405180830381600087803b15801561265057600080fd5b505af1925050508015612661575060015b61271d573d80801561268f576040519150601f19603f3d011682016040523d82523d6000602084013e612694565b606091505b5060cd5460c9546001600160a01b0390911690630d4d98a59088906126bf9063ffffffff1642614275565b60016040518463ffffffff1660e01b81526004016126df9392919061486d565b600060405180830381600087803b1580156126f957600080fd5b505af115801561270d573d6000803e3d6000fd5b505050506000935050505061110c565b60ce5460608301516000916001600160a01b03169063e1ded2de90612743908890614230565b6040518263ffffffff1660e01b815260040161276191815260200190565b60206040518083038186803b15801561277957600080fd5b505afa15801561278d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127b19190614189565b60ce546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b1580156127f557600080fd5b505afa158015612809573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282d9190614189565b8111156128b25760ce546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561287757600080fd5b505afa15801561288b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128af9190614189565b90505b60ce5460d280546001600160a01b039092169163f3fef3a391906000906128db576128db614173565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561292f57600080fd5b505af1158015612943573d6000803e3d6000fd5b5050505060008260d260008154811061295e5761295e614173565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156129aa57600080fd5b505afa1580156129be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e29190614189565b6129ec9190614230565b905060008111612a335760405162461bcd60e51b815260206004820152601260248201527121494e56414c494428616d6f756e74496e2960701b60448201526064016105ec565b60d1546000906001600160a01b031615612b605760ce5460d28054612b36926001600160a01b0316916330b8b2c691600090612a7157612a71614173565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260240160c06040518083038186803b158015612abc57600080fd5b505afa158015612ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af49190614897565b60d28054612b0490600190614230565b81548110612b1457612b14614173565b60009182526020909120015460d1546001600160a01b03918216911685613059565b905061271060db5482612b499190614211565b612b539190614633565b612b5d9082614230565b90505b60d0546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612ba457600080fd5b505afa158015612bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bdc9190614189565b9050600060d454600160a01b900460ff166002811115612bfe57612bfe613dd8565b1415612c1357612c0e8383613373565b612c73565b600160d454600160a01b900460ff166002811115612c3357612c33613dd8565b1415612c4357612c0e838361344d565b600260d454600160a01b900460ff166002811115612c6357612c63613dd8565b1415612c7357612c7383836135b5565b60ce5460dc546040516370a0823160e01b81523060048201526001600160a01b039283169263a9059cbb92169083906370a082319060240160206040518083038186803b158015612cc357600080fd5b505afa158015612cd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cfb9190614189565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015612d4157600080fd5b505af1158015612d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7991906141b2565b5060d4546001600160a01b031615612f535760cf546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015612dcf57600080fd5b505afa158015612de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e079190614189565b60d45460cf54919250612e27916001600160a01b03908116911683613648565b60d45460cf5460d054604051632b7f092360e01b8152600481018590526001600160a01b0392831660248201529082166044820152911690632b7f092390606401600060405180830381600087803b158015612e8257600080fd5b505af1158015612e96573d6000803e3d6000fd5b505060d0546040516370a0823160e01b81523060048201528493506001600160a01b0390911691506370a082319060240160206040518083038186803b158015612edf57600080fd5b505afa158015612ef3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f179190614189565b1015612f515760405162461bcd60e51b81526020600482015260096024820152680215045475f535741560bc1b60448201526064016105ec565b505b60d0546040516370a0823160e01b815230600482015260009183916001600160a01b03909116906370a082319060240160206040518083038186803b158015612f9b57600080fd5b505afa158015612faf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fd39190614189565b612fdd9190614230565b9050612fe98a8261372b565b9998505050505050505050565b600054610100900460ff1661301d5760405162461bcd60e51b81526004016105ec906145cb565b610ec033611988565b600054610100900460ff1661304d5760405162461bcd60e51b81526004016105ec906145cb565b6065805460ff19169055565b6000816130685750600061336b565b6000806000866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156130a657600080fd5b505afa1580156130ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130de919061492f565b90506000866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561311b57600080fd5b505afa15801561312f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613153919061492f565b905088600001516001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561319257600080fd5b505afa1580156131a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131ca9190614966565b5060d95492975095508692505015806131ee575060d9546131eb8542614230565b11155b61322c5760405162461bcd60e51b815260206004820152600f60248201526e0854149250d157d3d5551110551151608a1b60448201526064016105ec565b876001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561326557600080fd5b505afa158015613279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329d9190614966565b5060d95492985096508792505015806132c1575060d9546132be8642614230565b11155b6132ff5760405162461bcd60e51b815260206004820152600f60248201526e0854149250d157d3d5551110551151608a1b60448201526064016105ec565b8260ff168b6080015160ff161461335a5761331b818486613976565b61332a838d6080015187613976565b6133398a8e6060015188613976565b6133439190614211565b61334d9190614633565b965050505050505061336b565b80826133398a8e6060015188613976565b949350505050565b60d35460d280546133b5926001600160a01b031691859160009061339957613399614173565b6000918252602090912001546001600160a01b03169190613648565b60d3546001600160a01b03166338ed1739838360d2306133d742610e1061425d565b6040518663ffffffff1660e01b81526004016133f79594939291906149ff565b600060405180830381600087803b15801561341157600080fd5b505af1158015613425573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108829190810190614a3b565b60d35460d28054613473926001600160a01b031691859160009061339957613399614173565b60006040518060a0016040528060d5805461348d9061429d565b80601f01602080910402602001604051908101604052809291908181526020018280546134b99061429d565b80156135065780601f106134db57610100808354040283529160200191613506565b820191906000526020600020905b8154815290600101906020018083116134e957829003601f168201915b505050918352505030602082015260400161352242603c61425d565b815260208101859052604090810184905260d354905163c04b8d5960e01b81529192506001600160a01b03169063c04b8d5990613563908490600401614ac0565b602060405180830381600087803b15801561357d57600080fd5b505af1158015613591573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b9190614189565b60d35460d280546135db926001600160a01b031691859160009061339957613399614173565b60d354604051633011f4b360e11b81526001600160a01b0390911690636023e966906136129060d290869086903090600401614b18565b600060405180830381600087803b15801561362c57600080fd5b505af1158015613640573d6000803e3d6000fd5b505050505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b15801561369457600080fd5b505afa1580156136a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136cc9190614189565b6136d6919061425d565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905290915061134b9085906139e7565b60cd5460405163c68f5eb360e01b8152600481018490526000916001600160a01b03169063c68f5eb3906024016101c06040518083038186803b15801561377157600080fd5b505afa158015613785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137a991906143b3565b9050600181610160015160038111156137c4576137c4613dd8565b141561387b5760d0546101408201516101208301516040805160208101929092526001600160a01b0390931692634000aea092918691015b6040516020818303038152906040526040518463ffffffff1660e01b815260040161382993929190614b50565b602060405180830381600087803b15801561384357600080fd5b505af1158015613857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134b91906141b2565b6002816101600151600381111561389457613894613dd8565b14156138d85760d054610140820151610120830151604080516001600160401b0390921660208301526001600160a01b0390931692634000aea092918691016137fc565b600381610160015160038111156138f1576138f1613dd8565b141561088257610120810151156139385760d0546101408201516101208301516040805160208101929092526001600160a01b0390931692634000aea092918691016137fc565b60d05461014082015160405163a9059cbb60e01b81526001600160a01b0391821660048201526024810185905291169063a9059cbb90604401613829565b60008160ff168360ff1610156139af576139908383614b80565b61399e9060ff16600a614c87565b6139a89085614211565b9050610752565b8160ff168360ff1611156139df576139c78284614b80565b6139d59060ff16600a614c87565b6139a89085614633565b509192915050565b6000613a3c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613ab99092919063ffffffff16565b8051909150156108825780806020019051810190613a5a91906141b2565b6108825760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105ec565b606061336b848460008585843b613b125760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ec565b600080866001600160a01b03168587604051613b2e9190614c93565b60006040518083038185875af1925050503d8060008114613b6b576040519150601f19603f3d011682016040523d82523d6000602084013e613b70565b606091505b5091509150613b80828286613b8b565b979650505050505050565b60608315613b9a575081610752565b825115613baa5782518084602001fd5b8160405162461bcd60e51b81526004016105ec9190613f00565b828054828255906000526020600020908101928215613c17579160200282015b82811115613c175781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190613be4565b50613c23929150613c9b565b5090565b828054613c339061429d565b90600052602060002090601f016020900481019282613c555760008555613c17565b82601f10613c6e5782800160ff19823516178555613c17565b82800160010185558215613c17579182015b82811115613c17578235825591602001919060010190613c80565b5b80821115613c235760008155600101613c9c565b6001600160a01b038116811461180557600080fd5b8035613cd081613cb0565b919050565b600060208284031215613ce757600080fd5b813561075281613cb0565b60ff8116811461180557600080fd5b63ffffffff8116811461180557600080fd5b60008060408385031215613d2657600080fd5b8235613d3181613cf2565b91506020830135613d4181613d01565b809150509250929050565b600080600060608486031215613d6157600080fd5b8335613d6c81613cf2565b92506020840135613d7c81613d01565b929592945050506040919091013590565b600060208284031215613d9f57600080fd5b813561075281613cf2565b60008060408385031215613dbd57600080fd5b8235613dc881613cb0565b91506020830135613d4181613cb0565b634e487b7160e01b600052602160045260246000fd5b6003811061180557634e487b7160e01b600052602160045260246000fd5b60208101613e1983613dee565b91905290565b60008083601f840112613e3157600080fd5b5081356001600160401b03811115613e4857600080fd5b602083019150836020828501011115613e6057600080fd5b9250929050565b60008060208385031215613e7a57600080fd5b82356001600160401b03811115613e9057600080fd5b613e9c85828601613e1f565b90969095509350505050565b60005b83811015613ec3578181015183820152602001613eab565b8381111561134b5750506000910152565b60008151808452613eec816020860160208601613ea8565b601f01601f19169290920160200192915050565b6020815260006107526020830184613ed4565b821515815260406020820152600061336b6040830184613ed4565b600060208284031215613f4057600080fd5b813561075281613d01565b803560038110613cd057600080fd5b6000806000806000806000806000806101008b8d031215613f7a57600080fd5b8a35613f8581613cb0565b995060208b0135613f9581613cb0565b985060408b0135613fa581613cb0565b975060608b0135613fb581613cb0565b965060808b01356001600160401b0380821115613fd157600080fd5b818d0191508d601f830112613fe557600080fd5b813581811115613ff457600080fd5b8e60208260051b850101111561400957600080fd5b602083019850965061401d60a08e01613cc5565b955061402b60c08e01613f4b565b945060e08d013591508082111561404157600080fd5b5061404e8d828e01613e1f565b915080935050809150509295989b9194979a5092959850565b60006020828403121561407957600080fd5b5035919050565b60008060006060848603121561409557600080fd5b83356140a081613cb0565b925060208401356140b081613cb0565b915060408401356140c081613cb0565b809150509250925092565b600080600080600080600080610100898b0312156140e857600080fd5b883597506020890135965060408901359550606089013594506080890135935060a0890135925060c089013561411d81613d01565b915060e089013561412d81613d01565b809150509295985092959890939650565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561419b57600080fd5b5051919050565b80518015158114613cd057600080fd5b6000602082840312156141c457600080fd5b610752826141a2565b6000806000606084860312156141e257600080fd5b833592506020840135915060408401356140c081613cf2565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561422b5761422b6141fb565b500290565b600082821015614242576142426141fb565b500390565b634e487b7160e01b600052603160045260246000fd5b60008219821115614270576142706141fb565b500190565b600063ffffffff808316818516808303821115614294576142946141fb565b01949350505050565b600181811c908216806142b157607f821691505b602082108114156142d257634e487b7160e01b600052602260045260246000fd5b50919050565b600063ffffffff838116908316818110156142f5576142f56141fb565b039392505050565b634e487b7160e01b600052604160045260246000fd5b6040516101c081016001600160401b0381118282101715614336576143366142fd565b60405290565b604051602081016001600160401b0381118282101715614336576143366142fd565b604051601f8201601f191681016001600160401b0381118282101715614386576143866142fd565b604052919050565b8051613cd081613cb0565b8051613cd081613d01565b805160048110613cd057600080fd5b60006101c082840312156143c657600080fd5b6143ce614313565b6143d78361438e565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e082015261010061442d818501614399565b90820152610120838101519082015261014061444a81850161438e565b9082015261016061445c8482016143a4565b9082015261018061446e8482016143a4565b908201526101a0614480848201614399565b908201529392505050565b60006001600160401b038211156144a4576144a46142fd565b5060051b60200190565b600060208083850312156144c157600080fd5b82516001600160401b03808211156144d857600080fd5b81850191508282870312156144ec57600080fd5b6144f461433c565b82518281111561450357600080fd5b80840193505086601f84011261451857600080fd5b8251915061452d6145288361448b565b61435e565b82815260059290921b8301840191848101908884111561454c57600080fd5b938501935b8385101561456a57845182529385019390850190614551565b8252509695505050505050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff808416806145a4576145a4614577565b92169190910692915050565b60006000198214156145c4576145c46141fb565b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b8281526040810161462683613dee565b8260208301529392505050565b60008261464257614642614577565b500490565b600063ffffffff8083168185168183048111821515161561466a5761466a6141fb565b02949350505050565b80516001600160601b0381168114613cd057600080fd5b80516001600160401b0381168114613cd057600080fd5b600080600080600080600060e0888a0312156146bc57600080fd5b87516146c781613cb0565b60208901519097506146d881613d01565b60408901519096506001600160401b03808211156146f557600080fd5b818a0191508a601f83011261470957600080fd5b81518181111561471b5761471b6142fd565b61472e601f8201601f191660200161435e565b91508082528b602082850101111561474557600080fd5b614756816020840160208601613ea8565b509550614767905060608901614673565b93506147756080890161438e565b925061478360a0890161438e565b915061479160c0890161468a565b905092959891949750929550565b600080600080608085870312156147b557600080fd5b6147be85614673565b935060206147cd81870161468a565b935060408601516147dd81613cb0565b60608701519093506001600160401b038111156147f957600080fd5b8601601f8101881361480a57600080fd5b80516148186145288261448b565b81815260059190911b8201830190838101908a83111561483757600080fd5b928401925b8284101561485e57835161484f81613cb0565b8252928401929084019061483c565b979a9699509497505050505050565b83815263ffffffff831660208201526060810161488983613dee565b826040830152949350505050565b600060c082840312156148a957600080fd5b60405160c081018181106001600160401b03821117156148cb576148cb6142fd565b60405282516148d981613cb0565b80825250602083015160208201526040830151604082015260608301516148ff81613cf2565b6060820152608083015161491281613cf2565b608082015261492360a084016141a2565b60a08201529392505050565b60006020828403121561494157600080fd5b815161075281613cf2565b805169ffffffffffffffffffff81168114613cd057600080fd5b600080600080600060a0868803121561497e57600080fd5b6149878661494c565b94506020860151935060408601519250606086015191506149aa6080870161494c565b90509295509295909350565b6000815480845260208085019450836000528060002060005b838110156149f45781546001600160a01b0316875295820195600191820191016149cf565b509495945050505050565b85815284602082015260a060408201526000614a1e60a08301866149b6565b6001600160a01b0394909416606083015250608001529392505050565b60006020808385031215614a4e57600080fd5b82516001600160401b03811115614a6457600080fd5b8301601f81018513614a7557600080fd5b8051614a836145288261448b565b81815260059190911b82018301908381019087831115614aa257600080fd5b928401925b82841015613b8057835182529284019290840190614aa7565b602081526000825160a06020840152614adc60c0840182613ed4565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b608081526000614b2b60808301876149b6565b60208301959095525060408101929092526001600160a01b0316606090910152919050565b60018060a01b0384168152826020820152606060408201526000614b776060830184613ed4565b95945050505050565b600060ff821660ff841680821015614b9a57614b9a6141fb565b90039392505050565b600181815b80851115614bde578160001904821115614bc457614bc46141fb565b80851615614bd157918102915b93841c9390800290614ba8565b509250929050565b600082614bf55750600161110c565b81614c025750600061110c565b8160018114614c185760028114614c2257614c3e565b600191505061110c565b60ff841115614c3357614c336141fb565b50506001821b61110c565b5060208310610133831016604e8410600b8410161715614c61575081810a61110c565b614c6b8383614ba3565b8060001904821115614c7f57614c7f6141fb565b029392505050565b60006107528383614be6565b60008251614ca5818460208701613ea8565b919091019291505056fea26469706673582212206754ac20ec7578abf459f1cd866a6cb1df5a5659f4e20709ed84abb5e17e9e1264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.",
        "params": {
          "checkData": "specified in the upkeep registration so it is always the same for a registered upkeep. This can easilly be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."
        },
        "returns": {
          "performData": "bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.",
          "upkeepNeeded": "boolean to indicate whether the keeper should call performUpkeep or not."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "allowedRegistries": {
        "details": "map of registries address that are allowed "
      },
      "caskChainlinkTopup": {
        "details": "Pointer to CaskChainlinkTopup contract "
      },
      "caskVault": {
        "details": "vault to use for ChainlinkTopup funding. "
      },
      "feeDistributor": {
        "details": "Address to receive DCA fees. "
      },
      "maxPriceFeedAge": {
        "details": "max allowable age for price feed data. "
      },
      "maxSkips": {
        "details": "max number of failed ChainlinkTopup purchases before ChainlinkTopup is permanently canceled. "
      },
      "maxSwapSlippageBps": {
        "details": "max slippage allowed when buying LINK on the DEX for a topup. "
      },
      "maxTopupsPerGroupRun": {
        "details": "max number of topups to do per each run of a group. "
      },
      "topupFeeBps": {
        "details": "ChainlinkTopup transaction fee bps and min. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."
      },
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 327,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 330,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2551,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 205,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 319,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 415,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 506,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 521,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 564,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 18014,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "queueBucketSize",
        "offset": 0,
        "slot": "201",
        "type": "t_uint32"
      },
      {
        "astId": 18017,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "maxQueueAge",
        "offset": 4,
        "slot": "201",
        "type": "t_uint32"
      },
      {
        "astId": 18025,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "queue",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint8,t_mapping(t_uint32,t_array(t_bytes32)dyn_storage))"
      },
      {
        "astId": 18029,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "queueBucket",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint8,t_uint32)"
      },
      {
        "astId": 9588,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "allowedRegistries",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9592,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "caskChainlinkTopup",
        "offset": 0,
        "slot": "205",
        "type": "t_contract(ICaskChainlinkTopup)11496"
      },
      {
        "astId": 9596,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "caskVault",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(ICaskVault)17780"
      },
      {
        "astId": 9599,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "linkBridgeToken",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IERC20Metadata)4344"
      },
      {
        "astId": 9602,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "linkFundingToken",
        "offset": 0,
        "slot": "208",
        "type": "t_contract(LinkTokenInterface)17902"
      },
      {
        "astId": 9605,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "linkPriceFeed",
        "offset": 0,
        "slot": "209",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 9608,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "linkSwapPath",
        "offset": 0,
        "slot": "210",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9610,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "linkSwapRouter",
        "offset": 0,
        "slot": "211",
        "type": "t_address"
      },
      {
        "astId": 9613,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "pegswap",
        "offset": 0,
        "slot": "212",
        "type": "t_contract(IPegSwap)17807"
      },
      {
        "astId": 9616,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "linkSwapProtocol",
        "offset": 20,
        "slot": "212",
        "type": "t_enum(SwapProtocol)11502"
      },
      {
        "astId": 9618,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "linkSwapData",
        "offset": 0,
        "slot": "213",
        "type": "t_bytes_storage"
      },
      {
        "astId": 9621,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "maxSkips",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 9624,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "topupFeeBps",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 9626,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "topupFeeMin",
        "offset": 0,
        "slot": "216",
        "type": "t_uint256"
      },
      {
        "astId": 9629,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "maxPriceFeedAge",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      },
      {
        "astId": 9632,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "maxTopupsPerGroupRun",
        "offset": 0,
        "slot": "218",
        "type": "t_uint256"
      },
      {
        "astId": 9635,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "maxSwapSlippageBps",
        "offset": 0,
        "slot": "219",
        "type": "t_uint256"
      },
      {
        "astId": 9638,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopupManager.sol:CaskChainlinkTopupManager",
        "label": "feeDistributor",
        "offset": 0,
        "slot": "220",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(ICaskChainlinkTopup)11496": {
        "encoding": "inplace",
        "label": "contract ICaskChainlinkTopup",
        "numberOfBytes": "20"
      },
      "t_contract(ICaskVault)17780": {
        "encoding": "inplace",
        "label": "contract ICaskVault",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)4344": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(IPegSwap)17807": {
        "encoding": "inplace",
        "label": "contract IPegSwap",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)17902": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_enum(SwapProtocol)11502": {
        "encoding": "inplace",
        "label": "enum ICaskChainlinkTopupManager.SwapProtocol",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_uint8,t_mapping(t_uint32,t_array(t_bytes32)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(uint32 => bytes32[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_array(t_bytes32)dyn_storage)"
      },
      "t_mapping(t_uint8,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}