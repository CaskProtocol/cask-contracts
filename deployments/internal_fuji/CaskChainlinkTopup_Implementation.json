{
  "address": "0x1f68EEC67e7333aAb04AE25EFaeB903940AF65Ef",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "chainlinkTopupId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ICaskChainlinkTopup.TopupType",
          "name": "topupType",
          "type": "uint8"
        }
      ],
      "name": "ChainlinkTopupCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "chainlinkTopupId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lowBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "topupAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ICaskChainlinkTopup.TopupType",
          "name": "topupType",
          "type": "uint8"
        }
      ],
      "name": "ChainlinkTopupCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainlinkTopupGroupId",
          "type": "uint256"
        }
      ],
      "name": "ChainlinkTopupGroupProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "chainlinkTopupId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ICaskChainlinkTopup.TopupType",
          "name": "topupType",
          "type": "uint8"
        }
      ],
      "name": "ChainlinkTopupPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "chainlinkTopupId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ICaskChainlinkTopup.TopupType",
          "name": "topupType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyQty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ChainlinkTopupProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "chainlinkTopupId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ICaskChainlinkTopup.TopupType",
          "name": "topupType",
          "type": "uint8"
        }
      ],
      "name": "ChainlinkTopupResumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "chainlinkTopupId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ICaskChainlinkTopup.TopupType",
          "name": "topupType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum ICaskChainlinkTopup.SkipReason",
          "name": "skipReason",
          "type": "uint8"
        }
      ],
      "name": "ChainlinkTopupSkipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "backfillGroups",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_chainlinkTopupId",
          "type": "bytes32"
        }
      ],
      "name": "cancelChainlinkTopup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainlinkTopupManager",
      "outputs": [
        {
          "internalType": "contract ICaskChainlinkTopupManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lowBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_topupAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "enum ICaskChainlinkTopup.TopupType",
          "name": "_topupType",
          "type": "uint8"
        }
      ],
      "name": "createChainlinkTopup",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentGroup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_chainlinkTopupId",
          "type": "bytes32"
        }
      ],
      "name": "getChainlinkTopup",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "groupId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "topupAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentBuyQty",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numTopups",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numSkips",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "createdAt",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "targetId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "registry",
              "type": "address"
            },
            {
              "internalType": "enum ICaskChainlinkTopup.TopupType",
              "name": "topupType",
              "type": "uint8"
            },
            {
              "internalType": "enum ICaskChainlinkTopup.ChainlinkTopupStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "internalType": "struct ICaskChainlinkTopup.ChainlinkTopup",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainlinkTopupGroupId",
          "type": "uint256"
        }
      ],
      "name": "getChainlinkTopupGroup",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32[]",
              "name": "chainlinkTopups",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint32",
              "name": "processAt",
              "type": "uint32"
            }
          ],
          "internalType": "struct ICaskChainlinkTopup.ChainlinkTopupGroup",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getUserChainlinkTopup",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserChainlinkTopupCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "groupSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_groupSize",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_chainlinkTopupId",
          "type": "bytes32"
        },
        {
          "internalType": "enum ICaskChainlinkTopup.ManagerCommand",
          "name": "_command",
          "type": "uint8"
        }
      ],
      "name": "managerCommand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_chainlinkTopupId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buyQty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "managerProcessed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainlinkTopupGroupId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_nextProcessAt",
          "type": "uint32"
        }
      ],
      "name": "managerProcessedGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_chainlinkTopupId",
          "type": "bytes32"
        },
        {
          "internalType": "enum ICaskChainlinkTopup.SkipReason",
          "name": "_skipReason",
          "type": "uint8"
        }
      ],
      "name": "managerSkipped",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minTopupAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_chainlinkTopupId",
          "type": "bytes32"
        }
      ],
      "name": "pauseChainlinkTopup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_chainlinkTopupId",
          "type": "bytes32"
        }
      ],
      "name": "resumeChainlinkTopup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_chainlinkTopupManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minTopupAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinTopupAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x7877a75f7aa7fc5373809bd0e476fc47664ba0a1647dad3a8e9e84a5f6db0a4b",
  "receipt": {
    "to": null,
    "from": "0x83e50cD4123bAA60f6d6c8A83ca85Ac72e826bD0",
    "contractAddress": "0x1f68EEC67e7333aAb04AE25EFaeB903940AF65Ef",
    "transactionIndex": 1,
    "gasUsed": "1914131",
    "logsBloom": "0x
    "blockHash": "0x5a599ce25fbc05304792c881b1d508bc37bff3a5d17e6d4d80c69df16b4773fe",
    "transactionHash": "0x7877a75f7aa7fc5373809bd0e476fc47664ba0a1647dad3a8e9e84a5f6db0a4b",
    "logs": [],
    "blockNumber": 14467479,
    "cumulativeGasUsed": "2062516",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "67e5be4aafc67334b6b370dd54c832fb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"chainlinkTopupId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ICaskChainlinkTopup.TopupType\",\"name\":\"topupType\",\"type\":\"uint8\"}],\"name\":\"ChainlinkTopupCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"chainlinkTopupId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topupAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ICaskChainlinkTopup.TopupType\",\"name\":\"topupType\",\"type\":\"uint8\"}],\"name\":\"ChainlinkTopupCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainlinkTopupGroupId\",\"type\":\"uint256\"}],\"name\":\"ChainlinkTopupGroupProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"chainlinkTopupId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ICaskChainlinkTopup.TopupType\",\"name\":\"topupType\",\"type\":\"uint8\"}],\"name\":\"ChainlinkTopupPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"chainlinkTopupId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ICaskChainlinkTopup.TopupType\",\"name\":\"topupType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyQty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ChainlinkTopupProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"chainlinkTopupId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ICaskChainlinkTopup.TopupType\",\"name\":\"topupType\",\"type\":\"uint8\"}],\"name\":\"ChainlinkTopupResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"chainlinkTopupId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ICaskChainlinkTopup.TopupType\",\"name\":\"topupType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum ICaskChainlinkTopup.SkipReason\",\"name\":\"skipReason\",\"type\":\"uint8\"}],\"name\":\"ChainlinkTopupSkipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"backfillGroups\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainlinkTopupId\",\"type\":\"bytes32\"}],\"name\":\"cancelChainlinkTopup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainlinkTopupManager\",\"outputs\":[{\"internalType\":\"contract ICaskChainlinkTopupManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_topupAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"enum ICaskChainlinkTopup.TopupType\",\"name\":\"_topupType\",\"type\":\"uint8\"}],\"name\":\"createChainlinkTopup\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainlinkTopupId\",\"type\":\"bytes32\"}],\"name\":\"getChainlinkTopup\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"groupId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"topupAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBuyQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTopups\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSkips\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"targetId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"internalType\":\"enum ICaskChainlinkTopup.TopupType\",\"name\":\"topupType\",\"type\":\"uint8\"},{\"internalType\":\"enum ICaskChainlinkTopup.ChainlinkTopupStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct ICaskChainlinkTopup.ChainlinkTopup\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainlinkTopupGroupId\",\"type\":\"uint256\"}],\"name\":\"getChainlinkTopupGroup\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32[]\",\"name\":\"chainlinkTopups\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint32\",\"name\":\"processAt\",\"type\":\"uint32\"}],\"internalType\":\"struct ICaskChainlinkTopup.ChainlinkTopupGroup\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getUserChainlinkTopup\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserChainlinkTopupCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_groupSize\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainlinkTopupId\",\"type\":\"bytes32\"},{\"internalType\":\"enum ICaskChainlinkTopup.ManagerCommand\",\"name\":\"_command\",\"type\":\"uint8\"}],\"name\":\"managerCommand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainlinkTopupId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"managerProcessed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainlinkTopupGroupId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_nextProcessAt\",\"type\":\"uint32\"}],\"name\":\"managerProcessedGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainlinkTopupId\",\"type\":\"bytes32\"},{\"internalType\":\"enum ICaskChainlinkTopup.SkipReason\",\"name\":\"_skipReason\",\"type\":\"uint8\"}],\"name\":\"managerSkipped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTopupAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainlinkTopupId\",\"type\":\"bytes32\"}],\"name\":\"pauseChainlinkTopup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_chainlinkTopupId\",\"type\":\"bytes32\"}],\"name\":\"resumeChainlinkTopup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainlinkTopupManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTopupAmount\",\"type\":\"uint256\"}],\"name\":\"setMinTopupAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"chainlinkTopupManager\":{\"details\":\"contract to manage ChainlinkTopup executions. \"},\"chainlinkTopupMap\":{\"details\":\"map of ChainlinkTopup ID to ChainlinkTopup info. \"},\"minTopupAmount\":{\"details\":\"minimum amount to allow for a topup. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chainlink_topup/CaskChainlinkTopup.sol\":\"CaskChainlinkTopup\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    function trustedForwarder() public virtual view returns (address){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce3168b37fc87ec34a18b56b4b16a06432119c07fd2e1d864b871dcf40372ebe\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0x199e82e0a2833a97213b5c16ac9b4e2b1814f2e90a4c4916855cbc21e710ad5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/chainlink_topup/CaskChainlinkTopup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@opengsn/contracts/src/BaseRelayRecipient.sol\\\";\\n\\nimport \\\"./ICaskChainlinkTopup.sol\\\";\\nimport \\\"./ICaskChainlinkTopupManager.sol\\\";\\n\\ncontract CaskChainlinkTopup is\\nICaskChainlinkTopup,\\nInitializable,\\nOwnableUpgradeable,\\nPausableUpgradeable,\\nBaseRelayRecipient\\n{\\n    using SafeERC20 for IERC20Metadata;\\n\\n    /** @dev contract to manage ChainlinkTopup executions. */\\n    ICaskChainlinkTopupManager public chainlinkTopupManager;\\n\\n    /** @dev map of ChainlinkTopup ID to ChainlinkTopup info. */\\n    mapping(bytes32 => ChainlinkTopup) private chainlinkTopupMap; // chainlinkTopupId => ChainlinkTopup\\n    mapping(address => bytes32[]) private userChainlinkTopups; // user => chainlinkTopupId[]\\n    mapping(uint256 => ChainlinkTopupGroup) private chainlinkTopupGroupMap;\\n\\n    uint256 public currentGroup;\\n\\n    uint256[] public backfillGroups;\\n\\n    /** @dev minimum amount to allow for a topup. */\\n    uint256 public minTopupAmount;\\n\\n    uint256 public groupSize;\\n\\n    function initialize(\\n        uint256 _groupSize\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n\\n        currentGroup = 1;\\n        groupSize = _groupSize;\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function versionRecipient() public pure override returns(string memory) { return \\\"2.2.0\\\"; }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (address sender) {\\n        sender = BaseRelayRecipient._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (bytes calldata) {\\n        return BaseRelayRecipient._msgData();\\n    }\\n\\n    modifier onlyUser(bytes32 _chainlinkTopupId) {\\n        require(_msgSender() == chainlinkTopupMap[_chainlinkTopupId].user, \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(_msgSender() == address(chainlinkTopupManager), \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n\\n    function createChainlinkTopup(\\n        uint256 _lowBalance,\\n        uint256 _topupAmount,\\n        uint256 _targetId,\\n        address _registry,\\n        TopupType _topupType\\n    ) external override returns(bytes32) {\\n        require(_topupAmount >= minTopupAmount, \\\"!INVALID(topupAmount)\\\");\\n        require(_topupType == TopupType.Automation ||\\n                _topupType == TopupType.VRF, \\\"!INVALID(topupType)\\\");\\n        require(chainlinkTopupManager.registryAllowed(_registry), \\\"!INVALID(registry)\\\");\\n\\n        bytes32 chainlinkTopupId = keccak256(abi.encodePacked(_msgSender(), _targetId, _registry,\\n            block.number, block.timestamp));\\n\\n        ChainlinkTopup storage chainlinkTopup = chainlinkTopupMap[chainlinkTopupId];\\n        chainlinkTopup.user = _msgSender();\\n        chainlinkTopup.lowBalance = _lowBalance;\\n        chainlinkTopup.topupAmount = _topupAmount;\\n        chainlinkTopup.createdAt = uint32(block.timestamp);\\n        chainlinkTopup.targetId = _targetId;\\n        chainlinkTopup.registry = _registry;\\n        chainlinkTopup.topupType = _topupType;\\n        chainlinkTopup.status = ChainlinkTopupStatus.Active;\\n\\n        userChainlinkTopups[_msgSender()].push(chainlinkTopupId);\\n\\n        _assignChainlinkTopupToGroup(chainlinkTopupId);\\n\\n        require(chainlinkTopup.status == ChainlinkTopupStatus.Active, \\\"!UNPROCESSABLE\\\");\\n\\n        emit ChainlinkTopupCreated(chainlinkTopupId, chainlinkTopup.user, chainlinkTopup.lowBalance,\\n            chainlinkTopup.topupAmount, chainlinkTopup.targetId, chainlinkTopup.registry, chainlinkTopup.topupType);\\n\\n        return chainlinkTopupId;\\n    }\\n\\n    function pauseChainlinkTopup(\\n        bytes32 _chainlinkTopupId\\n    ) external override onlyUser(_chainlinkTopupId) {\\n        ChainlinkTopup storage chainlinkTopup = chainlinkTopupMap[_chainlinkTopupId];\\n        require(chainlinkTopup.status == ChainlinkTopupStatus.Active, \\\"!NOT_ACTIVE\\\");\\n\\n        _removeChainlinkTopupFromGroup(_chainlinkTopupId);\\n\\n        chainlinkTopup.status = ChainlinkTopupStatus.Paused;\\n\\n        emit ChainlinkTopupPaused(_chainlinkTopupId, chainlinkTopup.user, chainlinkTopup.targetId,\\n            chainlinkTopup.registry, chainlinkTopup.topupType);\\n    }\\n\\n    function resumeChainlinkTopup(\\n        bytes32 _chainlinkTopupId\\n    ) external override onlyUser(_chainlinkTopupId) {\\n        ChainlinkTopup storage chainlinkTopup = chainlinkTopupMap[_chainlinkTopupId];\\n        require(chainlinkTopup.status == ChainlinkTopupStatus.Paused, \\\"!NOT_PAUSED\\\");\\n\\n        _assignChainlinkTopupToGroup(_chainlinkTopupId);\\n\\n        chainlinkTopup.status = ChainlinkTopupStatus.Active;\\n\\n        emit ChainlinkTopupResumed(_chainlinkTopupId, chainlinkTopup.user, chainlinkTopup.targetId,\\n            chainlinkTopup.registry, chainlinkTopup.topupType);\\n    }\\n\\n    function cancelChainlinkTopup(\\n        bytes32 _chainlinkTopupId\\n    ) external override onlyUser(_chainlinkTopupId) {\\n        ChainlinkTopup storage chainlinkTopup = chainlinkTopupMap[_chainlinkTopupId];\\n        require(chainlinkTopup.status == ChainlinkTopupStatus.Active ||\\n                chainlinkTopup.status == ChainlinkTopupStatus.Paused, \\\"!INVALID(status)\\\");\\n\\n        _removeChainlinkTopupFromGroup(_chainlinkTopupId);\\n\\n        chainlinkTopup.status = ChainlinkTopupStatus.Canceled;\\n\\n        emit ChainlinkTopupCanceled(_chainlinkTopupId, chainlinkTopup.user, chainlinkTopup.targetId,\\n            chainlinkTopup.registry, chainlinkTopup.topupType);\\n    }\\n\\n    function getChainlinkTopup(\\n        bytes32 _chainlinkTopupId\\n    ) external override view returns (ChainlinkTopup memory) {\\n        return chainlinkTopupMap[_chainlinkTopupId];\\n    }\\n\\n    function getChainlinkTopupGroup(\\n        uint256 _chainlinkTopupGroupId\\n    ) external override view returns (ChainlinkTopupGroup memory) {\\n        return chainlinkTopupGroupMap[_chainlinkTopupGroupId];\\n    }\\n\\n    function getUserChainlinkTopup(\\n        address _user,\\n        uint256 _idx\\n    ) external override view returns (bytes32) {\\n        return userChainlinkTopups[_user][_idx];\\n    }\\n\\n    function getUserChainlinkTopupCount(\\n        address _user\\n    ) external override view returns (uint256) {\\n        return userChainlinkTopups[_user].length;\\n    }\\n\\n    function _removeChainlinkTopupFromGroup(\\n        bytes32 _chainlinkTopupId\\n    ) internal {\\n        ChainlinkTopup storage chainlinkTopup = chainlinkTopupMap[_chainlinkTopupId];\\n\\n        uint256 groupId = chainlinkTopup.groupId;\\n        uint256 groupLen = chainlinkTopupGroupMap[groupId].chainlinkTopups.length;\\n\\n        // remove topup from group list\\n        uint256 idx = groupLen;\\n        for (uint256 i = 0; i < groupLen; i++) {\\n            if (chainlinkTopupGroupMap[groupId].chainlinkTopups[i] == _chainlinkTopupId) {\\n                idx = i;\\n                break;\\n            }\\n        }\\n        if (idx < groupLen) {\\n            chainlinkTopupGroupMap[groupId].chainlinkTopups[idx] =\\n                chainlinkTopupGroupMap[groupId].chainlinkTopups[groupLen - 1];\\n            chainlinkTopupGroupMap[groupId].chainlinkTopups.pop();\\n        }\\n\\n        backfillGroups.push(groupId);\\n    }\\n\\n    function _findGroupId() internal returns(uint256) {\\n        uint256 chainlinkTopupGroupId;\\n        if (backfillGroups.length > 0) {\\n            chainlinkTopupGroupId = backfillGroups[backfillGroups.length-1];\\n            backfillGroups.pop();\\n        } else {\\n            chainlinkTopupGroupId = currentGroup;\\n        }\\n        if (chainlinkTopupGroupId != currentGroup &&\\n            chainlinkTopupGroupMap[chainlinkTopupGroupId].chainlinkTopups.length >= groupSize)\\n        {\\n            chainlinkTopupGroupId = currentGroup;\\n        }\\n        if (chainlinkTopupGroupMap[chainlinkTopupGroupId].chainlinkTopups.length >= groupSize) {\\n            currentGroup += 1;\\n            chainlinkTopupGroupId = currentGroup;\\n        }\\n        return chainlinkTopupGroupId;\\n    }\\n\\n    function _assignChainlinkTopupToGroup(\\n        bytes32 _chainlinkTopupId\\n    ) internal {\\n        uint256 chainlinkTopupGroupId = _findGroupId();\\n        require(chainlinkTopupGroupId > 0, \\\"!GROUP_ERROR\\\");\\n\\n        ChainlinkTopup storage chainlinkTopup = chainlinkTopupMap[_chainlinkTopupId];\\n        chainlinkTopup.groupId = chainlinkTopupGroupId;\\n\\n        ChainlinkTopupGroup storage chainlinkTopupGroup = chainlinkTopupGroupMap[chainlinkTopupGroupId];\\n        chainlinkTopupGroup.chainlinkTopups.push(_chainlinkTopupId);\\n\\n        if (chainlinkTopupGroup.chainlinkTopups.length == 1) { // register only if new/reinitialized group\\n            chainlinkTopupGroup.processAt = uint32(block.timestamp);\\n            chainlinkTopupManager.registerChainlinkTopupGroup(chainlinkTopupGroupId);\\n        }\\n    }\\n\\n    /************************** MANAGER FUNCTIONS **************************/\\n\\n    function managerCommand(\\n        bytes32 _chainlinkTopupId,\\n        ManagerCommand _command\\n    ) external override onlyManager {\\n\\n        ChainlinkTopup storage chainlinkTopup = chainlinkTopupMap[_chainlinkTopupId];\\n\\n        if (_command == ManagerCommand.Pause) {\\n\\n            chainlinkTopup.status = ChainlinkTopupStatus.Paused;\\n\\n            emit ChainlinkTopupPaused(_chainlinkTopupId, chainlinkTopup.user, chainlinkTopup.targetId,\\n                chainlinkTopup.registry, chainlinkTopup.topupType);\\n\\n        } else if (_command == ManagerCommand.Cancel) {\\n\\n            chainlinkTopup.status = ChainlinkTopupStatus.Canceled;\\n\\n            _removeChainlinkTopupFromGroup(_chainlinkTopupId);\\n\\n            emit ChainlinkTopupCanceled(_chainlinkTopupId, chainlinkTopup.user, chainlinkTopup.targetId,\\n                chainlinkTopup.registry, chainlinkTopup.topupType);\\n\\n        }\\n    }\\n\\n    function managerProcessed(\\n        bytes32 _chainlinkTopupId,\\n        uint256 _amount,\\n        uint256 _buyQty,\\n        uint256 _fee\\n    ) external override onlyManager {\\n        ChainlinkTopup storage chainlinkTopup = chainlinkTopupMap[_chainlinkTopupId];\\n\\n        chainlinkTopup.currentAmount += _amount;\\n        chainlinkTopup.currentBuyQty += _buyQty;\\n        chainlinkTopup.numTopups += 1;\\n\\n        emit ChainlinkTopupProcessed(_chainlinkTopupId, chainlinkTopup.user, chainlinkTopup.targetId,\\n            chainlinkTopup.registry, chainlinkTopup.topupType, _amount, _buyQty, _fee);\\n    }\\n\\n    function managerProcessedGroup(\\n        uint256 _chainlinkTopupGroupId,\\n        uint32 _nextProcessAt\\n    ) external override onlyManager {\\n        ChainlinkTopupGroup storage chainlinkTopupGroup = chainlinkTopupGroupMap[_chainlinkTopupGroupId];\\n\\n        chainlinkTopupGroup.processAt = _nextProcessAt;\\n\\n        emit ChainlinkTopupGroupProcessed(_chainlinkTopupGroupId);\\n    }\\n\\n    function managerSkipped(\\n        bytes32 _chainlinkTopupId,\\n        SkipReason _skipReason\\n    ) external override onlyManager {\\n        ChainlinkTopup storage chainlinkTopup = chainlinkTopupMap[_chainlinkTopupId];\\n\\n        chainlinkTopup.numSkips += 1;\\n\\n        emit ChainlinkTopupSkipped(_chainlinkTopupId, chainlinkTopup.user, chainlinkTopup.targetId,\\n            chainlinkTopup.registry, chainlinkTopup.topupType, _skipReason);\\n    }\\n\\n    /************************** ADMIN FUNCTIONS **************************/\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setManager(\\n        address _chainlinkTopupManager\\n    ) external onlyOwner {\\n        chainlinkTopupManager = ICaskChainlinkTopupManager(_chainlinkTopupManager);\\n    }\\n\\n    function setTrustedForwarder(\\n        address _forwarder\\n    ) external onlyOwner {\\n        _setTrustedForwarder(_forwarder);\\n    }\\n\\n    function setMinTopupAmount(\\n        uint256 _minTopupAmount\\n    ) external onlyOwner {\\n        minTopupAmount = _minTopupAmount;\\n    }\\n\\n}\",\"keccak256\":\"0xc7246e5047dde12247508139a6f4ff55230c46f7c94ec59f02f851df2b136830\",\"license\":\"MIT\"},\"contracts/chainlink_topup/ICaskChainlinkTopup.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskChainlinkTopup {\\n\\n    enum ChainlinkTopupStatus {\\n        None,\\n        Active,\\n        Paused,\\n        Canceled\\n    }\\n\\n    enum ManagerCommand {\\n        None,\\n        Cancel,\\n        Pause\\n    }\\n\\n    enum SkipReason {\\n        None,\\n        PaymentFailed,\\n        SwapFailed\\n    }\\n\\n    enum TopupType {\\n        None,\\n        Automation,\\n        VRF\\n    }\\n\\n    struct ChainlinkTopup {\\n        address user;\\n        uint256 groupId;\\n        uint256 lowBalance;\\n        uint256 topupAmount;\\n        uint256 currentAmount;\\n        uint256 currentBuyQty;\\n        uint256 numTopups;\\n        uint256 numSkips;\\n        uint32 createdAt;\\n        uint256 targetId;\\n        address registry;\\n        TopupType topupType;\\n        ChainlinkTopupStatus status;\\n    }\\n\\n    struct ChainlinkTopupGroup {\\n        bytes32[] chainlinkTopups;\\n        uint32 processAt;\\n    }\\n\\n    function createChainlinkTopup(\\n        uint256 _lowBalance,\\n        uint256 _topupAmount,\\n        uint256 _targetId,\\n        address _registry,\\n        TopupType _topupType\\n    ) external returns(bytes32);\\n\\n    function getChainlinkTopup(bytes32 _chainlinkTopupId) external view returns (ChainlinkTopup memory);\\n\\n    function getChainlinkTopupGroup(uint256 _chainlinkTopupGroupId) external view returns (ChainlinkTopupGroup memory);\\n\\n    function getUserChainlinkTopup(address _user, uint256 _idx) external view returns (bytes32);\\n\\n    function getUserChainlinkTopupCount(address _user) external view returns (uint256);\\n\\n    function cancelChainlinkTopup(bytes32 _chainlinkTopupId) external;\\n\\n    function pauseChainlinkTopup(bytes32 _chainlinkTopupId) external;\\n\\n    function resumeChainlinkTopup(bytes32 _chainlinkTopupId) external;\\n\\n    function managerCommand(bytes32 _chainlinkTopupId, ManagerCommand _command) external;\\n\\n    function managerProcessed(bytes32 _chainlinkTopupId, uint256 _amount, uint256 _buyQty, uint256 _fee) external;\\n\\n    function managerSkipped(bytes32 _chainlinkTopupId, SkipReason _skipReason) external;\\n\\n    function managerProcessedGroup(uint256 _chainlinkTopupGroupId, uint32 _nextProcessAt) external;\\n\\n    event ChainlinkTopupCreated(bytes32 indexed chainlinkTopupId, address indexed user, uint256 lowBalance,\\n        uint256 topupAmount, uint256 targetId, address registry, TopupType topupType);\\n\\n    event ChainlinkTopupPaused(bytes32 indexed chainlinkTopupId, address indexed user, uint256 targetId,\\n        address registry, TopupType topupType);\\n\\n    event ChainlinkTopupResumed(bytes32 indexed chainlinkTopupId, address indexed user, uint256 targetId,\\n        address registry, TopupType topupType);\\n\\n    event ChainlinkTopupSkipped(bytes32 indexed chainlinkTopupId, address indexed user, uint256 targetId,\\n        address registry, TopupType topupType, SkipReason skipReason);\\n\\n    event ChainlinkTopupProcessed(bytes32 indexed chainlinkTopupId, address indexed user, uint256 targetId,\\n        address registry, TopupType topupType, uint256 amount, uint256 buyQty, uint256 fee);\\n\\n    event ChainlinkTopupCanceled(bytes32 indexed chainlinkTopupId, address indexed user, uint256 targetId,\\n        address registry, TopupType topupType);\\n\\n    event ChainlinkTopupGroupProcessed(uint256 indexed chainlinkTopupGroupId);\\n}\",\"keccak256\":\"0xd80f804fb3bb4f4febbdf6022447264a7f0874dc138c6aa0468f00af1916346e\",\"license\":\"MIT\"},\"contracts/chainlink_topup/ICaskChainlinkTopupManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskChainlinkTopupManager {\\n\\n    function registerChainlinkTopupGroup(uint256 _chainlinkTopupId) external;\\n\\n    function registryAllowed(address _registry) external view returns(bool);\\n\\n    /** @dev Emitted the feeDistributor is changed. */\\n    event SetFeeDistributor(address feeDistributor);\\n\\n    /** @dev Emitted when a registry is allowed. */\\n    event RegistryAllowed(address registry);\\n\\n    /** @dev Emitted when a registry is disallowed. */\\n    event RegistryDisallowed(address registry);\\n}\",\"keccak256\":\"0xcc7d0f1367ae062e49cc0f58b07bd5c1e909986f99b4bf8b67426b2ee5cc0c0e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b620015231760201c565b15905090565b3b151590565b61212d80620001126000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80639d44ac9411610104578063cb3e5eca116100a2578063da74222811610071578063da7422281461040e578063f19d6a4d14610421578063f2fde38b14610434578063fe4b84df1461044757600080fd5b8063cb3e5eca146103c2578063d0ebdbe7146103d5578063d4c359da146103e8578063d89816bb146103fb57600080fd5b8063aa5bd0a2116100de578063aa5bd0a21461035c578063b4cbc9e41461037c578063ba844dc91461038f578063c68f5eb3146103a257600080fd5b80639d44ac941461032d578063a00b774214610340578063a3d5b5591461034957600080fd5b80635c975abb1161017c578063715018a61161014b578063715018a6146102e75780637da0a877146102ef5780638456cb59146103145780638da5cb5b1461031c57600080fd5b80635c975abb1461029757806363b635ea146102a257806367594c6c146102ab5780636f978f6c146102d457600080fd5b80633f735d6a116101b85780633f735d6a14610218578063486ff0cd1461022b578063572b6c05146102525780635ba581cd1461028457600080fd5b80630dff2d0c146101df5780632a74cbb5146101fb5780633f4ba83a14610210575b600080fd5b6101e8609e5481565b6040519081526020015b60405180910390f35b61020e610209366004611ba6565b61045a565b005b61020e61052d565b61020e610226366004611bd6565b610580565b60408051808201825260058152640322e322e360dc1b602082015290516101f29190611c04565b610274610260366004611c70565b6097546001600160a01b0391821691161490565b60405190151581526020016101f2565b61020e610292366004611ba6565b61060f565b60655460ff16610274565b6101e8609f5481565b6101e86102b9366004611c70565b6001600160a01b03166000908152609a602052604090205490565b6101e86102e2366004611c92565b610771565b61020e6107ae565b6097546001600160a01b03165b6040516001600160a01b0390911681526020016101f2565b61020e610801565b6033546001600160a01b03166102fc565b61020e61033b366004611cbc565b610852565b6101e8609c5481565b6101e8610357366004611cbc565b610978565b61036f61036a366004611cbc565b610999565b6040516101f29190611cd5565b61020e61038a366004611d37565b610a28565b61020e61039d366004611cbc565b610b2f565b6103b56103b0366004611cbc565b610c55565b6040516101f29190611dac565b6098546102fc906001600160a01b031681565b61020e6103e3366004611c70565b610d73565b61020e6103f6366004611cbc565b610dde565b61020e610409366004611cbc565b610f33565b61020e61041c366004611c70565b610f81565b6101e861042f366004611e6d565b610feb565b61020e610442366004611c70565b611398565b61020e610455366004611cbc565b61144f565b6098546001600160a01b031661046e611529565b6001600160a01b03161461049d5760405162461bcd60e51b815260040161049490611ec1565b60405180910390fd5b600082815260996020526040812060078101805491926001926104c1908490611ef6565b909155505080546009820154600a8301546040516001600160a01b039384169387937e374955e503c1cb80274d04743ac516c7954db106b4f57f594b216b75e0ad8593610520939192811691600160a01b90910460ff16908990611f0e565b60405180910390a3505050565b610535611529565b6001600160a01b03166105506033546001600160a01b031690565b6001600160a01b0316146105765760405162461bcd60e51b815260040161049490611f4b565b61057e611538565b565b6098546001600160a01b0316610594611529565b6001600160a01b0316146105ba5760405162461bcd60e51b815260040161049490611ec1565b6000828152609b602052604080822060018101805463ffffffff191663ffffffff86161790559051909184917f68f9737cc6ec0f4eea133dcbeea5c906c17926d82d6c5b5e19c4711491f4c9169190a2505050565b6098546001600160a01b0316610623611529565b6001600160a01b0316146106495760405162461bcd60e51b815260040161049490611ec1565b6000828152609960205260409020600282600281111561066b5761066b611d69565b14156106db57600a8101805460ff60a81b198116600160a91b1791829055825460098401546040516001600160a01b039283169488947fde6232c9da3e9160ca0f56ea30d25de77f313c765456b2f059566bae7ddddb4e946105209493911691600160a01b900460ff1690611f80565b60018260028111156106ef576106ef611d69565b141561076c57600a8101805460ff60a81b1916600360a81b179055610713836115d1565b80546009820154600a8301546040516001600160a01b039384169387937f27edcd358ef2b53bc526b57370e2e080ffa9c6e3d6fd210e390b05ac82b4db4193610520939192811691600160a01b90910460ff1690611f80565b505050565b6001600160a01b0382166000908152609a6020526040812080548390811061079b5761079b611fad565b9060005260206000200154905092915050565b6107b6611529565b6001600160a01b03166107d16033546001600160a01b031690565b6001600160a01b0316146107f75760405162461bcd60e51b815260040161049490611f4b565b61057e600061172e565b610809611529565b6001600160a01b03166108246033546001600160a01b031690565b6001600160a01b03161461084a5760405162461bcd60e51b815260040161049490611f4b565b61057e611780565b60008181526099602052604090205481906001600160a01b0316610874611529565b6001600160a01b03161461089a5760405162461bcd60e51b815260040161049490611ec1565b60008281526099602052604090206001600a820154600160a81b900460ff1660038111156108ca576108ca611d69565b146109055760405162461bcd60e51b815260206004820152600b60248201526a214e4f545f41435449564560a81b6044820152606401610494565b61090e836115d1565b600a8101805460ff60a81b198116600160a91b1791829055825460098401546040516001600160a01b039283169488947fde6232c9da3e9160ca0f56ea30d25de77f313c765456b2f059566bae7ddddb4e946105209493911691600160a01b900460ff1690611f80565b609d818154811061098857600080fd5b600091825260209091200154905081565b604080518082018252606080825260006020808401829052858252609b81529084902084518154928302810184018652948501828152939493909284928491840182828015610a0757602002820191906000526020600020905b8154815260200190600101908083116109f3575b50505091835250506001919091015463ffffffff1660209091015292915050565b6098546001600160a01b0316610a3c611529565b6001600160a01b031614610a625760405162461bcd60e51b815260040161049490611ec1565b600084815260996020526040812060048101805491928692610a85908490611ef6565b9250508190555082816005016000828254610aa09190611ef6565b925050819055506001816006016000828254610abc9190611ef6565b909155505080546009820154600a8301546040516001600160a01b039384169389937f18b6d1bde03ff595fa39cebb5f8528d44bcbd97f09a8d99a9ed966e5b8cc1e5293610b20939192811691600160a01b90910460ff16908b908b908b90611fc3565b60405180910390a35050505050565b60008181526099602052604090205481906001600160a01b0316610b51611529565b6001600160a01b031614610b775760405162461bcd60e51b815260040161049490611ec1565b60008281526099602052604090206002600a820154600160a81b900460ff166003811115610ba757610ba7611d69565b14610be25760405162461bcd60e51b815260206004820152600b60248201526a085393d517d4105554d15160aa1b6044820152606401610494565b610beb836117fc565b600a8101805460ff60a81b198116600160a81b1791829055825460098401546040516001600160a01b039283169488947ff357ce53e83696815ee1632d0f04267d8feff645a8b4f7c5befc32376b899707946105209493911691600160a01b900460ff1690611f80565b610c5d611b09565b60008281526099602090815260409182902082516101a08101845281546001600160a01b039081168252600183015493820193909352600280830154948201949094526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e0820152600882015463ffffffff166101008201526009820154610120820152600a820154928316610140820152929091610160840191600160a01b90910460ff1690811115610d2057610d20611d69565b6002811115610d3157610d31611d69565b8152602001600a820160159054906101000a900460ff166003811115610d5957610d59611d69565b6003811115610d6a57610d6a611d69565b90525092915050565b610d7b611529565b6001600160a01b0316610d966033546001600160a01b031690565b6001600160a01b031614610dbc5760405162461bcd60e51b815260040161049490611f4b565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526099602052604090205481906001600160a01b0316610e00611529565b6001600160a01b031614610e265760405162461bcd60e51b815260040161049490611ec1565b60008281526099602052604090206001600a820154600160a81b900460ff166003811115610e5657610e56611d69565b1480610e8157506002600a820154600160a81b900460ff166003811115610e7f57610e7f611d69565b145b610ec05760405162461bcd60e51b815260206004820152601060248201526f21494e56414c4944287374617475732960801b6044820152606401610494565b610ec9836115d1565b600a8101805460ff60a81b198116600360a81b1791829055825460098401546040516001600160a01b039283169488947f27edcd358ef2b53bc526b57370e2e080ffa9c6e3d6fd210e390b05ac82b4db41946105209493911691600160a01b900460ff1690611f80565b610f3b611529565b6001600160a01b0316610f566033546001600160a01b031690565b6001600160a01b031614610f7c5760405162461bcd60e51b815260040161049490611f4b565b609e55565b610f89611529565b6001600160a01b0316610fa46033546001600160a01b031690565b6001600160a01b031614610fca5760405162461bcd60e51b815260040161049490611f4b565b609780546001600160a01b0319166001600160a01b03831617905550565b50565b6000609e548510156110375760405162461bcd60e51b815260206004820152601560248201527421494e56414c494428746f707570416d6f756e742960581b6044820152606401610494565b600182600281111561104b5761104b611d69565b14806110685750600282600281111561106657611066611d69565b145b6110aa5760405162461bcd60e51b815260206004820152601360248201527221494e56414c494428746f707570547970652960681b6044820152606401610494565b60985460405163d5f59fb960e01b81526001600160a01b0385811660048301529091169063d5f59fb99060240160206040518083038186803b1580156110ef57600080fd5b505afa158015611103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111279190612005565b6111685760405162461bcd60e51b815260206004820152601260248201527121494e56414c49442872656769737472792960701b6044820152606401610494565b6000611172611529565b6040516bffffffffffffffffffffffff19606092831b81166020830152603482018890529186901b909116605482015243606882015242608882015260a80160408051601f1981840301815291815281516020928301206000818152609990935291209091506111e0611529565b81546001600160a01b03199081166001600160a01b0392831617835560028084018b9055600384018a905560088401805463ffffffff19164263ffffffff1617905560098401899055600a840180549283169389169384178155879390926001600160a81b0319161790600160a01b90849081111561126157611261611d69565b0217905550600a8101805460ff60a81b1916600160a81b179055609a6000611287611529565b6001600160a01b0316815260208082019290925260400160009081208054600181018255908252919020018290556112be826117fc565b6001600a820154600160a81b900460ff1660038111156112e0576112e0611d69565b1461131e5760405162461bcd60e51b815260206004820152600e60248201526d21554e50524f4345535341424c4560901b6044820152606401610494565b8054600282015460038301546009840154600a8501546040516001600160a01b039586169588957fe26548496d0e88951d526ea185b82864689467851bf69d0218e2cf1b949850269561138595919490939192811691600160a01b90910460ff1690612027565b60405180910390a3509695505050505050565b6113a0611529565b6001600160a01b03166113bb6033546001600160a01b031690565b6001600160a01b0316146113e15760405162461bcd60e51b815260040161049490611f4b565b6001600160a01b0381166114465760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610494565b610fe88161172e565b600054610100900460ff1661146a5760005460ff161561146e565b303b155b6114d15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610494565b600054610100900460ff161580156114f3576000805461ffff19166101011790555b6114fb611905565b61150361193c565b6001609c55609f829055801561151f576000805461ff00191690555b5050565b3b151590565b6000611533611973565b905090565b60655460ff166115815760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610494565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6115b4611529565b6040516001600160a01b03909116815260200160405180910390a1565b60008181526099602090815260408083206001810154808552609b90935290832054909281905b8281101561164e576000848152609b6020526040902080548791908390811061162357611623611fad565b9060005260206000200154141561163c5780915061164e565b8061164681612064565b9150506115f8565b50818110156116f5576000838152609b6020526040902061167060018461207f565b8154811061168057611680611fad565b9060005260206000200154609b600085815260200190815260200160002060000182815481106116b2576116b2611fad565b6000918252602080832090910192909255848152609b909152604090208054806116de576116de612096565b600190038181906000526020600020016000905590555b5050609d80546001810182556000919091527fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7b01555050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff16156117c65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610494565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115b4611529565b60006118066119a7565b9050600081116118475760405162461bcd60e51b815260206004820152600c60248201526b10a3a927aaa82fa2a92927a960a11b6044820152606401610494565b60008281526099602090815260408083206001808201869055858552609b84529184208054808401825581865293909420909201859055825491929114156118ff5760018101805463ffffffff19164263ffffffff16179055609854604051630650760d60e31b8152600481018590526001600160a01b0390911690633283b06890602401600060405180830381600087803b1580156118e657600080fd5b505af11580156118fa573d6000803e3d6000fd5b505050505b50505050565b600054610100900460ff1661192c5760405162461bcd60e51b8152600401610494906120ac565b611934611a78565b61057e611a9f565b600054610100900460ff166119635760405162461bcd60e51b8152600401610494906120ac565b61196b611a78565b61057e611ad6565b60006014361080159061199057506097546001600160a01b031633145b156119a2575060131936013560601c90565b503390565b609d54600090819015611a0d57609d80546119c49060019061207f565b815481106119d4576119d4611fad565b90600052602060002001549050609d8054806119f2576119f2612096565b60019003818190600052602060002001600090559055611a12565b50609c545b609c548114158015611a345750609f546000828152609b602052604090205410155b15611a3e5750609c545b609f546000828152609b602052604090205410611a73576001609c6000828254611a689190611ef6565b9091555050609c5490505b919050565b600054610100900460ff1661057e5760405162461bcd60e51b8152600401610494906120ac565b600054610100900460ff16611ac65760405162461bcd60e51b8152600401610494906120ac565b61057e611ad1611529565b61172e565b600054610100900460ff16611afd5760405162461bcd60e51b8152600401610494906120ac565b6065805460ff19169055565b604051806101a0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600063ffffffff1681526020016000815260200160006001600160a01b0316815260200160006002811115611b8d57611b8d611d69565b81526020016000905290565b60038110610fe857600080fd5b60008060408385031215611bb957600080fd5b823591506020830135611bcb81611b99565b809150509250929050565b60008060408385031215611be957600080fd5b82359150602083013563ffffffff81168114611bcb57600080fd5b600060208083528351808285015260005b81811015611c3157858101830151858201604001528201611c15565b81811115611c43576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114611a7357600080fd5b600060208284031215611c8257600080fd5b611c8b82611c59565b9392505050565b60008060408385031215611ca557600080fd5b611cae83611c59565b946020939093013593505050565b600060208284031215611cce57600080fd5b5035919050565b6020808252825160408383015280516060840181905260009291820190839060808601905b80831015611d1a5783518252928401926001929092019190840190611cfa565b5063ffffffff848801511660408701528094505050505092915050565b60008060008060808587031215611d4d57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052602160045260246000fd5b60038110610fe857610fe8611d69565b611d9881611d7f565b9052565b60048110611d9857611d98611d69565b81516001600160a01b031681526101a081016020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151611e1c8285018263ffffffff169052565b50506101208381015190830152610140808401516001600160a01b03169083015261016080840151611e5082850182611d8f565b505061018080840151611e6582850182611d9c565b505092915050565b600080600080600060a08688031215611e8557600080fd5b853594506020860135935060408601359250611ea360608701611c59565b91506080860135611eb381611b99565b809150509295509295909350565b60208082526005908201526404282aaa8960db1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611f0957611f09611ee0565b500190565b8481526001600160a01b038416602082015260808101611f2d84611d7f565b836040830152611f3c83611d7f565b82606083015295945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8381526001600160a01b038316602082015260608101611f9f83611d7f565b826040830152949350505050565b634e487b7160e01b600052603260045260246000fd5b8681526001600160a01b038616602082015260c08101611fe286611d7f565b8560408301528460608301528360808301528260a0830152979650505050505050565b60006020828403121561201757600080fd5b81518015158114611c8b57600080fd5b85815260208101859052604081018490526001600160a01b038316606082015260a0810161205483611d7f565b8260808301529695505050505050565b600060001982141561207857612078611ee0565b5060010190565b60008282101561209157612091611ee0565b500390565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212204a95d2a4d3728d7136847ee7ead51ec880677fa07f16a328ace02306a8cd8c3964736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80639d44ac9411610104578063cb3e5eca116100a2578063da74222811610071578063da7422281461040e578063f19d6a4d14610421578063f2fde38b14610434578063fe4b84df1461044757600080fd5b8063cb3e5eca146103c2578063d0ebdbe7146103d5578063d4c359da146103e8578063d89816bb146103fb57600080fd5b8063aa5bd0a2116100de578063aa5bd0a21461035c578063b4cbc9e41461037c578063ba844dc91461038f578063c68f5eb3146103a257600080fd5b80639d44ac941461032d578063a00b774214610340578063a3d5b5591461034957600080fd5b80635c975abb1161017c578063715018a61161014b578063715018a6146102e75780637da0a877146102ef5780638456cb59146103145780638da5cb5b1461031c57600080fd5b80635c975abb1461029757806363b635ea146102a257806367594c6c146102ab5780636f978f6c146102d457600080fd5b80633f735d6a116101b85780633f735d6a14610218578063486ff0cd1461022b578063572b6c05146102525780635ba581cd1461028457600080fd5b80630dff2d0c146101df5780632a74cbb5146101fb5780633f4ba83a14610210575b600080fd5b6101e8609e5481565b6040519081526020015b60405180910390f35b61020e610209366004611ba6565b61045a565b005b61020e61052d565b61020e610226366004611bd6565b610580565b60408051808201825260058152640322e322e360dc1b602082015290516101f29190611c04565b610274610260366004611c70565b6097546001600160a01b0391821691161490565b60405190151581526020016101f2565b61020e610292366004611ba6565b61060f565b60655460ff16610274565b6101e8609f5481565b6101e86102b9366004611c70565b6001600160a01b03166000908152609a602052604090205490565b6101e86102e2366004611c92565b610771565b61020e6107ae565b6097546001600160a01b03165b6040516001600160a01b0390911681526020016101f2565b61020e610801565b6033546001600160a01b03166102fc565b61020e61033b366004611cbc565b610852565b6101e8609c5481565b6101e8610357366004611cbc565b610978565b61036f61036a366004611cbc565b610999565b6040516101f29190611cd5565b61020e61038a366004611d37565b610a28565b61020e61039d366004611cbc565b610b2f565b6103b56103b0366004611cbc565b610c55565b6040516101f29190611dac565b6098546102fc906001600160a01b031681565b61020e6103e3366004611c70565b610d73565b61020e6103f6366004611cbc565b610dde565b61020e610409366004611cbc565b610f33565b61020e61041c366004611c70565b610f81565b6101e861042f366004611e6d565b610feb565b61020e610442366004611c70565b611398565b61020e610455366004611cbc565b61144f565b6098546001600160a01b031661046e611529565b6001600160a01b03161461049d5760405162461bcd60e51b815260040161049490611ec1565b60405180910390fd5b600082815260996020526040812060078101805491926001926104c1908490611ef6565b909155505080546009820154600a8301546040516001600160a01b039384169387937e374955e503c1cb80274d04743ac516c7954db106b4f57f594b216b75e0ad8593610520939192811691600160a01b90910460ff16908990611f0e565b60405180910390a3505050565b610535611529565b6001600160a01b03166105506033546001600160a01b031690565b6001600160a01b0316146105765760405162461bcd60e51b815260040161049490611f4b565b61057e611538565b565b6098546001600160a01b0316610594611529565b6001600160a01b0316146105ba5760405162461bcd60e51b815260040161049490611ec1565b6000828152609b602052604080822060018101805463ffffffff191663ffffffff86161790559051909184917f68f9737cc6ec0f4eea133dcbeea5c906c17926d82d6c5b5e19c4711491f4c9169190a2505050565b6098546001600160a01b0316610623611529565b6001600160a01b0316146106495760405162461bcd60e51b815260040161049490611ec1565b6000828152609960205260409020600282600281111561066b5761066b611d69565b14156106db57600a8101805460ff60a81b198116600160a91b1791829055825460098401546040516001600160a01b039283169488947fde6232c9da3e9160ca0f56ea30d25de77f313c765456b2f059566bae7ddddb4e946105209493911691600160a01b900460ff1690611f80565b60018260028111156106ef576106ef611d69565b141561076c57600a8101805460ff60a81b1916600360a81b179055610713836115d1565b80546009820154600a8301546040516001600160a01b039384169387937f27edcd358ef2b53bc526b57370e2e080ffa9c6e3d6fd210e390b05ac82b4db4193610520939192811691600160a01b90910460ff1690611f80565b505050565b6001600160a01b0382166000908152609a6020526040812080548390811061079b5761079b611fad565b9060005260206000200154905092915050565b6107b6611529565b6001600160a01b03166107d16033546001600160a01b031690565b6001600160a01b0316146107f75760405162461bcd60e51b815260040161049490611f4b565b61057e600061172e565b610809611529565b6001600160a01b03166108246033546001600160a01b031690565b6001600160a01b03161461084a5760405162461bcd60e51b815260040161049490611f4b565b61057e611780565b60008181526099602052604090205481906001600160a01b0316610874611529565b6001600160a01b03161461089a5760405162461bcd60e51b815260040161049490611ec1565b60008281526099602052604090206001600a820154600160a81b900460ff1660038111156108ca576108ca611d69565b146109055760405162461bcd60e51b815260206004820152600b60248201526a214e4f545f41435449564560a81b6044820152606401610494565b61090e836115d1565b600a8101805460ff60a81b198116600160a91b1791829055825460098401546040516001600160a01b039283169488947fde6232c9da3e9160ca0f56ea30d25de77f313c765456b2f059566bae7ddddb4e946105209493911691600160a01b900460ff1690611f80565b609d818154811061098857600080fd5b600091825260209091200154905081565b604080518082018252606080825260006020808401829052858252609b81529084902084518154928302810184018652948501828152939493909284928491840182828015610a0757602002820191906000526020600020905b8154815260200190600101908083116109f3575b50505091835250506001919091015463ffffffff1660209091015292915050565b6098546001600160a01b0316610a3c611529565b6001600160a01b031614610a625760405162461bcd60e51b815260040161049490611ec1565b600084815260996020526040812060048101805491928692610a85908490611ef6565b9250508190555082816005016000828254610aa09190611ef6565b925050819055506001816006016000828254610abc9190611ef6565b909155505080546009820154600a8301546040516001600160a01b039384169389937f18b6d1bde03ff595fa39cebb5f8528d44bcbd97f09a8d99a9ed966e5b8cc1e5293610b20939192811691600160a01b90910460ff16908b908b908b90611fc3565b60405180910390a35050505050565b60008181526099602052604090205481906001600160a01b0316610b51611529565b6001600160a01b031614610b775760405162461bcd60e51b815260040161049490611ec1565b60008281526099602052604090206002600a820154600160a81b900460ff166003811115610ba757610ba7611d69565b14610be25760405162461bcd60e51b815260206004820152600b60248201526a085393d517d4105554d15160aa1b6044820152606401610494565b610beb836117fc565b600a8101805460ff60a81b198116600160a81b1791829055825460098401546040516001600160a01b039283169488947ff357ce53e83696815ee1632d0f04267d8feff645a8b4f7c5befc32376b899707946105209493911691600160a01b900460ff1690611f80565b610c5d611b09565b60008281526099602090815260409182902082516101a08101845281546001600160a01b039081168252600183015493820193909352600280830154948201949094526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e0820152600882015463ffffffff166101008201526009820154610120820152600a820154928316610140820152929091610160840191600160a01b90910460ff1690811115610d2057610d20611d69565b6002811115610d3157610d31611d69565b8152602001600a820160159054906101000a900460ff166003811115610d5957610d59611d69565b6003811115610d6a57610d6a611d69565b90525092915050565b610d7b611529565b6001600160a01b0316610d966033546001600160a01b031690565b6001600160a01b031614610dbc5760405162461bcd60e51b815260040161049490611f4b565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526099602052604090205481906001600160a01b0316610e00611529565b6001600160a01b031614610e265760405162461bcd60e51b815260040161049490611ec1565b60008281526099602052604090206001600a820154600160a81b900460ff166003811115610e5657610e56611d69565b1480610e8157506002600a820154600160a81b900460ff166003811115610e7f57610e7f611d69565b145b610ec05760405162461bcd60e51b815260206004820152601060248201526f21494e56414c4944287374617475732960801b6044820152606401610494565b610ec9836115d1565b600a8101805460ff60a81b198116600360a81b1791829055825460098401546040516001600160a01b039283169488947f27edcd358ef2b53bc526b57370e2e080ffa9c6e3d6fd210e390b05ac82b4db41946105209493911691600160a01b900460ff1690611f80565b610f3b611529565b6001600160a01b0316610f566033546001600160a01b031690565b6001600160a01b031614610f7c5760405162461bcd60e51b815260040161049490611f4b565b609e55565b610f89611529565b6001600160a01b0316610fa46033546001600160a01b031690565b6001600160a01b031614610fca5760405162461bcd60e51b815260040161049490611f4b565b609780546001600160a01b0319166001600160a01b03831617905550565b50565b6000609e548510156110375760405162461bcd60e51b815260206004820152601560248201527421494e56414c494428746f707570416d6f756e742960581b6044820152606401610494565b600182600281111561104b5761104b611d69565b14806110685750600282600281111561106657611066611d69565b145b6110aa5760405162461bcd60e51b815260206004820152601360248201527221494e56414c494428746f707570547970652960681b6044820152606401610494565b60985460405163d5f59fb960e01b81526001600160a01b0385811660048301529091169063d5f59fb99060240160206040518083038186803b1580156110ef57600080fd5b505afa158015611103573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111279190612005565b6111685760405162461bcd60e51b815260206004820152601260248201527121494e56414c49442872656769737472792960701b6044820152606401610494565b6000611172611529565b6040516bffffffffffffffffffffffff19606092831b81166020830152603482018890529186901b909116605482015243606882015242608882015260a80160408051601f1981840301815291815281516020928301206000818152609990935291209091506111e0611529565b81546001600160a01b03199081166001600160a01b0392831617835560028084018b9055600384018a905560088401805463ffffffff19164263ffffffff1617905560098401899055600a840180549283169389169384178155879390926001600160a81b0319161790600160a01b90849081111561126157611261611d69565b0217905550600a8101805460ff60a81b1916600160a81b179055609a6000611287611529565b6001600160a01b0316815260208082019290925260400160009081208054600181018255908252919020018290556112be826117fc565b6001600a820154600160a81b900460ff1660038111156112e0576112e0611d69565b1461131e5760405162461bcd60e51b815260206004820152600e60248201526d21554e50524f4345535341424c4560901b6044820152606401610494565b8054600282015460038301546009840154600a8501546040516001600160a01b039586169588957fe26548496d0e88951d526ea185b82864689467851bf69d0218e2cf1b949850269561138595919490939192811691600160a01b90910460ff1690612027565b60405180910390a3509695505050505050565b6113a0611529565b6001600160a01b03166113bb6033546001600160a01b031690565b6001600160a01b0316146113e15760405162461bcd60e51b815260040161049490611f4b565b6001600160a01b0381166114465760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610494565b610fe88161172e565b600054610100900460ff1661146a5760005460ff161561146e565b303b155b6114d15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610494565b600054610100900460ff161580156114f3576000805461ffff19166101011790555b6114fb611905565b61150361193c565b6001609c55609f829055801561151f576000805461ff00191690555b5050565b3b151590565b6000611533611973565b905090565b60655460ff166115815760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610494565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6115b4611529565b6040516001600160a01b03909116815260200160405180910390a1565b60008181526099602090815260408083206001810154808552609b90935290832054909281905b8281101561164e576000848152609b6020526040902080548791908390811061162357611623611fad565b9060005260206000200154141561163c5780915061164e565b8061164681612064565b9150506115f8565b50818110156116f5576000838152609b6020526040902061167060018461207f565b8154811061168057611680611fad565b9060005260206000200154609b600085815260200190815260200160002060000182815481106116b2576116b2611fad565b6000918252602080832090910192909255848152609b909152604090208054806116de576116de612096565b600190038181906000526020600020016000905590555b5050609d80546001810182556000919091527fd26e832454299e9fabb89e0e5fffdc046d4e14431bc1bf607ffb2e8a1ddecf7b01555050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff16156117c65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610494565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115b4611529565b60006118066119a7565b9050600081116118475760405162461bcd60e51b815260206004820152600c60248201526b10a3a927aaa82fa2a92927a960a11b6044820152606401610494565b60008281526099602090815260408083206001808201869055858552609b84529184208054808401825581865293909420909201859055825491929114156118ff5760018101805463ffffffff19164263ffffffff16179055609854604051630650760d60e31b8152600481018590526001600160a01b0390911690633283b06890602401600060405180830381600087803b1580156118e657600080fd5b505af11580156118fa573d6000803e3d6000fd5b505050505b50505050565b600054610100900460ff1661192c5760405162461bcd60e51b8152600401610494906120ac565b611934611a78565b61057e611a9f565b600054610100900460ff166119635760405162461bcd60e51b8152600401610494906120ac565b61196b611a78565b61057e611ad6565b60006014361080159061199057506097546001600160a01b031633145b156119a2575060131936013560601c90565b503390565b609d54600090819015611a0d57609d80546119c49060019061207f565b815481106119d4576119d4611fad565b90600052602060002001549050609d8054806119f2576119f2612096565b60019003818190600052602060002001600090559055611a12565b50609c545b609c548114158015611a345750609f546000828152609b602052604090205410155b15611a3e5750609c545b609f546000828152609b602052604090205410611a73576001609c6000828254611a689190611ef6565b9091555050609c5490505b919050565b600054610100900460ff1661057e5760405162461bcd60e51b8152600401610494906120ac565b600054610100900460ff16611ac65760405162461bcd60e51b8152600401610494906120ac565b61057e611ad1611529565b61172e565b600054610100900460ff16611afd5760405162461bcd60e51b8152600401610494906120ac565b6065805460ff19169055565b604051806101a0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600063ffffffff1681526020016000815260200160006001600160a01b0316815260200160006002811115611b8d57611b8d611d69565b81526020016000905290565b60038110610fe857600080fd5b60008060408385031215611bb957600080fd5b823591506020830135611bcb81611b99565b809150509250929050565b60008060408385031215611be957600080fd5b82359150602083013563ffffffff81168114611bcb57600080fd5b600060208083528351808285015260005b81811015611c3157858101830151858201604001528201611c15565b81811115611c43576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114611a7357600080fd5b600060208284031215611c8257600080fd5b611c8b82611c59565b9392505050565b60008060408385031215611ca557600080fd5b611cae83611c59565b946020939093013593505050565b600060208284031215611cce57600080fd5b5035919050565b6020808252825160408383015280516060840181905260009291820190839060808601905b80831015611d1a5783518252928401926001929092019190840190611cfa565b5063ffffffff848801511660408701528094505050505092915050565b60008060008060808587031215611d4d57600080fd5b5050823594602084013594506040840135936060013592509050565b634e487b7160e01b600052602160045260246000fd5b60038110610fe857610fe8611d69565b611d9881611d7f565b9052565b60048110611d9857611d98611d69565b81516001600160a01b031681526101a081016020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151611e1c8285018263ffffffff169052565b50506101208381015190830152610140808401516001600160a01b03169083015261016080840151611e5082850182611d8f565b505061018080840151611e6582850182611d9c565b505092915050565b600080600080600060a08688031215611e8557600080fd5b853594506020860135935060408601359250611ea360608701611c59565b91506080860135611eb381611b99565b809150509295509295909350565b60208082526005908201526404282aaa8960db1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611f0957611f09611ee0565b500190565b8481526001600160a01b038416602082015260808101611f2d84611d7f565b836040830152611f3c83611d7f565b82606083015295945050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8381526001600160a01b038316602082015260608101611f9f83611d7f565b826040830152949350505050565b634e487b7160e01b600052603260045260246000fd5b8681526001600160a01b038616602082015260c08101611fe286611d7f565b8560408301528460608301528360808301528260a0830152979650505050505050565b60006020828403121561201757600080fd5b81518015158114611c8b57600080fd5b85815260208101859052604081018490526001600160a01b038316606082015260a0810161205483611d7f565b8260808301529695505050505050565b600060001982141561207857612078611ee0565b5060010190565b60008282101561209157612091611ee0565b500390565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212204a95d2a4d3728d7136847ee7ead51ec880677fa07f16a328ace02306a8cd8c3964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "chainlinkTopupManager": {
        "details": "contract to manage ChainlinkTopup executions. "
      },
      "chainlinkTopupMap": {
        "details": "map of ChainlinkTopup ID to ChainlinkTopup info. "
      },
      "minTopupAmount": {
        "details": "minimum amount to allow for a topup. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 327,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 330,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2551,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 205,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 319,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 415,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 506,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 72,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 8540,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "chainlinkTopupManager",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(ICaskChainlinkTopupManager)11283"
      },
      {
        "astId": 8546,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "chainlinkTopupMap",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes32,t_struct(ChainlinkTopup)11054_storage)"
      },
      {
        "astId": 8551,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "userChainlinkTopups",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 8556,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "chainlinkTopupGroupMap",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_struct(ChainlinkTopupGroup)11060_storage)"
      },
      {
        "astId": 8558,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "currentGroup",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 8561,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "backfillGroups",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 8564,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "minTopupAmount",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 8566,
        "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
        "label": "groupSize",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICaskChainlinkTopupManager)11283": {
        "encoding": "inplace",
        "label": "contract ICaskChainlinkTopupManager",
        "numberOfBytes": "20"
      },
      "t_enum(ChainlinkTopupStatus)11013": {
        "encoding": "inplace",
        "label": "enum ICaskChainlinkTopup.ChainlinkTopupStatus",
        "numberOfBytes": "1"
      },
      "t_enum(TopupType)11025": {
        "encoding": "inplace",
        "label": "enum ICaskChainlinkTopup.TopupType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_struct(ChainlinkTopup)11054_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ICaskChainlinkTopup.ChainlinkTopup)",
        "numberOfBytes": "32",
        "value": "t_struct(ChainlinkTopup)11054_storage"
      },
      "t_mapping(t_uint256,t_struct(ChainlinkTopupGroup)11060_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ICaskChainlinkTopup.ChainlinkTopupGroup)",
        "numberOfBytes": "32",
        "value": "t_struct(ChainlinkTopupGroup)11060_storage"
      },
      "t_struct(ChainlinkTopup)11054_storage": {
        "encoding": "inplace",
        "label": "struct ICaskChainlinkTopup.ChainlinkTopup",
        "members": [
          {
            "astId": 11027,
            "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11029,
            "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
            "label": "groupId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11031,
            "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
            "label": "lowBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11033,
            "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
            "label": "topupAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11035,
            "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
            "label": "currentAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11037,
            "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
            "label": "currentBuyQty",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 11039,
            "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
            "label": "numTopups",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 11041,
            "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
            "label": "numSkips",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 11043,
            "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
            "label": "createdAt",
            "offset": 0,
            "slot": "8",
            "type": "t_uint32"
          },
          {
            "astId": 11045,
            "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
            "label": "targetId",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 11047,
            "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
            "label": "registry",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          },
          {
            "astId": 11050,
            "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
            "label": "topupType",
            "offset": 20,
            "slot": "10",
            "type": "t_enum(TopupType)11025"
          },
          {
            "astId": 11053,
            "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
            "label": "status",
            "offset": 21,
            "slot": "10",
            "type": "t_enum(ChainlinkTopupStatus)11013"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(ChainlinkTopupGroup)11060_storage": {
        "encoding": "inplace",
        "label": "struct ICaskChainlinkTopup.ChainlinkTopupGroup",
        "members": [
          {
            "astId": 11057,
            "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
            "label": "chainlinkTopups",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 11059,
            "contract": "contracts/chainlink_topup/CaskChainlinkTopup.sol:CaskChainlinkTopup",
            "label": "processAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}