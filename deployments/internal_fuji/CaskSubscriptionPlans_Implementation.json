{
  "address": "0x89BC3A1Bd082C4bbc7d3e0dbD0F3dF1153972CE2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "PlanDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "PlanEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "retireAt",
          "type": "uint32"
        }
      ],
      "name": "PlanRetired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "paymentAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "cid",
          "type": "string"
        }
      ],
      "name": "ProviderSetProfile",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "disablePlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "enablePlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_discountValidator",
          "type": "bytes32"
        }
      ],
      "name": "erc20DiscountCurrentlyApplies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_discountId",
          "type": "bytes32"
        }
      ],
      "name": "getDiscountRedemptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "getPlanEOL",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "getPlanStatus",
      "outputs": [
        {
          "internalType": "enum ICaskSubscriptionPlans.PlanStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "getProviderProfile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "paymentAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            }
          ],
          "internalType": "struct ICaskSubscriptionPlans.Provider",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_retireAt",
          "type": "uint32"
        }
      ],
      "name": "retirePlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subscriptionManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "setProviderProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subscriptions",
          "type": "address"
        }
      ],
      "name": "setSubscriptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_discountProof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyAndConsumeDiscount",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_discountProof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyDiscount",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_planData",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyPlan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4d7858d5993487ecaee4dcbc4190cd8e287903f86e2cab9b1801af1c844aca8",
  "receipt": {
    "to": null,
    "from": "0x83e50cD4123bAA60f6d6c8A83ca85Ac72e826bD0",
    "contractAddress": "0x89BC3A1Bd082C4bbc7d3e0dbD0F3dF1153972CE2",
    "transactionIndex": 1,
    "gasUsed": "1817880",
    "logsBloom": "0x
    "blockHash": "0xf587af1aafe8da03a03a3d4d800bdc335e7383b2d47d76f202490c20a6a78d1f",
    "transactionHash": "0xb4d7858d5993487ecaee4dcbc4190cd8e287903f86e2cab9b1801af1c844aca8",
    "logs": [],
    "blockNumber": 9800752,
    "cumulativeGasUsed": "2033273",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "ae9737c1edd647702822d91b654f1bdb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"PlanDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"PlanEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"retireAt\",\"type\":\"uint32\"}],\"name\":\"PlanRetired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"ProviderSetProfile\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"disablePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"enablePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_discountValidator\",\"type\":\"bytes32\"}],\"name\":\"erc20DiscountCurrentlyApplies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_discountId\",\"type\":\"bytes32\"}],\"name\":\"getDiscountRedemptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"getPlanEOL\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"getPlanStatus\",\"outputs\":[{\"internalType\":\"enum ICaskSubscriptionPlans.PlanStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"internalType\":\"struct ICaskSubscriptionPlans.Provider\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_retireAt\",\"type\":\"uint32\"}],\"name\":\"retirePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriptionManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"setProviderProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriptions\",\"type\":\"address\"}],\"name\":\"setSubscriptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_discountProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyAndConsumeDiscount\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_discountProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyDiscount\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_planData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyPlan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"discountRedemptions\":{\"details\":\"Maps for discounts. \"},\"planStatus\":{\"details\":\"Map for current plan status. \"},\"providerProfiles\":{\"details\":\"Map for provider to profile info. \"},\"subscriptionManager\":{\"details\":\"Address of subscription manager. \"},\"subscriptions\":{\"details\":\"Address of subscriptions contract. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/CaskSubscriptionPlans.sol\":\"CaskSubscriptionPlans\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    function trustedForwarder() public virtual view returns (address){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce3168b37fc87ec34a18b56b4b16a06432119c07fd2e1d864b871dcf40372ebe\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0x199e82e0a2833a97213b5c16ac9b4e2b1814f2e90a4c4916855cbc21e710ad5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskSubscriptionPlans.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskSubscriptionPlans {\\n\\n    enum PlanStatus {\\n        Enabled,\\n        Disabled,\\n        EndOfLife\\n    }\\n\\n    enum DiscountType {\\n        None,\\n        Code,\\n        ERC20\\n    }\\n\\n    struct Discount {\\n        uint256 value;\\n        uint32 validAfter;\\n        uint32 expiresAt;\\n        uint32 maxRedemptions;\\n        uint32 planId;\\n        uint16 applyPeriods;\\n        DiscountType discountType;\\n        bool isFixed;\\n    }\\n\\n    struct Provider {\\n        address paymentAddress;\\n        uint256 nonce;\\n        string cid;\\n    }\\n\\n    function setProviderProfile(address _paymentAddress, string calldata _cid, uint256 _nonce) external;\\n\\n    function getProviderProfile(address _provider) external view returns(Provider memory);\\n\\n    function getPlanStatus(address _provider, uint32 _planId) external view returns (PlanStatus);\\n\\n    function getPlanEOL(address _provider, uint32 _planId) external view returns (uint32);\\n\\n    function disablePlan(uint32 _planId) external;\\n\\n    function enablePlan(uint32 _planId) external;\\n\\n    function retirePlan(uint32 _planId, uint32 _retireAt) external;\\n\\n    function verifyPlan(bytes32 _planData, bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof) external view returns(bool);\\n\\n    function getDiscountRedemptions(address _provider, uint32 _planId,\\n        bytes32 _discountId) external view returns(uint256);\\n\\n    function verifyAndConsumeDiscount(address _consumer, address _provider, uint32 _planId,\\n        bytes32[] calldata _discountProof) external returns(bytes32);\\n\\n    function verifyDiscount(address _consumer, address _provider, uint32 _planId,\\n        bytes32[] calldata _discountProof) external returns(bytes32);\\n\\n    function erc20DiscountCurrentlyApplies(address _consumer, bytes32 _discountValidator) external returns(bool);\\n\\n\\n    /** @dev Emitted when `provider` sets their profile info */\\n    event ProviderSetProfile(address indexed provider, address indexed paymentAddress, uint256 nonce, string cid);\\n\\n    /** @dev Emitted when `provider` disables a subscription plan */\\n    event PlanDisabled(address indexed provider, uint32 indexed planId);\\n\\n    /** @dev Emitted when `provider` enables a subscription plan */\\n    event PlanEnabled(address indexed provider, uint32 indexed planId);\\n\\n    /** @dev Emitted when `provider` end-of-lifes a subscription plan */\\n    event PlanRetired(address indexed provider, uint32 indexed planId, uint32 retireAt);\\n\\n}\",\"keccak256\":\"0x95fbb76c0e9fedfafada650d10ab1e23c3c5510851134c3bbf2fbd9715cea910\",\"license\":\"MIT\"},\"contracts/protocol/CaskSubscriptionPlans.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"@opengsn/contracts/src/BaseRelayRecipient.sol\\\";\\n\\n\\nimport \\\"../interfaces/ICaskSubscriptionPlans.sol\\\";\\n\\ncontract CaskSubscriptionPlans is\\nICaskSubscriptionPlans,\\nBaseRelayRecipient,\\nOwnableUpgradeable,\\nPausableUpgradeable\\n{\\n    /** @dev Address of subscription manager. */\\n    address public subscriptionManager;\\n\\n    /** @dev Map for provider to profile info. */\\n    mapping(address => Provider) internal providerProfiles;\\n\\n    /** @dev Map for current plan status. */\\n    // provider->planId => Plan\\n    mapping(address => mapping(uint32 => PlanStatus)) internal planStatus;\\n    mapping(address => mapping(uint32 => uint32)) internal planEol;\\n\\n    /** @dev Maps for discounts. */\\n    mapping(address => mapping(uint32 => mapping(bytes32 => uint256))) internal discountRedemptions;\\n\\n    /** @dev Address of subscriptions contract. */\\n    address public subscriptions;\\n\\n    modifier onlyManager() {\\n        require(_msgSender() == subscriptionManager, \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n    modifier onlySubscriptions() {\\n        require(_msgSender() == subscriptions, \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n\\n        subscriptions = address(0);\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function versionRecipient() public pure override returns(string memory) { return \\\"2.2.0\\\"; }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (address sender) {\\n        sender = BaseRelayRecipient._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (bytes memory) {\\n        return BaseRelayRecipient._msgData();\\n    }\\n\\n    function setProviderProfile(\\n        address _paymentAddress,\\n        string calldata _cid,\\n        uint256 _nonce\\n    ) external override {\\n        Provider storage profile = providerProfiles[_msgSender()];\\n        if (profile.nonce > 0) {\\n            require(_nonce > profile.nonce, \\\"!NONCE\\\");\\n        }\\n        profile.paymentAddress = _paymentAddress;\\n        profile.cid = _cid;\\n        profile.nonce = _nonce;\\n\\n        emit ProviderSetProfile(_msgSender(), _paymentAddress, _nonce, _cid);\\n    }\\n\\n    function getProviderProfile(\\n        address _provider\\n    ) external override view returns(Provider memory) {\\n        return providerProfiles[_provider];\\n    }\\n\\n    function verifyPlan(\\n        bytes32 _planData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof\\n    ) external override pure returns(bool) {\\n        return MerkleProof.verify(_merkleProof, _merkleRoot, keccak256(abi.encode(_planData)));\\n    }\\n\\n    function getDiscountRedemptions(\\n        address _provider,\\n        uint32 _planId,\\n        bytes32 _discountId\\n    ) external view override returns(uint256) {\\n        return discountRedemptions[_provider][_planId][_discountId];\\n    }\\n\\n    function verifyDiscount(\\n        address _consumer,\\n        address _provider,\\n        uint32 _planId,\\n        bytes32[] calldata _discountProof // [discountValidator, discountData, merkleRoot, merkleProof...]\\n    ) public view override returns(bytes32) {\\n        if (_discountProof.length < 3 || _discountProof[0] == 0) {\\n            return 0;\\n        }\\n\\n        DiscountType discountType = _parseDiscountType(_discountProof[1]);\\n\\n        if (discountType == DiscountType.Code) {\\n            return _verifyCodeDiscount(_provider, _planId, _discountProof);\\n        } else if (discountType == DiscountType.ERC20) {\\n            return _verifyErc20Discount(_consumer, _provider, _planId, _discountProof);\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function verifyAndConsumeDiscount(\\n        address _consumer,\\n        address _provider,\\n        uint32 _planId,\\n        bytes32[] calldata _discountProof // [discountValidator, discountData, merkleRoot, merkleProof...]\\n    ) external override onlySubscriptions returns(bytes32) {\\n        bytes32 discountId = verifyDiscount(_consumer, _provider, _planId, _discountProof);\\n        if (discountId > 0) {\\n            discountRedemptions[_provider][_planId][discountId] += 1;\\n        }\\n        return discountId;\\n    }\\n\\n    function _verifyCodeDiscount(\\n        address _provider,\\n        uint32 _planId,\\n        bytes32[] calldata _discountProof // [discountValidator, discountData, merkleRoot, merkleProof...]\\n    ) internal view returns(bytes32) {\\n        if (_discountProof.length < 3 || _discountProof[0] == 0) {\\n            return 0;\\n        }\\n\\n        bytes32 discountId = keccak256(abi.encode(_discountProof[0]));\\n\\n        if (_verifyDiscountProof(discountId, _discountProof) &&\\n            _verifyDiscountData(discountId, _provider, _planId, _discountProof[1]))\\n        {\\n            return discountId;\\n        }\\n        return 0;\\n    }\\n\\n    function _verifyErc20Discount(\\n        address _consumer,\\n        address _provider,\\n        uint32 _planId,\\n        bytes32[] calldata _discountProof // [discountValidator, discountData, merkleRoot, merkleProof...]\\n    ) internal view returns(bytes32) {\\n        if (_discountProof.length < 3 || _discountProof[0] == 0) {\\n            return 0;\\n        }\\n\\n        bytes32 discountId = _discountProof[0];\\n\\n        if (_verifyDiscountProof(discountId, _discountProof) &&\\n            erc20DiscountCurrentlyApplies(_consumer, discountId) &&\\n            _verifyDiscountData(discountId, _provider, _planId, _discountProof[1]))\\n        {\\n            return discountId;\\n        }\\n        return 0;\\n    }\\n\\n    function _verifyDiscountProof(\\n        bytes32 _discountId,\\n        bytes32[] calldata _discountProof // [discountValidator, discountData, merkleRoot, merkleProof...]\\n    ) internal pure returns(bool) {\\n        if (_discountProof.length < 3 || _discountProof[0] == 0) {\\n            return false;\\n        }\\n\\n        // its possible to have an empty merkleProof if the merkleRoot IS the leaf\\n        bytes32[] memory merkleProof = new bytes32[](0);\\n        if (_discountProof.length >= 4) {\\n            merkleProof = _discountProof[3:];\\n        }\\n\\n        return MerkleProof.verify(merkleProof, _discountProof[2],\\n            keccak256(abi.encode(_discountId, _discountProof[1])));\\n    }\\n\\n    function _verifyDiscountData(\\n        bytes32 _discountId,\\n        address _provider,\\n        uint32 _planId,\\n        bytes32 _discountData\\n    ) internal view returns(bool) {\\n        Discount memory discountInfo = _parseDiscountData(_discountData);\\n\\n        return\\n            (discountInfo.planId == 0 || discountInfo.planId == _planId) &&\\n            (discountInfo.maxRedemptions == 0 ||\\n                discountRedemptions[_provider][discountInfo.planId][_discountId] < discountInfo.maxRedemptions) &&\\n            (discountInfo.validAfter == 0 || discountInfo.validAfter >= uint32(block.timestamp)) &&\\n            (discountInfo.expiresAt == 0 || discountInfo.expiresAt < uint32(block.timestamp));\\n    }\\n\\n    function erc20DiscountCurrentlyApplies(\\n        address _consumer,\\n        bytes32 _discountValidator\\n    ) public view override returns(bool) {\\n        address token = address(bytes20(_discountValidator));\\n        uint8 decimals = uint8(bytes1(_discountValidator << 160));\\n\\n        try IERC20(token).balanceOf(_consumer) returns (uint256 balance) {\\n            if (decimals > 0) {\\n                balance = balance / uint256(10 ** decimals);\\n            }\\n            uint64 minBalance = uint64(bytes8(_discountValidator << 192));\\n\\n            return balance >= minBalance;\\n        } catch (bytes memory) {\\n            return false;\\n        }\\n    }\\n\\n    function getPlanStatus(\\n        address _provider,\\n        uint32 _planId\\n    ) external view returns (PlanStatus) {\\n        return planStatus[_provider][_planId];\\n    }\\n\\n    function getPlanEOL(\\n        address _provider,\\n        uint32 _planId\\n    ) external view returns (uint32) {\\n        return planEol[_provider][_planId];\\n    }\\n\\n    function disablePlan(\\n        uint32 _planId\\n    ) external override {\\n        require(planStatus[_msgSender()][_planId] == PlanStatus.Enabled, \\\"!NOT_ENABLED\\\");\\n\\n        planStatus[_msgSender()][_planId] = PlanStatus.Disabled;\\n\\n        emit PlanDisabled(_msgSender(), _planId);\\n    }\\n\\n    function enablePlan(\\n        uint32 _planId\\n    ) external override {\\n        require(planStatus[_msgSender()][_planId] == PlanStatus.Disabled, \\\"!NOT_DISABLED\\\");\\n\\n        planStatus[_msgSender()][_planId] = PlanStatus.Enabled;\\n\\n        emit PlanEnabled(_msgSender(), _planId);\\n    }\\n\\n    function retirePlan(\\n        uint32 _planId,\\n        uint32 _retireAt\\n    ) external override {\\n        planStatus[_msgSender()][_planId] = PlanStatus.EndOfLife;\\n        planEol[_msgSender()][_planId] = _retireAt;\\n\\n        emit PlanRetired(_msgSender(), _planId, _retireAt);\\n    }\\n\\n    function _parseDiscountType(\\n        bytes32 _discountData\\n    ) internal pure returns(DiscountType) {\\n        return DiscountType(uint8(bytes1(_discountData << 248)));\\n    }\\n\\n    function _parseDiscountData(\\n        bytes32 _discountData\\n    ) internal pure returns(Discount memory) {\\n        bytes1 options = bytes1(_discountData << 240);\\n        return Discount({\\n        value: uint256(_discountData >> 160),\\n        validAfter: uint32(bytes4(_discountData << 96)),\\n        expiresAt: uint32(bytes4(_discountData << 128)),\\n        maxRedemptions: uint32(bytes4(_discountData << 160)),\\n        planId: uint32(bytes4(_discountData << 192)),\\n        applyPeriods: uint16(bytes2(_discountData << 224)),\\n        discountType: DiscountType(uint8(bytes1(_discountData << 248))),\\n        isFixed: options & 0x01 == 0x01\\n        });\\n    }\\n\\n\\n    /************************** ADMIN FUNCTIONS **************************/\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setManager(\\n        address _subscriptionManager\\n    ) external onlyOwner {\\n        subscriptionManager = _subscriptionManager;\\n    }\\n\\n    function setSubscriptions(\\n        address _subscriptions\\n    ) external onlyOwner {\\n        subscriptions = _subscriptions;\\n    }\\n\\n    function setTrustedForwarder(\\n        address _forwarder\\n    ) external onlyOwner {\\n        _setTrustedForwarder(_forwarder);\\n    }\\n\\n}\",\"keccak256\":\"0x0685b41c236f870b5c7a8c1edce59eff10ccd12d2e81503ece93499c5181dd8a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80637da0a877116100f9578063b8e381e511610097578063cd1402e711610071578063cd1402e7146103e4578063d0ebdbe7146103f7578063da7422281461040a578063f2fde38b1461041d57600080fd5b8063b8e381e5146103ab578063bf158fd2146103be578063c5b2cfce146103d157600080fd5b80638da5cb5b116100d35780638da5cb5b146103265780639c4f7d5914610337578063b0d8985c1461034a578063b6ab359f1461035d57600080fd5b80637da0a877146102f15780638129fc1c146103165780638456cb591461031e57600080fd5b8063486ff0cd11610166578063715018a611610140578063715018a6146102b057806371ce3e66146102b8578063762f3e3d146102cb57806379c19bc4146102de57600080fd5b8063486ff0cd1461024c578063572b6c05146102735780635c975abb146102a557600080fd5b8063025b6875146101ae5780631bc569b5146101db5780632218d7d3146101f0578063256c6ba9146102115780633c17dac8146102245780633f4ba83a14610244575b600080fd5b6101c16101bc36600461192f565b610430565b60405163ffffffff90911681526020015b60405180910390f35b6101ee6101e9366004611962565b610463565b005b6102036101fe3660046119c9565b610593565b6040519081526020016101d2565b6101ee61021f366004611962565b610653565b610237610232366004611a3f565b61077f565b6040516101d29190611aa7565b6101ee61086a565b60408051808201825260058152640322e322e360dc1b602082015290516101d29190611ade565b610295610281366004611a3f565b6000546001600160a01b0391821691161490565b60405190151581526020016101d2565b60655460ff16610295565b6101ee6108bd565b6102956102c6366004611af1565b610910565b6102036102d9366004611b44565b61097e565b6102036102ec3660046119c9565b6109b8565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016101d2565b6101ee610a76565b6101ee610b62565b6033546001600160a01b03166102fe565b6101ee610345366004611a3f565b610bb3565b6101ee610358366004611b80565b610c1e565b61039e61036b36600461192f565b6001600160a01b038216600090815260996020908152604080832063ffffffff8516845290915290205460ff1692915050565b6040516101d29190611c1f565b609c546102fe906001600160a01b031681565b6097546102fe906001600160a01b031681565b6101ee6103df366004611c47565b610d19565b6102956103f2366004611c63565b610e14565b6101ee610405366004611a3f565b610f0d565b6101ee610418366004611a3f565b610f78565b6101ee61042b366004611a3f565b610fdf565b6001600160a01b0382166000908152609a6020908152604080832063ffffffff8086168552925290912054165b92915050565b60006099600061047161109c565b6001600160a01b031681526020808201929092526040908101600090812063ffffffff8616825290925290205460ff1660028111156104b2576104b2611c09565b146104f35760405162461bcd60e51b815260206004820152600c60248201526b085393d517d153905093115160a21b60448201526064015b60405180910390fd5b60016099600061050161109c565b6001600160a01b031681526020808201929092526040908101600090812063ffffffff861682529092529020805460ff1916600183600281111561054757610547611c09565b02179055508063ffffffff1661055b61109c565b6001600160a01b03167f50ec551c598cd517a78f91d12398f4f1d95e0171a4393505d01401f8b6c940a760405160405180910390a350565b609c546000906001600160a01b03166105aa61109c565b6001600160a01b0316146105e85760405162461bcd60e51b815260206004820152600560248201526404282aaa8960db1b60448201526064016104ea565b60006105f787878787876109b8565b90508015610647576001600160a01b0386166000908152609b6020908152604080832063ffffffff8916845282528083208484529091528120805460019290610641908490611ca3565b90915550505b90505b95945050505050565b60016099600061066161109c565b6001600160a01b031681526020808201929092526040908101600090812063ffffffff8616825290925290205460ff1660028111156106a2576106a2611c09565b146106df5760405162461bcd60e51b815260206004820152600d60248201526c085393d517d11254d050931151609a1b60448201526064016104ea565b6000609960006106ed61109c565b6001600160a01b031681526020808201929092526040908101600090812063ffffffff861682529092529020805460ff1916600183600281111561073357610733611c09565b02179055508063ffffffff1661074761109c565b6001600160a01b03167fb6af1d2951898e17e763c18b77daf0ada2f2753802d37868e67797e87991a29860405160405180910390a350565b6040805160608082018352600080835260208084018290528385018390526001600160a01b038681168352609882529185902085519384018652805490921683526001820154908301526002810180549394929391928401916107e190611cbb565b80601f016020809104026020016040519081016040528092919081815260200182805461080d90611cbb565b801561085a5780601f1061082f5761010080835404028352916020019161085a565b820191906000526020600020905b81548152906001019060200180831161083d57829003601f168201915b5050505050815250509050919050565b61087261109c565b6001600160a01b031661088d6033546001600160a01b031690565b6001600160a01b0316146108b35760405162461bcd60e51b81526004016104ea90611cf6565b6108bb6110ab565b565b6108c561109c565b6001600160a01b03166108e06033546001600160a01b031690565b6001600160a01b0316146109065760405162461bcd60e51b81526004016104ea90611cf6565b6108bb6000611144565b60006109738383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602081018b90528993500190505b60405160208183030381529060405280519060200120611196565b90505b949350505050565b6001600160a01b0383166000908152609b6020908152604080832063ffffffff8616845282528083208484529091529020545b9392505050565b600060038210806109e45750828260008181106109d7576109d7611d2b565b905060200201356000801b145b156109f15750600061064a565b6000610a1584846001818110610a0957610a09611d2b565b905060200201356111ac565b90506001816002811115610a2b57610a2b611c09565b1415610a4557610a3d868686866111c3565b91505061064a565b6002816002811115610a5957610a59611c09565b1415610a6c57610a3d8787878787611291565b506000905061064a565b600054600160a81b900460ff16610a9a57600054600160a01b900460ff1615610a9e565b303b155b610b015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016104ea565b600054600160a81b900460ff16158015610b2b576000805461ffff60a01b191661010160a01b1790555b610b3361133d565b610b3b611376565b609c80546001600160a01b03191690558015610b5f576000805460ff60a81b191690555b50565b610b6a61109c565b6001600160a01b0316610b856033546001600160a01b031690565b6001600160a01b031614610bab5760405162461bcd60e51b81526004016104ea90611cf6565b6108bb6113af565b610bbb61109c565b6001600160a01b0316610bd66033546001600160a01b031690565b6001600160a01b031614610bfc5760405162461bcd60e51b81526004016104ea90611cf6565b609c80546001600160a01b0319166001600160a01b0392909216919091179055565b600060986000610c2c61109c565b6001600160a01b031681526020810191909152604001600020600181015490915015610c8e5780600101548211610c8e5760405162461bcd60e51b8152602060048201526006602482015265214e4f4e434560d01b60448201526064016104ea565b80546001600160a01b0319166001600160a01b038616178155610cb5600282018585611866565b50600181018290556001600160a01b038516610ccf61109c565b6001600160a01b03167e0b4932fa91cc5ebcac0f9fb3ab2ae36eb6ba359cdd98d49954b5a700a21109848787604051610d0a93929190611d41565b60405180910390a35050505050565b600260996000610d2761109c565b6001600160a01b031681526020808201929092526040908101600090812063ffffffff871682529092529020805460ff19166001836002811115610d6d57610d6d611c09565b021790555080609a6000610d7f61109c565b6001600160a01b031681526020808201929092526040908101600090812063ffffffff87811680845291909452919020805463ffffffff191693909216929092179055610dca61109c565b60405163ffffffff841681526001600160a01b0391909116907fb14722ab80cf12b24122b69280630813ed38d597d93a29801fa9087cb8968a5d9060200160405180910390a35050565b6040516370a0823160e01b81526001600160a01b0383166004820152600090606083901c90605884901c60ff169082906370a082319060240160206040518083038186803b158015610e6557600080fd5b505afa925050508015610e95575060408051601f3d908101601f19168201909252610e9291810190611d77565b60015b610ed5573d808015610ec3576040519150601f19603f3d011682016040523d82523d6000602084013e610ec8565b606091505b506000935050505061045d565b60ff821615610ef657610ee982600a611e74565b610ef39082611e83565b90505b67ffffffffffffffff85161115925061045d915050565b610f1561109c565b6001600160a01b0316610f306033546001600160a01b031690565b6001600160a01b031614610f565760405162461bcd60e51b81526004016104ea90611cf6565b609780546001600160a01b0319166001600160a01b0392909216919091179055565b610f8061109c565b6001600160a01b0316610f9b6033546001600160a01b031690565b6001600160a01b031614610fc15760405162461bcd60e51b81526004016104ea90611cf6565b600080546001600160a01b0319166001600160a01b03831617905550565b610fe761109c565b6001600160a01b03166110026033546001600160a01b031690565b6001600160a01b0316146110285760405162461bcd60e51b81526004016104ea90611cf6565b6001600160a01b03811661108d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104ea565b610b5f81611144565b3b151590565b60006110a661142b565b905090565b60655460ff166110f45760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104ea565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61112761109c565b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000826111a3858461145f565b14949350505050565b600060ff8216600281111561045d5761045d611c09565b600060038210806111ef5750828260008181106111e2576111e2611d2b565b905060200201356000801b145b156111fc57506000610976565b60008383600081811061121157611211611d2b565b9050602002013560405160200161122a91815260200190565b60405160208183030381529060405280519060200120905061124d81858561150b565b801561127957506112798187878787600181811061126d5761126d611d2b565b905060200201356115f0565b15611285579050610976565b50600095945050505050565b600060038210806112bd5750828260008181106112b0576112b0611d2b565b905060200201356000801b145b156112ca5750600061064a565b6000838360008181106112df576112df611d2b565b9050602002013590506112f381858561150b565b801561130457506113048782610e14565b801561132457506113248187878787600181811061126d5761126d611d2b565b1561133057905061064a565b5060009695505050505050565b600054600160a81b900460ff166113665760405162461bcd60e51b81526004016104ea90611ea5565b61136e6116e7565b6108bb611710565b600054600160a81b900460ff1661139f5760405162461bcd60e51b81526004016104ea90611ea5565b6113a76116e7565b6108bb611749565b60655460ff16156113f55760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104ea565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861112761109c565b60006014361080159061144857506000546001600160a01b031633145b1561145a575060131936013560601c90565b503390565b600081815b845181101561150357600085828151811061148157611481611d2b565b602002602001015190508083116114c35760408051602081018590529081018290526060016040516020818303038152906040528051906020012092506114f0565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806114fb81611ef0565b915050611464565b509392505050565b6000600382108061153757508282600081811061152a5761152a611d2b565b905060200201356000801b145b15611544575060006109b1565b6040805160008152602081019091526004831061159d576115688360038187611f0b565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509293505050505b61064a81858560028181106115b4576115b4611d2b565b9050602002013587878760018181106115cf576115cf611d2b565b90506020020135604051602001610958929190918252602082015260400190565b6000806115fc8361177e565b9050806080015163ffffffff166000148061162657508363ffffffff16816080015163ffffffff16145b80156116825750606081015163ffffffff161580611682575060608101516001600160a01b0386166000908152609b60209081526040808320608086015163ffffffff90811685529083528184208b8552909252909120549116115b80156116b05750602081015163ffffffff1615806116b057504263ffffffff16816020015163ffffffff1610155b80156116dd5750604081015163ffffffff1615806116dd57504263ffffffff16816040015163ffffffff16105b9695505050505050565b600054600160a81b900460ff166108bb5760405162461bcd60e51b81526004016104ea90611ea5565b600054600160a81b900460ff166117395760405162461bcd60e51b81526004016104ea90611ea5565b6108bb61174461109c565b611144565b600054600160a81b900460ff166117725760405162461bcd60e51b81526004016104ea90611ea5565b6065805460ff19169055565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810191909152604080516101008101825260a084811c825263ffffffff608086811c8216602080860191909152606088811c8416868801529588901c8316958501959095529386901c169282019290925261ffff601085901c169181019190915260f083901b9060c0810160ff8516600281111561183957611839611c09565b600281111561184a5761184a611c09565b8152600160f81b92831690921460209092019190915292915050565b82805461187290611cbb565b90600052602060002090601f01602090048101928261189457600085556118da565b82601f106118ad5782800160ff198235161785556118da565b828001600101855582156118da579182015b828111156118da5782358255916020019190600101906118bf565b506118e69291506118ea565b5090565b5b808211156118e657600081556001016118eb565b80356001600160a01b038116811461191657600080fd5b919050565b803563ffffffff8116811461191657600080fd5b6000806040838503121561194257600080fd5b61194b836118ff565b91506119596020840161191b565b90509250929050565b60006020828403121561197457600080fd5b6109b18261191b565b60008083601f84011261198f57600080fd5b50813567ffffffffffffffff8111156119a757600080fd5b6020830191508360208260051b85010111156119c257600080fd5b9250929050565b6000806000806000608086880312156119e157600080fd5b6119ea866118ff565b94506119f8602087016118ff565b9350611a066040870161191b565b9250606086013567ffffffffffffffff811115611a2257600080fd5b611a2e8882890161197d565b969995985093965092949392505050565b600060208284031215611a5157600080fd5b6109b1826118ff565b6000815180845260005b81811015611a8057602081850181015186830182015201611a64565b81811115611a92576000602083870101525b50601f01601f19169290920160200192915050565b6020815260018060a01b03825116602082015260208201516040820152600060408301516060808401526109766080840182611a5a565b6020815260006109b16020830184611a5a565b60008060008060608587031215611b0757600080fd5b8435935060208501359250604085013567ffffffffffffffff811115611b2c57600080fd5b611b388782880161197d565b95989497509550505050565b600080600060608486031215611b5957600080fd5b611b62846118ff565b9250611b706020850161191b565b9150604084013590509250925092565b60008060008060608587031215611b9657600080fd5b611b9f856118ff565b9350602085013567ffffffffffffffff80821115611bbc57600080fd5b818701915087601f830112611bd057600080fd5b813581811115611bdf57600080fd5b886020828501011115611bf157600080fd5b95986020929092019750949560400135945092505050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611c4157634e487b7160e01b600052602160045260246000fd5b91905290565b60008060408385031215611c5a57600080fd5b61194b8361191b565b60008060408385031215611c7657600080fd5b611c7f836118ff565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611cb657611cb6611c8d565b500190565b600181811c90821680611ccf57607f821691505b60208210811415611cf057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600060208284031215611d8957600080fd5b5051919050565b600181815b80851115611dcb578160001904821115611db157611db1611c8d565b80851615611dbe57918102915b93841c9390800290611d95565b509250929050565b600082611de25750600161045d565b81611def5750600061045d565b8160018114611e055760028114611e0f57611e2b565b600191505061045d565b60ff841115611e2057611e20611c8d565b50506001821b61045d565b5060208310610133831016604e8410600b8410161715611e4e575081810a61045d565b611e588383611d90565b8060001904821115611e6c57611e6c611c8d565b029392505050565b60006109b160ff841683611dd3565b600082611ea057634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000600019821415611f0457611f04611c8d565b5060010190565b60008085851115611f1b57600080fd5b83861115611f2857600080fd5b5050600583901b019391909203915056fea26469706673582212205147b0602ae1802d84c7de788b41554f93e03b41b57dfc1a383b9b9b64ef498264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "discountRedemptions": {
        "details": "Maps for discounts. "
      },
      "planStatus": {
        "details": "Map for current plan status. "
      },
      "providerProfiles": {
        "details": "Map for provider to profile info. "
      },
      "subscriptionManager": {
        "details": "Address of subscription manager. "
      },
      "subscriptions": {
        "details": "Address of subscriptions contract. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 72,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 327,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 330,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2551,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 205,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 319,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 415,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 506,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11658,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "subscriptionManager",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 11664,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "providerProfiles",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_struct(Provider)8979_storage)"
      },
      {
        "astId": 11672,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "planStatus",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_enum(PlanStatus)8950))"
      },
      {
        "astId": 11678,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "planEol",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_uint32))"
      },
      {
        "astId": 11687,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "discountRedemptions",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_bytes32,t_uint256)))"
      },
      {
        "astId": 11690,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "subscriptions",
        "offset": 0,
        "slot": "156",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(PlanStatus)8950": {
        "encoding": "inplace",
        "label": "enum ICaskSubscriptionPlans.PlanStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_enum(PlanStatus)8950))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => enum ICaskSubscriptionPlans.PlanStatus))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_enum(PlanStatus)8950)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_bytes32,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => mapping(bytes32 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_mapping(t_bytes32,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_uint32))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => uint32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_uint32)"
      },
      "t_mapping(t_address,t_struct(Provider)8979_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICaskSubscriptionPlans.Provider)",
        "numberOfBytes": "32",
        "value": "t_struct(Provider)8979_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_enum(PlanStatus)8950)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => enum ICaskSubscriptionPlans.PlanStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(PlanStatus)8950"
      },
      "t_mapping(t_uint32,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Provider)8979_storage": {
        "encoding": "inplace",
        "label": "struct ICaskSubscriptionPlans.Provider",
        "members": [
          {
            "astId": 8974,
            "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
            "label": "paymentAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8976,
            "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
            "label": "nonce",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8978,
            "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
            "label": "cid",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}