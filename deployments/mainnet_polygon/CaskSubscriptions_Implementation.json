{
  "address": "0x9283b67e1D67daf07C619B8155aE3cB91DB6D70a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "prevPlanId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "discountId",
          "type": "bytes32"
        }
      ],
      "name": "SubscriptionChangedPlan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "discountId",
          "type": "bytes32"
        }
      ],
      "name": "SubscriptionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionPastDue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "cancelAt",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionPendingCancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "prevPlanId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionPendingChangePlan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionPendingPause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionRenewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionResumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionTrialEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_dataCid",
          "type": "string"
        }
      ],
      "name": "attachData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_cancelAt",
          "type": "uint32"
        }
      ],
      "name": "cancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_planProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_discountProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "_providerSignature",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        }
      ],
      "name": "changeSubscriptionPlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_planProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_discountProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32",
          "name": "_networkData",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_cancelAt",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_providerSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_networkSignature",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        }
      ],
      "name": "createNetworkSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_planProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_discountProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint32",
          "name": "_cancelAt",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_providerSignature",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        }
      ],
      "name": "createSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "getActiveSubscriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getConsumerSubscription",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "getConsumerSubscriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "getPendingPlanChange",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getProviderSubscription",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_includeCanceled",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "getProviderSubscriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "getSubscription",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "planData",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "networkData",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "discountId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "discountData",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "ref",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "enum ICaskSubscriptions.SubscriptionStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "planId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "createdAt",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "renewAt",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "minTermAt",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "cancelAt",
              "type": "uint32"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "dataCid",
              "type": "string"
            }
          ],
          "internalType": "struct ICaskSubscriptions.Subscription",
          "name": "subscription",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "currentOwner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subscriptionPlans",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "enum ICaskSubscriptions.ManagerCommand",
          "name": "_command",
          "type": "uint8"
        }
      ],
      "name": "managerCommand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "pauseSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "resumeSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subscriptionManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionManager",
      "outputs": [
        {
          "internalType": "contract ICaskSubscriptionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionPlans",
      "outputs": [
        {
          "internalType": "contract ICaskSubscriptionPlans",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e72302fa7b2f283c38377ef67d2b991cef69e5c374e754bc45bf8bf698cfbcb",
  "receipt": {
    "to": null,
    "from": "0x54812dBaB593674CD4F1216264895be48B55C5e3",
    "contractAddress": "0x9283b67e1D67daf07C619B8155aE3cB91DB6D70a",
    "transactionIndex": 27,
    "gasUsed": "5060010",
    "logsBloom": "0x
    "blockHash": "0xdd1f78dfa959dab5b71af8b3116817c9369de60cf9e63ce0a38bff1f226d88ee",
    "transactionHash": "0x0e72302fa7b2f283c38377ef67d2b991cef69e5c374e754bc45bf8bf698cfbcb",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 34914770,
        "transactionHash": "0x0e72302fa7b2f283c38377ef67d2b991cef69e5c374e754bc45bf8bf698cfbcb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000054812dbab593674cd4f1216264895be48b55c5e3",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000476dc9e9e58e06e00000000000000000000000000000000000000000000001585824d294659b6500000000000000000000000000000000000000000000006078787965a7cc12ca1000000000000000000000000000000000000000000000015810b708aa800d5e20000000000000000000000000000000000000000000006078bfe72f91b1a0d0f",
        "logIndex": 101,
        "blockHash": "0xdd1f78dfa959dab5b71af8b3116817c9369de60cf9e63ce0a38bff1f226d88ee"
      }
    ],
    "blockNumber": 34914770,
    "cumulativeGasUsed": "11220430",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "949389850b8991115fdb7595c3061e7f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevPlanId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"discountId\",\"type\":\"bytes32\"}],\"name\":\"SubscriptionChangedPlan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"discountId\",\"type\":\"bytes32\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionPastDue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"cancelAt\",\"type\":\"uint32\"}],\"name\":\"SubscriptionPendingCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevPlanId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionPendingChangePlan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionPendingPause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionTrialEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_dataCid\",\"type\":\"string\"}],\"name\":\"attachData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_cancelAt\",\"type\":\"uint32\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_planProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_discountProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"_providerSignature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"changeSubscriptionPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_planProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_discountProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_networkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_cancelAt\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_providerSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_networkSignature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"createNetworkSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_planProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_discountProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint32\",\"name\":\"_cancelAt\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_providerSignature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"createSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"getActiveSubscriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getConsumerSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"getConsumerSubscriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"getPendingPlanChange\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getProviderSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_includeCanceled\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"getProviderSubscriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"getSubscription\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"planData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"networkData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"discountId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"discountData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"enum ICaskSubscriptions.SubscriptionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"renewAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minTermAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cancelAt\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dataCid\",\"type\":\"string\"}],\"internalType\":\"struct ICaskSubscriptions.Subscription\",\"name\":\"subscription\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriptionPlans\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"enum ICaskSubscriptions.ManagerCommand\",\"name\":\"_command\",\"type\":\"uint8\"}],\"name\":\"managerCommand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"pauseSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"resumeSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriptionManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionManager\",\"outputs\":[{\"internalType\":\"contract ICaskSubscriptionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionPlans\",\"outputs\":[{\"internalType\":\"contract ICaskSubscriptionPlans\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"consumerSubscriptions\":{\"details\":\"Maps for consumer to list of subscriptions. \"},\"providerSubscriptions\":{\"details\":\"Maps for provider to list of subscriptions and plans. \"},\"subscriptionManager\":{\"details\":\"contract to manage subscription plan definitions. \"},\"subscriptionPlans\":{\"details\":\"contract to manage subscription plan definitions. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/subscriptions/CaskSubscriptions.sol\":\"CaskSubscriptions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    function trustedForwarder() public virtual view returns (address){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce3168b37fc87ec34a18b56b4b16a06432119c07fd2e1d864b871dcf40372ebe\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0x199e82e0a2833a97213b5c16ac9b4e2b1814f2e90a4c4916855cbc21e710ad5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x6c25d4211724a6f4cdc8d25397edc780f48d951fc81c1d507f59b3edb22afaf7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskSubscriptionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskSubscriptionManager {\\n\\n    enum CheckType {\\n        None,\\n        Active,\\n        PastDue\\n    }\\n\\n    function queueItem(CheckType _checkType, uint32 _bucket, uint256 _idx) external view returns(uint256);\\n\\n    function queueSize(CheckType _checkType, uint32 _bucket) external view returns(uint256);\\n\\n    function queuePosition(CheckType _checkType) external view returns(uint32);\\n\\n    function processSinglePayment(address _consumer, address _provider,\\n        uint256 _subscriptionId, uint256 _value) external returns(bool);\\n\\n    function renewSubscription(uint256 _subscriptionId) external;\\n\\n    /** @dev Emitted when the keeper job performs renewals. */\\n    event SubscriptionManagerReport(uint256 limit, uint256 renewals, uint256 depth, CheckType checkType,\\n        uint256 queueRemaining, uint32 currentBucket);\\n\\n    /** @dev Emitted when manager parameters are changed. */\\n    event SetParameters();\\n}\\n\",\"keccak256\":\"0xc15f5bc7c66fc7616c2e55fa8be08e10cc9b7ed261daa42626bbc614bc4cadb2\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskSubscriptionPlans.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskSubscriptionPlans {\\n\\n    enum PlanStatus {\\n        Enabled,\\n        Disabled,\\n        EndOfLife\\n    }\\n\\n    enum DiscountType {\\n        None,\\n        Code,\\n        ERC20\\n    }\\n\\n    struct Discount {\\n        uint256 value;\\n        uint32 validAfter;\\n        uint32 expiresAt;\\n        uint32 maxRedemptions;\\n        uint32 planId;\\n        uint16 applyPeriods;\\n        DiscountType discountType;\\n        bool isFixed;\\n    }\\n\\n    struct Provider {\\n        address paymentAddress;\\n        uint256 nonce;\\n        string cid;\\n    }\\n\\n    function setProviderProfile(address _paymentAddress, string calldata _cid, uint256 _nonce) external;\\n\\n    function getProviderProfile(address _provider) external view returns(Provider memory);\\n\\n    function getPlanStatus(address _provider, uint32 _planId) external view returns (PlanStatus);\\n\\n    function getPlanEOL(address _provider, uint32 _planId) external view returns (uint32);\\n\\n    function disablePlan(uint32 _planId) external;\\n\\n    function enablePlan(uint32 _planId) external;\\n\\n    function retirePlan(uint32 _planId, uint32 _retireAt) external;\\n\\n    function verifyPlan(bytes32 _planData, bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof) external view returns(bool);\\n\\n    function getDiscountRedemptions(address _provider, uint32 _planId,\\n        bytes32 _discountId) external view returns(uint256);\\n\\n    function verifyAndConsumeDiscount(address _consumer, address _provider, uint32 _planId,\\n        bytes32[] calldata _discountProof) external returns(bytes32);\\n\\n    function verifyDiscount(address _consumer, address _provider, uint32 _planId,\\n        bytes32[] calldata _discountProof) external returns(bytes32);\\n\\n    function erc20DiscountCurrentlyApplies(address _consumer, bytes32 _discountValidator) external returns(bool);\\n\\n    function verifyProviderSignature(address _provider, uint256 _nonce, bytes32 _planMerkleRoot,\\n        bytes32 _discountMerkleRoot, bytes memory _providerSignature) external view returns (bool);\\n\\n    function verifyNetworkData(address _network, bytes32 _networkData,\\n        bytes memory _networkSignature) external view returns (bool);\\n\\n\\n    /** @dev Emitted when `provider` sets their profile info */\\n    event ProviderSetProfile(address indexed provider, address indexed paymentAddress, uint256 nonce, string cid);\\n\\n    /** @dev Emitted when `provider` disables a subscription plan */\\n    event PlanDisabled(address indexed provider, uint32 indexed planId);\\n\\n    /** @dev Emitted when `provider` enables a subscription plan */\\n    event PlanEnabled(address indexed provider, uint32 indexed planId);\\n\\n    /** @dev Emitted when `provider` end-of-lifes a subscription plan */\\n    event PlanRetired(address indexed provider, uint32 indexed planId, uint32 retireAt);\\n\\n}\",\"keccak256\":\"0xbd31f7597dbdb36ade3f6f171aa0c12becef3a8afd2f9b8c03139358630b87e6\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"./ICaskSubscriptionManager.sol\\\";\\n\\ninterface ICaskSubscriptions is IERC721Upgradeable {\\n\\n    enum SubscriptionStatus {\\n        None,\\n        Trialing,\\n        Active,\\n        Paused,\\n        Canceled,\\n        PastDue,\\n        PendingPause\\n    }\\n\\n    enum ManagerCommand {\\n        None,\\n        PlanChange,\\n        Cancel,\\n        PastDue,\\n        Renew,\\n        ClearDiscount,\\n        Pause\\n    }\\n\\n    struct Subscription {\\n        bytes32 planData;\\n        bytes32 networkData;\\n        bytes32 discountId;\\n        bytes32 discountData;\\n        bytes32 ref;\\n        address provider;\\n        SubscriptionStatus status;\\n        uint32 planId;\\n        uint32 createdAt;\\n        uint32 renewAt;\\n        uint32 minTermAt;\\n        uint32 cancelAt;\\n        string cid;\\n        string dataCid;\\n    }\\n\\n    struct PlanInfo {\\n        uint256 price;\\n        uint32 planId;\\n        uint32 period;\\n        uint32 freeTrial;\\n        uint32 maxActive;\\n        uint16 minPeriods;\\n        uint8 gracePeriod;\\n        bool canPause;\\n        bool canTransfer;\\n    }\\n\\n    struct NetworkInfo {\\n        address network;\\n        uint16 feeBps;\\n    }\\n\\n    /************************** SUBSCRIPTION INSTANCE METHODS **************************/\\n\\n    function createSubscription(\\n        uint256 _nonce,\\n        bytes32[] calldata _planProof,\\n        bytes32[] calldata _discountProof,\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) external;\\n\\n    function createNetworkSubscription(\\n        uint256 _nonce,\\n        bytes32[] calldata _planProof,\\n        bytes32[] calldata _discountProof,\\n        bytes32 _networkData,\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        bytes memory _networkSignature,\\n        string calldata _cid\\n    ) external;\\n\\n    function changeSubscriptionPlan(\\n        uint256 _subscriptionId,\\n        uint256 _nonce,\\n        bytes32[] calldata _planProof,\\n        bytes32[] calldata _discountProof,\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) external;\\n\\n    function attachData(uint256 _subscriptionId, string calldata _dataCid) external;\\n\\n    function pauseSubscription(uint256 _subscriptionId) external;\\n\\n    function resumeSubscription(uint256 _subscriptionId) external;\\n\\n    function cancelSubscription(uint256 _subscriptionId, uint32 _cancelAt) external;\\n\\n    function managerCommand(uint256 _subscriptionId, ManagerCommand _command) external;\\n\\n    function getSubscription(uint256 _subscriptionId) external view returns\\n        (Subscription memory subscription, address currentOwner);\\n\\n    function getConsumerSubscription(address _consumer, uint256 _idx) external view returns(uint256);\\n\\n    function getConsumerSubscriptionCount(address _consumer) external view returns (uint256);\\n\\n    function getProviderSubscription(address _provider, uint256 _idx) external view returns(uint256);\\n\\n    function getProviderSubscriptionCount(address _provider, bool _includeCanceled, uint32 _planId) external view returns (uint256);\\n\\n    function getActiveSubscriptionCount(address _consumer, address _provider, uint32 _planId) external view returns(uint256);\\n\\n    function getPendingPlanChange(uint256 _subscriptionId) external view returns (bytes32);\\n\\n\\n    /************************** SUBSCRIPTION EVENTS **************************/\\n\\n    /** @dev Emitted when `consumer` subscribes to `provider` plan `planId` */\\n    event SubscriptionCreated(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId, bytes32 discountId);\\n\\n    /** @dev Emitted when `consumer` changes the plan to `provider` on subscription `subscriptionId` */\\n    event SubscriptionChangedPlan(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 prevPlanId, uint32 planId, bytes32 discountId);\\n\\n    /** @dev Emitted when `consumer` changes the plan to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPendingChangePlan(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 prevPlanId, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` initiates a pause of the subscription to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPendingPause(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when a pending pause subscription attempts to renew but is paused */\\n    event SubscriptionPaused(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` resumes the subscription to `provider` on subscription `subscriptionId` */\\n    event SubscriptionResumed(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` unsubscribes to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPendingCancel(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId, uint32 cancelAt);\\n\\n    /** @dev Emitted when `consumer` has canceled and the current period is over on subscription `subscriptionId` */\\n    event SubscriptionCanceled(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` successfully renews to `provider` on subscription `subscriptionId` */\\n    event SubscriptionRenewed(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` subscription trial ends and goes active to `provider`\\n     * on subscription `subscriptionId`\\n     */\\n    event SubscriptionTrialEnded(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` renewal fails to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPastDue(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n}\\n\\n\",\"keccak256\":\"0x34701fd7ed7662e2acb9913dff4413641764a4970e34bd241a9ad0b17b3b3c80\",\"license\":\"MIT\"},\"contracts/subscriptions/CaskSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport \\\"@opengsn/contracts/src/BaseRelayRecipient.sol\\\";\\n\\n\\nimport \\\"../interfaces/ICaskSubscriptionManager.sol\\\";\\nimport \\\"../interfaces/ICaskSubscriptions.sol\\\";\\nimport \\\"../interfaces/ICaskSubscriptionPlans.sol\\\";\\n\\ncontract CaskSubscriptions is\\nICaskSubscriptions,\\nBaseRelayRecipient,\\nERC721Upgradeable,\\nOwnableUpgradeable,\\nPausableUpgradeable\\n{\\n\\n    /************************** PARAMETERS **************************/\\n\\n    /** @dev contract to manage subscription plan definitions. */\\n    ICaskSubscriptionManager public subscriptionManager;\\n\\n    /** @dev contract to manage subscription plan definitions. */\\n    ICaskSubscriptionPlans public subscriptionPlans;\\n\\n\\n    /************************** STATE **************************/\\n\\n    /** @dev Maps for consumer to list of subscriptions. */\\n    mapping(address => uint256[]) private consumerSubscriptions; // consumer => subscriptionId[]\\n    mapping(uint256 => Subscription) private subscriptions; // subscriptionId => Subscription\\n    mapping(uint256 => bytes32) private pendingPlanChanges; // subscriptionId => planData\\n\\n    /** @dev Maps for provider to list of subscriptions and plans. */\\n    mapping(address => uint256[]) private providerSubscriptions; // provider => subscriptionId[]\\n    mapping(address => uint256) private providerActiveSubscriptionCount; // provider => count\\n    mapping(address => mapping(uint32 => uint256)) private planActiveSubscriptionCount; // provider => planId => count\\n    mapping(address => mapping(address => mapping(uint32 => uint256))) private consumerProviderPlanActiveCount;\\n\\n    modifier onlyManager() {\\n        require(_msgSender() == address(subscriptionManager), \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n    modifier onlySubscriber(uint256 _subscriptionId) {\\n        require(_msgSender() == ownerOf(_subscriptionId), \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n    modifier onlySubscriberOrProvider(uint256 _subscriptionId) {\\n        require(\\n            _msgSender() == ownerOf(_subscriptionId) ||\\n            _msgSender() == subscriptions[_subscriptionId].provider,\\n            \\\"!AUTH\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(\\n        address _subscriptionPlans\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ERC721_init(\\\"Cask Subscriptions\\\",\\\"CASKSUBS\\\");\\n\\n        subscriptionPlans = ICaskSubscriptionPlans(_subscriptionPlans);\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function versionRecipient() public pure override returns(string memory) { return \\\"2.2.0\\\"; }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (address sender) {\\n        sender = BaseRelayRecipient._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (bytes calldata) {\\n        return BaseRelayRecipient._msgData();\\n    }\\n\\n\\n    function tokenURI(uint256 _subscriptionId) public view override returns (string memory) {\\n        require(_exists(_subscriptionId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        Subscription memory subscription = subscriptions[_subscriptionId];\\n\\n        return string(abi.encodePacked(\\\"ipfs://\\\", subscription.cid));\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _subscriptionId\\n    ) internal override {\\n        if (_from != address(0) && _to != address(0)) { // only non-mint/burn transfers\\n            Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n            PlanInfo memory planInfo = _parsePlanData(subscription.planData);\\n            require(planInfo.canTransfer, \\\"!NOT_TRANSFERRABLE\\\");\\n\\n            require(subscription.minTermAt == 0 || uint32(block.timestamp) >= subscription.minTermAt, \\\"!MIN_TERM\\\");\\n\\n            // on transfer, set subscription to cancel at next renewal until new owner accepts subscription\\n            subscription.cancelAt = subscription.renewAt;\\n            consumerSubscriptions[_to].push(_subscriptionId);\\n        }\\n    }\\n\\n    /************************** SUBSCRIPTION METHODS **************************/\\n\\n    function createNetworkSubscription(\\n        uint256 _nonce,\\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n        bytes32 _networkData,\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        bytes memory _networkSignature,\\n        string calldata _cid\\n    ) external override whenNotPaused {\\n        uint256 subscriptionId = _createSubscription(_nonce, _planProof, _discountProof, _cancelAt,\\n            _providerSignature, _cid);\\n\\n        _verifyNetworkData(_networkData, _networkSignature);\\n\\n        Subscription storage subscription = subscriptions[subscriptionId];\\n        subscription.networkData = _networkData;\\n    }\\n\\n    function createSubscription(\\n        uint256 _nonce,\\n        bytes32[] calldata _planProof, // [provider, ref, planData, merkleRoot, merkleProof...]\\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) external override whenNotPaused {\\n        _createSubscription(_nonce, _planProof, _discountProof, _cancelAt, _providerSignature, _cid);\\n    }\\n\\n    function attachData(\\n        uint256 _subscriptionId,\\n        string calldata _dataCid\\n    ) external override onlySubscriberOrProvider(_subscriptionId) whenNotPaused {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n        require(subscription.status != SubscriptionStatus.Canceled, \\\"!CANCELED\\\");\\n        subscription.dataCid = _dataCid;\\n    }\\n\\n    function changeSubscriptionPlan(\\n        uint256 _subscriptionId,\\n        uint256 _nonce,\\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) external override onlySubscriber(_subscriptionId) whenNotPaused {\\n        _changeSubscriptionPlan(_subscriptionId, _nonce, _planProof, _discountProof, _providerSignature, _cid);\\n    }\\n\\n    function pauseSubscription(\\n        uint256 _subscriptionId\\n    ) external override onlySubscriberOrProvider(_subscriptionId) whenNotPaused {\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        require(subscription.status != SubscriptionStatus.Paused &&\\n                subscription.status != SubscriptionStatus.PastDue &&\\n                subscription.status != SubscriptionStatus.Canceled &&\\n                subscription.status != SubscriptionStatus.Trialing, \\\"!INVALID(status)\\\");\\n\\n        require(subscription.minTermAt == 0 || uint32(block.timestamp) >= subscription.minTermAt, \\\"!MIN_TERM\\\");\\n\\n        PlanInfo memory planInfo = _parsePlanData(subscription.planData);\\n        require(planInfo.canPause, \\\"!NOT_PAUSABLE\\\");\\n\\n        subscription.status = SubscriptionStatus.PendingPause;\\n\\n        emit SubscriptionPendingPause(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId);\\n    }\\n\\n    function resumeSubscription(\\n        uint256 _subscriptionId\\n    ) external override onlySubscriber(_subscriptionId) whenNotPaused {\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        require(subscription.status == SubscriptionStatus.Paused ||\\n                subscription.status == SubscriptionStatus.PendingPause, \\\"!NOT_PAUSED\\\");\\n\\n        emit SubscriptionResumed(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId);\\n\\n        if (subscription.status == SubscriptionStatus.PendingPause) {\\n            subscription.status = SubscriptionStatus.Active;\\n            return;\\n        }\\n\\n        PlanInfo memory planInfo = _parsePlanData(subscription.planData);\\n\\n        require(planInfo.maxActive == 0 ||\\n            planActiveSubscriptionCount[subscription.provider][planInfo.planId] < planInfo.maxActive, \\\"!MAX_ACTIVE\\\");\\n\\n        subscription.status = SubscriptionStatus.Active;\\n\\n        providerActiveSubscriptionCount[subscription.provider] += 1;\\n        planActiveSubscriptionCount[subscription.provider][subscription.planId] += 1;\\n        consumerProviderPlanActiveCount[ownerOf(_subscriptionId)][subscription.provider][subscription.planId] += 1;\\n\\n        // if renewal date has already passed, set it to now so consumer is not charged for the time it was paused\\n        if (subscription.renewAt < uint32(block.timestamp)) {\\n            subscription.renewAt = uint32(block.timestamp);\\n        }\\n\\n        // re-register subscription with manager\\n        subscriptionManager.renewSubscription(_subscriptionId);\\n\\n        // make sure still active if payment was required to resume\\n        require(subscription.status == SubscriptionStatus.Active, \\\"!INSUFFICIENT_FUNDS\\\");\\n    }\\n\\n    function cancelSubscription(\\n        uint256 _subscriptionId,\\n        uint32 _cancelAt\\n    ) external override onlySubscriberOrProvider(_subscriptionId) whenNotPaused {\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        require(subscription.status != SubscriptionStatus.Canceled, \\\"!INVALID(status)\\\");\\n\\n        uint32 timestamp = uint32(block.timestamp);\\n\\n        if(_cancelAt == 0) {\\n            require(_msgSender() == ownerOf(_subscriptionId), \\\"!AUTH\\\"); // clearing cancel only allowed by subscriber\\n            subscription.cancelAt = _cancelAt;\\n\\n            emit SubscriptionPendingCancel(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n                subscription.ref, subscription.planId, _cancelAt);\\n        } else if(_cancelAt <= timestamp) {\\n            require(subscription.minTermAt == 0 || timestamp >= subscription.minTermAt, \\\"!MIN_TERM\\\");\\n            subscription.renewAt = timestamp;\\n            subscription.cancelAt = timestamp;\\n            subscriptionManager.renewSubscription(_subscriptionId); // force manager to process cancel\\n        } else {\\n            require(subscription.minTermAt == 0 || _cancelAt >= subscription.minTermAt, \\\"!MIN_TERM\\\");\\n            subscription.cancelAt = _cancelAt;\\n\\n            emit SubscriptionPendingCancel(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n                subscription.ref, subscription.planId, _cancelAt);\\n        }\\n    }\\n\\n    function managerCommand(\\n        uint256 _subscriptionId,\\n        ManagerCommand _command\\n    ) external override onlyManager whenNotPaused {\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        uint32 timestamp = uint32(block.timestamp);\\n\\n        if (_command == ManagerCommand.PlanChange) {\\n            bytes32 pendingPlanData = pendingPlanChanges[_subscriptionId];\\n            require(pendingPlanData > 0, \\\"!INVALID(pendingPlanData)\\\");\\n\\n            PlanInfo memory newPlanInfo = _parsePlanData(pendingPlanData);\\n\\n            emit SubscriptionChangedPlan(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n                subscription.ref, subscription.planId, newPlanInfo.planId, subscription.discountId);\\n\\n            subscription.planId = newPlanInfo.planId;\\n            subscription.planData = pendingPlanData;\\n\\n            if (newPlanInfo.minPeriods > 0) {\\n                subscription.minTermAt = timestamp + (newPlanInfo.period * newPlanInfo.minPeriods);\\n            }\\n\\n            delete pendingPlanChanges[_subscriptionId]; // free up memory\\n\\n        } else if (_command == ManagerCommand.Cancel) {\\n            subscription.status = SubscriptionStatus.Canceled;\\n\\n            providerActiveSubscriptionCount[subscription.provider] -= 1;\\n            planActiveSubscriptionCount[subscription.provider][subscription.planId] -= 1;\\n            if (consumerProviderPlanActiveCount[ownerOf(_subscriptionId)][subscription.provider][subscription.planId] > 0) {\\n                consumerProviderPlanActiveCount[ownerOf(_subscriptionId)][subscription.provider][subscription.planId] -= 1;\\n            }\\n\\n            emit SubscriptionCanceled(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n                subscription.ref, subscription.planId);\\n\\n            _burn(_subscriptionId);\\n\\n        } else if (_command == ManagerCommand.Pause) {\\n            subscription.status = SubscriptionStatus.Paused;\\n\\n            providerActiveSubscriptionCount[subscription.provider] -= 1;\\n            planActiveSubscriptionCount[subscription.provider][subscription.planId] -= 1;\\n            if (consumerProviderPlanActiveCount[ownerOf(_subscriptionId)][subscription.provider][subscription.planId] > 0) {\\n                consumerProviderPlanActiveCount[ownerOf(_subscriptionId)][subscription.provider][subscription.planId] -= 1;\\n            }\\n\\n            emit SubscriptionPaused(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n                subscription.ref, subscription.planId);\\n\\n        } else if (_command == ManagerCommand.PastDue) {\\n            subscription.status = SubscriptionStatus.PastDue;\\n\\n            emit SubscriptionPastDue(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n                subscription.ref, subscription.planId);\\n\\n        } else if (_command == ManagerCommand.Renew) {\\n            PlanInfo memory planInfo = _parsePlanData(subscription.planData);\\n\\n            if (subscription.status == SubscriptionStatus.Trialing) {\\n                emit SubscriptionTrialEnded(ownerOf(_subscriptionId), subscription.provider,\\n                    _subscriptionId, subscription.ref, subscription.planId);\\n            }\\n\\n            subscription.renewAt = subscription.renewAt + planInfo.period;\\n\\n            if (subscription.renewAt > timestamp) {\\n                // leave in current status unless subscription is current\\n                subscription.status = SubscriptionStatus.Active;\\n            }\\n\\n            emit SubscriptionRenewed(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n                subscription.ref, subscription.planId);\\n\\n        } else if (_command == ManagerCommand.ClearDiscount) {\\n                    subscription.discountId = 0;\\n                    subscription.discountData = 0;\\n        }\\n\\n    }\\n\\n    function getSubscription(\\n        uint256 _subscriptionId\\n    ) external override view returns (Subscription memory subscription, address currentOwner) {\\n        subscription = subscriptions[_subscriptionId];\\n        if (_exists(_subscriptionId)) {\\n            currentOwner = ownerOf(_subscriptionId);\\n        } else {\\n            currentOwner = address(0);\\n        }\\n    }\\n\\n    function getConsumerSubscription(\\n        address _consumer,\\n        uint256 _idx\\n    ) external override view returns(uint256) {\\n        return consumerSubscriptions[_consumer][_idx];\\n    }\\n\\n    function getActiveSubscriptionCount(\\n        address _consumer,\\n        address _provider,\\n        uint32 _planId\\n    ) external override view returns(uint256) {\\n        return consumerProviderPlanActiveCount[_consumer][_provider][_planId];\\n    }\\n\\n    function getConsumerSubscriptionCount(\\n        address _consumer\\n    ) external override view returns (uint256) {\\n        return consumerSubscriptions[_consumer].length;\\n    }\\n\\n    function getProviderSubscription(\\n        address _provider,\\n        uint256 _idx\\n    ) external override view returns(uint256) {\\n        return providerSubscriptions[_provider][_idx];\\n    }\\n\\n    function getProviderSubscriptionCount(\\n        address _provider,\\n        bool _includeCanceled,\\n        uint32 _planId\\n    ) external override view returns (uint256) {\\n        if (_includeCanceled) {\\n            return providerSubscriptions[_provider].length;\\n        } else {\\n            if (_planId > 0) {\\n                return planActiveSubscriptionCount[_provider][_planId];\\n            } else {\\n                return providerActiveSubscriptionCount[_provider];\\n            }\\n        }\\n    }\\n\\n    function getPendingPlanChange(\\n        uint256 _subscriptionId\\n    ) external override view returns (bytes32) {\\n        return pendingPlanChanges[_subscriptionId];\\n    }\\n\\n    function _createSubscription(\\n        uint256 _nonce,\\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) internal returns(uint256) {\\n        require(_planProof.length >= 4, \\\"!INVALID(planProofLen)\\\");\\n\\n        // confirms merkleroots are in fact the ones provider committed to\\n        address provider;\\n        if (_discountProof.length >= 3) {\\n            provider = _verifyMerkleRoots(_planProof[0], _nonce, _planProof[3], _discountProof[2], _providerSignature);\\n        } else {\\n            provider = _verifyMerkleRoots(_planProof[0], _nonce, _planProof[3], 0, _providerSignature);\\n        }\\n\\n        // confirms plan data is included in merkle root\\n        require(_verifyPlanProof(_planProof), \\\"!INVALID(planProof)\\\");\\n\\n        // decode planData bytes32 into PlanInfo\\n        PlanInfo memory planInfo = _parsePlanData(_planProof[2]);\\n\\n        // generate subscriptionId from plan info and ref\\n        uint256 subscriptionId = _generateSubscriptionId(_planProof[0], _planProof[1], _planProof[2]);\\n\\n        require(planInfo.maxActive == 0 ||\\n            planActiveSubscriptionCount[provider][planInfo.planId] < planInfo.maxActive, \\\"!MAX_ACTIVE\\\");\\n        require(subscriptionPlans.getPlanStatus(provider, planInfo.planId) ==\\n            ICaskSubscriptionPlans.PlanStatus.Enabled, \\\"!NOT_ENABLED\\\");\\n\\n        _safeMint(_msgSender(), subscriptionId);\\n\\n        Subscription storage subscription = subscriptions[subscriptionId];\\n\\n        uint32 timestamp = uint32(block.timestamp);\\n\\n        subscription.provider = provider;\\n        subscription.planId = planInfo.planId;\\n        subscription.ref = _planProof[1];\\n        subscription.planData = _planProof[2];\\n        subscription.cancelAt = _cancelAt;\\n        subscription.cid = _cid;\\n        subscription.createdAt = timestamp;\\n\\n        if (planInfo.minPeriods > 0) {\\n            subscription.minTermAt = timestamp + (planInfo.period * planInfo.minPeriods);\\n        }\\n\\n        if (planInfo.price == 0) {\\n            // free plan, never renew to save gas\\n            subscription.status = SubscriptionStatus.Active;\\n            subscription.renewAt = 0;\\n        } else if (planInfo.freeTrial > 0) {\\n            // if trial period, charge will happen after trial is over\\n            subscription.status = SubscriptionStatus.Trialing;\\n            subscription.renewAt = timestamp + planInfo.freeTrial;\\n        } else {\\n            // if no trial period, charge now\\n            subscription.status = SubscriptionStatus.Active;\\n            subscription.renewAt = timestamp;\\n        }\\n\\n        consumerSubscriptions[_msgSender()].push(subscriptionId);\\n        providerSubscriptions[provider].push(subscriptionId);\\n        providerActiveSubscriptionCount[provider] += 1;\\n        planActiveSubscriptionCount[provider][planInfo.planId] += 1;\\n        consumerProviderPlanActiveCount[_msgSender()][provider][planInfo.planId] += 1;\\n\\n        (\\n        subscription.discountId,\\n        subscription.discountData\\n        ) = _verifyDiscountProof(ownerOf(subscriptionId), subscription.provider, planInfo.planId, _discountProof);\\n\\n        subscriptionManager.renewSubscription(subscriptionId); // registers subscription with manager\\n\\n        require(subscription.status == SubscriptionStatus.Active ||\\n                subscription.status == SubscriptionStatus.Trialing, \\\"!UNPROCESSABLE\\\");\\n\\n        emit SubscriptionCreated(ownerOf(subscriptionId), subscription.provider, subscriptionId,\\n            subscription.ref, subscription.planId, subscription.discountId);\\n\\n        return subscriptionId;\\n    }\\n\\n    function _changeSubscriptionPlan(\\n        uint256 _subscriptionId,\\n        uint256 _nonce,\\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) internal {\\n        require(_planProof.length >= 4, \\\"!INVALID(planProof)\\\");\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        require(subscription.renewAt == 0 || subscription.renewAt > uint32(block.timestamp), \\\"!NEED_RENEWAL\\\");\\n        require(subscription.status == SubscriptionStatus.Active ||\\n            subscription.status == SubscriptionStatus.Trialing, \\\"!INVALID(status)\\\");\\n\\n        // confirms merkleroots are in fact the ones provider committed to\\n        address provider;\\n        if (_discountProof.length >= 3) {\\n            provider = _verifyMerkleRoots(_planProof[0], _nonce, _planProof[3], _discountProof[2], _providerSignature);\\n        } else {\\n            provider = _verifyMerkleRoots(_planProof[0], _nonce, _planProof[3], 0, _providerSignature);\\n        }\\n\\n        // confirms plan data is included in merkle root\\n        require(_verifyPlanProof(_planProof), \\\"!INVALID(planProof)\\\");\\n\\n        // decode planData bytes32 into PlanInfo\\n        PlanInfo memory newPlanInfo = _parsePlanData(_planProof[2]);\\n\\n        require(subscription.provider == provider, \\\"!INVALID(provider)\\\");\\n\\n        subscription.cid = _cid;\\n\\n        if (subscription.discountId == 0 && _discountProof.length >= 3 && _discountProof[0] > 0) {\\n            (\\n            subscription.discountId,\\n            subscription.discountData\\n            ) = _verifyDiscountProof(ownerOf(_subscriptionId), subscription.provider,\\n                newPlanInfo.planId, _discountProof);\\n        }\\n\\n        if (subscription.planId != newPlanInfo.planId) {\\n            require(subscriptionPlans.getPlanStatus(provider, newPlanInfo.planId) ==\\n                ICaskSubscriptionPlans.PlanStatus.Enabled, \\\"!NOT_ENABLED\\\");\\n            _performPlanChange(_subscriptionId, newPlanInfo, _planProof[2]);\\n        }\\n    }\\n\\n    function _performPlanChange(\\n        uint256 _subscriptionId,\\n        PlanInfo memory _newPlanInfo,\\n        bytes32 _planData\\n    ) internal {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        PlanInfo memory currentPlanInfo = _parsePlanData(subscription.planData);\\n\\n        if (subscription.status == SubscriptionStatus.Trialing) { // still in trial, just change now\\n\\n            // adjust renewal based on new plan trial length\\n            subscription.renewAt = subscription.renewAt - currentPlanInfo.freeTrial + _newPlanInfo.freeTrial;\\n\\n            // if new plan trial length would have caused trial to already be over, end trial as of now\\n            // subscription will be charged and converted to active during next keeper run\\n            if (subscription.renewAt <= uint32(block.timestamp)) {\\n                subscription.renewAt = uint32(block.timestamp);\\n            }\\n\\n            _swapPlan(_subscriptionId, _newPlanInfo, _planData);\\n\\n        } else if (_newPlanInfo.price / _newPlanInfo.period ==\\n            currentPlanInfo.price / currentPlanInfo.period)\\n        { // straight swap\\n\\n            _swapPlan(_subscriptionId, _newPlanInfo, _planData);\\n\\n        } else if (_newPlanInfo.price / _newPlanInfo.period >\\n            currentPlanInfo.price / currentPlanInfo.period)\\n        { // upgrade\\n\\n            _upgradePlan(_subscriptionId, currentPlanInfo, _newPlanInfo, _planData);\\n\\n        } else { // downgrade - to take affect at next renewal\\n\\n            _scheduleSwapPlan(_subscriptionId, _newPlanInfo.planId, _planData);\\n        }\\n    }\\n\\n    function _verifyDiscountProof(\\n        address _consumer,\\n        address _provider,\\n        uint32 _planId,\\n        bytes32[] calldata _discountProof // [discountValidator, discountData, merkleRoot, merkleProof...]\\n    ) internal returns(bytes32, bytes32) {\\n        if (_discountProof[0] > 0) {\\n            bytes32 discountId = subscriptionPlans.verifyAndConsumeDiscount(_consumer, _provider,\\n                _planId, _discountProof);\\n            if (discountId > 0)\\n            {\\n                return (discountId, _discountProof[1]);\\n            }\\n        }\\n        return (0,0);\\n    }\\n\\n    function _verifyPlanProof(\\n        bytes32[] calldata _planProof // [provider, ref, planData, merkleRoot, merkleProof...]\\n    ) internal view returns(bool) {\\n        return subscriptionPlans.verifyPlan(_planProof[2], _planProof[3], _planProof[4:]);\\n    }\\n\\n    function _generateSubscriptionId(\\n        bytes32 _providerAddr,\\n        bytes32 _ref,\\n        bytes32 _planData\\n    ) internal view returns(uint256) {\\n        return uint256(keccak256(abi.encodePacked(_msgSender(), _providerAddr,\\n            _planData, _ref, block.number, block.timestamp)));\\n    }\\n\\n    function _parsePlanData(\\n        bytes32 _planData\\n    ) internal pure returns(PlanInfo memory) {\\n        bytes1 options = bytes1(_planData << 248);\\n        return PlanInfo({\\n            price: uint256(_planData >> 160),\\n            planId: uint32(bytes4(_planData << 96)),\\n            period: uint32(bytes4(_planData << 128)),\\n            freeTrial: uint32(bytes4(_planData << 160)),\\n            maxActive: uint32(bytes4(_planData << 192)),\\n            minPeriods: uint16(bytes2(_planData << 224)),\\n            gracePeriod: uint8(bytes1(_planData << 240)),\\n            canPause: options & 0x01 == 0x01,\\n            canTransfer: options & 0x02 == 0x02\\n        });\\n    }\\n\\n    function _parseNetworkData(\\n        bytes32 _networkData\\n    ) internal pure returns(NetworkInfo memory) {\\n        return NetworkInfo({\\n            network: address(bytes20(_networkData)),\\n            feeBps: uint16(bytes2(_networkData << 160))\\n        });\\n    }\\n\\n    function _scheduleSwapPlan(\\n        uint256 _subscriptionId,\\n        uint32 newPlanId,\\n        bytes32 _newPlanData\\n    ) internal {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        pendingPlanChanges[_subscriptionId] = _newPlanData;\\n\\n        emit SubscriptionPendingChangePlan(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId, newPlanId);\\n    }\\n\\n    function _swapPlan(\\n        uint256 _subscriptionId,\\n        PlanInfo memory _newPlanInfo,\\n        bytes32 _newPlanData\\n    ) internal {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        emit SubscriptionChangedPlan(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId, _newPlanInfo.planId, subscription.discountId);\\n\\n        if (_newPlanInfo.minPeriods > 0) {\\n            subscription.minTermAt = uint32(block.timestamp + (_newPlanInfo.period * _newPlanInfo.minPeriods));\\n        }\\n\\n        subscription.planId = _newPlanInfo.planId;\\n        subscription.planData = _newPlanData;\\n    }\\n\\n    function _upgradePlan(\\n        uint256 _subscriptionId,\\n        PlanInfo memory _currentPlanInfo,\\n        PlanInfo memory _newPlanInfo,\\n        bytes32 _newPlanData\\n    ) internal {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        _swapPlan(_subscriptionId, _newPlanInfo, _newPlanData);\\n\\n        if (_currentPlanInfo.price == 0 && _newPlanInfo.price != 0) {\\n            // coming from free plan, no prorate\\n            subscription.renewAt = uint32(block.timestamp);\\n            subscriptionManager.renewSubscription(_subscriptionId); // register paid plan with manager\\n            require(subscription.status == SubscriptionStatus.Active, \\\"!UNPROCESSABLE\\\"); // make sure payment processed\\n        } else {\\n            // prorated payment now - next renewal will charge new price\\n            uint256 newAmount = ((_newPlanInfo.price / _newPlanInfo.period) -\\n                (_currentPlanInfo.price / _currentPlanInfo.period)) *\\n                (subscription.renewAt - uint32(block.timestamp));\\n            require(subscriptionManager.processSinglePayment(ownerOf(_subscriptionId), subscription.provider,\\n                _subscriptionId, newAmount), \\\"!UNPROCESSABLE\\\");\\n        }\\n\\n    }\\n\\n\\n    /************************** ADMIN FUNCTIONS **************************/\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setManager(\\n        address _subscriptionManager\\n    ) external onlyOwner {\\n        subscriptionManager = ICaskSubscriptionManager(_subscriptionManager);\\n    }\\n\\n    function setTrustedForwarder(\\n        address _forwarder\\n    ) external onlyOwner {\\n        _setTrustedForwarder(_forwarder);\\n    }\\n\\n    function _verifyMerkleRoots(\\n        bytes32 providerAddr,\\n        uint256 _nonce,\\n        bytes32 _planMerkleRoot,\\n        bytes32 _discountMerkleRoot,\\n        bytes memory _providerSignature\\n    ) internal view returns (address) {\\n        address provider = address(bytes20(providerAddr << 96));\\n        require(subscriptionPlans.verifyProviderSignature(\\n                provider,\\n                _nonce,\\n                _planMerkleRoot,\\n                _discountMerkleRoot,\\n                _providerSignature\\n        ), \\\"!INVALID(signature)\\\");\\n        return provider;\\n    }\\n\\n    function _verifyNetworkData(\\n        bytes32 _networkData,\\n        bytes memory _networkSignature\\n    ) internal view returns (address) {\\n        NetworkInfo memory networkInfo = _parseNetworkData(_networkData);\\n        require(subscriptionPlans.verifyNetworkData(networkInfo.network, _networkData, _networkSignature),\\n            \\\"!INVALID(networkSignature)\\\");\\n        return networkInfo.network;\\n    }\\n\\n}\",\"keccak256\":\"0xd384289691774d41cb28ad68f58a00d17d5850f59aa94977f8833209724b9505\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b620029cc1760201c565b15905090565b3b151590565b615a0f80620001126000396000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c80637df7b2aa11610146578063b88d4fde116100c3578063d0ebdbe711610087578063d0ebdbe714610557578063d67dc0de1461056a578063da742228146105b3578063dc311dd3146105c6578063e985e9c5146105e7578063f2fde38b1461062357600080fd5b8063b88d4fde146104ea578063bf158fd2146104fd578063c4d66de814610510578063c86e695414610523578063c87b56dd1461054457600080fd5b80638fe17b161161010a5780638fe17b1614610496578063925fa591146104a957806395d89b41146104bc578063a22cb465146104c4578063ac58e37b146104d757600080fd5b80637df7b2aa14610444578063825527ff146104575780638456cb591461046a578063876bebbb146104725780638da5cb5b1461048557600080fd5b806342842e0e116101df5780635c975abb116101a35780635c975abb146103e75780636352211e146103f257806370a0823114610405578063715018a61461041857806374c14439146104205780637da0a8771461043357600080fd5b806342842e0e1461036b57806345041a461461037e578063486ff0cd146103915780634d5106ae146103b2578063572b6c05146103c557600080fd5b806323b872dd1161022657806323b872dd146102f3578063291b9a3f1461030657806336fd3a8a1461033d5780633f4ba83a1461035057806341f23f0a1461035857600080fd5b806301ffc9a714610263578063023a584e1461028b57806306fdde03146102a0578063081812fc146102b5578063095ea7b3146102e0575b600080fd5b610276610271366004614c1c565b610636565b60405190151581526020015b60405180910390f35b61029e610299366004614c39565b610688565b005b6102a8610ad4565b6040516102829190614caa565b6102c86102c3366004614c39565b610b66565b6040516001600160a01b039091168152602001610282565b61029e6102ee366004614cd9565b610bfb565b61029e610301366004614d03565b610d23565b61032f610314366004614d3f565b6001600160a01b0316600090815260fe602052604090205490565b604051908152602001610282565b61032f61034b366004614cd9565b610d5b565b61029e610d98565b61029e610366366004614c39565b610deb565b61029e610379366004614d03565b611084565b61029e61038c366004614da3565b61109f565b6040805180820190915260058152640322e322e360dc1b60208201526102a8565b61029e6103c0366004614eeb565b6111b7565b6102766103d3366004614d3f565b6065546001600160a01b0391821691161490565b60ca5460ff16610276565b6102c8610400366004614c39565b6111f7565b61032f610413366004614d3f565b61126e565b61029e6112f5565b61032f61042e366004614fd7565b611348565b6065546001600160a01b03166102c8565b61029e61045236600461501c565b6113d0565b61029e610465366004615050565b611c29565b61029e611c8d565b61032f610480366004614cd9565b611cde565b6098546001600160a01b03166102c8565b60fd546102c8906001600160a01b031681565b61029e6104b7366004615160565b611d09565b6102a86120c0565b61029e6104d236600461518c565b6120cf565b61029e6104e53660046151b8565b6120e1565b61029e6104f8366004615246565b612156565b60fc546102c8906001600160a01b031681565b61029e61051e366004614d3f565b61218f565b61032f610531366004614c39565b6000908152610100602052604090205490565b6102a8610552366004614c39565b6122c7565b61029e610565366004614d3f565b612581565b61032f6105783660046152ae565b6001600160a01b0392831660009081526101046020908152604080832094909516825292835283812063ffffffff9290921681529152205490565b61029e6105c1366004614d3f565b6125ec565b6105d96105d4366004614c39565b612656565b604051610282929190615312565b6102766105f5366004615450565b6001600160a01b039182166000908152606b6020908152604080832093909416825291909152205460ff1690565b61029e610631366004614d3f565b612915565b60006001600160e01b031982166380ac58cd60e01b148061066757506001600160e01b03198216635b5e139f60e01b145b8061068257506301ffc9a760e01b6001600160e01b03198316145b92915050565b80610692816111f7565b6001600160a01b03166106a36129d2565b6001600160a01b0316146106d25760405162461bcd60e51b81526004016106c99061547a565b60405180910390fd5b60ca5460ff16156106f55760405162461bcd60e51b81526004016106c990615499565b600082815260ff6020526040902060036005820154600160a01b900460ff166006811115610725576107256152da565b1480610750575060066005820154600160a01b900460ff16600681111561074e5761074e6152da565b145b61078a5760405162461bcd60e51b815260206004820152600b60248201526a085393d517d4105554d15160aa1b60448201526064016106c9565b600581015483906001600160a01b03166107a3826111f7565b6004840154600585015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917f7ee0fc3eab7021686f891346ebbf5bab192d6f9995fcc66021f4551888dc1481910160405180910390a460066005820154600160a01b900460ff166006811115610821576108216152da565b141561083f57600501805460ff60a01b1916600160a11b1790555050565b600061084e82600001546129e1565b9050806080015163ffffffff16600014806108a15750608081015160058301546001600160a01b03166000908152610103602090815260408083208286015163ffffffff90811685529252909120549116115b6108db5760405162461bcd60e51b815260206004820152600b60248201526a214d41585f41435449564560a81b60448201526064016106c9565b600582018054600160a11b60ff60a01b198216179091556001600160a01b031660009081526101026020526040812080546001929061091b9084906154d9565b909155505060058201546001600160a01b038116600090815261010360209081526040808320600160a81b90940463ffffffff1683529290529081208054600192906109689084906154d9565b9091555060019050610104600061097e876111f7565b6001600160a01b03908116825260208083019390935260409182016000908120600588015492831682528452828120600160a81b90920463ffffffff1681529252812080549091906109d19084906154d9565b9091555050600682015463ffffffff42811691161015610a035760068201805463ffffffff19164263ffffffff161790555b60fc5460405163d71bb37b60e01b8152600481018690526001600160a01b039091169063d71bb37b90602401600060405180830381600087803b158015610a4957600080fd5b505af1158015610a5d573d6000803e3d6000fd5b5060029250610a6a915050565b6005830154600160a01b900460ff166006811115610a8a57610a8a6152da565b14610acd5760405162461bcd60e51b815260206004820152601360248201527221494e53554646494349454e545f46554e445360681b60448201526064016106c9565b50505b5050565b606060668054610ae3906154f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0f906154f1565b8015610b5c5780601f10610b3157610100808354040283529160200191610b5c565b820191906000526020600020905b815481529060010190602001808311610b3f57829003601f168201915b5050505050905090565b6000818152606860205260408120546001600160a01b0316610bdf5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106c9565b506000908152606a60205260409020546001600160a01b031690565b6000610c06826111f7565b9050806001600160a01b0316836001600160a01b03161415610c745760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106c9565b806001600160a01b0316610c866129d2565b6001600160a01b03161480610ca25750610ca2816105f56129d2565b610d145760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106c9565b610d1e8383612abc565b505050565b610d34610d2e6129d2565b82612b2a565b610d505760405162461bcd60e51b81526004016106c99061552c565b610d1e838383612c21565b6001600160a01b038216600090815260fe60205260408120805483908110610d8557610d8561557d565b9060005260206000200154905092915050565b610da06129d2565b6001600160a01b0316610dbb6098546001600160a01b031690565b6001600160a01b031614610de15760405162461bcd60e51b81526004016106c990615593565b610de9612dcc565b565b80610df5816111f7565b6001600160a01b0316610e066129d2565b6001600160a01b03161480610e445750600081815260ff60205260409020600501546001600160a01b0316610e396129d2565b6001600160a01b0316145b610e605760405162461bcd60e51b81526004016106c99061547a565b60ca5460ff1615610e835760405162461bcd60e51b81526004016106c990615499565b600082815260ff6020526040902060036005820154600160a01b900460ff166006811115610eb357610eb36152da565b14158015610ee05750600580820154600160a01b900460ff166006811115610edd57610edd6152da565b14155b8015610f0c575060046005820154600160a01b900460ff166006811115610f0957610f096152da565b14155b8015610f38575060016005820154600160a01b900460ff166006811115610f3557610f356152da565b14155b610f545760405162461bcd60e51b81526004016106c9906155c8565b6006810154600160201b900463ffffffff161580610f885750600681015463ffffffff600160201b90910481164290911610155b610fa45760405162461bcd60e51b81526004016106c9906155f2565b6000610fb382600001546129e1565b90508060e00151610ff65760405162461bcd60e51b815260206004820152600d60248201526c214e4f545f5041555341424c4560981b60448201526064016106c9565b600582018054600360a11b60ff60a01b1982161790915584906001600160a01b0316611021826111f7565b6004850154600586015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917f3b1ababbfb41865093a096e886e08d3058f1adbce6c29e7be7ed6fd16b70802891015b60405180910390a450505050565b610d1e83838360405180602001604052806000815250612156565b826110a9816111f7565b6001600160a01b03166110ba6129d2565b6001600160a01b031614806110f85750600081815260ff60205260409020600501546001600160a01b03166110ed6129d2565b6001600160a01b0316145b6111145760405162461bcd60e51b81526004016106c99061547a565b60ca5460ff16156111375760405162461bcd60e51b81526004016106c990615499565b600084815260ff6020526040902060046005820154600160a01b900460ff166006811115611167576111676152da565b14156111a15760405162461bcd60e51b81526020600482015260096024820152680850d05390d153115160ba1b60448201526064016106c9565b6111af600882018585614af9565b505050505050565b60ca5460ff16156111da5760405162461bcd60e51b81526004016106c990615499565b6111eb898989898989898989612e65565b50505050505050505050565b6000818152606860205260408120546001600160a01b0316806106825760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106c9565b60006001600160a01b0382166112d95760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016106c9565b506001600160a01b031660009081526069602052604090205490565b6112fd6129d2565b6001600160a01b03166113186098546001600160a01b031690565b6001600160a01b03161461133e5760405162461bcd60e51b81526004016106c990615593565b610de9600061360e565b6000821561137057506001600160a01b038316600090815261010160205260409020546113c9565b63ffffffff8216156113ad57506001600160a01b03831660009081526101036020908152604080832063ffffffff851684529091529020546113c9565b506001600160a01b038316600090815261010260205260409020545b9392505050565b60fc546001600160a01b03166113e46129d2565b6001600160a01b03161461140a5760405162461bcd60e51b81526004016106c99061547a565b60ca5460ff161561142d5760405162461bcd60e51b81526004016106c990615499565b600082815260ff60205260409020426001836006811115611450576114506152da565b14156115e95760008481526101006020526040902054806114b35760405162461bcd60e51b815260206004820152601960248201527f21494e56414c49442870656e64696e67506c616e44617461290000000000000060448201526064016106c9565b60006114be826129e1565b600585015490915086906001600160a01b03166114da826111f7565b6004870154600588015460208087015160028b01546040805195865263ffffffff600160a81b90950485169386019390935292169083015260608201526001600160a01b0391909116907fe17e61be0a4aac2f0b6fece72cedc2ab9ca554634d5af864a9282095206a0c2b9060800160405180910390a4602081015160058501805463ffffffff909216600160a81b0263ffffffff60a81b1990921691909117905581845560a081015161ffff16156115d2578060a0015161ffff1681604001516115a59190615615565b6115af9084615641565b8460060160046101000a81548163ffffffff021916908363ffffffff1602179055505b505060008481526101006020526040812055610acd565b60028360068111156115fd576115fd6152da565b14156117db57600582018054600160a21b60ff60a01b198216179091556001600160a01b0316600090815261010260205260408120805460019290611643908490615669565b909155505060058201546001600160a01b038116600090815261010360209081526040808320600160a81b90940463ffffffff168352929052908120805460019290611690908490615669565b9091555060009050610104816116a5876111f7565b6001600160a01b03908116825260208083019390935260409182016000908120600588015492831682528452828120600160a81b90920463ffffffff1681529252902054111561175857600161010460006116ff876111f7565b6001600160a01b03908116825260208083019390935260409182016000908120600588015492831682528452828120600160a81b90920463ffffffff168152925281208054909190611752908490615669565b90915550505b600582015484906001600160a01b0316611771826111f7565b6004850154600586015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917f58e4414596fd750dbb9dabfe65b97bf5add2061f5902f34e2b82a9c25bd79f98910160405180910390a46117d684613660565b610acd565b60068360068111156117ef576117ef6152da565b14156119c557600582018054600360a01b60ff60a01b198216179091556001600160a01b0316600090815261010260205260408120805460019290611835908490615669565b909155505060058201546001600160a01b038116600090815261010360209081526040808320600160a81b90940463ffffffff168352929052908120805460019290611882908490615669565b909155506000905061010481611897876111f7565b6001600160a01b03908116825260208083019390935260409182016000908120600588015492831682528452828120600160a81b90920463ffffffff1681529252902054111561194a57600161010460006118f1876111f7565b6001600160a01b03908116825260208083019390935260409182016000908120600588015492831682528452828120600160a81b90920463ffffffff168152925281208054909190611944908490615669565b90915550505b600582015484906001600160a01b0316611963826111f7565b6004850154600586015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917f7afd3b59e582bb56b590409b808e910ae787056cb10b682b9bdefa44c8eb940d91015b60405180910390a4610acd565b60038360068111156119d9576119d96152da565b1415611a6357600582018054600560a01b60ff60a01b1982161790915584906001600160a01b0316611a0a826111f7565b6004850154600586015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917f44abb4f4529fdbcacc1ee98eef9318eaf9a12044d6925a2dc2c702959d9352f191016119b8565b6004836006811115611a7757611a776152da565b1415611bfb576000611a8c83600001546129e1565b905060016005840154600160a01b900460ff166006811115611ab057611ab06152da565b1415611b2c57600583015485906001600160a01b0316611acf826111f7565b6004860154600587015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917ff42e506093cb49dad3d3349cf7a2b390140be665daecb2c820e903afd12b1df7910160405180910390a45b60408101516006840154611b46919063ffffffff16615641565b60068401805463ffffffff191663ffffffff9283169081179091559083161015611b805760058301805460ff60a01b1916600160a11b1790555b600583015485906001600160a01b0316611b99826111f7565b6004860154600587015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917fcdd2eee203a384f2c6e81f39021f7e3ebef3a21ccd0d0f6dd117387ab61b6b54910160405180910390a450610acd565b6005836006811115611c0f57611c0f6152da565b1415610acd57600060028301819055600383015550505050565b60ca5460ff1615611c4c5760405162461bcd60e51b81526004016106c990615499565b6000611c5f8c8c8c8c8c8b8b8a8a612e65565b9050611c6b8785613707565b50600090815260ff602052604090206001019590955550505050505050505050565b611c956129d2565b6001600160a01b0316611cb06098546001600160a01b031690565b6001600160a01b031614611cd65760405162461bcd60e51b81526004016106c990615593565b610de9613821565b6001600160a01b038216600090815261010160205260408120805483908110610d8557610d8561557d565b81611d13816111f7565b6001600160a01b0316611d246129d2565b6001600160a01b03161480611d625750600081815260ff60205260409020600501546001600160a01b0316611d576129d2565b6001600160a01b0316145b611d7e5760405162461bcd60e51b81526004016106c99061547a565b60ca5460ff1615611da15760405162461bcd60e51b81526004016106c990615499565b600083815260ff6020526040902060046005820154600160a01b900460ff166006811115611dd157611dd16152da565b1415611def5760405162461bcd60e51b81526004016106c9906155c8565b4263ffffffff8416611edd57611e04856111f7565b6001600160a01b0316611e156129d2565b6001600160a01b031614611e3b5760405162461bcd60e51b81526004016106c99061547a565b60068201805463ffffffff60401b1916600160401b63ffffffff871602179055600582015485906001600160a01b0316611e74826111f7565b6004850154600586015460408051928352600160a81b90910463ffffffff9081166020840152891682820152516001600160a01b0392909216917fc54424be96a88104b924830a25713de0140a7b7048d7a26370e735b421b057869181900360600190a46120b9565b8063ffffffff168463ffffffff1611611fcc576006820154600160201b900463ffffffff161580611f235750600682015463ffffffff600160201b909104811690821610155b611f3f5760405162461bcd60e51b81526004016106c9906155f2565b600682018054600160401b63ffffffff84169081026bffffffff00000000ffffffff199092161717905560fc5460405163d71bb37b60e01b8152600481018790526001600160a01b039091169063d71bb37b90602401600060405180830381600087803b158015611faf57600080fd5b505af1158015611fc3573d6000803e3d6000fd5b505050506120b9565b6006820154600160201b900463ffffffff161580611fff5750600682015463ffffffff600160201b909104811690851610155b61201b5760405162461bcd60e51b81526004016106c9906155f2565b60068201805463ffffffff60401b1916600160401b63ffffffff871602179055600582015485906001600160a01b0316612054826111f7565b6004850154600586015460408051928352600160a81b90910463ffffffff9081166020840152891682820152516001600160a01b0392909216917fc54424be96a88104b924830a25713de0140a7b7048d7a26370e735b421b057869181900360600190a45b5050505050565b606060678054610ae3906154f1565b610ad06120da6129d2565b838361387a565b886120eb816111f7565b6001600160a01b03166120fc6129d2565b6001600160a01b0316146121225760405162461bcd60e51b81526004016106c99061547a565b60ca5460ff16156121455760405162461bcd60e51b81526004016106c990615499565b6111eb8a8a8a8a8a8a8a8a8a613949565b6121676121616129d2565b83612b2a565b6121835760405162461bcd60e51b81526004016106c99061552c565b610acd84848484613d11565b600054610100900460ff166121aa5760005460ff16156121ae565b303b155b6122115760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016106c9565b600054610100900460ff16158015612233576000805461ffff19166101011790555b61223b613d44565b612243613d7b565b612297604051806040016040528060128152602001714361736b20537562736372697074696f6e7360701b815250604051806040016040528060088152602001674341534b5355425360c01b815250613db2565b60fd80546001600160a01b0319166001600160a01b0384161790558015610ad0576000805461ff00191690555050565b6000818152606860205260409020546060906001600160a01b03166123465760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016106c9565b600082815260ff6020818152604080842081516101c08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004810154608083015260058101546001600160a01b03811660a08401529192909160c0840191600160a01b9091041660068111156123c7576123c76152da565b60068111156123d8576123d86152da565b8152600582015463ffffffff600160a81b820481166020840152600160c81b9091048116604083015260068301548082166060840152600160201b810482166080840152600160401b90041660a082015260078201805460c09092019161243e906154f1565b80601f016020809104026020016040519081016040528092919081815260200182805461246a906154f1565b80156124b75780601f1061248c576101008083540402835291602001916124b7565b820191906000526020600020905b81548152906001019060200180831161249a57829003601f168201915b505050505081526020016008820180546124d0906154f1565b80601f01602080910402602001604051908101604052809291908181526020018280546124fc906154f1565b80156125495780601f1061251e57610100808354040283529160200191612549565b820191906000526020600020905b81548152906001019060200180831161252c57829003601f168201915b505050505081525050905080610180015160405160200161256a9190615680565b604051602081830303815290604052915050919050565b6125896129d2565b6001600160a01b03166125a46098546001600160a01b031690565b6001600160a01b0316146125ca5760405162461bcd60e51b81526004016106c990615593565b60fc80546001600160a01b0319166001600160a01b0392909216919091179055565b6125f46129d2565b6001600160a01b031661260f6098546001600160a01b031690565b6001600160a01b0316146126355760405162461bcd60e51b81526004016106c990615593565b606580546001600160a01b0319166001600160a01b03831617905550565b50565b604080516101c08101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082018390526101208201839052610140820183905261016082019290925261018081018290526101a0810191909152600082815260ff6020818152604080842081516101c08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004810154608083015260058101546001600160a01b03811660a08401529192909160c0840191600160a01b90910416600681111561274a5761274a6152da565b600681111561275b5761275b6152da565b8152600582015463ffffffff600160a81b820481166020840152600160c81b9091048116604083015260068301548082166060840152600160201b810482166080840152600160401b90041660a082015260078201805460c0909201916127c1906154f1565b80601f01602080910402602001604051908101604052809291908181526020018280546127ed906154f1565b801561283a5780601f1061280f5761010080835404028352916020019161283a565b820191906000526020600020905b81548152906001019060200180831161281d57829003601f168201915b50505050508152602001600882018054612853906154f1565b80601f016020809104026020016040519081016040528092919081815260200182805461287f906154f1565b80156128cc5780601f106128a1576101008083540402835291602001916128cc565b820191906000526020600020905b8154815290600101906020018083116128af57829003601f168201915b50505050508152505091506128f8836000908152606860205260409020546001600160a01b0316151590565b1561290d57612906836111f7565b9050915091565b506000915091565b61291d6129d2565b6001600160a01b03166129386098546001600160a01b031690565b6001600160a01b03161461295e5760405162461bcd60e51b81526004016106c990615593565b6001600160a01b0381166129c35760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106c9565b6126538161360e565b3b151590565b60006129dc613df3565b905090565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915250604080516101208101825260a083811c8252608084811c63ffffffff908116602080860191909152606087811c8316868801529587901c8216958501959095529385901c90931692820192909252601083901c61ffff1691810191909152600882901c60ff1660c082015260f89190911b600160f81b8181161460e0830152600160f91b9081161461010082015290565b6000818152606a6020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612af1826111f7565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152606860205260408120546001600160a01b0316612ba35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106c9565b6000612bae836111f7565b9050806001600160a01b0316846001600160a01b03161480612be95750836001600160a01b0316612bde84610b66565b6001600160a01b0316145b80612c1957506001600160a01b038082166000908152606b602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316612c34826111f7565b6001600160a01b031614612c9c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016106c9565b6001600160a01b038216612cfe5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106c9565b612d09838383613e27565b612d14600082612abc565b6001600160a01b0383166000908152606960205260408120805460019290612d3d908490615669565b90915550506001600160a01b0382166000908152606960205260408120805460019290612d6b9084906154d9565b909155505060008181526068602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60ca5460ff16612e155760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016106c9565b60ca805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612e486129d2565b6040516001600160a01b03909116815260200160405180910390a1565b60006004881015612eb15760405162461bcd60e51b815260206004820152601660248201527521494e56414c494428706c616e50726f6f664c656e2960501b60448201526064016106c9565b600060038710612f1a57612f138a8a6000818110612ed157612ed161557d565b905060200201358c8c8c6003818110612eec57612eec61557d565b905060200201358b8b6002818110612f0657612f0661557d565b9050602002013589613f51565b9050612f5f565b612f5c8a8a6000818110612f3057612f3061557d565b905060200201358c8c8c6003818110612f4b57612f4b61557d565b905060200201356000801b89613f51565b90505b612f698a8a61402b565b612f855760405162461bcd60e51b81526004016106c9906156af565b6000612fa98b8b6002818110612f9d57612f9d61557d565b905060200201356129e1565b905060006130038c8c6000818110612fc357612fc361557d565b905060200201358d8d6001818110612fdd57612fdd61557d565b905060200201358e8e6002818110612ff757612ff761557d565b905060200201356140f2565b9050816080015163ffffffff1660001480613052575060808201516001600160a01b0384166000908152610103602090815260408083208287015163ffffffff90811685529252909120549116115b61308c5760405162461bcd60e51b815260206004820152600b60248201526a214d41585f41435449564560a81b60448201526064016106c9565b600060fd54602084015160405163b6ab359f60e01b81526001600160a01b03878116600483015263ffffffff909216602482015291169063b6ab359f9060440160206040518083038186803b1580156130e457600080fd5b505afa1580156130f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311c91906156dc565b600281111561312d5761312d6152da565b146131695760405162461bcd60e51b815260206004820152600c60248201526b085393d517d153905093115160a21b60448201526064016106c9565b61317a6131746129d2565b8261415d565b600081815260ff602090815260409091206005810180549285015163ffffffff16600160a81b02600164ffffffff0160a01b03199093166001600160a01b0387161792909217909155428d8d60018181106131d7576131d761557d565b60200291909101356004840155508d8d60028181106131f8576131f861557d565b602002919091013583555060068201805463ffffffff60401b1916600160401b63ffffffff8d1602179055613231600783018989614af9565b5060058201805463ffffffff60c81b1916600160c81b63ffffffff84160217905560a084015161ffff16156132a5578360a0015161ffff1684604001516132789190615615565b6132829082615641565b8260060160046101000a81548163ffffffff021916908363ffffffff1602179055505b83516132d45760058201805460ff60a01b1916600160a11b17905560068201805463ffffffff19169055613356565b606084015163ffffffff16156133295760058201805460ff60a01b1916600160a01b17905560608401516133089082615641565b60068301805463ffffffff191663ffffffff92909216919091179055613356565b60058201805460ff60a01b1916600160a11b17905560068201805463ffffffff191663ffffffff83161790555b60fe60006133626129d2565b6001600160a01b03908116825260208083019390935260409182016000908120805460018181018355918352858320018890559189168082526101018552838220805480850182559083528583200188905581526101029093529082208054919290916133d09084906154d9565b90915550506001600160a01b0385166000908152610103602090815260408083208783015163ffffffff16845290915281208054600192906134139084906154d9565b909155506001905061010460006134286129d2565b6001600160a01b03908116825260208083019390935260409182016000908120918a1681529083528181208884015163ffffffff168252909252812080549091906134749084906154d9565b909155506134a39050613486846111f7565b600584015460208701516001600160a01b03909116908f8f614177565b6003840155600283015560fc5460405163d71bb37b60e01b8152600481018590526001600160a01b039091169063d71bb37b90602401600060405180830381600087803b1580156134f357600080fd5b505af1158015613507573d6000803e3d6000fd5b5060029250613514915050565b6005830154600160a01b900460ff166006811115613534576135346152da565b148061355f575060016005830154600160a01b900460ff16600681111561355d5761355d6152da565b145b61357b5760405162461bcd60e51b81526004016106c9906156fd565b600582015483906001600160a01b0316613594826111f7565b60048501546005860154600287015460408051938452600160a81b90920463ffffffff166020840152908201526001600160a01b0391909116907f9fb45eab820cdd481e286e8c699e1c01031bb833c58f7cfba3ca8d1db6d98d819060600160405180910390a450909d9c50505050505050505050505050565b609880546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600061366b826111f7565b905061367981600084613e27565b613684600083612abc565b6001600160a01b03811660009081526069602052604081208054600192906136ad908490615669565b909155505060008281526068602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6000806137468460408051808201909152600080825260208201525060408051808201909152606082901c815260509190911c61ffff16602082015290565b60fd548151604051635f45879f60e11b81529293506001600160a01b039091169163be8b0f3e9161377d9188908890600401615725565b60206040518083038186803b15801561379557600080fd5b505afa1580156137a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137cd9190615755565b6138195760405162461bcd60e51b815260206004820152601a60248201527f21494e56414c4944286e6574776f726b5369676e61747572652900000000000060448201526064016106c9565b519392505050565b60ca5460ff16156138445760405162461bcd60e51b81526004016106c990615499565b60ca805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612e486129d2565b816001600160a01b0316836001600160a01b031614156138dc5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106c9565b6001600160a01b038381166000818152606b6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600486101561396a5760405162461bcd60e51b81526004016106c9906156af565b600089815260ff60205260409020600681015463ffffffff16158061399b5750600681015463ffffffff4281169116115b6139d75760405162461bcd60e51b815260206004820152600d60248201526c085391515117d491539155d053609a1b60448201526064016106c9565b60026005820154600160a01b900460ff1660068111156139f9576139f96152da565b1480613a24575060016005820154600160a01b900460ff166006811115613a2257613a226152da565b145b613a405760405162461bcd60e51b81526004016106c9906155c8565b600060038610613a9c57613a9589896000818110613a6057613a6061557d565b905060200201358b8b8b6003818110613a7b57613a7b61557d565b905060200201358a8a6002818110612f0657612f0661557d565b9050613ad0565b613acd89896000818110613ab257613ab261557d565b905060200201358b8b8b6003818110612f4b57612f4b61557d565b90505b613ada898961402b565b613af65760405162461bcd60e51b81526004016106c9906156af565b6000613b0e8a8a6002818110612f9d57612f9d61557d565b60058401549091506001600160a01b03838116911614613b655760405162461bcd60e51b815260206004820152601260248201527121494e56414c49442870726f76696465722960701b60448201526064016106c9565b613b73600784018686614af9565b506002830154158015613b87575060038710155b8015613ba95750600088888281613ba057613ba061557d565b90506020020135115b15613be257613bd7613bba8d6111f7565b600585015460208401516001600160a01b03909116908b8b614177565b600385015560028401555b60208101516005840154600160a81b900463ffffffff908116911614613d0357600060fd54602083015160405163b6ab359f60e01b81526001600160a01b03868116600483015263ffffffff909216602482015291169063b6ab359f9060440160206040518083038186803b158015613c5a57600080fd5b505afa158015613c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9291906156dc565b6002811115613ca357613ca36152da565b14613cdf5760405162461bcd60e51b815260206004820152600c60248201526b085393d517d153905093115160a21b60448201526064016106c9565b613d038c828c8c6002818110613cf757613cf761557d565b90506020020135614263565b505050505050505050505050565b613d1c848484612c21565b613d28848484846143ac565b610acd5760405162461bcd60e51b81526004016106c990615772565b600054610100900460ff16613d6b5760405162461bcd60e51b81526004016106c9906157c4565b613d736144c0565b610de96144e7565b600054610100900460ff16613da25760405162461bcd60e51b81526004016106c9906157c4565b613daa6144c0565b610de961451e565b600054610100900460ff16613dd95760405162461bcd60e51b81526004016106c9906157c4565b613de16144c0565b613de96144c0565b610ad08282614551565b600060143610801590613e1057506065546001600160a01b031633145b15613e22575060131936013560601c90565b503390565b6001600160a01b03831615801590613e4757506001600160a01b03821615155b15610d1e57600081815260ff602052604081208054909190613e68906129e1565b9050806101000151613eb15760405162461bcd60e51b8152602060048201526012602482015271214e4f545f5452414e534645525241424c4560701b60448201526064016106c9565b6006820154600160201b900463ffffffff161580613ee55750600682015463ffffffff600160201b90910481164290911610155b613f015760405162461bcd60e51b81526004016106c9906155f2565b50600601805463ffffffff60401b19811663ffffffff909116600160401b021790556001600160a01b0391909116600090815260fe60209081526040822080546001810182559083529120015550565b60fd54604051630fe22db160e31b81526000916001600160a01b0380891692911690637f116d8890613f8f9084908a908a908a908a9060040161580f565b60206040518083038186803b158015613fa757600080fd5b505afa158015613fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fdf9190615755565b6140215760405162461bcd60e51b815260206004820152601360248201527221494e56414c4944287369676e61747572652960681b60448201526064016106c9565b9695505050505050565b60fd546000906001600160a01b03166371ce3e66848460028181106140525761405261557d565b905060200201358585600381811061406c5761406c61557d565b60200291909101359050614083866004818a61584d565b6040518563ffffffff1660e01b81526004016140a294939291906158b1565b60206040518083038186803b1580156140ba57600080fd5b505afa1580156140ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c99190615755565b60006140fc6129d2565b60405160609190911b6bffffffffffffffffffffffff191660208201526034810185905260548101839052607481018490524360948201524260b482015260d40160408051601f198184030181529190528051602090910120949350505050565b610ad082826040518060200160405280600081525061459f565b600080808484828161418b5761418b61557d565b9050602002013511156142525760fd54604051632218d7d360e01b81526000916001600160a01b031690632218d7d3906141d1908b908b908b908b908b906004016158d1565b602060405180830381600087803b1580156141eb57600080fd5b505af11580156141ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614223919061590a565b9050801561425057808585600181811061423f5761423f61557d565b905060200201359250925050614259565b505b5060009050805b9550959350505050565b600083815260ff60205260408120805490919061427f906129e1565b905060016005830154600160a01b900460ff1660068111156142a3576142a36152da565b141561431e576060808501519082015160068401546142c8919063ffffffff16615923565b6142d29190615641565b60068301805463ffffffff191663ffffffff928316908117909155429091161061430e5760068201805463ffffffff19164263ffffffff161790555b6143198585856145d2565b6120b9565b604081015181516143359163ffffffff1690615948565b6040850151855161434c9163ffffffff1690615948565b141561435d576143198585856145d2565b604081015181516143749163ffffffff1690615948565b6040850151855161438b9163ffffffff1690615948565b111561439d57614319858286866146fa565b6120b985856020015185614912565b60006001600160a01b0384163b156144b557836001600160a01b031663150b7a026143d56129d2565b8786866040518563ffffffff1660e01b81526004016143f7949392919061596a565b602060405180830381600087803b15801561441157600080fd5b505af1925050508015614441575060408051601f3d908101601f1916820190925261443e9181019061599d565b60015b61449b573d80801561446f576040519150601f19603f3d011682016040523d82523d6000602084013e614474565b606091505b5080516144935760405162461bcd60e51b81526004016106c990615772565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612c19565b506001949350505050565b600054610100900460ff16610de95760405162461bcd60e51b81526004016106c9906157c4565b600054610100900460ff1661450e5760405162461bcd60e51b81526004016106c9906157c4565b610de96145196129d2565b61360e565b600054610100900460ff166145455760405162461bcd60e51b81526004016106c9906157c4565b60ca805460ff19169055565b600054610100900460ff166145785760405162461bcd60e51b81526004016106c9906157c4565b815161458b906066906020850190614b7d565b508051610d1e906067906020840190614b7d565b6145a983836149ab565b6145b660008484846143ac565b610d1e5760405162461bcd60e51b81526004016106c990615772565b600083815260ff60205260409020600581015484906001600160a01b03166145f9826111f7565b6004840154600585015460208089015160028801546040805195865263ffffffff600160a81b90950485169386019390935292169083015260608201526001600160a01b0391909116907fe17e61be0a4aac2f0b6fece72cedc2ab9ca554634d5af864a9282095206a0c2b9060800160405180910390a460a083015161ffff16156146c9578260a0015161ffff1683604001516146969190615615565b6146a69063ffffffff16426154d9565b8160060160046101000a81548163ffffffff021916908363ffffffff1602179055505b60209092015160058301805463ffffffff909216600160a81b0263ffffffff60a81b19909216919091179055905550565b600084815260ff602052604090206147138584846145d2565b83511580156147225750825115155b156147e25760068101805463ffffffff19164263ffffffff1617905560fc5460405163d71bb37b60e01b8152600481018790526001600160a01b039091169063d71bb37b90602401600060405180830381600087803b15801561478457600080fd5b505af1158015614798573d6000803e3d6000fd5b50600292506147a5915050565b6005820154600160a01b900460ff1660068111156147c5576147c56152da565b146143195760405162461bcd60e51b81526004016106c9906156fd565b60068101546000906147fb90429063ffffffff16615923565b63ffffffff16856040015163ffffffff16866000015161481b9190615948565b604086015186516148329163ffffffff1690615948565b61483c9190615669565b61484691906159ba565b60fc549091506001600160a01b031663c54c58c4614863886111f7565b600585015460405160e084901b6001600160e01b03191681526001600160a01b039283166004820152911660248201526044810189905260648101849052608401602060405180830381600087803b1580156148be57600080fd5b505af11580156148d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906148f69190615755565b6111af5760405162461bcd60e51b81526004016106c9906156fd565b600083815260ff60209081526040808320610100909252909120829055600581015484906001600160a01b0316614948826111f7565b600484015460058501546040805192835263ffffffff600160a81b90920482166020840152908816908201526001600160a01b0391909116907f3d051466fe86e1bd842d67e98121d69a930caccf48fc2ae2c83119b5a7b71af690606001611076565b6001600160a01b038216614a015760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106c9565b6000818152606860205260409020546001600160a01b031615614a665760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106c9565b614a7260008383613e27565b6001600160a01b0382166000908152606960205260408120805460019290614a9b9084906154d9565b909155505060008181526068602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b828054614b05906154f1565b90600052602060002090601f016020900481019282614b275760008555614b6d565b82601f10614b405782800160ff19823516178555614b6d565b82800160010185558215614b6d579182015b82811115614b6d578235825591602001919060010190614b52565b50614b79929150614bf1565b5090565b828054614b89906154f1565b90600052602060002090601f016020900481019282614bab5760008555614b6d565b82601f10614bc457805160ff1916838001178555614b6d565b82800160010185558215614b6d579182015b82811115614b6d578251825591602001919060010190614bd6565b5b80821115614b795760008155600101614bf2565b6001600160e01b03198116811461265357600080fd5b600060208284031215614c2e57600080fd5b81356113c981614c06565b600060208284031215614c4b57600080fd5b5035919050565b60005b83811015614c6d578181015183820152602001614c55565b83811115610acd5750506000910152565b60008151808452614c96816020860160208601614c52565b601f01601f19169290920160200192915050565b6020815260006113c96020830184614c7e565b80356001600160a01b0381168114614cd457600080fd5b919050565b60008060408385031215614cec57600080fd5b614cf583614cbd565b946020939093013593505050565b600080600060608486031215614d1857600080fd5b614d2184614cbd565b9250614d2f60208501614cbd565b9150604084013590509250925092565b600060208284031215614d5157600080fd5b6113c982614cbd565b60008083601f840112614d6c57600080fd5b50813567ffffffffffffffff811115614d8457600080fd5b602083019150836020828501011115614d9c57600080fd5b9250929050565b600080600060408486031215614db857600080fd5b83359250602084013567ffffffffffffffff811115614dd657600080fd5b614de286828701614d5a565b9497909650939450505050565b60008083601f840112614e0157600080fd5b50813567ffffffffffffffff811115614e1957600080fd5b6020830191508360208260051b8501011115614d9c57600080fd5b803563ffffffff81168114614cd457600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f830112614e6f57600080fd5b813567ffffffffffffffff80821115614e8a57614e8a614e48565b604051601f8301601f19908116603f01168101908282118183101715614eb257614eb2614e48565b81604052838152866020858801011115614ecb57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600080600060c08a8c031215614f0957600080fd5b8935985060208a013567ffffffffffffffff80821115614f2857600080fd5b614f348d838e01614def565b909a50985060408c0135915080821115614f4d57600080fd5b614f598d838e01614def565b9098509650869150614f6d60608d01614e34565b955060808c0135915080821115614f8357600080fd5b614f8f8d838e01614e5e565b945060a08c0135915080821115614fa557600080fd5b50614fb28c828d01614d5a565b915080935050809150509295985092959850929598565b801515811461265357600080fd5b600080600060608486031215614fec57600080fd5b614ff584614cbd565b9250602084013561500581614fc9565b915061501360408501614e34565b90509250925092565b6000806040838503121561502f57600080fd5b8235915060208301356007811061504557600080fd5b809150509250929050565b60008060008060008060008060008060006101008c8e03121561507257600080fd5b8b359a5067ffffffffffffffff8060208e0135111561509057600080fd5b6150a08e60208f01358f01614def565b909b50995060408d01358110156150b657600080fd5b6150c68e60408f01358f01614def565b909950975060608d013596506150de60808e01614e34565b95508060a08e013511156150f157600080fd5b6151018e60a08f01358f01614e5e565b94508060c08e0135111561511457600080fd5b6151248e60c08f01358f01614e5e565b93508060e08e0135111561513757600080fd5b506151488d60e08e01358e01614d5a565b81935080925050509295989b509295989b9093969950565b6000806040838503121561517357600080fd5b8235915061518360208401614e34565b90509250929050565b6000806040838503121561519f57600080fd5b6151a883614cbd565b9150602083013561504581614fc9565b600080600080600080600080600060c08a8c0312156151d657600080fd5b8935985060208a0135975060408a013567ffffffffffffffff808211156151fc57600080fd5b6152088d838e01614def565b909950975060608c013591508082111561522157600080fd5b61522d8d838e01614def565b909750955060808c0135915080821115614f8357600080fd5b6000806000806080858703121561525c57600080fd5b61526585614cbd565b935061527360208601614cbd565b925060408501359150606085013567ffffffffffffffff81111561529657600080fd5b6152a287828801614e5e565b91505092959194509250565b6000806000606084860312156152c357600080fd5b6152cc84614cbd565b925061500560208501614cbd565b634e487b7160e01b600052602160045260246000fd5b6007811061530e57634e487b7160e01b600052602160045260246000fd5b9052565b60408152825160408201526020830151606082015260408301516080820152606083015160a0820152608083015160c0820152600060a084015161536160e08401826001600160a01b03169052565b5060c0840151610100615376818501836152f0565b60e086015191506101206153918186018463ffffffff169052565b908601519150610140906153ac8583018463ffffffff169052565b86015191506101606153c58582018463ffffffff169052565b908601519150610180906153e08583018463ffffffff169052565b86015191506101a06153f98582018463ffffffff169052565b8187015192506101c091508182860152615417610200860184614c7e565b90870151858203603f19016101e087015290925090506154378282614c7e565b925050506113c960208301846001600160a01b03169052565b6000806040838503121561546357600080fd5b61546c83614cbd565b915061518360208401614cbd565b60208082526005908201526404282aaa8960db1b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156154ec576154ec6154c3565b500190565b600181811c9082168061550557607f821691505b6020821081141561552657634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f21494e56414c4944287374617475732960801b604082015260600190565b602080825260099082015268214d494e5f5445524d60b81b604082015260600190565b600063ffffffff80831681851681830481118215151615615638576156386154c3565b02949350505050565b600063ffffffff808316818516808303821115615660576156606154c3565b01949350505050565b60008282101561567b5761567b6154c3565b500390565b66697066733a2f2f60c81b8152600082516156a2816007850160208701614c52565b9190910160070192915050565b60208082526013908201527221494e56414c494428706c616e50726f6f662960681b604082015260600190565b6000602082840312156156ee57600080fd5b8151600381106113c957600080fd5b6020808252600e908201526d21554e50524f4345535341424c4560901b604082015260600190565b60018060a01b038416815282602082015260606040820152600061574c6060830184614c7e565b95945050505050565b60006020828403121561576757600080fd5b81516113c981614fc9565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60018060a01b038616815284602082015283604082015282606082015260a06080820152600061584260a0830184614c7e565b979650505050505050565b6000808585111561585d57600080fd5b8386111561586a57600080fd5b5050600583901b0193919092039150565b81835260006001600160fb1b0383111561589457600080fd5b8260051b8083602087013760009401602001938452509192915050565b84815283602082015260606040820152600061402160608301848661587b565b6001600160a01b0386811682528516602082015263ffffffff84166040820152608060608201819052600090615842908301848661587b565b60006020828403121561591c57600080fd5b5051919050565b600063ffffffff83811690831681811015615940576159406154c3565b039392505050565b60008261596557634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061402190830184614c7e565b6000602082840312156159af57600080fd5b81516113c981614c06565b60008160001904831182151516156159d4576159d46154c3565b50029056fea264697066735822122049a14ac05fe869675dd3762a867edfc99ef40f0d45fc0567a24b111a0981a8a664736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "consumerSubscriptions": {
        "details": "Maps for consumer to list of subscriptions. "
      },
      "providerSubscriptions": {
        "details": "Maps for provider to list of subscriptions and plans. "
      },
      "subscriptionManager": {
        "details": "contract to manage subscription plan definitions. "
      },
      "subscriptionPlans": {
        "details": "contract to manage subscription plan definitions. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 327,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 330,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2551,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2800,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 72,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 1270,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_name",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1272,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_symbol",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 1276,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_owners",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1280,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_balances",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1284,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1290,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2101,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "__gap",
        "offset": 0,
        "slot": "108",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 205,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_owner",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 319,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 415,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_paused",
        "offset": 0,
        "slot": "202",
        "type": "t_bool"
      },
      {
        "astId": 506,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 18921,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "subscriptionManager",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(ICaskSubscriptionManager)12997"
      },
      {
        "astId": 18925,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "subscriptionPlans",
        "offset": 0,
        "slot": "253",
        "type": "t_contract(ICaskSubscriptionPlans)13206"
      },
      {
        "astId": 18931,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "consumerSubscriptions",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 18936,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "subscriptions",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_uint256,t_struct(Subscription)13258_storage)"
      },
      {
        "astId": 18940,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "pendingPlanChanges",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 18946,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "providerSubscriptions",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 18950,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "providerActiveSubscriptionCount",
        "offset": 0,
        "slot": "258",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18956,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "planActiveSubscriptionCount",
        "offset": 0,
        "slot": "259",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_uint256))"
      },
      {
        "astId": 18964,
        "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "consumerProviderPlanActiveCount",
        "offset": 0,
        "slot": "260",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint32,t_uint256)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICaskSubscriptionManager)12997": {
        "encoding": "inplace",
        "label": "contract ICaskSubscriptionManager",
        "numberOfBytes": "20"
      },
      "t_contract(ICaskSubscriptionPlans)13206": {
        "encoding": "inplace",
        "label": "contract ICaskSubscriptionPlans",
        "numberOfBytes": "20"
      },
      "t_enum(SubscriptionStatus)13220": {
        "encoding": "inplace",
        "label": "enum ICaskSubscriptions.SubscriptionStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint32,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint32 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint32,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(Subscription)13258_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ICaskSubscriptions.Subscription)",
        "numberOfBytes": "32",
        "value": "t_struct(Subscription)13258_storage"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Subscription)13258_storage": {
        "encoding": "inplace",
        "label": "struct ICaskSubscriptions.Subscription",
        "members": [
          {
            "astId": 13230,
            "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "planData",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 13232,
            "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "networkData",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 13234,
            "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "discountId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 13236,
            "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "discountData",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 13238,
            "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "ref",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 13240,
            "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "provider",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 13243,
            "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "status",
            "offset": 20,
            "slot": "5",
            "type": "t_enum(SubscriptionStatus)13220"
          },
          {
            "astId": 13245,
            "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "planId",
            "offset": 21,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 13247,
            "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "createdAt",
            "offset": 25,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 13249,
            "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "renewAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 13251,
            "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "minTermAt",
            "offset": 4,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 13253,
            "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "cancelAt",
            "offset": 8,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 13255,
            "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "cid",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 13257,
            "contract": "contracts/subscriptions/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "dataCid",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}