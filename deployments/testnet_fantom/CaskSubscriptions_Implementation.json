{
  "address": "0x0576e5d3F23a51149607fb928712092410F84DC3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "discountId",
          "type": "bytes32"
        }
      ],
      "name": "SubscriptionChangedDiscount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "prevPlanId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "discountId",
          "type": "bytes32"
        }
      ],
      "name": "SubscriptionChangedPlan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "discountId",
          "type": "bytes32"
        }
      ],
      "name": "SubscriptionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionPastDue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "cancelAt",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionPendingCancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "prevPlanId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionPendingChangePlan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionRenewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionResumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionTrialEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_cancelAt",
          "type": "uint32"
        }
      ],
      "name": "cancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_discountProof",
          "type": "bytes32[]"
        }
      ],
      "name": "changeSubscriptionDiscount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_planProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_discountProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "_providerSignature",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        }
      ],
      "name": "changeSubscriptionPlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_planProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_discountProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32",
          "name": "_networkData",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_cancelAt",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_providerSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_networkSignature",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        }
      ],
      "name": "createNetworkSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_planProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_discountProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint32",
          "name": "_cancelAt",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_providerSignature",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        }
      ],
      "name": "createSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveSubscriptions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveSubscriptionsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "getConsumerSubscriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "getConsumerSubscriptions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "getPendingPlanChange",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "getProviderActiveSubscriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "getProviderPlanActiveSubscriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "getProviderSubscriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "getProviderSubscriptions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "getSubscription",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "planData",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "networkData",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "discountId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "discountData",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "ref",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "enum ICaskSubscriptions.SubscriptionStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "planId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "createdAt",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "renewAt",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "minTermAt",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "cancelAt",
              "type": "uint32"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            }
          ],
          "internalType": "struct ICaskSubscriptions.Subscription",
          "name": "subscription",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "currentOwner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subscriptionPlans",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "enum ICaskSubscriptions.ManagerCommand",
          "name": "_command",
          "type": "uint8"
        }
      ],
      "name": "managerCommand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "pauseSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "resumeSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subscriptionManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionManager",
      "outputs": [
        {
          "internalType": "contract ICaskSubscriptionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionPlans",
      "outputs": [
        {
          "internalType": "contract ICaskSubscriptionPlans",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d5b4e7f86cfd3c07529ec8f304d50c3f1115531812be86fbb6679209cdb0ff4",
  "receipt": {
    "to": null,
    "from": "0x83e50cD4123bAA60f6d6c8A83ca85Ac72e826bD0",
    "contractAddress": "0x0576e5d3F23a51149607fb928712092410F84DC3",
    "transactionIndex": 0,
    "gasUsed": "5038515",
    "logsBloom": "0x
    "blockHash": "0x00001f6700000e8375458969dbbb1949d1c670735c31afd51fed62b713271ab4",
    "transactionHash": "0x4d5b4e7f86cfd3c07529ec8f304d50c3f1115531812be86fbb6679209cdb0ff4",
    "logs": [],
    "blockNumber": 8376379,
    "cumulativeGasUsed": "5038515",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "486bbacd6514b425807799e5f18df9c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"discountId\",\"type\":\"bytes32\"}],\"name\":\"SubscriptionChangedDiscount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevPlanId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"discountId\",\"type\":\"bytes32\"}],\"name\":\"SubscriptionChangedPlan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"discountId\",\"type\":\"bytes32\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionPastDue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"cancelAt\",\"type\":\"uint32\"}],\"name\":\"SubscriptionPendingCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevPlanId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionPendingChangePlan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionTrialEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_cancelAt\",\"type\":\"uint32\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_discountProof\",\"type\":\"bytes32[]\"}],\"name\":\"changeSubscriptionDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_planProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_discountProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"_providerSignature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"changeSubscriptionPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_planProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_discountProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_networkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_cancelAt\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_providerSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_networkSignature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"createNetworkSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_planProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_discountProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint32\",\"name\":\"_cancelAt\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_providerSignature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"createSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveSubscriptions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveSubscriptionsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"getConsumerSubscriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"getConsumerSubscriptions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"getPendingPlanChange\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderActiveSubscriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"getProviderPlanActiveSubscriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderSubscriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"getProviderSubscriptions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"getSubscription\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"planData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"networkData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"discountId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"discountData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"enum ICaskSubscriptions.SubscriptionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"renewAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minTermAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cancelAt\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"internalType\":\"struct ICaskSubscriptions.Subscription\",\"name\":\"subscription\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriptionPlans\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"enum ICaskSubscriptions.ManagerCommand\",\"name\":\"_command\",\"type\":\"uint8\"}],\"name\":\"managerCommand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"pauseSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"resumeSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriptionManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionManager\",\"outputs\":[{\"internalType\":\"contract ICaskSubscriptionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionPlans\",\"outputs\":[{\"internalType\":\"contract ICaskSubscriptionPlans\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"consumerSubscriptions\":{\"details\":\"Maps for consumer to list of subscriptions. \"},\"providerSubscriptions\":{\"details\":\"Maps for provider to list of subscriptions and plans. \"},\"subscriptionManager\":{\"details\":\"contract to manage subscription plan definitions. \"},\"subscriptionPlans\":{\"details\":\"contract to manage subscription plan definitions. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/CaskSubscriptions.sol\":\"CaskSubscriptions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    function trustedForwarder() public virtual view returns (address){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce3168b37fc87ec34a18b56b4b16a06432119c07fd2e1d864b871dcf40372ebe\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0x199e82e0a2833a97213b5c16ac9b4e2b1814f2e90a4c4916855cbc21e710ad5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x6c25d4211724a6f4cdc8d25397edc780f48d951fc81c1d507f59b3edb22afaf7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskSubscriptionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskSubscriptionManager {\\n\\n    function processSinglePayment(address _consumer, address _provider, uint256 _subscriptionId, uint256 _value) external;\\n\\n    function renewSubscription(uint256 _subscriptionId) external;\\n\\n}\\n\",\"keccak256\":\"0x8dc3f5b9d7003e29d6064a39d9675dc56aa80cbdea48deb3394b5545cf25ce85\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskSubscriptionPlans.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskSubscriptionPlans {\\n\\n    enum PlanStatus {\\n        Enabled,\\n        Disabled,\\n        EndOfLife\\n    }\\n\\n    struct Discount {\\n        uint256 value;\\n        uint32 validAfter;\\n        uint32 expiresAt;\\n        uint32 maxRedemptions;\\n        uint32 planId;\\n        uint16 applyPeriods;\\n        bool isFixed;\\n    }\\n\\n    struct Provider {\\n        address paymentAddress;\\n        string cid;\\n    }\\n\\n    function setProviderProfile(address _paymentAddress, string calldata _cid) external;\\n\\n    function getProviderProfile(address _provider) external view returns(Provider memory);\\n\\n    function getPlanStatus(address _provider, uint32 _planId) external view returns (PlanStatus);\\n\\n    function getPlanEOL(address _provider, uint32 _planId) external view returns (uint32);\\n\\n    function disablePlan(uint32 _planId) external;\\n\\n    function enablePlan(uint32 _planId) external;\\n\\n    function killPlan(uint32 _planId, uint32 _eolAt) external;\\n\\n    function verifyPlan(bytes32 _planData, bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof) external view returns(bool);\\n\\n    function verifyAndConsumeDiscount(address _provider, uint32 _planId, bytes32 _discountId, bytes32 _discountData,\\n        bytes32 _merkleRoot, bytes32[] calldata _merkleProof) external returns(bool);\\n\\n\\n    /** @dev Emitted when `provider` disables a subscription plan */\\n    event PlanDisabled(address indexed provider, uint32 indexed planId);\\n\\n    /** @dev Emitted when `provider` enables a subscription plan */\\n    event PlanEnabled(address indexed provider, uint32 indexed planId);\\n\\n    /** @dev Emitted when `provider` end-of-lifes a subscription plan */\\n    event PlanEOL(address indexed provider, uint32 indexed planId, uint32 eolAt);\\n\\n}\",\"keccak256\":\"0x222691a5ed74ed3791724660130c1135391433fd75dbb78d0fce0150f8821242\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"./ICaskSubscriptionManager.sol\\\";\\n\\ninterface ICaskSubscriptions is IERC721Upgradeable {\\n\\n    enum SubscriptionStatus {\\n        None,\\n        Trialing,\\n        Active,\\n        Paused,\\n        Canceled,\\n        PastDue\\n    }\\n\\n    enum ManagerCommand {\\n        None,\\n        PlanChange,\\n        Cancel,\\n        PastDue,\\n        Renew,\\n        ClearDiscount\\n    }\\n\\n    struct Subscription {\\n        bytes32 planData;\\n        bytes32 networkData;\\n        bytes32 discountId;\\n        bytes32 discountData;\\n        bytes32 ref;\\n        address provider;\\n        SubscriptionStatus status;\\n        uint32 planId;\\n        uint32 createdAt;\\n        uint32 renewAt;\\n        uint32 minTermAt;\\n        uint32 cancelAt;\\n        string cid;\\n    }\\n\\n    struct PlanInfo {\\n        uint256 price;\\n        uint32 planId;\\n        uint32 period;\\n        uint32 freeTrial;\\n        uint32 maxActive;\\n        uint16 minPeriods;\\n        uint8 gracePeriod;\\n        bool canPause;\\n        bool canTransfer;\\n    }\\n\\n    struct NetworkInfo {\\n        address network;\\n        uint16 feeBps;\\n    }\\n\\n    /************************** SUBSCRIPTION INSTANCE METHODS **************************/\\n\\n    function createSubscription(\\n        bytes32[] calldata _planProof,\\n        bytes32[] calldata _discountProof,\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) external;\\n\\n    function createNetworkSubscription(\\n        bytes32[] calldata _planProof,\\n        bytes32[] calldata _discountProof,\\n        bytes32 _networkData,\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        bytes memory _networkSignature,\\n        string calldata _cid\\n    ) external;\\n\\n    function changeSubscriptionPlan(\\n        uint256 _subscriptionId,\\n        bytes32[] calldata _planProof,\\n        bytes32[] calldata _discountProof,\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) external;\\n\\n    function changeSubscriptionDiscount(uint256 _subscriptionId, bytes32[] calldata _discountProof) external;\\n\\n    function pauseSubscription(uint256 _subscriptionId) external;\\n\\n    function resumeSubscription(uint256 _subscriptionId) external;\\n\\n    function cancelSubscription(uint256 _subscriptionId, uint32 _cancelAt) external;\\n\\n    function managerCommand(uint256 _subscriptionId, ManagerCommand _command) external;\\n\\n    function getSubscription(uint256 _subscriptionId) external view returns\\n        (Subscription memory subscription, address currentOwner);\\n\\n    function getConsumerSubscriptions(address _consumer, uint256 limit,\\n        uint256 offset) external view returns (uint256[] memory);\\n\\n    function getConsumerSubscriptionCount(address _consumer) external view returns (uint256);\\n\\n    function getProviderSubscriptions(address _provider, uint256 limit,\\n        uint256 offset) external view returns (uint256[] memory);\\n\\n    function getProviderSubscriptionCount(address _provider) external view returns (uint256);\\n\\n    function getProviderActiveSubscriptionCount(address _provider) external view returns (uint256);\\n\\n    function getProviderPlanActiveSubscriptionCount(address _provider, uint32 _planId) external view returns (uint256);\\n\\n    function getPendingPlanChange(uint256 _subscriptionId) external view returns (bytes32);\\n\\n    function getActiveSubscriptionsCount() external view returns (uint256);\\n\\n    function getActiveSubscriptions() external view returns (uint256[] memory);\\n\\n\\n    /************************** SUBSCRIPTION EVENTS **************************/\\n\\n    /** @dev Emitted when `consumer` subscribes to `provider` plan `planId` */\\n    event SubscriptionCreated(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId, bytes32 discountId);\\n\\n    /** @dev Emitted when `consumer` changes the plan to `provider` on subscription `subscriptionId` */\\n    event SubscriptionChangedPlan(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 prevPlanId, uint32 planId, bytes32 discountId);\\n\\n    /** @dev Emitted when `consumer` changes the plan to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPendingChangePlan(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 prevPlanId, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` changes the discount on subscription `subscriptionId` */\\n    event SubscriptionChangedDiscount(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId, bytes32 discountId);\\n\\n    /** @dev Emitted when `consumer` pauses the subscription to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPaused(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` resumes the subscription to `provider` on subscription `subscriptionId` */\\n    event SubscriptionResumed(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` unsubscribes to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPendingCancel(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId, uint32 cancelAt);\\n\\n    /** @dev Emitted when `consumer` has canceled and the current period is over on subscription `subscriptionId` */\\n    event SubscriptionCanceled(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` successfully renews to `provider` on subscription `subscriptionId` */\\n    event SubscriptionRenewed(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` subscription trial ends and goes active to `provider` on subscription `subscriptionId` */\\n    event SubscriptionTrialEnded(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` renewal fails to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPastDue(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n}\\n\\n\",\"keccak256\":\"0x577644cbe4620e34b81e47448f1409189f41a60f9186313e746af03e3de17d1a\",\"license\":\"MIT\"},\"contracts/protocol/CaskSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"@opengsn/contracts/src/BaseRelayRecipient.sol\\\";\\n\\n\\nimport \\\"../interfaces/ICaskSubscriptionManager.sol\\\";\\nimport \\\"../interfaces/ICaskSubscriptions.sol\\\";\\nimport \\\"../interfaces/ICaskSubscriptionPlans.sol\\\";\\n\\ncontract CaskSubscriptions is\\nICaskSubscriptions,\\nBaseRelayRecipient,\\nERC721Upgradeable,\\nOwnableUpgradeable,\\nPausableUpgradeable\\n{\\n    using ECDSA for bytes32;\\n\\n    /************************** PARAMETERS **************************/\\n\\n    /** @dev contract to manage subscription plan definitions. */\\n    ICaskSubscriptionManager public subscriptionManager;\\n\\n    /** @dev contract to manage subscription plan definitions. */\\n    ICaskSubscriptionPlans public subscriptionPlans;\\n\\n\\n    /************************** STATE **************************/\\n\\n    uint256[] private activeSubscriptions;\\n\\n    /** @dev Maps for consumer to list of subscriptions. */\\n    mapping(address => uint256[]) private consumerSubscriptions; // consumer => subscriptionId[]\\n    mapping(uint256 => Subscription) private subscriptions; // subscriptionId => Subscription\\n    mapping(uint256 => bytes32) private pendingPlanChanges; // subscriptionId => planData\\n\\n    /** @dev Maps for provider to list of subscriptions and plans. */\\n    mapping(address => uint256[]) private providerSubscriptions; // provider => subscriptionId[]\\n    mapping(address => uint256) private providerActiveSubscriptionCount; // provider => count\\n    mapping(address => mapping(uint32 => uint256)) private planActiveSubscriptionCount; // provider => planId => count\\n\\n    mapping(uint256 => uint256) private idxMap; // subscriptionId => activeSubscriptions index\\n\\n    modifier onlyManager() {\\n        require(_msgSender() == address(subscriptionManager), \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n    modifier onlySubscriber(uint256 _subscriptionId) {\\n        require(_msgSender() == ownerOf(_subscriptionId), \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n    modifier onlySubscriberOrProvider(uint256 _subscriptionId) {\\n        require(\\n            _msgSender() == ownerOf(_subscriptionId) ||\\n            _msgSender() == subscriptions[_subscriptionId].provider,\\n            \\\"!AUTH\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(\\n        address _subscriptionPlans\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ERC721_init(\\\"Cask Subscriptions\\\",\\\"CASKSUBS\\\");\\n\\n        subscriptionPlans = ICaskSubscriptionPlans(_subscriptionPlans);\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function versionRecipient() public pure override returns(string memory) { return \\\"2.2.0\\\"; }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (address sender) {\\n        sender = BaseRelayRecipient._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (bytes memory) {\\n        return BaseRelayRecipient._msgData();\\n    }\\n\\n\\n    function tokenURI(uint256 _subscriptionId) public view override returns (string memory) {\\n        require(_exists(_subscriptionId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        Subscription memory subscription = subscriptions[_subscriptionId];\\n\\n        return string(abi.encodePacked(\\\"ipfs://\\\", subscription.cid));\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _subscriptionId\\n    ) internal override {\\n        if (_from != address(0) && _to != address(0)) { // only non-mint/burn transfers\\n            Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n            PlanInfo memory planInfo = _parsePlanData(subscription.planData);\\n            require(planInfo.canTransfer, \\\"!NOT_TRANSFERRABLE\\\");\\n\\n            require(subscription.minTermAt == 0 || uint32(block.timestamp) >= subscription.minTermAt, \\\"!MIN_TERM\\\");\\n\\n            // on transfer, set subscription to cancel at next renewal until new owner accepts subscription\\n            subscription.cancelAt = subscription.renewAt;\\n        }\\n    }\\n\\n    /************************** SUBSCRIPTION METHODS **************************/\\n\\n    function createNetworkSubscription(\\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n        bytes32 _networkData,\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        bytes memory _networkSignature,\\n        string calldata _cid\\n    ) external override whenNotPaused {\\n        uint256 subscriptionId = _createSubscription(_planProof, _discountProof, _cancelAt,\\n            _providerSignature, _cid);\\n\\n        _verifyNetworkData(_networkData, _networkSignature);\\n\\n        Subscription storage subscription = subscriptions[subscriptionId];\\n        subscription.networkData = _networkData;\\n    }\\n\\n    function createSubscription(\\n        bytes32[] calldata _planProof, // [provider, ref, planData, merkleRoot, merkleProof...]\\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) external override whenNotPaused {\\n        _createSubscription(_planProof, _discountProof, _cancelAt, _providerSignature, _cid);\\n    }\\n\\n    function changeSubscriptionPlan(\\n        uint256 _subscriptionId,\\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) external override onlySubscriber(_subscriptionId) whenNotPaused {\\n        _changeSubscriptionPlan(_subscriptionId, _planProof, _discountProof, _providerSignature, _cid);\\n    }\\n\\n    function changeSubscriptionDiscount(\\n        uint256 _subscriptionId,\\n        bytes32[] calldata _discountProof // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n    ) external override onlySubscriberOrProvider(_subscriptionId) whenNotPaused {\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n        require(subscription.discountId == 0, \\\"!EXISTING_DISCOUNT\\\");\\n\\n        if (pendingPlanChanges[_subscriptionId] > 0) {\\n            PlanInfo memory newPlanInfo = _parsePlanData(pendingPlanChanges[_subscriptionId]);\\n            // pending plan change, get discount for new plan\\n            (\\n            subscription.discountId,\\n            subscription.discountData\\n            ) = _verifyDiscountProof(subscription.provider, newPlanInfo.planId, _discountProof);\\n        } else {\\n            (\\n            subscription.discountId,\\n            subscription.discountData\\n            ) = _verifyDiscountProof(subscription.provider, subscription.planId, _discountProof);\\n        }\\n\\n        emit SubscriptionChangedDiscount(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId, subscription.discountData);\\n    }\\n\\n    function pauseSubscription(\\n        uint256 _subscriptionId\\n    ) external override onlySubscriberOrProvider(_subscriptionId) whenNotPaused {\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        require(subscription.status != SubscriptionStatus.Paused &&\\n                subscription.status != SubscriptionStatus.PastDue &&\\n                subscription.status != SubscriptionStatus.Canceled &&\\n                subscription.status != SubscriptionStatus.Trialing, \\\"!INVALID(status)\\\");\\n\\n        require(subscription.minTermAt == 0 || uint32(block.timestamp) >= subscription.minTermAt, \\\"!MIN_TERM\\\");\\n\\n        PlanInfo memory planInfo = _parsePlanData(subscription.planData);\\n        require(planInfo.canPause, \\\"!NOT_PAUSABLE\\\");\\n\\n        subscription.status = SubscriptionStatus.Paused;\\n\\n        planActiveSubscriptionCount[subscription.provider][subscription.planId] -= 1;\\n\\n        emit SubscriptionPaused(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId);\\n    }\\n\\n    function resumeSubscription(\\n        uint256 _subscriptionId\\n    ) external override onlySubscriber(_subscriptionId) whenNotPaused {\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n        require(subscription.status == SubscriptionStatus.Paused, \\\"!NOT_PAUSED\\\");\\n\\n        PlanInfo memory planInfo = _parsePlanData(subscription.planData);\\n\\n        require(planInfo.maxActive == 0 ||\\n            planActiveSubscriptionCount[subscription.provider][planInfo.planId] < planInfo.maxActive, \\\"!MAX_ACTIVE\\\");\\n\\n        subscription.status = SubscriptionStatus.Active;\\n\\n        planActiveSubscriptionCount[subscription.provider][subscription.planId] += 1;\\n\\n        // if renewal date has already passed, set it to now so consumer is not charged for the time it was paused\\n        if (subscription.renewAt < uint32(block.timestamp)) {\\n            subscription.renewAt = uint32(block.timestamp);\\n        }\\n\\n        emit SubscriptionResumed(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId);\\n    }\\n\\n    function cancelSubscription(\\n        uint256 _subscriptionId,\\n        uint32 _cancelAt\\n    ) external override onlySubscriberOrProvider(_subscriptionId) whenNotPaused {\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        require(subscription.status != SubscriptionStatus.Canceled, \\\"!INVALID(status)\\\");\\n\\n        uint32 timestamp = uint32(block.timestamp);\\n\\n        if(_cancelAt == 0) {\\n            require(_msgSender() == ownerOf(_subscriptionId), \\\"!AUTH\\\"); // clearing cancel only allowed by subscriber\\n            subscription.cancelAt = _cancelAt;\\n        } else if(_cancelAt <= timestamp) {\\n            require(subscription.minTermAt == 0 || timestamp >= subscription.minTermAt, \\\"!MIN_TERM\\\");\\n            subscription.status = SubscriptionStatus.Canceled; // prevent anymore changes\\n            subscription.renewAt = timestamp; // cause keeper to process cancel at next run\\n            subscription.cancelAt = timestamp;\\n        } else {\\n            require(subscription.minTermAt == 0 || _cancelAt >= subscription.minTermAt, \\\"!MIN_TERM\\\");\\n            subscription.cancelAt = _cancelAt;\\n        }\\n\\n        emit SubscriptionPendingCancel(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId, _cancelAt);\\n    }\\n\\n    function managerCommand(\\n        uint256 _subscriptionId,\\n        ManagerCommand _command\\n    ) external override onlyManager whenNotPaused {\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        if (_command == ManagerCommand.PlanChange) {\\n            bytes32 pendingPlanData = pendingPlanChanges[_subscriptionId];\\n            require(pendingPlanData > 0, \\\"!INVALID(pendingPlanData)\\\");\\n\\n            PlanInfo memory newPlanInfo = _parsePlanData(pendingPlanData);\\n\\n            emit SubscriptionChangedPlan(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n                subscription.ref, subscription.planId, newPlanInfo.planId, subscription.discountId);\\n\\n            subscription.planId = newPlanInfo.planId;\\n            subscription.planData = pendingPlanData;\\n\\n            if (newPlanInfo.minPeriods > 0) {\\n                subscription.minTermAt = uint32(block.timestamp + (newPlanInfo.period * newPlanInfo.minPeriods));\\n            }\\n\\n            delete pendingPlanChanges[_subscriptionId]; // free up memory\\n\\n        } else if (_command == ManagerCommand.Cancel) {\\n            subscription.status = SubscriptionStatus.Canceled;\\n\\n            providerActiveSubscriptionCount[subscription.provider] -= 1;\\n            planActiveSubscriptionCount[subscription.provider][subscription.planId] -= 1;\\n\\n            emit SubscriptionCanceled(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n                subscription.ref, subscription.planId);\\n\\n            // remove canceled subscription from activeSubscriptions by moving last subscription into\\n            // the place the canceled subscription occupied\\n            activeSubscriptions[idxMap[_subscriptionId]] = activeSubscriptions[activeSubscriptions.length-1];\\n            idxMap[activeSubscriptions[idxMap[_subscriptionId]]] = idxMap[_subscriptionId];\\n            activeSubscriptions.pop();\\n            delete idxMap[_subscriptionId];\\n\\n            _burn(_subscriptionId);\\n\\n        } else if (_command == ManagerCommand.PastDue) {\\n            subscription.status = SubscriptionStatus.PastDue;\\n\\n            emit SubscriptionPastDue(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n                subscription.ref, subscription.planId);\\n\\n        } else if (_command == ManagerCommand.Renew) {\\n            PlanInfo memory planInfo = _parsePlanData(subscription.planData);\\n\\n            if (subscription.status == SubscriptionStatus.Trialing) {\\n                emit SubscriptionTrialEnded(ownerOf(_subscriptionId), subscription.provider,\\n                    _subscriptionId, subscription.ref, subscription.planId);\\n            }\\n\\n            subscription.status = SubscriptionStatus.Active; // just in case it was something else previously\\n            subscription.renewAt = subscription.renewAt + planInfo.period;\\n\\n            emit SubscriptionRenewed(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n                subscription.ref, subscription.planId);\\n\\n        } else if (_command == ManagerCommand.ClearDiscount) {\\n                    subscription.discountData = 0;\\n        }\\n\\n    }\\n\\n    function getActiveSubscriptionsCount() external view returns (uint256) {\\n        return activeSubscriptions.length;\\n    }\\n\\n    function getActiveSubscriptions() external override view returns (uint256[] memory) {\\n        return activeSubscriptions;\\n    }\\n\\n    function getSubscription(\\n        uint256 _subscriptionId\\n    ) external override view returns (Subscription memory subscription, address currentOwner) {\\n        subscription = subscriptions[_subscriptionId];\\n        if (_exists(_subscriptionId)) {\\n            currentOwner = ownerOf(_subscriptionId);\\n        } else {\\n            currentOwner = address(0);\\n        }\\n    }\\n\\n    function getConsumerSubscriptions(\\n        address _consumer,\\n        uint256 _limit,\\n        uint256 _offset\\n    ) external override view returns (uint256[] memory) {\\n        uint256 size = _limit;\\n        if (size > consumerSubscriptions[_consumer].length) {\\n            size = consumerSubscriptions[_consumer].length;\\n        }\\n        if (_offset >= consumerSubscriptions[_consumer].length) {\\n            return new uint256[](0);\\n        }\\n        uint256[] memory subscriptionIds = new uint256[](size);\\n        for (uint256 i = 0; i < size && i + _offset < consumerSubscriptions[_consumer].length; i++) {\\n            subscriptionIds[i] = consumerSubscriptions[_consumer][i+_offset];\\n        }\\n        return subscriptionIds;\\n    }\\n\\n    function getConsumerSubscriptionCount(\\n        address _consumer\\n    ) external override view returns (uint256) {\\n        return consumerSubscriptions[_consumer].length;\\n    }\\n\\n    function getProviderSubscriptions(\\n        address _provider,\\n        uint256 _limit,\\n        uint256 _offset\\n    ) external override view returns (uint256[] memory) {\\n        uint256 size = _limit;\\n        if (size > providerSubscriptions[_provider].length) {\\n            size = providerSubscriptions[_provider].length;\\n        }\\n        if (_offset >= providerSubscriptions[_provider].length) {\\n            return new uint256[](0);\\n        }\\n        uint256[] memory subscriptionIds = new uint256[](size);\\n        for (uint256 i = 0; i < size && i + _offset < providerSubscriptions[_provider].length; i++) {\\n            subscriptionIds[i] = providerSubscriptions[_provider][i+_offset];\\n        }\\n        return subscriptionIds;\\n    }\\n\\n    function getProviderSubscriptionCount(\\n        address _provider\\n    ) external override view returns (uint256) {\\n        return providerSubscriptions[_provider].length;\\n    }\\n\\n    function getProviderActiveSubscriptionCount(\\n        address _provider\\n    ) external override view returns (uint256) {\\n        return providerActiveSubscriptionCount[_provider];\\n    }\\n\\n    function getProviderPlanActiveSubscriptionCount(\\n        address _provider,\\n        uint32 _planId\\n    ) external override view returns (uint256) {\\n        return planActiveSubscriptionCount[_provider][_planId];\\n    }\\n\\n    function getPendingPlanChange(\\n        uint256 _subscriptionId\\n    ) external override view returns (bytes32) {\\n        return pendingPlanChanges[_subscriptionId];\\n    }\\n\\n    function _createSubscription(\\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) internal returns(uint256) {\\n        require(_planProof.length >= 4, \\\"!INVALID(planProofLen)\\\");\\n\\n        // confirms merkleroots are in fact the ones provider committed to\\n        address provider;\\n        if (_discountProof.length >= 3) {\\n            provider = _verifyMerkleRoots(_planProof[0], _providerSignature, _planProof[3], _discountProof[2]);\\n        } else {\\n            provider = _verifyMerkleRoots(_planProof[0], _providerSignature, _planProof[3], 0);\\n        }\\n\\n        // confirms plan data is included in merkle root\\n        require(_verifyPlanProof(_planProof), \\\"!INVALID(planProof)\\\");\\n\\n        // decode planData bytes32 into PlanInfo\\n        PlanInfo memory planInfo = _parsePlanData(_planProof[2]);\\n\\n        // generate subscriptionId from plan info and ref\\n        uint256 subscriptionId = _generateSubscriptionId(_planProof[0], _planProof[1], _planProof[2]);\\n\\n        require(planInfo.maxActive == 0 ||\\n            planActiveSubscriptionCount[provider][planInfo.planId] < planInfo.maxActive, \\\"!MAX_ACTIVE\\\");\\n        require(subscriptionPlans.getPlanStatus(provider, planInfo.planId) ==\\n            ICaskSubscriptionPlans.PlanStatus.Enabled, \\\"!NOT_ENABLED\\\");\\n\\n        _safeMint(_msgSender(), subscriptionId);\\n\\n        Subscription storage subscription = subscriptions[subscriptionId];\\n\\n        uint32 timestamp = uint32(block.timestamp);\\n\\n        subscription.provider = provider;\\n        subscription.planId = planInfo.planId;\\n        subscription.ref = _planProof[1];\\n        subscription.planData = _planProof[2];\\n        subscription.cancelAt = _cancelAt;\\n        subscription.cid = _cid;\\n        subscription.createdAt = timestamp;\\n\\n        if (planInfo.minPeriods > 0) {\\n            subscription.minTermAt = timestamp + (planInfo.period * planInfo.minPeriods);\\n        }\\n\\n        // if no trial period, charge now. If trial period, charge will happen after trial is over\\n        if (planInfo.freeTrial > 0) {\\n            subscription.status = SubscriptionStatus.Trialing;\\n            subscription.renewAt = timestamp + planInfo.freeTrial;\\n        } else {\\n            subscription.status = SubscriptionStatus.Active;\\n            subscription.renewAt = timestamp;\\n        }\\n\\n        (\\n        subscription.discountId,\\n        subscription.discountData\\n        ) = _verifyDiscountProof(subscription.provider, planInfo.planId, _discountProof);\\n\\n        if (subscription.renewAt <= timestamp) {\\n            subscriptionManager.renewSubscription(subscriptionId);\\n        }\\n\\n        emit SubscriptionCreated(ownerOf(subscriptionId), subscription.provider, subscriptionId,\\n            subscription.ref, subscription.planId, subscription.discountId);\\n\\n        consumerSubscriptions[_msgSender()].push(subscriptionId);\\n        providerSubscriptions[provider].push(subscriptionId);\\n        providerActiveSubscriptionCount[provider] += 1;\\n        planActiveSubscriptionCount[provider][planInfo.planId] += 1;\\n        idxMap[subscriptionId] = activeSubscriptions.length;\\n        activeSubscriptions.push(subscriptionId);\\n\\n        return subscriptionId;\\n    }\\n\\n    function _changeSubscriptionPlan(\\n        uint256 _subscriptionId,\\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) internal {\\n        require(_planProof.length >= 4, \\\"!INVALID(planProof)\\\");\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        require(subscription.renewAt > uint32(block.timestamp), \\\"!NEED_RENEWAL\\\");\\n        require(subscription.status == SubscriptionStatus.Active ||\\n            subscription.status == SubscriptionStatus.Trialing, \\\"!INVALID(status)\\\");\\n\\n        // confirms merkleroots are in fact the ones provider committed to\\n        address provider;\\n        if (_discountProof.length >= 3) {\\n            provider = _verifyMerkleRoots(_planProof[0], _providerSignature, _planProof[3], _discountProof[2]);\\n        } else {\\n            provider = _verifyMerkleRoots(_planProof[0], _providerSignature, _planProof[3], 0);\\n        }\\n\\n        // confirms plan data is included in merkle root\\n        require(_verifyPlanProof(_planProof), \\\"!INVALID(planProof)\\\");\\n\\n        // decode planData bytes32 into PlanInfo\\n        PlanInfo memory newPlanInfo = _parsePlanData(_planProof[2]);\\n\\n        require(subscription.provider == provider, \\\"!INVALID(provider)\\\");\\n\\n        subscription.cid = _cid;\\n\\n        if (subscription.discountId == 0 && _discountProof.length >= 3 && _discountProof[0] > 0) {\\n            (\\n            subscription.discountId,\\n            subscription.discountData\\n            ) = _verifyDiscountProof(subscription.provider, newPlanInfo.planId, _discountProof);\\n        }\\n\\n        if (subscription.planId != newPlanInfo.planId) {\\n            require(subscriptionPlans.getPlanStatus(provider, newPlanInfo.planId) ==\\n                ICaskSubscriptionPlans.PlanStatus.Enabled, \\\"!NOT_ENABLED\\\");\\n            _performPlanChange(_subscriptionId, newPlanInfo, _planProof[2]);\\n        }\\n    }\\n\\n    function _performPlanChange(\\n        uint256 _subscriptionId,\\n        PlanInfo memory _newPlanInfo,\\n        bytes32 _planData\\n    ) internal {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        PlanInfo memory currentPlanInfo = _parsePlanData(subscription.planData);\\n\\n        if (subscription.status == SubscriptionStatus.Trialing) { // still in trial, just change now\\n\\n            _swapTrialingPlan(_subscriptionId, currentPlanInfo, _newPlanInfo, _planData);\\n\\n        } else if (_newPlanInfo.price / _newPlanInfo.period ==\\n            currentPlanInfo.price / currentPlanInfo.period)\\n        { // straight swap\\n\\n            _swapPlan(_subscriptionId, _newPlanInfo, _planData);\\n\\n        } else if (_newPlanInfo.price / _newPlanInfo.period >\\n            currentPlanInfo.price / currentPlanInfo.period)\\n        { // upgrade\\n\\n            _upgradePlan(_subscriptionId, currentPlanInfo, _newPlanInfo, _planData);\\n\\n        } else { // downgrade - to take affect at next renewal\\n\\n            _scheduleSwapPlan(_subscriptionId, _newPlanInfo.planId, _planData);\\n        }\\n    }\\n\\n    function _verifyDiscountProof(\\n        address _provider,\\n        uint32 _planId,\\n        bytes32[] calldata _discountProof // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n    ) internal returns(bytes32, bytes32) {\\n        if (_discountProof.length > 3 && _discountProof[0] > 0) {\\n            bytes32 discountId = keccak256(abi.encode(_discountProof[0]));\\n            if (subscriptionPlans.verifyAndConsumeDiscount(_provider, _planId, discountId,\\n                _discountProof[1], _discountProof[2], _discountProof[3:]))\\n            {\\n                return (discountId, _discountProof[1]);\\n            }\\n        }\\n        return (0,0);\\n    }\\n\\n    function _verifyPlanProof(\\n        bytes32[] calldata _planProof // [provider, ref, planData, merkleRoot, merkleProof...]\\n    ) internal view returns(bool) {\\n        return subscriptionPlans.verifyPlan(_planProof[2], _planProof[3], _planProof[4:]);\\n    }\\n\\n    function _generateSubscriptionId(\\n        bytes32 _providerAddr,\\n        bytes32 _ref,\\n        bytes32 _planData\\n    ) internal view returns(uint256) {\\n        return uint256(keccak256(abi.encodePacked(_msgSender(), _providerAddr,\\n            _planData, _ref, block.number, block.timestamp)));\\n    }\\n\\n    function _parsePlanData(\\n        bytes32 _planData\\n    ) internal pure returns(PlanInfo memory) {\\n        bytes1 options = bytes1(_planData << 248);\\n        return PlanInfo({\\n            price: uint256(_planData >> 160),\\n            planId: uint32(bytes4(_planData << 96)),\\n            period: uint32(bytes4(_planData << 128)),\\n            freeTrial: uint32(bytes4(_planData << 160)),\\n            maxActive: uint32(bytes4(_planData << 192)),\\n            minPeriods: uint16(bytes2(_planData << 224)),\\n            gracePeriod: uint8(bytes1(_planData << 240)),\\n            canPause: options & 0x01 == 0x01,\\n            canTransfer: options & 0x02 == 0x02\\n        });\\n    }\\n\\n    function _parseNetworkData(\\n        bytes32 _networkData\\n    ) internal pure returns(NetworkInfo memory) {\\n        return NetworkInfo({\\n            network: address(bytes20(_networkData)),\\n            feeBps: uint16(bytes2(_networkData << 160))\\n        });\\n    }\\n\\n    function _swapTrialingPlan(\\n        uint256 _subscriptionId,\\n        PlanInfo memory _currentPlanInfo,\\n        PlanInfo memory _newPlanInfo,\\n        bytes32 _newPlanData\\n    ) internal {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        // adjust renewal based on new plan trial length\\n        subscription.renewAt = subscription.renewAt - _currentPlanInfo.freeTrial + _newPlanInfo.freeTrial;\\n\\n        // if new plan trial length would have caused trial to already be over, end trial as of now\\n        // subscription will be charged and converted to active during next keeper run\\n        if (subscription.renewAt <= uint32(block.timestamp)) {\\n            subscription.renewAt = uint32(block.timestamp);\\n        }\\n\\n        _swapPlan(_subscriptionId, _newPlanInfo, _newPlanData);\\n    }\\n\\n    function _scheduleSwapPlan(\\n        uint256 _subscriptionId,\\n        uint32 newPlanId,\\n        bytes32 _newPlanData\\n    ) internal {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        pendingPlanChanges[_subscriptionId] = _newPlanData;\\n\\n        emit SubscriptionPendingChangePlan(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId, newPlanId);\\n    }\\n\\n    function _swapPlan(\\n        uint256 _subscriptionId,\\n        PlanInfo memory _newPlanInfo,\\n        bytes32 _newPlanData\\n    ) internal {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        emit SubscriptionChangedPlan(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId, _newPlanInfo.planId, subscription.discountId);\\n\\n        if (_newPlanInfo.minPeriods > 0) {\\n            subscription.minTermAt = uint32(block.timestamp + (_newPlanInfo.period * _newPlanInfo.minPeriods));\\n        }\\n\\n        subscription.planId = _newPlanInfo.planId;\\n        subscription.planData = _newPlanData;\\n    }\\n\\n    function _upgradePlan(\\n        uint256 _subscriptionId,\\n        PlanInfo memory _currentPlanInfo,\\n        PlanInfo memory _newPlanInfo,\\n        bytes32 _newPlanData\\n    ) internal {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        uint256 newAmount = ((_newPlanInfo.price / _newPlanInfo.period) -\\n            (_currentPlanInfo.price / _currentPlanInfo.period)) *\\n            (subscription.renewAt - uint32(block.timestamp));\\n\\n        subscriptionManager.processSinglePayment(ownerOf(_subscriptionId), subscription.provider,\\n            _subscriptionId, newAmount);\\n\\n        _swapPlan(_subscriptionId, _newPlanInfo, _newPlanData);\\n    }\\n\\n\\n    /************************** ADMIN FUNCTIONS **************************/\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setManager(\\n        address _subscriptionManager\\n    ) external onlyOwner {\\n        subscriptionManager = ICaskSubscriptionManager(_subscriptionManager);\\n    }\\n\\n    function setTrustedForwarder(\\n        address _forwarder\\n    ) external onlyOwner {\\n        _setTrustedForwarder(_forwarder);\\n    }\\n\\n    function _verifyMerkleRoots(\\n        bytes32 providerAddr,\\n        bytes memory _providerSignature,\\n        bytes32 _planMerkleRoot,\\n        bytes32 _discountMerkleRoot\\n    ) internal pure returns (address) {\\n        address recovered = keccak256(abi.encode(_planMerkleRoot, _discountMerkleRoot))\\n            .toEthSignedMessageHash()\\n            .recover(_providerSignature);\\n        require(address(bytes20(providerAddr << 96)) == recovered, \\\"!INVALID(proof)\\\");\\n        return recovered;\\n    }\\n\\n    function _verifyNetworkData(\\n        bytes32 _networkData,\\n        bytes memory _networkSignature\\n    ) internal pure returns (address) {\\n        address network = keccak256(abi.encode(_networkData))\\n            .toEthSignedMessageHash()\\n            .recover(_networkSignature);\\n        NetworkInfo memory networkInfo = _parseNetworkData(_networkData);\\n        require(networkInfo.network == network, \\\"!INVALID(network)\\\");\\n        return network;\\n    }\\n\\n}\",\"keccak256\":\"0xc5e592bd36ed392820b4ca12b006fd1697d6f81606ef0f8468ea8c881345a378\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "consumerSubscriptions": {
        "details": "Maps for consumer to list of subscriptions. "
      },
      "providerSubscriptions": {
        "details": "Maps for provider to list of subscriptions and plans. "
      },
      "subscriptionManager": {
        "details": "contract to manage subscription plan definitions. "
      },
      "subscriptionPlans": {
        "details": "contract to manage subscription plan definitions. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 327,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 330,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2551,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2800,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 72,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 1270,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_name",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1272,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_symbol",
        "offset": 0,
        "slot": "103",
        "type": "t_string_storage"
      },
      {
        "astId": 1276,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_owners",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1280,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_balances",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1284,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1290,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2101,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "__gap",
        "offset": 0,
        "slot": "108",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 205,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_owner",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 319,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 415,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_paused",
        "offset": 0,
        "slot": "202",
        "type": "t_bool"
      },
      {
        "astId": 506,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10709,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "subscriptionManager",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(ICaskSubscriptionManager)7562"
      },
      {
        "astId": 10713,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "subscriptionPlans",
        "offset": 0,
        "slot": "253",
        "type": "t_contract(ICaskSubscriptionPlans)7693"
      },
      {
        "astId": 10716,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "activeSubscriptions",
        "offset": 0,
        "slot": "254",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 10722,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "consumerSubscriptions",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10727,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "subscriptions",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_uint256,t_struct(Subscription)7741_storage)"
      },
      {
        "astId": 10731,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "pendingPlanChanges",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 10737,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "providerSubscriptions",
        "offset": 0,
        "slot": "258",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 10741,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "providerActiveSubscriptionCount",
        "offset": 0,
        "slot": "259",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10747,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "planActiveSubscriptionCount",
        "offset": 0,
        "slot": "260",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_uint256))"
      },
      {
        "astId": 10751,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "idxMap",
        "offset": 0,
        "slot": "261",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICaskSubscriptionManager)7562": {
        "encoding": "inplace",
        "label": "contract ICaskSubscriptionManager",
        "numberOfBytes": "20"
      },
      "t_contract(ICaskSubscriptionPlans)7693": {
        "encoding": "inplace",
        "label": "contract ICaskSubscriptionPlans",
        "numberOfBytes": "20"
      },
      "t_enum(SubscriptionStatus)7706": {
        "encoding": "inplace",
        "label": "enum ICaskSubscriptions.SubscriptionStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(Subscription)7741_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ICaskSubscriptions.Subscription)",
        "numberOfBytes": "32",
        "value": "t_struct(Subscription)7741_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Subscription)7741_storage": {
        "encoding": "inplace",
        "label": "struct ICaskSubscriptions.Subscription",
        "members": [
          {
            "astId": 7715,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "planData",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 7717,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "networkData",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 7719,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "discountId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 7721,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "discountData",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 7723,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "ref",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 7725,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "provider",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 7728,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "status",
            "offset": 20,
            "slot": "5",
            "type": "t_enum(SubscriptionStatus)7706"
          },
          {
            "astId": 7730,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "planId",
            "offset": 21,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 7732,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "createdAt",
            "offset": 25,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 7734,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "renewAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 7736,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "minTermAt",
            "offset": 4,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 7738,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "cancelAt",
            "offset": 8,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 7740,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "cid",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}