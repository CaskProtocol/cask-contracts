{
  "language": "Solidity",
  "sources": {
    "contracts/core/CaskToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\ncontract CaskToken is ERC20, Ownable {\n    using Address for address;\n\n    constructor() ERC20(\"Cask Token\", \"CASK\") {\n    }\n\n    function mint(\n        address _to,\n        uint256 _amount\n    ) external onlyOwner {\n        if(totalSupply() == 0){\n            // one shot, one opportunity. moms spaghetti.\n            _mint(_to,_amount);\n            renounceOwnership();\n            return;\n        }\n    }\n\n}"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC721 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC721Pausable is ERC721, Pausable {\n    /**\n     * @dev See {ERC721-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        require(!paused(), \"ERC721Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be irreversibly burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721Burnable: caller is not owner nor approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../extensions/ERC721Enumerable.sol\";\nimport \"../extensions/ERC721Burnable.sol\";\nimport \"../extensions/ERC721Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev {ERC721} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *  - token ID and URI autogeneration\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC721PresetMinterPauserAutoId is\n    Context,\n    AccessControlEnumerable,\n    ERC721Enumerable,\n    ERC721Burnable,\n    ERC721Pausable\n{\n    using Counters for Counters.Counter;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    Counters.Counter private _tokenIdTracker;\n\n    string private _baseTokenURI;\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * Token URIs will be autogenerated based on `baseURI` and their token IDs.\n     * See {ERC721-tokenURI}.\n     */\n    constructor(\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) ERC721(name, symbol) {\n        _baseTokenURI = baseTokenURI;\n\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    /**\n     * @dev Creates a new token for `to`. Its token ID will be automatically\n     * assigned (and available on the emitted {IERC721-Transfer} event), and the token\n     * URI autogenerated based on the base URI passed at construction.\n     *\n     * See {ERC721-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have minter role to mint\");\n\n        // We cannot just use balanceOf to create the new tokenId because tokens\n        // can be burned (destroyed), so we need a separate counter.\n        _mint(to, _tokenIdTracker.current());\n        _tokenIdTracker.increment();\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC721Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC721PresetMinterPauserAutoId: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(AccessControlEnumerable, ERC721, ERC721Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerable.sol\";\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/subscriptions/CaskSubscriptions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport \"@opengsn/contracts/src/BaseRelayRecipient.sol\";\n\n\nimport \"../interfaces/ICaskSubscriptionManager.sol\";\nimport \"../interfaces/ICaskSubscriptions.sol\";\nimport \"../interfaces/ICaskSubscriptionPlans.sol\";\n\ncontract CaskSubscriptions is\nICaskSubscriptions,\nBaseRelayRecipient,\nERC721Upgradeable,\nOwnableUpgradeable,\nPausableUpgradeable\n{\n    using ECDSA for bytes32;\n\n    /************************** PARAMETERS **************************/\n\n    /** @dev contract to manage subscription plan definitions. */\n    ICaskSubscriptionManager public subscriptionManager;\n\n    /** @dev contract to manage subscription plan definitions. */\n    ICaskSubscriptionPlans public subscriptionPlans;\n\n\n    /************************** STATE **************************/\n\n    /** @dev Maps for consumer to list of subscriptions. */\n    mapping(address => uint256[]) private consumerSubscriptions; // consumer => subscriptionId[]\n    mapping(uint256 => Subscription) private subscriptions; // subscriptionId => Subscription\n    mapping(uint256 => bytes32) private pendingPlanChanges; // subscriptionId => planData\n\n    /** @dev Maps for provider to list of subscriptions and plans. */\n    mapping(address => uint256[]) private providerSubscriptions; // provider => subscriptionId[]\n    mapping(address => uint256) private providerActiveSubscriptionCount; // provider => count\n    mapping(address => mapping(uint32 => uint256)) private planActiveSubscriptionCount; // provider => planId => count\n    mapping(address => mapping(address => mapping(uint32 => uint256))) private consumerProviderPlanActiveCount;\n\n    modifier onlyManager() {\n        require(_msgSender() == address(subscriptionManager), \"!AUTH\");\n        _;\n    }\n\n    modifier onlySubscriber(uint256 _subscriptionId) {\n        require(_msgSender() == ownerOf(_subscriptionId), \"!AUTH\");\n        _;\n    }\n\n    modifier onlySubscriberOrProvider(uint256 _subscriptionId) {\n        require(\n            _msgSender() == ownerOf(_subscriptionId) ||\n            _msgSender() == subscriptions[_subscriptionId].provider,\n            \"!AUTH\"\n        );\n        _;\n    }\n\n    function initialize(\n        address _subscriptionPlans\n    ) public initializer {\n        __Ownable_init();\n        __Pausable_init();\n        __ERC721_init(\"Cask Subscriptions\",\"CASKSUBS\");\n\n        subscriptionPlans = ICaskSubscriptionPlans(_subscriptionPlans);\n    }\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    function versionRecipient() public pure override returns(string memory) { return \"2.2.0\"; }\n\n    function _msgSender() internal view override(ContextUpgradeable, BaseRelayRecipient)\n    returns (address sender) {\n        sender = BaseRelayRecipient._msgSender();\n    }\n\n    function _msgData() internal view override(ContextUpgradeable, BaseRelayRecipient)\n    returns (bytes calldata) {\n        return BaseRelayRecipient._msgData();\n    }\n\n\n    function tokenURI(uint256 _subscriptionId) public view override returns (string memory) {\n        require(_exists(_subscriptionId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        Subscription memory subscription = subscriptions[_subscriptionId];\n\n        return string(abi.encodePacked(\"ipfs://\", subscription.cid));\n    }\n\n    function _beforeTokenTransfer(\n        address _from,\n        address _to,\n        uint256 _subscriptionId\n    ) internal override {\n        if (_from != address(0) && _to != address(0)) { // only non-mint/burn transfers\n            Subscription storage subscription = subscriptions[_subscriptionId];\n\n            PlanInfo memory planInfo = _parsePlanData(subscription.planData);\n            require(planInfo.canTransfer, \"!NOT_TRANSFERRABLE\");\n\n            require(subscription.minTermAt == 0 || uint32(block.timestamp) >= subscription.minTermAt, \"!MIN_TERM\");\n\n            // on transfer, set subscription to cancel at next renewal until new owner accepts subscription\n            subscription.cancelAt = subscription.renewAt;\n            consumerSubscriptions[_to].push(_subscriptionId);\n        }\n    }\n\n    /************************** SUBSCRIPTION METHODS **************************/\n\n    function createNetworkSubscription(\n        uint256 _nonce,\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\n        bytes32 _networkData,\n        uint32 _cancelAt,\n        bytes memory _providerSignature,\n        bytes memory _networkSignature,\n        string calldata _cid\n    ) external override whenNotPaused {\n        uint256 subscriptionId = _createSubscription(_nonce, _planProof, _discountProof, _cancelAt,\n            _providerSignature, _cid);\n\n        _verifyNetworkData(_networkData, _networkSignature);\n\n        Subscription storage subscription = subscriptions[subscriptionId];\n        subscription.networkData = _networkData;\n    }\n\n    function createSubscription(\n        uint256 _nonce,\n        bytes32[] calldata _planProof, // [provider, ref, planData, merkleRoot, merkleProof...]\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\n        uint32 _cancelAt,\n        bytes memory _providerSignature,\n        string calldata _cid\n    ) external override whenNotPaused {\n        _createSubscription(_nonce, _planProof, _discountProof, _cancelAt, _providerSignature, _cid);\n    }\n\n    function attachData(\n        uint256 _subscriptionId,\n        string calldata _dataCid\n    ) external override onlySubscriberOrProvider(_subscriptionId) whenNotPaused {\n        Subscription storage subscription = subscriptions[_subscriptionId];\n        require(subscription.status != SubscriptionStatus.Canceled, \"!CANCELED\");\n        subscription.dataCid = _dataCid;\n    }\n\n    function changeSubscriptionPlan(\n        uint256 _subscriptionId,\n        uint256 _nonce,\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\n        bytes memory _providerSignature,\n        string calldata _cid\n    ) external override onlySubscriber(_subscriptionId) whenNotPaused {\n        _changeSubscriptionPlan(_subscriptionId, _nonce, _planProof, _discountProof, _providerSignature, _cid);\n    }\n\n    function pauseSubscription(\n        uint256 _subscriptionId\n    ) external override onlySubscriberOrProvider(_subscriptionId) whenNotPaused {\n\n        Subscription storage subscription = subscriptions[_subscriptionId];\n\n        require(subscription.status != SubscriptionStatus.Paused &&\n                subscription.status != SubscriptionStatus.PastDue &&\n                subscription.status != SubscriptionStatus.Canceled &&\n                subscription.status != SubscriptionStatus.Trialing, \"!INVALID(status)\");\n\n        require(subscription.minTermAt == 0 || uint32(block.timestamp) >= subscription.minTermAt, \"!MIN_TERM\");\n\n        PlanInfo memory planInfo = _parsePlanData(subscription.planData);\n        require(planInfo.canPause, \"!NOT_PAUSABLE\");\n\n        subscription.status = SubscriptionStatus.PendingPause;\n\n        emit SubscriptionPendingPause(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\n            subscription.ref, subscription.planId);\n    }\n\n    function resumeSubscription(\n        uint256 _subscriptionId\n    ) external override onlySubscriber(_subscriptionId) whenNotPaused {\n\n        Subscription storage subscription = subscriptions[_subscriptionId];\n\n        require(subscription.status == SubscriptionStatus.Paused ||\n                subscription.status == SubscriptionStatus.PendingPause, \"!NOT_PAUSED\");\n\n        emit SubscriptionResumed(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\n            subscription.ref, subscription.planId);\n\n        if (subscription.status == SubscriptionStatus.PendingPause) {\n            subscription.status = SubscriptionStatus.Active;\n            return;\n        }\n\n        PlanInfo memory planInfo = _parsePlanData(subscription.planData);\n\n        require(planInfo.maxActive == 0 ||\n            planActiveSubscriptionCount[subscription.provider][planInfo.planId] < planInfo.maxActive, \"!MAX_ACTIVE\");\n\n        subscription.status = SubscriptionStatus.Active;\n\n        providerActiveSubscriptionCount[subscription.provider] += 1;\n        planActiveSubscriptionCount[subscription.provider][subscription.planId] += 1;\n        consumerProviderPlanActiveCount[ownerOf(_subscriptionId)][subscription.provider][subscription.planId] += 1;\n\n        // if renewal date has already passed, set it to now so consumer is not charged for the time it was paused\n        if (subscription.renewAt < uint32(block.timestamp)) {\n            subscription.renewAt = uint32(block.timestamp);\n        }\n\n        // re-register subscription with manager\n        subscriptionManager.renewSubscription(_subscriptionId);\n\n        // make sure still active if payment was required to resume\n        require(subscription.status == SubscriptionStatus.Active, \"!INSUFFICIENT_FUNDS\");\n    }\n\n    function cancelSubscription(\n        uint256 _subscriptionId,\n        uint32 _cancelAt\n    ) external override onlySubscriberOrProvider(_subscriptionId) whenNotPaused {\n\n        Subscription storage subscription = subscriptions[_subscriptionId];\n\n        require(subscription.status != SubscriptionStatus.Canceled, \"!INVALID(status)\");\n\n        uint32 timestamp = uint32(block.timestamp);\n\n        if(_cancelAt == 0) {\n            require(_msgSender() == ownerOf(_subscriptionId), \"!AUTH\"); // clearing cancel only allowed by subscriber\n            subscription.cancelAt = _cancelAt;\n\n            emit SubscriptionPendingCancel(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\n                subscription.ref, subscription.planId, _cancelAt);\n        } else if(_cancelAt <= timestamp) {\n            require(subscription.minTermAt == 0 || timestamp >= subscription.minTermAt, \"!MIN_TERM\");\n            subscription.renewAt = timestamp;\n            subscription.cancelAt = timestamp;\n            subscriptionManager.renewSubscription(_subscriptionId); // force manager to process cancel\n        } else {\n            require(subscription.minTermAt == 0 || _cancelAt >= subscription.minTermAt, \"!MIN_TERM\");\n            subscription.cancelAt = _cancelAt;\n\n            emit SubscriptionPendingCancel(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\n                subscription.ref, subscription.planId, _cancelAt);\n        }\n    }\n\n    function managerCommand(\n        uint256 _subscriptionId,\n        ManagerCommand _command\n    ) external override onlyManager whenNotPaused {\n\n        Subscription storage subscription = subscriptions[_subscriptionId];\n\n        uint32 timestamp = uint32(block.timestamp);\n\n        if (_command == ManagerCommand.PlanChange) {\n            bytes32 pendingPlanData = pendingPlanChanges[_subscriptionId];\n            require(pendingPlanData > 0, \"!INVALID(pendingPlanData)\");\n\n            PlanInfo memory newPlanInfo = _parsePlanData(pendingPlanData);\n\n            emit SubscriptionChangedPlan(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\n                subscription.ref, subscription.planId, newPlanInfo.planId, subscription.discountId);\n\n            subscription.planId = newPlanInfo.planId;\n            subscription.planData = pendingPlanData;\n\n            if (newPlanInfo.minPeriods > 0) {\n                subscription.minTermAt = timestamp + (newPlanInfo.period * newPlanInfo.minPeriods);\n            }\n\n            delete pendingPlanChanges[_subscriptionId]; // free up memory\n\n        } else if (_command == ManagerCommand.Cancel) {\n            subscription.status = SubscriptionStatus.Canceled;\n\n            providerActiveSubscriptionCount[subscription.provider] -= 1;\n            planActiveSubscriptionCount[subscription.provider][subscription.planId] -= 1;\n            if (consumerProviderPlanActiveCount[ownerOf(_subscriptionId)][subscription.provider][subscription.planId] > 0) {\n                consumerProviderPlanActiveCount[ownerOf(_subscriptionId)][subscription.provider][subscription.planId] -= 1;\n            }\n\n            emit SubscriptionCanceled(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\n                subscription.ref, subscription.planId);\n\n            _burn(_subscriptionId);\n\n        } else if (_command == ManagerCommand.Pause) {\n            subscription.status = SubscriptionStatus.Paused;\n\n            providerActiveSubscriptionCount[subscription.provider] -= 1;\n            planActiveSubscriptionCount[subscription.provider][subscription.planId] -= 1;\n            if (consumerProviderPlanActiveCount[ownerOf(_subscriptionId)][subscription.provider][subscription.planId] > 0) {\n                consumerProviderPlanActiveCount[ownerOf(_subscriptionId)][subscription.provider][subscription.planId] -= 1;\n            }\n\n            emit SubscriptionPaused(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\n                subscription.ref, subscription.planId);\n\n        } else if (_command == ManagerCommand.PastDue) {\n            subscription.status = SubscriptionStatus.PastDue;\n\n            emit SubscriptionPastDue(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\n                subscription.ref, subscription.planId);\n\n        } else if (_command == ManagerCommand.Renew) {\n            PlanInfo memory planInfo = _parsePlanData(subscription.planData);\n\n            if (subscription.status == SubscriptionStatus.Trialing) {\n                emit SubscriptionTrialEnded(ownerOf(_subscriptionId), subscription.provider,\n                    _subscriptionId, subscription.ref, subscription.planId);\n            }\n\n            subscription.renewAt = subscription.renewAt + planInfo.period;\n\n            if (subscription.renewAt > timestamp) {\n                // leave in current status unless subscription is current\n                subscription.status = SubscriptionStatus.Active;\n            }\n\n            emit SubscriptionRenewed(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\n                subscription.ref, subscription.planId);\n\n        } else if (_command == ManagerCommand.ClearDiscount) {\n                    subscription.discountId = 0;\n                    subscription.discountData = 0;\n        }\n\n    }\n\n    function getSubscription(\n        uint256 _subscriptionId\n    ) external override view returns (Subscription memory subscription, address currentOwner) {\n        subscription = subscriptions[_subscriptionId];\n        if (_exists(_subscriptionId)) {\n            currentOwner = ownerOf(_subscriptionId);\n        } else {\n            currentOwner = address(0);\n        }\n    }\n\n    function getConsumerSubscription(\n        address _consumer,\n        uint256 _idx\n    ) external override view returns(uint256) {\n        return consumerSubscriptions[_consumer][_idx];\n    }\n\n    function getActiveSubscriptionCount(\n        address _consumer,\n        address _provider,\n        uint32 _planId\n    ) external override view returns(uint256) {\n        return consumerProviderPlanActiveCount[_consumer][_provider][_planId];\n    }\n\n    function getConsumerSubscriptionCount(\n        address _consumer\n    ) external override view returns (uint256) {\n        return consumerSubscriptions[_consumer].length;\n    }\n\n    function getProviderSubscription(\n        address _provider,\n        uint256 _idx\n    ) external override view returns(uint256) {\n        return providerSubscriptions[_provider][_idx];\n    }\n\n    function getProviderSubscriptionCount(\n        address _provider,\n        bool _includeCanceled,\n        uint32 _planId\n    ) external override view returns (uint256) {\n        if (_includeCanceled) {\n            return providerSubscriptions[_provider].length;\n        } else {\n            if (_planId > 0) {\n                return planActiveSubscriptionCount[_provider][_planId];\n            } else {\n                return providerActiveSubscriptionCount[_provider];\n            }\n        }\n    }\n\n    function getPendingPlanChange(\n        uint256 _subscriptionId\n    ) external override view returns (bytes32) {\n        return pendingPlanChanges[_subscriptionId];\n    }\n\n    function _createSubscription(\n        uint256 _nonce,\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\n        uint32 _cancelAt,\n        bytes memory _providerSignature,\n        string calldata _cid\n    ) internal returns(uint256) {\n        require(_planProof.length >= 4, \"!INVALID(planProofLen)\");\n\n        // confirms merkleroots are in fact the ones provider committed to\n        address provider;\n        if (_discountProof.length >= 3) {\n            provider = _verifyMerkleRoots(_planProof[0], _nonce, _planProof[3], _discountProof[2], _providerSignature);\n        } else {\n            provider = _verifyMerkleRoots(_planProof[0], _nonce, _planProof[3], 0, _providerSignature);\n        }\n\n        // confirms plan data is included in merkle root\n        require(_verifyPlanProof(_planProof), \"!INVALID(planProof)\");\n\n        // decode planData bytes32 into PlanInfo\n        PlanInfo memory planInfo = _parsePlanData(_planProof[2]);\n\n        // generate subscriptionId from plan info and ref\n        uint256 subscriptionId = _generateSubscriptionId(_planProof[0], _planProof[1], _planProof[2]);\n\n        require(planInfo.maxActive == 0 ||\n            planActiveSubscriptionCount[provider][planInfo.planId] < planInfo.maxActive, \"!MAX_ACTIVE\");\n        require(subscriptionPlans.getPlanStatus(provider, planInfo.planId) ==\n            ICaskSubscriptionPlans.PlanStatus.Enabled, \"!NOT_ENABLED\");\n\n        _safeMint(_msgSender(), subscriptionId);\n\n        Subscription storage subscription = subscriptions[subscriptionId];\n\n        uint32 timestamp = uint32(block.timestamp);\n\n        subscription.provider = provider;\n        subscription.planId = planInfo.planId;\n        subscription.ref = _planProof[1];\n        subscription.planData = _planProof[2];\n        subscription.cancelAt = _cancelAt;\n        subscription.cid = _cid;\n        subscription.createdAt = timestamp;\n\n        if (planInfo.minPeriods > 0) {\n            subscription.minTermAt = timestamp + (planInfo.period * planInfo.minPeriods);\n        }\n\n        if (planInfo.price == 0) {\n            // free plan, never renew to save gas\n            subscription.status = SubscriptionStatus.Active;\n            subscription.renewAt = 0;\n        } else if (planInfo.freeTrial > 0) {\n            // if trial period, charge will happen after trial is over\n            subscription.status = SubscriptionStatus.Trialing;\n            subscription.renewAt = timestamp + planInfo.freeTrial;\n        } else {\n            // if no trial period, charge now\n            subscription.status = SubscriptionStatus.Active;\n            subscription.renewAt = timestamp;\n        }\n\n        consumerSubscriptions[_msgSender()].push(subscriptionId);\n        providerSubscriptions[provider].push(subscriptionId);\n        providerActiveSubscriptionCount[provider] += 1;\n        planActiveSubscriptionCount[provider][planInfo.planId] += 1;\n        consumerProviderPlanActiveCount[_msgSender()][provider][planInfo.planId] += 1;\n\n        (\n        subscription.discountId,\n        subscription.discountData\n        ) = _verifyDiscountProof(ownerOf(subscriptionId), subscription.provider, planInfo.planId, _discountProof);\n\n        subscriptionManager.renewSubscription(subscriptionId); // registers subscription with manager\n\n        require(subscription.status == SubscriptionStatus.Active ||\n                subscription.status == SubscriptionStatus.Trialing, \"!UNPROCESSABLE\");\n\n        emit SubscriptionCreated(ownerOf(subscriptionId), subscription.provider, subscriptionId,\n            subscription.ref, subscription.planId, subscription.discountId);\n\n        return subscriptionId;\n    }\n\n    function _changeSubscriptionPlan(\n        uint256 _subscriptionId,\n        uint256 _nonce,\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\n        bytes memory _providerSignature,\n        string calldata _cid\n    ) internal {\n        require(_planProof.length >= 4, \"!INVALID(planProof)\");\n\n        Subscription storage subscription = subscriptions[_subscriptionId];\n\n        require(subscription.renewAt == 0 || subscription.renewAt > uint32(block.timestamp), \"!NEED_RENEWAL\");\n        require(subscription.status == SubscriptionStatus.Active ||\n            subscription.status == SubscriptionStatus.Trialing, \"!INVALID(status)\");\n\n        // confirms merkleroots are in fact the ones provider committed to\n        address provider;\n        if (_discountProof.length >= 3) {\n            provider = _verifyMerkleRoots(_planProof[0], _nonce, _planProof[3], _discountProof[2], _providerSignature);\n        } else {\n            provider = _verifyMerkleRoots(_planProof[0], _nonce, _planProof[3], 0, _providerSignature);\n        }\n\n        // confirms plan data is included in merkle root\n        require(_verifyPlanProof(_planProof), \"!INVALID(planProof)\");\n\n        // decode planData bytes32 into PlanInfo\n        PlanInfo memory newPlanInfo = _parsePlanData(_planProof[2]);\n\n        require(subscription.provider == provider, \"!INVALID(provider)\");\n\n        subscription.cid = _cid;\n\n        if (subscription.discountId == 0 && _discountProof.length >= 3 && _discountProof[0] > 0) {\n            (\n            subscription.discountId,\n            subscription.discountData\n            ) = _verifyDiscountProof(ownerOf(_subscriptionId), subscription.provider,\n                newPlanInfo.planId, _discountProof);\n        }\n\n        if (subscription.planId != newPlanInfo.planId) {\n            require(subscriptionPlans.getPlanStatus(provider, newPlanInfo.planId) ==\n                ICaskSubscriptionPlans.PlanStatus.Enabled, \"!NOT_ENABLED\");\n            _performPlanChange(_subscriptionId, newPlanInfo, _planProof[2]);\n        }\n    }\n\n    function _performPlanChange(\n        uint256 _subscriptionId,\n        PlanInfo memory _newPlanInfo,\n        bytes32 _planData\n    ) internal {\n        Subscription storage subscription = subscriptions[_subscriptionId];\n\n        PlanInfo memory currentPlanInfo = _parsePlanData(subscription.planData);\n\n        if (subscription.status == SubscriptionStatus.Trialing) { // still in trial, just change now\n\n            // adjust renewal based on new plan trial length\n            subscription.renewAt = subscription.renewAt - currentPlanInfo.freeTrial + _newPlanInfo.freeTrial;\n\n            // if new plan trial length would have caused trial to already be over, end trial as of now\n            // subscription will be charged and converted to active during next keeper run\n            if (subscription.renewAt <= uint32(block.timestamp)) {\n                subscription.renewAt = uint32(block.timestamp);\n            }\n\n            _swapPlan(_subscriptionId, _newPlanInfo, _planData);\n\n        } else if (_newPlanInfo.price / _newPlanInfo.period ==\n            currentPlanInfo.price / currentPlanInfo.period)\n        { // straight swap\n\n            _swapPlan(_subscriptionId, _newPlanInfo, _planData);\n\n        } else if (_newPlanInfo.price / _newPlanInfo.period >\n            currentPlanInfo.price / currentPlanInfo.period)\n        { // upgrade\n\n            _upgradePlan(_subscriptionId, currentPlanInfo, _newPlanInfo, _planData);\n\n        } else { // downgrade - to take affect at next renewal\n\n            _scheduleSwapPlan(_subscriptionId, _newPlanInfo.planId, _planData);\n        }\n    }\n\n    function _verifyDiscountProof(\n        address _consumer,\n        address _provider,\n        uint32 _planId,\n        bytes32[] calldata _discountProof // [discountValidator, discountData, merkleRoot, merkleProof...]\n    ) internal returns(bytes32, bytes32) {\n        if (_discountProof[0] > 0) {\n            bytes32 discountId = subscriptionPlans.verifyAndConsumeDiscount(_consumer, _provider,\n                _planId, _discountProof);\n            if (discountId > 0)\n            {\n                return (discountId, _discountProof[1]);\n            }\n        }\n        return (0,0);\n    }\n\n    function _verifyPlanProof(\n        bytes32[] calldata _planProof // [provider, ref, planData, merkleRoot, merkleProof...]\n    ) internal view returns(bool) {\n        return subscriptionPlans.verifyPlan(_planProof[2], _planProof[3], _planProof[4:]);\n    }\n\n    function _generateSubscriptionId(\n        bytes32 _providerAddr,\n        bytes32 _ref,\n        bytes32 _planData\n    ) internal view returns(uint256) {\n        return uint256(keccak256(abi.encodePacked(_msgSender(), _providerAddr,\n            _planData, _ref, block.number, block.timestamp)));\n    }\n\n    function _parsePlanData(\n        bytes32 _planData\n    ) internal pure returns(PlanInfo memory) {\n        bytes1 options = bytes1(_planData << 248);\n        return PlanInfo({\n            price: uint256(_planData >> 160),\n            planId: uint32(bytes4(_planData << 96)),\n            period: uint32(bytes4(_planData << 128)),\n            freeTrial: uint32(bytes4(_planData << 160)),\n            maxActive: uint32(bytes4(_planData << 192)),\n            minPeriods: uint16(bytes2(_planData << 224)),\n            gracePeriod: uint8(bytes1(_planData << 240)),\n            canPause: options & 0x01 == 0x01,\n            canTransfer: options & 0x02 == 0x02\n        });\n    }\n\n    function _parseNetworkData(\n        bytes32 _networkData\n    ) internal pure returns(NetworkInfo memory) {\n        return NetworkInfo({\n            network: address(bytes20(_networkData)),\n            feeBps: uint16(bytes2(_networkData << 160))\n        });\n    }\n\n    function _scheduleSwapPlan(\n        uint256 _subscriptionId,\n        uint32 newPlanId,\n        bytes32 _newPlanData\n    ) internal {\n        Subscription storage subscription = subscriptions[_subscriptionId];\n\n        pendingPlanChanges[_subscriptionId] = _newPlanData;\n\n        emit SubscriptionPendingChangePlan(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\n            subscription.ref, subscription.planId, newPlanId);\n    }\n\n    function _swapPlan(\n        uint256 _subscriptionId,\n        PlanInfo memory _newPlanInfo,\n        bytes32 _newPlanData\n    ) internal {\n        Subscription storage subscription = subscriptions[_subscriptionId];\n\n        emit SubscriptionChangedPlan(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\n            subscription.ref, subscription.planId, _newPlanInfo.planId, subscription.discountId);\n\n        if (_newPlanInfo.minPeriods > 0) {\n            subscription.minTermAt = uint32(block.timestamp + (_newPlanInfo.period * _newPlanInfo.minPeriods));\n        }\n\n        subscription.planId = _newPlanInfo.planId;\n        subscription.planData = _newPlanData;\n    }\n\n    function _upgradePlan(\n        uint256 _subscriptionId,\n        PlanInfo memory _currentPlanInfo,\n        PlanInfo memory _newPlanInfo,\n        bytes32 _newPlanData\n    ) internal {\n        Subscription storage subscription = subscriptions[_subscriptionId];\n\n        _swapPlan(_subscriptionId, _newPlanInfo, _newPlanData);\n\n        if (_currentPlanInfo.price == 0 && _newPlanInfo.price != 0) {\n            // coming from free plan, no prorate\n            subscription.renewAt = uint32(block.timestamp);\n            subscriptionManager.renewSubscription(_subscriptionId); // register paid plan with manager\n            require(subscription.status == SubscriptionStatus.Active, \"!UNPROCESSABLE\"); // make sure payment processed\n        } else {\n            // prorated payment now - next renewal will charge new price\n            uint256 newAmount = ((_newPlanInfo.price / _newPlanInfo.period) -\n                (_currentPlanInfo.price / _currentPlanInfo.period)) *\n                (subscription.renewAt - uint32(block.timestamp));\n            require(subscriptionManager.processSinglePayment(ownerOf(_subscriptionId), subscription.provider,\n                _subscriptionId, newAmount), \"!UNPROCESSABLE\");\n        }\n\n    }\n\n\n    /************************** ADMIN FUNCTIONS **************************/\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function setManager(\n        address _subscriptionManager\n    ) external onlyOwner {\n        subscriptionManager = ICaskSubscriptionManager(_subscriptionManager);\n    }\n\n    function setTrustedForwarder(\n        address _forwarder\n    ) external onlyOwner {\n        _setTrustedForwarder(_forwarder);\n    }\n\n    function _verifyMerkleRoots(\n        bytes32 providerAddr,\n        uint256 _nonce,\n        bytes32 _planMerkleRoot,\n        bytes32 _discountMerkleRoot,\n        bytes memory _providerSignature\n    ) internal view returns (address) {\n        address recovered = keccak256(abi.encode(_nonce, _planMerkleRoot, _discountMerkleRoot))\n            .toEthSignedMessageHash()\n            .recover(_providerSignature);\n        require(address(bytes20(providerAddr << 96)) == recovered, \"!INVALID(proof)\");\n        require(_nonce == subscriptionPlans.getProviderProfile(recovered).nonce, \"!PROVIDER_NONCE\");\n        return recovered;\n    }\n\n    function _verifyNetworkData(\n        bytes32 _networkData,\n        bytes memory _networkSignature\n    ) internal pure returns (address) {\n        address network = keccak256(abi.encode(_networkData))\n            .toEthSignedMessageHash()\n            .recover(_networkSignature);\n        NetworkInfo memory networkInfo = _parseNetworkData(_networkData);\n        require(networkInfo.network == network, \"!INVALID(network)\");\n        return network;\n    }\n\n}"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721Upgradeable.sol\";\nimport \"./IERC721ReceiverUpgradeable.sol\";\nimport \"./extensions/IERC721MetadataUpgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../utils/StringsUpgradeable.sol\";\nimport \"../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\n    using AddressUpgradeable for address;\n    using StringsUpgradeable for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __ERC721_init_unchained(name_, symbol_);\n    }\n\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n    uint256[44] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@opengsn/contracts/src/BaseRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable no-inline-assembly\npragma solidity >=0.6.9;\n\nimport \"./interfaces/IRelayRecipient.sol\";\n\n/**\n * A base contract to be inherited by any contract that want to receive relayed transactions\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\n */\nabstract contract BaseRelayRecipient is IRelayRecipient {\n\n    /*\n     * Forwarder singleton we accept calls from\n     */\n    address private _trustedForwarder;\n\n    function trustedForwarder() public virtual view returns (address){\n        return _trustedForwarder;\n    }\n\n    function _setTrustedForwarder(address _forwarder) internal {\n        _trustedForwarder = _forwarder;\n    }\n\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, return the original sender.\n     * otherwise, return `msg.sender`.\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal override virtual view returns (address ret) {\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\n            }\n        } else {\n            ret = msg.sender;\n        }\n    }\n\n    /**\n     * return the msg.data of this call.\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\n     * of the msg.data - so this method will strip those 20 bytes off.\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\n     * should be used in the contract instead of msg.data, where this difference matters.\n     */\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n            return msg.data[0:msg.data.length-20];\n        } else {\n            return msg.data;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ICaskSubscriptionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICaskSubscriptionManager {\n\n    enum CheckType {\n        None,\n        Active,\n        PastDue\n    }\n\n    function queueItem(CheckType _checkType, uint32 _bucket, uint256 _idx) external view returns(uint256);\n\n    function queueSize(CheckType _checkType, uint32 _bucket) external view returns(uint256);\n\n    function queuePosition(CheckType _checkType) external view returns(uint32);\n\n    function processSinglePayment(address _consumer, address _provider,\n        uint256 _subscriptionId, uint256 _value) external returns(bool);\n\n    function renewSubscription(uint256 _subscriptionId) external;\n\n    /** @dev Emitted when the keeper job performs renewals. */\n    event SubscriptionManagerReport(uint256 limit, uint256 renewals, uint256 depth, CheckType checkType,\n        uint256 queueRemaining, uint32 currentBucket);\n\n    /** @dev Emitted when manager parameters are changed. */\n    event SetParameters();\n}\n"
    },
    "contracts/interfaces/ICaskSubscriptions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\";\nimport \"./ICaskSubscriptionManager.sol\";\n\ninterface ICaskSubscriptions is IERC721Upgradeable {\n\n    enum SubscriptionStatus {\n        None,\n        Trialing,\n        Active,\n        Paused,\n        Canceled,\n        PastDue,\n        PendingPause\n    }\n\n    enum ManagerCommand {\n        None,\n        PlanChange,\n        Cancel,\n        PastDue,\n        Renew,\n        ClearDiscount,\n        Pause\n    }\n\n    struct Subscription {\n        bytes32 planData;\n        bytes32 networkData;\n        bytes32 discountId;\n        bytes32 discountData;\n        bytes32 ref;\n        address provider;\n        SubscriptionStatus status;\n        uint32 planId;\n        uint32 createdAt;\n        uint32 renewAt;\n        uint32 minTermAt;\n        uint32 cancelAt;\n        string cid;\n        string dataCid;\n    }\n\n    struct PlanInfo {\n        uint256 price;\n        uint32 planId;\n        uint32 period;\n        uint32 freeTrial;\n        uint32 maxActive;\n        uint16 minPeriods;\n        uint8 gracePeriod;\n        bool canPause;\n        bool canTransfer;\n    }\n\n    struct NetworkInfo {\n        address network;\n        uint16 feeBps;\n    }\n\n    /************************** SUBSCRIPTION INSTANCE METHODS **************************/\n\n    function createSubscription(\n        uint256 _nonce,\n        bytes32[] calldata _planProof,\n        bytes32[] calldata _discountProof,\n        uint32 _cancelAt,\n        bytes memory _providerSignature,\n        string calldata _cid\n    ) external;\n\n    function createNetworkSubscription(\n        uint256 _nonce,\n        bytes32[] calldata _planProof,\n        bytes32[] calldata _discountProof,\n        bytes32 _networkData,\n        uint32 _cancelAt,\n        bytes memory _providerSignature,\n        bytes memory _networkSignature,\n        string calldata _cid\n    ) external;\n\n    function changeSubscriptionPlan(\n        uint256 _subscriptionId,\n        uint256 _nonce,\n        bytes32[] calldata _planProof,\n        bytes32[] calldata _discountProof,\n        bytes memory _providerSignature,\n        string calldata _cid\n    ) external;\n\n    function attachData(uint256 _subscriptionId, string calldata _dataCid) external;\n\n    function pauseSubscription(uint256 _subscriptionId) external;\n\n    function resumeSubscription(uint256 _subscriptionId) external;\n\n    function cancelSubscription(uint256 _subscriptionId, uint32 _cancelAt) external;\n\n    function managerCommand(uint256 _subscriptionId, ManagerCommand _command) external;\n\n    function getSubscription(uint256 _subscriptionId) external view returns\n        (Subscription memory subscription, address currentOwner);\n\n    function getConsumerSubscription(address _consumer, uint256 _idx) external view returns(uint256);\n\n    function getConsumerSubscriptionCount(address _consumer) external view returns (uint256);\n\n    function getProviderSubscription(address _provider, uint256 _idx) external view returns(uint256);\n\n    function getProviderSubscriptionCount(address _provider, bool _includeCanceled, uint32 _planId) external view returns (uint256);\n\n    function getActiveSubscriptionCount(address _consumer, address _provider, uint32 _planId) external view returns(uint256);\n\n    function getPendingPlanChange(uint256 _subscriptionId) external view returns (bytes32);\n\n\n    /************************** SUBSCRIPTION EVENTS **************************/\n\n    /** @dev Emitted when `consumer` subscribes to `provider` plan `planId` */\n    event SubscriptionCreated(address indexed consumer, address indexed provider,\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId, bytes32 discountId);\n\n    /** @dev Emitted when `consumer` changes the plan to `provider` on subscription `subscriptionId` */\n    event SubscriptionChangedPlan(address indexed consumer, address indexed provider,\n        uint256 indexed subscriptionId, bytes32 ref, uint32 prevPlanId, uint32 planId, bytes32 discountId);\n\n    /** @dev Emitted when `consumer` changes the plan to `provider` on subscription `subscriptionId` */\n    event SubscriptionPendingChangePlan(address indexed consumer, address indexed provider,\n        uint256 indexed subscriptionId, bytes32 ref, uint32 prevPlanId, uint32 planId);\n\n    /** @dev Emitted when `consumer` initiates a pause of the subscription to `provider` on subscription `subscriptionId` */\n    event SubscriptionPendingPause(address indexed consumer, address indexed provider,\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\n\n    /** @dev Emitted when a pending pause subscription attempts to renew but is paused */\n    event SubscriptionPaused(address indexed consumer, address indexed provider,\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\n\n    /** @dev Emitted when `consumer` resumes the subscription to `provider` on subscription `subscriptionId` */\n    event SubscriptionResumed(address indexed consumer, address indexed provider,\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\n\n    /** @dev Emitted when `consumer` unsubscribes to `provider` on subscription `subscriptionId` */\n    event SubscriptionPendingCancel(address indexed consumer, address indexed provider,\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId, uint32 cancelAt);\n\n    /** @dev Emitted when `consumer` has canceled and the current period is over on subscription `subscriptionId` */\n    event SubscriptionCanceled(address indexed consumer, address indexed provider,\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\n\n    /** @dev Emitted when `consumer` successfully renews to `provider` on subscription `subscriptionId` */\n    event SubscriptionRenewed(address indexed consumer, address indexed provider,\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\n\n    /** @dev Emitted when `consumer` subscription trial ends and goes active to `provider`\n     * on subscription `subscriptionId`\n     */\n    event SubscriptionTrialEnded(address indexed consumer, address indexed provider,\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\n\n    /** @dev Emitted when `consumer` renewal fails to `provider` on subscription `subscriptionId` */\n    event SubscriptionPastDue(address indexed consumer, address indexed provider,\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\n\n}\n\n"
    },
    "contracts/interfaces/ICaskSubscriptionPlans.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICaskSubscriptionPlans {\n\n    enum PlanStatus {\n        Enabled,\n        Disabled,\n        EndOfLife\n    }\n\n    enum DiscountType {\n        None,\n        Code,\n        ERC20\n    }\n\n    struct Discount {\n        uint256 value;\n        uint32 validAfter;\n        uint32 expiresAt;\n        uint32 maxRedemptions;\n        uint32 planId;\n        uint16 applyPeriods;\n        DiscountType discountType;\n        bool isFixed;\n    }\n\n    struct Provider {\n        address paymentAddress;\n        uint256 nonce;\n        string cid;\n    }\n\n    function setProviderProfile(address _paymentAddress, string calldata _cid, uint256 _nonce) external;\n\n    function getProviderProfile(address _provider) external view returns(Provider memory);\n\n    function getPlanStatus(address _provider, uint32 _planId) external view returns (PlanStatus);\n\n    function getPlanEOL(address _provider, uint32 _planId) external view returns (uint32);\n\n    function disablePlan(uint32 _planId) external;\n\n    function enablePlan(uint32 _planId) external;\n\n    function retirePlan(uint32 _planId, uint32 _retireAt) external;\n\n    function verifyPlan(bytes32 _planData, bytes32 _merkleRoot,\n        bytes32[] calldata _merkleProof) external view returns(bool);\n\n    function getDiscountRedemptions(address _provider, uint32 _planId,\n        bytes32 _discountId) external view returns(uint256);\n\n    function verifyAndConsumeDiscount(address _consumer, address _provider, uint32 _planId,\n        bytes32[] calldata _discountProof) external returns(bytes32);\n\n    function verifyDiscount(address _consumer, address _provider, uint32 _planId,\n        bytes32[] calldata _discountProof) external returns(bytes32);\n\n    function erc20DiscountCurrentlyApplies(address _consumer, bytes32 _discountValidator) external returns(bool);\n\n\n    /** @dev Emitted when `provider` sets their profile info */\n    event ProviderSetProfile(address indexed provider, address indexed paymentAddress, uint256 nonce, string cid);\n\n    /** @dev Emitted when `provider` disables a subscription plan */\n    event PlanDisabled(address indexed provider, uint32 indexed planId);\n\n    /** @dev Emitted when `provider` enables a subscription plan */\n    event PlanEnabled(address indexed provider, uint32 indexed planId);\n\n    /** @dev Emitted when `provider` end-of-lifes a subscription plan */\n    event PlanRetired(address indexed provider, uint32 indexed planId, uint32 retireAt);\n\n}"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Upgradeable.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@opengsn/contracts/src/interfaces/IRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\n/**\n * a contract must implement this interface in order to support relayed transaction.\n * It is better to inherit the BaseRelayRecipient as its implementation.\n */\nabstract contract IRelayRecipient {\n\n    /**\n     * return if the forwarder is trusted to forward relayed transactions to us.\n     * the forwarder is required to verify the sender's signature, and verify\n     * the call is not a replay.\n     */\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n     * of the msg.data.\n     * otherwise, return `msg.sender`\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal virtual view returns (address);\n\n    /**\n     * return the msg.data of this call.\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\n     * of the msg.data - so this method will strip those 20 bytes off.\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\n     * should be used in the contract instead of msg.data, where this difference matters.\n     */\n    function _msgData() internal virtual view returns (bytes calldata);\n\n    function versionRecipient() external virtual view returns (string memory);\n}\n"
    },
    "contracts/subscriptions/CaskSubscriptionPlans.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport \"@opengsn/contracts/src/BaseRelayRecipient.sol\";\n\n\nimport \"../interfaces/ICaskSubscriptionPlans.sol\";\n\ncontract CaskSubscriptionPlans is\nICaskSubscriptionPlans,\nBaseRelayRecipient,\nOwnableUpgradeable,\nPausableUpgradeable\n{\n    /** @dev Address of subscription manager. */\n    address public subscriptionManager;\n\n    /** @dev Map for provider to profile info. */\n    mapping(address => Provider) internal providerProfiles;\n\n    /** @dev Map for current plan status. */\n    // provider->planId => Plan\n    mapping(address => mapping(uint32 => PlanStatus)) internal planStatus;\n    mapping(address => mapping(uint32 => uint32)) internal planEol;\n\n    /** @dev Maps for discounts. */\n    mapping(address => mapping(uint32 => mapping(bytes32 => uint256))) internal discountRedemptions;\n\n    /** @dev Address of subscriptions contract. */\n    address public subscriptions;\n\n    modifier onlyManager() {\n        require(_msgSender() == subscriptionManager, \"!AUTH\");\n        _;\n    }\n\n    modifier onlySubscriptions() {\n        require(_msgSender() == subscriptions, \"!AUTH\");\n        _;\n    }\n\n    function initialize() public initializer {\n        __Ownable_init();\n        __Pausable_init();\n\n        subscriptions = address(0);\n    }\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    function versionRecipient() public pure override returns(string memory) { return \"2.2.0\"; }\n\n    function _msgSender() internal view override(ContextUpgradeable, BaseRelayRecipient)\n    returns (address sender) {\n        sender = BaseRelayRecipient._msgSender();\n    }\n\n    function _msgData() internal view override(ContextUpgradeable, BaseRelayRecipient)\n    returns (bytes calldata) {\n        return BaseRelayRecipient._msgData();\n    }\n\n    function setProviderProfile(\n        address _paymentAddress,\n        string calldata _cid,\n        uint256 _nonce\n    ) external override {\n        Provider storage profile = providerProfiles[_msgSender()];\n        if (profile.nonce > 0) {\n            require(_nonce > profile.nonce, \"!NONCE\");\n        }\n        profile.paymentAddress = _paymentAddress;\n        profile.cid = _cid;\n        profile.nonce = _nonce;\n\n        emit ProviderSetProfile(_msgSender(), _paymentAddress, _nonce, _cid);\n    }\n\n    function getProviderProfile(\n        address _provider\n    ) external override view returns(Provider memory) {\n        return providerProfiles[_provider];\n    }\n\n    function verifyPlan(\n        bytes32 _planData,\n        bytes32 _merkleRoot,\n        bytes32[] calldata _merkleProof\n    ) external override pure returns(bool) {\n        return MerkleProof.verify(_merkleProof, _merkleRoot, keccak256(abi.encode(_planData)));\n    }\n\n    function getDiscountRedemptions(\n        address _provider,\n        uint32 _planId,\n        bytes32 _discountId\n    ) external view override returns(uint256) {\n        return discountRedemptions[_provider][_planId][_discountId];\n    }\n\n    function verifyDiscount(\n        address _consumer,\n        address _provider,\n        uint32 _planId,\n        bytes32[] calldata _discountProof // [discountValidator, discountData, merkleRoot, merkleProof...]\n    ) public view override returns(bytes32) {\n        if (_discountProof.length < 3 || _discountProof[0] == 0) {\n            return 0;\n        }\n\n        DiscountType discountType = _parseDiscountType(_discountProof[1]);\n\n        if (discountType == DiscountType.Code) {\n            return _verifyCodeDiscount(_provider, _planId, _discountProof);\n        } else if (discountType == DiscountType.ERC20) {\n            return _verifyErc20Discount(_consumer, _provider, _planId, _discountProof);\n        } else {\n            return 0;\n        }\n    }\n\n    function verifyAndConsumeDiscount(\n        address _consumer,\n        address _provider,\n        uint32 _planId,\n        bytes32[] calldata _discountProof // [discountValidator, discountData, merkleRoot, merkleProof...]\n    ) external override onlySubscriptions returns(bytes32) {\n        bytes32 discountId = verifyDiscount(_consumer, _provider, _planId, _discountProof);\n        if (discountId > 0) {\n            Discount memory discountInfo = _parseDiscountData(_discountProof[1]);\n            discountRedemptions[_provider][discountInfo.planId][discountId] += 1;\n        }\n        return discountId;\n    }\n\n    function _verifyCodeDiscount(\n        address _provider,\n        uint32 _planId,\n        bytes32[] calldata _discountProof // [discountValidator, discountData, merkleRoot, merkleProof...]\n    ) internal view returns(bytes32) {\n        if (_discountProof.length < 3 || _discountProof[0] == 0) {\n            return 0;\n        }\n\n        bytes32 discountId = keccak256(abi.encode(_discountProof[0]));\n\n        if (_verifyDiscountProof(discountId, _discountProof) &&\n            _verifyDiscountData(discountId, _provider, _planId, _discountProof[1]))\n        {\n            return discountId;\n        }\n        return 0;\n    }\n\n    function _verifyErc20Discount(\n        address _consumer,\n        address _provider,\n        uint32 _planId,\n        bytes32[] calldata _discountProof // [discountValidator, discountData, merkleRoot, merkleProof...]\n    ) internal view returns(bytes32) {\n        if (_discountProof.length < 3 || _discountProof[0] == 0) {\n            return 0;\n        }\n\n        bytes32 discountId = _discountProof[0];\n\n        if (_verifyDiscountProof(discountId, _discountProof) &&\n            erc20DiscountCurrentlyApplies(_consumer, discountId) &&\n            _verifyDiscountData(discountId, _provider, _planId, _discountProof[1]))\n        {\n            return discountId;\n        }\n        return 0;\n    }\n\n    function _verifyDiscountProof(\n        bytes32 _discountId,\n        bytes32[] calldata _discountProof // [discountValidator, discountData, merkleRoot, merkleProof...]\n    ) internal pure returns(bool) {\n        if (_discountProof.length < 3 || _discountProof[0] == 0) {\n            return false;\n        }\n\n        // its possible to have an empty merkleProof if the merkleRoot IS the leaf\n        bytes32[] memory merkleProof = new bytes32[](0);\n        if (_discountProof.length >= 4) {\n            merkleProof = _discountProof[3:];\n        }\n\n        return MerkleProof.verify(merkleProof, _discountProof[2],\n            keccak256(abi.encode(_discountId, _discountProof[1])));\n    }\n\n    function _verifyDiscountData(\n        bytes32 _discountId,\n        address _provider,\n        uint32 _planId,\n        bytes32 _discountData\n    ) internal view returns(bool) {\n        Discount memory discountInfo = _parseDiscountData(_discountData);\n\n        return\n            (discountInfo.planId == 0 || discountInfo.planId == _planId) &&\n            (discountInfo.maxRedemptions == 0 ||\n                discountRedemptions[_provider][discountInfo.planId][_discountId] < discountInfo.maxRedemptions) &&\n            (discountInfo.validAfter == 0 || discountInfo.validAfter <= uint32(block.timestamp)) &&\n            (discountInfo.expiresAt == 0 || discountInfo.expiresAt > uint32(block.timestamp));\n    }\n\n    function erc20DiscountCurrentlyApplies(\n        address _consumer,\n        bytes32 _discountValidator\n    ) public view override returns(bool) {\n        address token = address(bytes20(_discountValidator));\n        uint8 decimals = uint8(bytes1(_discountValidator << 160));\n\n        if (decimals == 255) {\n            try IERC20Metadata(token).decimals() returns (uint8 detectedDecimals) {\n                decimals = detectedDecimals;\n            } catch (bytes memory) {\n                return false;\n            }\n        }\n\n        try IERC20Metadata(token).balanceOf(_consumer) returns (uint256 balance) {\n            if (decimals > 0) {\n                balance = balance / uint256(10 ** decimals);\n            }\n            uint64 minBalance = uint64(bytes8(_discountValidator << 192));\n\n            return balance >= minBalance;\n        } catch (bytes memory) {\n            return false;\n        }\n    }\n\n    function getPlanStatus(\n        address _provider,\n        uint32 _planId\n    ) external view returns (PlanStatus) {\n        return planStatus[_provider][_planId];\n    }\n\n    function getPlanEOL(\n        address _provider,\n        uint32 _planId\n    ) external view returns (uint32) {\n        return planEol[_provider][_planId];\n    }\n\n    function disablePlan(\n        uint32 _planId\n    ) external override {\n        require(planStatus[_msgSender()][_planId] == PlanStatus.Enabled, \"!NOT_ENABLED\");\n\n        planStatus[_msgSender()][_planId] = PlanStatus.Disabled;\n\n        emit PlanDisabled(_msgSender(), _planId);\n    }\n\n    function enablePlan(\n        uint32 _planId\n    ) external override {\n        require(planStatus[_msgSender()][_planId] == PlanStatus.Disabled, \"!NOT_DISABLED\");\n\n        planStatus[_msgSender()][_planId] = PlanStatus.Enabled;\n\n        emit PlanEnabled(_msgSender(), _planId);\n    }\n\n    function retirePlan(\n        uint32 _planId,\n        uint32 _retireAt\n    ) external override {\n        planStatus[_msgSender()][_planId] = PlanStatus.EndOfLife;\n        planEol[_msgSender()][_planId] = _retireAt;\n\n        emit PlanRetired(_msgSender(), _planId, _retireAt);\n    }\n\n    function _parseDiscountType(\n        bytes32 _discountData\n    ) internal pure returns(DiscountType) {\n        return DiscountType(uint8(bytes1(_discountData << 248)));\n    }\n\n    function _parseDiscountData(\n        bytes32 _discountData\n    ) internal pure returns(Discount memory) {\n        bytes1 options = bytes1(_discountData << 240);\n        return Discount({\n        value: uint256(_discountData >> 160),\n        validAfter: uint32(bytes4(_discountData << 96)),\n        expiresAt: uint32(bytes4(_discountData << 128)),\n        maxRedemptions: uint32(bytes4(_discountData << 160)),\n        planId: uint32(bytes4(_discountData << 192)),\n        applyPeriods: uint16(bytes2(_discountData << 224)),\n        discountType: DiscountType(uint8(bytes1(_discountData << 248))),\n        isFixed: options & 0x01 == 0x01\n        });\n    }\n\n\n    /************************** ADMIN FUNCTIONS **************************/\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function setManager(\n        address _subscriptionManager\n    ) external onlyOwner {\n        subscriptionManager = _subscriptionManager;\n    }\n\n    function setSubscriptions(\n        address _subscriptions\n    ) external onlyOwner {\n        subscriptions = _subscriptions;\n    }\n\n    function setTrustedForwarder(\n        address _forwarder\n    ) external onlyOwner {\n        _setTrustedForwarder(_forwarder);\n    }\n\n}"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"
    },
    "contracts/vault/CaskVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@opengsn/contracts/src/BaseRelayRecipient.sol\";\nimport \"../interfaces/IStdReference.sol\";\n\n\nimport \"../interfaces/ICaskVault.sol\";\n\ncontract CaskVault is\nICaskVault,\nBaseRelayRecipient,\nERC20Upgradeable,\nOwnableUpgradeable,\nPausableUpgradeable,\nReentrancyGuardUpgradeable\n{\n    using SafeERC20 for IERC20;\n\n    modifier onlyProtocol {\n        bool isProtocol = false;\n        for (uint256 i = 0; i < protocols.length; i++) {\n            if (_msgSender() == protocols[i]) {\n                isProtocol = true;\n                break;\n            }\n        }\n        require(isProtocol, \"!AUTH\");\n        _;\n    }\n\n\n    /************************** STATE **************************/\n\n    address public reserved1;\n\n    // base asset for vault - much is denominated in this\n    address public baseAsset;\n\n    // address of contract that collects and distributes fees\n    address public feeDistributor;\n\n    // assets supported by vault\n    mapping(address => Asset) internal assets;\n    address[] internal allAssets;\n\n    // list of approved protocols that can perform payments\n    address[] public protocols;\n\n    // require deposit of at least this amount denominated in the baseAsset\n    uint256 public minDeposit;\n\n    // revert if price feed age is older than this number of seconds. set to 0 to disable check.\n    uint256 public maxPriceFeedAge;\n\n    // consumer funding profile\n    mapping(address => FundingProfile) internal fundingProfiles;\n\n    function initialize(\n        address _baseAsset,\n        address _baseAssetPriceFeed,\n        PriceFeedType _baseAssetPriceFeedType,\n        string calldata _baseAssetBandSymbol,\n        address _feeDistributor\n    ) public initializer {\n        __Ownable_init();\n        __Pausable_init();\n        __ReentrancyGuard_init();\n        __ERC20_init(\"Cask Vault Tokens\",\"MASH\");\n\n        require(IERC20Metadata(_baseAsset).decimals() > 0, \"!INVALID(baseAsset)\");\n        require(AggregatorV3Interface(_baseAssetPriceFeed).decimals() > 0, \"!INVALID(baseAssetPriceFeed)\");\n\n        Asset storage asset = assets[_baseAsset];\n        asset.priceFeed = _baseAssetPriceFeed;\n        asset.priceFeedType = _baseAssetPriceFeedType;\n        asset.assetDecimals = IERC20Metadata(_baseAsset).decimals();\n        if (_baseAssetPriceFeedType == PriceFeedType.Chainlink) {\n            asset.priceFeedDecimals = AggregatorV3Interface(_baseAssetPriceFeed).decimals();\n        } else if (_baseAssetPriceFeedType == PriceFeedType.Band) {\n            asset.priceFeedDecimals = 18; // band prices are always in 1e18\n        } else {\n            revert(\"unknown price feed type\");\n        }\n\n        asset.depositLimit = type(uint256).max;\n        asset.slippageBps = 0;\n        asset.bandSymbol = _baseAssetBandSymbol;\n        asset.allowed = true;\n        allAssets.push(_baseAsset);\n\n        baseAsset = _baseAsset;\n        feeDistributor = _feeDistributor;\n        minDeposit = 0;\n        maxPriceFeedAge = 0;\n    }\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    function decimals() public view override(ERC20Upgradeable, IERC20MetadataUpgradeable) returns (uint8) {\n        return IERC20Metadata(baseAsset).decimals();\n    }\n\n    function versionRecipient() public pure override returns(string memory) { return \"2.2.0\"; }\n\n    function _msgSender() internal view override(ContextUpgradeable, BaseRelayRecipient)\n    returns (address sender) {\n        sender = BaseRelayRecipient._msgSender();\n    }\n\n    function _msgData() internal view override(ContextUpgradeable, BaseRelayRecipient)\n    returns (bytes calldata) {\n        return BaseRelayRecipient._msgData();\n    }\n\n\n    function protocolPayment(\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _protocolFee,\n        address _network,\n        uint256 _networkFee\n    ) external override nonReentrant onlyProtocol whenNotPaused {\n        _protocolPayment(_from, _to, _value, _protocolFee, _network, _networkFee);\n    }\n\n    function protocolPayment(\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _protocolFee\n    ) external override nonReentrant onlyProtocol whenNotPaused {\n        _protocolPayment(_from, _to, _value, _protocolFee, address(0), 0);\n    }\n\n    function protocolPayment(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external override nonReentrant onlyProtocol whenNotPaused {\n        _protocolPayment(_from, _to, _value, 0, address(0), 0);\n    }\n\n    function _protocolPayment(\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _protocolFee,\n        address _network,\n        uint256 _networkFee\n    ) internal {\n        require(_value > _protocolFee + _networkFee, \"!VALUE_TOO_LOW\");\n\n        FundingProfile memory profile = fundingProfiles[_from];\n\n        if (profile.fundingSource == FundingSource.Personal) {\n            uint256 assetAmount = _value;\n            if (profile.fundingAsset != baseAsset) {\n                Asset storage asset = assets[profile.fundingAsset];\n                require(asset.allowed, \"!NOT_ALLOWED(fundingAsset)\");\n\n                // convert to equivalent amount in specified asset and add slippage\n                assetAmount = _convertPrice(baseAsset, profile.fundingAsset, _value);\n\n                if (asset.slippageBps > 0) {\n                    // the +1 is to fix underfunding due to decimal drops when the\n                    // slippage is removed in the deposit\n                    assetAmount = (assetAmount * 10000 / (10000 - asset.slippageBps)) + 1;\n                }\n            }\n            _depositTo(_from, _from, profile.fundingAsset, assetAmount);\n        } else {\n            require(profile.fundingSource == FundingSource.Cask, \"!INVALID(fundingSource)\");\n        }\n        uint256 shares = _sharesForValue(_value);\n\n        uint256 protocolFeeShares = 0;\n        if (_protocolFee > 0) {\n            protocolFeeShares = _sharesForValue(_protocolFee);\n        }\n\n        uint256 networkFeeShares = 0;\n        if (_networkFee > 0 && _network != address(0)) {\n            networkFeeShares = _sharesForValue(_networkFee);\n        }\n\n        _transfer(_from, _to, shares); // payment from consumer to provider\n\n        if (protocolFeeShares > 0) {\n            _transfer(_to, feeDistributor, protocolFeeShares); // take back fee from provider to fee distributor\n        }\n        if (networkFeeShares > 0) {\n            _transfer(_to, _network, networkFeeShares); // take network fee from provider to network\n        }\n\n        emit Payment(_from, _to, _value, shares, _protocolFee, protocolFeeShares, _network,\n            _networkFee, networkFeeShares);\n    }\n\n    function transferValue(\n        address _recipient,\n        uint256 _value\n    ) external override nonReentrant whenNotPaused returns (bool) {\n        uint256 amount = _sharesForValue(_value);\n        _transfer(_msgSender(), _recipient, amount);\n        emit TransferValue(_msgSender(), _recipient, _value, amount);\n        return true;\n    }\n\n    function transferValueFrom(\n        address _sender,\n        address _recipient,\n        uint256 _value\n    ) external override nonReentrant whenNotPaused returns (bool) {\n        uint256 amount = _sharesForValue(_value);\n        _transfer(_sender, _recipient, amount);\n\n        uint256 currentAllowance = allowance(_sender, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(_sender, _msgSender(), currentAllowance - amount);\n        }\n        emit TransferValue(_sender, _recipient, _value, amount);\n        return true;\n    }\n\n    function deposit(\n        address _asset,\n        uint256 _assetAmount\n    ) external override nonReentrant whenNotPaused {\n        _depositTo(_msgSender(), _msgSender(), _asset, _assetAmount);\n    }\n\n    function depositTo(\n        address _to,\n        address _asset,\n        uint256 _assetAmount\n    ) external override nonReentrant whenNotPaused {\n        _depositTo(_msgSender(), _to, _asset, _assetAmount);\n    }\n\n    function _depositTo(\n        address _assetFrom,\n        address _sharesTo,\n        address _asset,\n        uint256 _assetAmount\n    ) internal {\n        require(assets[_asset].allowed, \"!NOT_ALLOWED(asset)\");\n        require(_assetAmount > 0, \"!INVALID(assetAmount)\");\n        require(_totalAssetBalance(_asset) + _assetAmount <= assets[_asset].depositLimit, \"!DEPOSIT_LIMIT(asset)\");\n\n        uint256 baseAssetAmount = _assetAmount;\n        if (_asset != baseAsset) {\n            Asset storage asset = assets[_asset];\n\n            // subtract slippage bps from deposited amount\n            uint256 slippage = (_assetAmount * asset.slippageBps) / 10000;\n\n            baseAssetAmount = _convertPrice(_asset, baseAsset, (_assetAmount - slippage));\n        }\n\n        require(baseAssetAmount >= minDeposit, \"!MIN_DEPOSIT\");\n\n        // calculate shares before transferring new asset into vault\n        uint256 shares = baseAssetAmount;\n        if (totalSupply() > 0) {\n            // use round up integer division so that deposits are not short changed\n            shares = ((baseAssetAmount * totalSupply()) - 1) / _totalValue() + 1;\n        }\n\n        IERC20(_asset).safeTransferFrom(_assetFrom, address(this), _assetAmount);\n\n        _mint(_sharesTo, shares);\n\n        emit AssetDeposited(_sharesTo, _asset, _assetAmount, baseAssetAmount, shares);\n    }\n\n    function withdraw(\n        address _asset,\n        uint256 _shares\n    ) external override nonReentrant whenNotPaused {\n        _withdrawTo(_msgSender(), _asset, _shares);\n    }\n\n    function withdrawTo(\n        address _recipient,\n        address _asset,\n        uint256 _shares\n    ) external override nonReentrant whenNotPaused {\n        _withdrawTo(_recipient, _asset, _shares);\n    }\n\n    function _withdrawTo(\n        address _recipient,\n        address _asset,\n        uint256 _shares\n    ) internal {\n        require(assets[_asset].allowed, \"!NOT_ALLOWED(asset)\");\n        require(_shares > 0, \"!INVALID(sharesAmount)\");\n\n        // calculate amount before supply adjustment\n        uint256 baseAmount = _shareValue(_shares);\n\n        _burn(_msgSender(), _shares);\n\n        uint256 assetAmount = baseAmount;\n        if (_asset != baseAsset) {\n            Asset storage asset = assets[_asset];\n\n            assetAmount = _convertPrice(baseAsset, _asset, baseAmount);\n\n            // subtract slippage bps from withdrawing amount\n            uint256 slippage = (assetAmount * asset.slippageBps) / 10000;\n            assetAmount = assetAmount - slippage;\n        }\n\n        // transfer requested stablecoin to _recipient\n        IERC20(_asset).safeTransfer(_recipient, assetAmount);\n\n        emit AssetWithdrawn(_recipient, _asset, assetAmount, baseAmount, _shares);\n    }\n\n    function currentValueOf(\n        address _address\n    ) external override view returns(uint256) {\n        return _shareValue(balanceOf(_address));\n    }\n\n    function pricePerShare() external override view returns(uint256) {\n        return _shareValue(10 ** assets[baseAsset].assetDecimals);\n    }\n\n\n    /************************** FUNDING SOURCE FUNCTIONS **************************/\n\n    function fundingSource(\n        address _address\n    ) external view override returns(FundingProfile memory) {\n        return fundingProfiles[_address];\n    }\n\n    function setFundingSource(\n        FundingSource _fundingSource,\n        address _fundingAsset\n    ) external override {\n        require(assets[_fundingAsset].allowed, \"!ASSET_NOT_ALLOWED\");\n\n        FundingProfile storage profile = fundingProfiles[_msgSender()];\n\n        profile.fundingSource = _fundingSource;\n        profile.fundingAsset = _fundingAsset;\n\n        emit SetFundingSource(_msgSender(), _fundingSource, _fundingAsset);\n    }\n\n    /************************** SHARES FUNCTIONS **************************/\n\n    function sharesForValue(\n        uint256 _value\n    ) external override view returns(uint256) {\n        return _sharesForValue(_value);\n    }\n\n    function _sharesForValue(\n        uint256 _value\n    ) internal view returns(uint256) {\n        if (totalSupply() > 0) {\n            return (_value * totalSupply()) / _totalValue();\n        } else {\n            return _value;\n        }\n    }\n\n    function _shareValue(\n        uint256 _shares\n    ) internal view returns(uint256) {\n        if (totalSupply() == 0) {\n            return _shares;\n        }\n        return (_totalValue() * _shares) / totalSupply();\n    }\n\n    function totalValue() external override view returns(uint256) {\n        return _totalValue();\n    }\n    function _totalValue() internal view returns(uint256) {\n        uint256 total = 0;\n\n        for (uint256 i = 0; i < allAssets.length; i++) {\n            if (allAssets[i] == baseAsset) {\n                total = total + _totalAssetBalance(baseAsset);\n            } else {\n                total = total + _convertPrice(allAssets[i], baseAsset, _totalAssetBalance(allAssets[i]));\n            }\n        }\n\n        return total;\n    }\n\n    function totalAssetBalance(\n        address _asset\n    ) external override view returns(uint256) {\n        return _totalAssetBalance(_asset);\n    }\n    function _totalAssetBalance(\n        address _asset\n    ) internal view returns(uint256) {\n        return IERC20(_asset).balanceOf(address(this));\n    }\n\n\n    /************************** ADMIN FUNCTIONS **************************/\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function addProtocol(\n        address _protocol\n    ) external onlyOwner {\n        protocols.push(_protocol);\n        emit AddProtocol(_protocol);\n    }\n\n    function removeProtocol(\n        address _protocol\n    ) external onlyOwner {\n        uint256 idx = protocols.length;\n        for (uint256 i = 0; i < protocols.length; i++) {\n            if (protocols[i] == _protocol) {\n                idx = i;\n                break;\n            }\n        }\n        if (idx < protocols.length) {\n            protocols[idx] = protocols[protocols.length - 1];\n            protocols.pop();\n        }\n        emit RemoveProtocol(_protocol);\n    }\n\n    function protocolCount() external view returns(uint256) {\n        return protocols.length;\n    }\n\n    function setFeeDistributor(\n        address _feeDistributor\n    ) external onlyOwner {\n        feeDistributor = _feeDistributor;\n        emit SetFeeDistributor(_feeDistributor);\n    }\n\n    function setMinDeposit(\n        uint256 _minDeposit\n    ) external onlyOwner {\n        minDeposit = _minDeposit;\n        emit SetMinDeposit(_minDeposit);\n    }\n\n    function setMaxPriceFeedAge(\n        uint256 _maxPriceFeedAge\n    ) external onlyOwner {\n        maxPriceFeedAge = _maxPriceFeedAge;\n        emit SetMaxPriceFeedAge(_maxPriceFeedAge);\n    }\n\n    function setTrustedForwarder(\n        address _forwarder\n    ) external onlyOwner {\n        _setTrustedForwarder(_forwarder);\n        emit SetTrustedForwarder(_forwarder);\n    }\n\n\n    /************************** ASSET FUNCTIONS **************************/\n\n    function getBaseAsset() external view override returns(address) {\n        return baseAsset;\n    }\n\n    function getAllAssets() external view override returns(address[] memory) {\n        return allAssets;\n    }\n\n    function getAsset(\n        address _asset\n    ) external view override returns(Asset memory) {\n        return assets[_asset];\n    }\n\n    function supportsAsset(\n        address _asset\n    ) external view override returns (bool) {\n        return assets[_asset].allowed;\n    }\n\n    function allowAsset(\n        address _asset,\n        address _priceFeed,\n        PriceFeedType _priceFeedType,\n        string calldata _bandSymbol,\n        uint256 _depositLimit,\n        uint256 _slippageBps\n    ) external onlyOwner {\n        require(IERC20Metadata(_asset).decimals() > 0, \"!INVALID(asset)\");\n        if (_priceFeedType == PriceFeedType.Chainlink) {\n            require(AggregatorV3Interface(_priceFeed).decimals() > 0, \"!INVALID(priceFeed)\");\n        } else if (_priceFeedType == PriceFeedType.Band) {\n            require(bytes(_bandSymbol).length > 0, \"!INVALID(bandSymbol)\");\n        } else {\n            revert(\"unknown price feed type\");\n        }\n\n        Asset storage asset = assets[_asset];\n\n        // add to allAsset list just the first time\n        if (asset.assetDecimals == 0) {\n            allAssets.push(_asset);\n        }\n\n        asset.allowed = true;\n        asset.priceFeed = _priceFeed;\n        asset.priceFeedType = _priceFeedType;\n        asset.bandSymbol = _bandSymbol;\n        asset.depositLimit = _depositLimit;\n        asset.slippageBps = _slippageBps;\n        asset.assetDecimals = IERC20Metadata(_asset).decimals();\n        if (_priceFeedType == PriceFeedType.Chainlink) {\n            asset.priceFeedDecimals = AggregatorV3Interface(_priceFeed).decimals();\n        } else if (_priceFeedType == PriceFeedType.Band) {\n            asset.priceFeedDecimals = 18; // band prices are always in 1e18\n        }\n\n        emit AllowedAsset(_asset);\n    }\n\n    function disallowAsset(\n        address _asset\n    ) external onlyOwner {\n        require(assets[_asset].allowed, \"!ASSET_NOT_ALLOWED\");\n\n        assets[_asset].allowed = false;\n\n        emit DisallowedAsset(_asset);\n    }\n\n    function convertPrice(\n        address _fromAsset,\n        address _toAsset,\n        uint256 _fromAmount\n    ) external view returns(uint256) {\n        return _convertPrice(_fromAsset, _toAsset, _fromAmount);\n    }\n\n    function _convertPrice(\n        address _fromAsset,\n        address _toAsset,\n        uint256 _fromAmount\n    ) internal view returns(uint256) {\n        require(_fromAsset != _toAsset, \"!SAME_ASSET\");\n        if (assets[_fromAsset].priceFeedType == PriceFeedType.Chainlink) {\n            return _convertPriceChainlink(_fromAsset, _toAsset, _fromAmount);\n        } else if (assets[_fromAsset].priceFeedType == PriceFeedType.Band) {\n            return _convertPriceBand(_fromAsset, _toAsset, _fromAmount);\n        } else {\n            revert(\"unknown price feed types\");\n        }\n    }\n\n    function _convertPriceBand(\n        address _fromAsset,\n        address _toAsset,\n        uint256 _fromAmount\n    ) internal view returns(uint256) {\n        require(bytes(assets[_fromAsset].bandSymbol).length > 0, \"!BAND_SYMBOL(fromAsset)\");\n        require(bytes(assets[_toAsset].bandSymbol).length > 0, \"!BAND_SYMBOL(toAsset)\");\n\n        IStdReference.ReferenceData memory result = IStdReference(assets[_fromAsset].priceFeed).getReferenceData(\n            assets[_fromAsset].bandSymbol,\n            assets[_toAsset].bandSymbol);\n\n        require(maxPriceFeedAge == 0 || block.timestamp - result.lastUpdatedBase <= maxPriceFeedAge, \"!PRICE_OUTDATED\");\n        require(maxPriceFeedAge == 0 || block.timestamp - result.lastUpdatedQuote <= maxPriceFeedAge, \"!PRICE_OUTDATED\");\n\n        return _scalePrice(_fromAmount *\n                _scalePrice(result.rate, assets[_fromAsset].priceFeedDecimals, assets[_fromAsset].assetDecimals),\n            assets[_fromAsset].assetDecimals * 2,\n            assets[_toAsset].assetDecimals);\n    }\n\n    function _convertPriceChainlink(\n        address _fromAsset,\n        address _toAsset,\n        uint256 _fromAmount\n    ) internal view returns(uint256) {\n        require(assets[_fromAsset].priceFeed != address(0), \"!INVALID(fromAsset)\");\n        require(assets[_toAsset].priceFeed != address(0), \"!NOT_ALLOWED(toAsset)\");\n\n        if (_fromAmount == 0) {\n            return 0;\n        }\n\n        int256 oraclePrice;\n        uint256 updatedAt;\n\n        ( , oraclePrice, , updatedAt, ) = AggregatorV3Interface(assets[_fromAsset].priceFeed).latestRoundData();\n        uint256 fromOraclePrice = uint256(oraclePrice);\n        require(maxPriceFeedAge == 0 || block.timestamp - updatedAt <= maxPriceFeedAge, \"!PRICE_OUTDATED\");\n        ( , oraclePrice, , updatedAt, ) = AggregatorV3Interface(assets[_toAsset].priceFeed).latestRoundData();\n        uint256 toOraclePrice = uint256(oraclePrice);\n        require(maxPriceFeedAge == 0 || block.timestamp - updatedAt <= maxPriceFeedAge, \"!PRICE_OUTDATED\");\n\n        if (assets[_fromAsset].priceFeedDecimals != assets[_toAsset].priceFeedDecimals) {\n            // since oracle precision is different, scale everything\n            // to _toAsset precision and do conversion\n            return _scalePrice(_fromAmount, assets[_fromAsset].assetDecimals, assets[_toAsset].assetDecimals) *\n                    _scalePrice(fromOraclePrice, assets[_fromAsset].priceFeedDecimals, assets[_toAsset].assetDecimals) /\n                    _scalePrice(toOraclePrice, assets[_toAsset].priceFeedDecimals, assets[_toAsset].assetDecimals);\n        } else {\n            // oracles are already in same precision, so just scale _amount to asset precision,\n            // and multiply by the price feed ratio\n            return _scalePrice(_fromAmount, assets[_fromAsset].assetDecimals, assets[_toAsset].assetDecimals) *\n                fromOraclePrice / toOraclePrice;\n        }\n    }\n\n    function _scalePrice(\n        uint256 _price,\n        uint8 _priceDecimals,\n        uint8 _decimals\n    ) internal pure returns (uint256){\n        if (_priceDecimals < _decimals) {\n            return _price * uint256(10 ** uint256(_decimals - _priceDecimals));\n        } else if (_priceDecimals > _decimals) {\n            return _price / uint256(10 ** uint256(_priceDecimals - _decimals));\n        }\n        return _price;\n    }\n\n}"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IStdReference.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IStdReference {\n    /// A structure returned whenever someone requests for standard reference data.\n    struct ReferenceData {\n        uint256 rate; // base/quote exchange rate, multiplied by 1e18.\n        uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\n        uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\n    }\n\n    /// Returns the price data for the given base/quote pair. Revert if not available.\n    function getReferenceData(string memory _base, string memory _quote)\n    external\n    view\n    returns (ReferenceData memory);\n\n    /// Similar to getReferenceData, but with multiple base/quote pairs at once.\n    function getReferenceDataBulk(string[] memory _bases, string[] memory _quotes)\n    external\n    view\n    returns (ReferenceData[] memory);\n}"
    },
    "contracts/interfaces/ICaskVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\n\n/**\n * @title  Interface for vault\n  */\n\ninterface ICaskVault is IERC20MetadataUpgradeable {\n\n    // whitelisted stablecoin assets supported by the vault\n    struct Asset {\n        address priceFeed;\n        uint256 slippageBps;\n        uint256 depositLimit;\n        uint8 assetDecimals;\n        uint8 priceFeedDecimals;\n        bool allowed;\n        PriceFeedType priceFeedType;\n        string bandSymbol;\n    }\n\n    enum PriceFeedType {\n        Chainlink,\n        Band\n    }\n\n    // sources for payments\n    enum FundingSource {\n        Cask,\n        Personal\n    }\n\n    // funding profile for a given address\n    struct FundingProfile {\n        FundingSource fundingSource;\n        address fundingAsset;\n    }\n\n    /**\n      * @dev Get base asset of vault.\n     */\n    function getBaseAsset() external view returns (address);\n\n    /**\n      * @dev Get all the assets supported by the vault.\n     */\n    function getAllAssets() external view returns (address[] memory);\n\n    /**\n     * @dev Get asset details\n     * @param _asset Asset address\n     * @return Asset Asset details\n     */\n    function getAsset(address _asset) external view returns(Asset memory);\n\n    /**\n     * @dev Check if the vault supports an asset\n     * @param _asset Asset address\n     * @return bool `true` if asset supported, `false` otherwise\n     */\n    function supportsAsset(address _asset) external view returns (bool);\n\n    /**\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\n     * @param _from From address\n     * @param _to To address\n     * @param _value Amount of baseAsset value to transfer\n     * @param _protocolFee Protocol fee to deduct from `_value`\n     * @param _network Address of network fee collector\n     * @param _networkFee Network fee to deduct from `_value`\n     */\n    function protocolPayment(\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _protocolFee,\n        address _network,\n        uint256 _networkFee\n    ) external;\n\n    /**\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\n     * @param _from From address\n     * @param _to To address\n     * @param _value Amount of baseAsset value to transfer\n     * @param _protocolFee Protocol fee to deduct from `_value`\n     */\n    function protocolPayment(\n        address _from,\n        address _to,\n        uint256 _value,\n        uint256 _protocolFee\n    ) external;\n\n    /**\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\n     * @param _from From address\n     * @param _to To address\n     * @param _value Amount of baseAsset value to transfer\n     */\n    function protocolPayment(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external;\n\n    /**\n     * @dev Transfer the equivalent vault shares of base asset `value` to `_recipient`\n     * @param _recipient To address\n     * @param _value Amount of baseAsset value to transfer\n     */\n    function transferValue(\n        address _recipient,\n        uint256 _value\n    ) external returns (bool);\n\n    /**\n     * @dev Transfer the equivalent vault shares of base asset `value` from `_sender` to `_recipient`\n     * @param _sender From address\n     * @param _recipient To address\n     * @param _value Amount of baseAsset value to transfer\n     */\n    function transferValueFrom(\n        address _sender,\n        address _recipient,\n        uint256 _value\n    ) external returns (bool);\n\n    /**\n     * @dev Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\n     * @param _asset Address of incoming asset\n     * @param _assetAmount Amount of asset to deposit\n     */\n    function deposit(address _asset, uint256 _assetAmount) external;\n\n    /**\n     * @dev Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\n     * @param _to Recipient of funds\n     * @param _asset Address of incoming asset\n     * @param _assetAmount Amount of asset to deposit\n     */\n    function depositTo(address _to, address _asset, uint256 _assetAmount) external;\n\n    /**\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\n     * @param _asset Address of outgoing asset\n     * @param _shares Amount of shares to withdraw\n     */\n    function withdraw(address _asset, uint256 _shares) external;\n\n    /**\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\n     * @param _recipient Recipient who will receive the withdrawn assets\n     * @param _asset Address of outgoing asset\n     * @param _shares Amount of shares to withdraw\n     */\n    function withdrawTo(address _recipient, address _asset, uint256 _shares) external;\n\n    /**\n     * @dev Retrieve the funding source for an address\n     * @param _address Address for lookup\n     */\n    function fundingSource(address _address) external view returns(FundingProfile memory);\n\n    /**\n     * @dev Set the funding source and, if using a personal wallet, the asset to use for funding payments\n     * @param _fundingSource Funding source to use\n     * @param _fundingAsset Asset to use for payments (if using personal funding source)\n     */\n    function setFundingSource(FundingSource _fundingSource, address _fundingAsset) external;\n\n    /**\n     * @dev Get current vault value of `_address` denominated in `baseAsset`\n     * @param _address Address to check\n     */\n    function currentValueOf(address _address) external view returns(uint256);\n\n    /**\n     * @dev Get current vault value a vault share\n     */\n    function pricePerShare() external view returns(uint256);\n\n    /**\n     * @dev Get the number of vault shares that represents a given value of the base asset\n     * @param _value Amount of value\n     */\n    function sharesForValue(uint256 _value) external view returns(uint256);\n\n    /**\n     * @dev Get total value in vault and managed by admin - denominated in `baseAsset`\n     */\n    function totalValue() external view returns(uint256);\n\n    /**\n     * @dev Get total amount of an asset held in vault and managed by admin\n     * @param _asset Address of asset\n     */\n    function totalAssetBalance(address _asset) external view returns(uint256);\n\n\n    /************************** EVENTS **************************/\n\n    /** @dev Emitted when `sender` transfers `baseAssetValue` (denominated in vault baseAsset) to `recipient` */\n    event TransferValue(address indexed from, address indexed to, uint256 baseAssetAmount, uint256 shares);\n\n    /** @dev Emitted when an amount of `baseAsset` is paid from `from` to `to` within the vault */\n    event Payment(address indexed from, address indexed to, uint256 baseAssetAmount, uint256 shares,\n        uint256 protocolFee, uint256 protocolFeeShares,\n        address indexed network, uint256 networkFee, uint256 networkFeeShares);\n\n    /** @dev Emitted when `asset` is added as a new supported asset */\n    event AllowedAsset(address indexed asset);\n\n    /** @dev Emitted when `asset` is disallowed t */\n    event DisallowedAsset(address indexed asset);\n\n    /** @dev Emitted when `participant` deposits `asset` */\n    event AssetDeposited(address indexed participant, address indexed asset, uint256 assetAmount,\n        uint256 baseAssetAmount, uint256 shares);\n\n    /** @dev Emitted when `participant` withdraws `asset` */\n    event AssetWithdrawn(address indexed participant, address indexed asset, uint256 assetAmount,\n        uint256 baseAssetAmount, uint256 shares);\n\n    /** @dev Emitted when `participant` sets their funding source */\n    event SetFundingSource(address indexed participant, FundingSource fundingSource, address fundingAsset);\n\n    /** @dev Emitted when a new protocol is allowed to use the vault */\n    event AddProtocol(address indexed protocol);\n\n    /** @dev Emitted when a protocol is no longer allowed to use the vault */\n    event RemoveProtocol(address indexed protocol);\n\n    /** @dev Emitted when the vault fee distributor is changed */\n    event SetFeeDistributor(address indexed feeDistributor);\n\n    /** @dev Emitted when minDeposit is changed */\n    event SetMinDeposit(uint256 minDeposit);\n\n    /** @dev Emitted when maxPriceFeedAge is changed */\n    event SetMaxPriceFeedAge(uint256 maxPriceFeedAge);\n\n    /** @dev Emitted when the trustedForwarder address is changed */\n    event SetTrustedForwarder(address indexed feeDistributor);\n}"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/subscriptions/CaskSubscriptionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n\nimport \"../interfaces/ICaskSubscriptionManager.sol\";\nimport \"../interfaces/ICaskSubscriptionPlans.sol\";\nimport \"../interfaces/ICaskSubscriptions.sol\";\nimport \"../interfaces/ICaskVault.sol\";\n\ncontract CaskSubscriptionManager is\nICaskSubscriptionManager,\nInitializable,\nOwnableUpgradeable,\nPausableUpgradeable,\nKeeperCompatibleInterface\n{\n\n    /************************** PARAMETERS **************************/\n\n    /** @dev contract to manage subscription plan definitions. */\n    ICaskSubscriptionPlans public subscriptionPlans;\n    ICaskSubscriptions public subscriptions;\n\n    /** @dev vault to use for payments. */\n    ICaskVault public vault;\n\n    /** @dev minimum total fee to charge, if rate fees do not add up to this amount */\n    uint256 public paymentFeeMin;\n\n    /** @dev min and max percentage to charge on payments, in bps. 50% = 5000. */\n    uint256 public paymentFeeRateMin; // floor if full discount applied\n    uint256 public paymentFeeRateMax; // fee if no discount applied\n\n    /** @dev factor used to reduce payment fee based on qty of staked CASK */\n    uint256 public stakeTargetFactor;\n\n    /** @dev size (in seconds) of buckets to group subscriptions into for processing */\n    uint32 public processBucketSize;\n\n    /** @dev map used to track when subscriptions need attention next */\n    mapping(CheckType => mapping(uint32 => uint256[])) private processQueue; // renewal bucket => subscriptionId[]\n    mapping(CheckType => uint32) private processingBucket; // current bucket being processed\n\n    /** @dev min value for a payment. */\n    uint256 public paymentMinValue;\n\n    /** @dev max age a process bucket can grow to before a forced processing occurs. */\n    uint32 public processBucketMaxAge;\n\n    /** @dev number of seconds between failed payment retries. */\n    uint32 public paymentRetryDelay;\n\n    modifier onlySubscriptions() {\n        require(_msgSender() == address(subscriptions), \"!AUTH\");\n        _;\n    }\n\n    function initialize(\n        address _vault,\n        address _subscriptionPlans,\n        address _subscriptions\n    ) public initializer {\n        __Ownable_init();\n        __Pausable_init();\n\n        subscriptionPlans = ICaskSubscriptionPlans(_subscriptionPlans);\n        subscriptions = ICaskSubscriptions(_subscriptions);\n        vault = ICaskVault(_vault);\n\n        // parameter defaults\n        paymentMinValue = 0;\n        paymentFeeMin = 0;\n        paymentFeeRateMin = 0;\n        paymentFeeRateMax = 0;\n        stakeTargetFactor = 0;\n        processBucketSize = 300;\n        processBucketMaxAge = 1 hours;\n        paymentRetryDelay = 12 hours;\n\n        processingBucket[CheckType.Active] = _currentBucket();\n        processingBucket[CheckType.PastDue] = _currentBucket();\n    }\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    function _parsePlanData(\n        bytes32 _planData\n    ) internal pure returns(ICaskSubscriptions.PlanInfo memory) {\n        bytes1 options = bytes1(_planData << 248);\n        return ICaskSubscriptions.PlanInfo({\n        price: uint256(_planData >> 160),\n        planId: uint32(bytes4(_planData << 96)),\n        period: uint32(bytes4(_planData << 128)),\n        freeTrial: uint32(bytes4(_planData << 160)),\n        maxActive: uint32(bytes4(_planData << 192)),\n        minPeriods: uint16(bytes2(_planData << 224)),\n        gracePeriod: uint8(bytes1(_planData << 240)),\n        canPause: options & 0x01 == 0x01,\n        canTransfer: options & 0x02 == 0x02\n        });\n    }\n\n    function _planDataPrice(\n        bytes32 _planData\n    ) internal pure returns(uint256) {\n        return uint256(_planData >> 160);\n    }\n\n    function _parseNetworkData(\n        bytes32 _networkData\n    ) internal pure returns(ICaskSubscriptions.NetworkInfo memory) {\n        return ICaskSubscriptions.NetworkInfo({\n            network: address(bytes20(_networkData)),\n            feeBps: uint16(bytes2(_networkData << 160))\n        });\n    }\n\n    function _parseDiscountData(\n        bytes32 _discountData\n    ) internal pure returns(ICaskSubscriptionPlans.Discount memory) {\n        bytes1 options = bytes1(_discountData << 240);\n        return ICaskSubscriptionPlans.Discount({\n            value: uint256(_discountData >> 160),\n            validAfter: uint32(bytes4(_discountData << 96)),\n            expiresAt: uint32(bytes4(_discountData << 128)),\n            maxRedemptions: uint32(bytes4(_discountData << 160)),\n            planId: uint32(bytes4(_discountData << 192)),\n            applyPeriods: uint16(bytes2(_discountData << 224)),\n            discountType: ICaskSubscriptionPlans.DiscountType(uint8(bytes1(_discountData << 248))),\n            isFixed: options & 0x01 == 0x01\n        });\n    }\n\n    function processSinglePayment(\n        address _consumer,\n        address _provider,\n        uint256 _subscriptionId,\n        uint256 _value\n    ) external onlySubscriptions returns(bool) {\n        return _processPayment(_consumer, _provider, _subscriptionId, _value);\n    }\n\n    function _processPayment(\n        address _consumer,\n        address _provider,\n        uint256 _subscriptionId,\n        uint256 _value\n    ) internal returns(bool) {\n        (ICaskSubscriptions.Subscription memory subscription,) = subscriptions.getSubscription(_subscriptionId);\n\n        uint256 paymentFeeRateAdjusted = paymentFeeRateMax;\n\n        if (stakeTargetFactor > 0) {\n            // TODO: reduce fee based on staked balance\n            //        uint256 stakedBalance = ICaskStakeManager(stakeManager).providerStakeBalanceOf(_provider);\n            uint256 stakedBalance = 0;\n\n            ICaskSubscriptions.PlanInfo memory planData = _parsePlanData(subscription.planData);\n\n            if (stakedBalance > 0) {\n                uint256 loadFactor = 365 / (planData.period / 1 days);\n                uint256 noFeeTarget = subscriptions.getProviderSubscriptionCount(subscription.provider, false, 0) *\n                stakeTargetFactor * loadFactor;\n\n                paymentFeeRateAdjusted = paymentFeeRateMax - (paymentFeeRateMax * (stakedBalance / noFeeTarget));\n                if (paymentFeeRateAdjusted < paymentFeeRateMin) {\n                    paymentFeeRateAdjusted = paymentFeeRateMin;\n                }\n            }\n        }\n\n        ICaskSubscriptionPlans.Provider memory providerProfile = subscriptionPlans.getProviderProfile(_provider);\n\n        address paymentAddress = _provider;\n        if (providerProfile.paymentAddress != address(0)) {\n            paymentAddress = providerProfile.paymentAddress;\n        }\n\n        return _sendPayment(subscription, _consumer, paymentAddress, _value, paymentFeeRateAdjusted);\n    }\n\n    function _sendPayment(\n        ICaskSubscriptions.Subscription memory _subscription,\n        address _consumer,\n        address _paymentAddress,\n        uint256 _value,\n        uint256 _protocolFeeBps\n    ) internal returns(bool) {\n        uint256 protocolFee = _value * _protocolFeeBps / 10000;\n        if (protocolFee < paymentFeeMin) {\n            protocolFee = paymentFeeMin;\n        }\n\n        if (_subscription.networkData > 0) {\n            ICaskSubscriptions.NetworkInfo memory networkData = _parseNetworkData(_subscription.networkData);\n            uint256 networkFee = _value * networkData.feeBps / 10000;\n            require(_value > protocolFee + networkFee, \"!VALUE_TOO_LOW\");\n            try vault.protocolPayment(_consumer, _paymentAddress, _value, protocolFee, networkData.network, networkFee) {\n                return true;\n            } catch {\n                return false;\n            }\n        } else {\n            require(_value > protocolFee, \"!VALUE_TOO_LOW\");\n            try vault.protocolPayment(_consumer, _paymentAddress, _value, protocolFee) {\n                return true;\n            } catch {\n                return false;\n            }\n        }\n    }\n\n    function _bucketAt(\n        uint32 _timestamp\n    ) internal view returns(uint32) {\n        return _timestamp - (_timestamp % processBucketSize) + processBucketSize;\n    }\n\n    function _currentBucket() internal view returns(uint32) {\n        uint32 timestamp = uint32(block.timestamp);\n        return timestamp - (timestamp % processBucketSize);\n    }\n\n    function queueItem(\n        CheckType _checkType,\n        uint32 _bucket,\n        uint256 _idx\n    ) external view returns(uint256) {\n        return processQueue[_checkType][_bucket][_idx];\n    }\n\n    function queueSize(\n        CheckType _checkType,\n        uint32 _bucket\n    ) external view returns(uint256) {\n        return processQueue[_checkType][_bucket].length;\n    }\n\n    function queuePosition(\n        CheckType _checkType\n    ) external view returns(uint32) {\n        return processingBucket[_checkType];\n    }\n\n    function checkUpkeep(\n        bytes calldata checkData\n    ) external view override returns(bool upkeepNeeded, bytes memory performData) {\n        (\n        uint256 limit,\n        uint256 minDepth,\n        CheckType checkType\n        ) = abi.decode(checkData, (uint256, uint256, CheckType));\n\n        uint32 currentBucket = _currentBucket();\n        upkeepNeeded = false;\n\n        uint32 checkBucket = processingBucket[checkType];\n        if (checkBucket == 0) {\n            checkBucket = currentBucket;\n        }\n\n        // if queue is more than an hour old, all hands on deck\n        if (currentBucket >= checkBucket && currentBucket - checkBucket > processBucketMaxAge) {\n            upkeepNeeded = true;\n        } else {\n            while (checkBucket <= currentBucket) {\n                if (processQueue[checkType][checkBucket].length > 0 &&\n                    processQueue[checkType][checkBucket].length >= minDepth)\n                {\n                    upkeepNeeded = true;\n                    break;\n                }\n                checkBucket += processBucketSize;\n            }\n        }\n\n        performData = abi.encode(limit, processQueue[checkType][checkBucket].length, checkType);\n    }\n\n\n    function performUpkeep(\n        bytes calldata performData\n    ) external override whenNotPaused {\n        (\n        uint256 limit,\n        uint256 depth,\n        CheckType checkType\n        ) = abi.decode(performData, (uint256, uint256, CheckType));\n\n        uint32 currentBucket = _currentBucket();\n        uint256 renewals = 0;\n        uint256 maxBucketChecks = limit * 5;\n\n        if (processingBucket[checkType] == 0) {\n            processingBucket[checkType] = currentBucket;\n        }\n\n        while (renewals < limit && maxBucketChecks > 0 && processingBucket[checkType] <= currentBucket) {\n            uint256 queueLen = processQueue[checkType][processingBucket[checkType]].length;\n            if (queueLen > 0) {\n                uint256 subscriptionId = processQueue[checkType][processingBucket[checkType]][queueLen-1];\n                processQueue[checkType][processingBucket[checkType]].pop();\n                _renewSubscription(subscriptionId);\n                renewals += 1;\n            } else {\n                if (processingBucket[checkType] < currentBucket) {\n                    processingBucket[checkType] += processBucketSize;\n                    maxBucketChecks -= 1;\n                } else {\n                    break; // nothing left to do\n                }\n            }\n        }\n\n        emit SubscriptionManagerReport(limit, renewals, depth, checkType,\n            processQueue[checkType][processingBucket[checkType]].length, processingBucket[checkType]);\n    }\n\n    function renewSubscription(\n        uint256 _subscriptionId\n    ) external override whenNotPaused {\n        _renewSubscription(_subscriptionId);\n    }\n\n    function _renewSubscription(\n        uint256 _subscriptionId\n    ) internal {\n        (\n        ICaskSubscriptions.Subscription memory subscription,\n        address consumer\n        ) = subscriptions.getSubscription(_subscriptionId);\n\n        uint32 timestamp = uint32(block.timestamp);\n\n        // paused subscriptions will be re-queued when resumed\n        if (subscription.status == ICaskSubscriptions.SubscriptionStatus.Paused ||\n            subscription.status == ICaskSubscriptions.SubscriptionStatus.Canceled ||\n            subscription.status == ICaskSubscriptions.SubscriptionStatus.None)\n        {\n            return;\n        }\n\n        // not time to renew yet, re-queue for renewal time\n        if (subscription.renewAt > timestamp) {\n            processQueue[CheckType.Active][_bucketAt(subscription.renewAt)].push(_subscriptionId);\n            return;\n        }\n\n        // paused subscription is time for renewal - change to Paused status\n        if (subscription.status == ICaskSubscriptions.SubscriptionStatus.PendingPause) {\n            subscriptions.managerCommand(_subscriptionId, ICaskSubscriptions.ManagerCommand.Pause);\n            return;\n        }\n\n        // subscription scheduled to be canceled by consumer or has hit its cancelAt time\n        if ((subscription.cancelAt > 0 && subscription.cancelAt <= timestamp) ||\n            (subscriptionPlans.getPlanStatus(subscription.provider, subscription.planId) ==\n                ICaskSubscriptionPlans.PlanStatus.EndOfLife &&\n                subscriptionPlans.getPlanEOL(subscription.provider, subscription.planId) <= timestamp))\n        {\n            subscriptions.managerCommand(_subscriptionId, ICaskSubscriptions.ManagerCommand.Cancel);\n            return;\n        }\n\n        // if a plan change is pending, switch to use new plan info\n        if (subscriptions.getPendingPlanChange(_subscriptionId) > 0) {\n            subscriptions.managerCommand(_subscriptionId, ICaskSubscriptions.ManagerCommand.PlanChange);\n            (subscription,) = subscriptions.getSubscription(_subscriptionId); // refresh\n        }\n\n        ICaskSubscriptions.PlanInfo memory planInfo = _parsePlanData(subscription.planData);\n        uint256 chargePrice = planInfo.price;\n\n        if (planInfo.price == 0) {\n            // free plan, skip. will be re-queued when they upgrade to a paid plan\n            return;\n        }\n\n        // maybe apply discount\n        if (subscription.discountId > 0) {\n            ICaskSubscriptionPlans.Discount memory discountInfo = _parseDiscountData(subscription.discountData);\n\n            if(discountInfo.applyPeriods == 0 ||\n                subscription.createdAt + (planInfo.period * discountInfo.applyPeriods) > timestamp)\n            {\n                if (_discountCurrentlyApplies(consumer, subscription.discountId, discountInfo)) {\n                    uint256 discountValue = discountInfo.isFixed ?\n                        discountInfo.value :\n                        chargePrice * discountInfo.value / 10000;\n                    chargePrice = chargePrice > discountValue ? chargePrice - discountValue : 0;\n                }\n            } else {\n                subscriptions.managerCommand(_subscriptionId, ICaskSubscriptions.ManagerCommand.ClearDiscount);\n            }\n        }\n\n        if (chargePrice < paymentMinValue || chargePrice <= paymentFeeMin) {\n            subscriptions.managerCommand(_subscriptionId, ICaskSubscriptions.ManagerCommand.Cancel);\n\n        } else {\n\n            if (_processPayment(consumer, subscription.provider, _subscriptionId, chargePrice)) {\n\n                if (subscription.renewAt + planInfo.period < timestamp) {\n                    // subscription is still behind, put in next queue bucket\n                    processQueue[CheckType.PastDue][_bucketAt(timestamp)].push(_subscriptionId);\n                } else {\n                    processQueue[CheckType.Active][_bucketAt(subscription.renewAt + planInfo.period)].push(_subscriptionId);\n                }\n\n                subscriptions.managerCommand(_subscriptionId, ICaskSubscriptions.ManagerCommand.Renew);\n\n            } else {\n\n                if (subscription.renewAt < timestamp - (planInfo.gracePeriod * 1 days)) {\n                    subscriptions.managerCommand(_subscriptionId, ICaskSubscriptions.ManagerCommand.Cancel);\n                } else if (subscription.status != ICaskSubscriptions.SubscriptionStatus.PastDue) {\n                    processQueue[CheckType.PastDue][_bucketAt(timestamp + paymentRetryDelay)].push(_subscriptionId);\n                    subscriptions.managerCommand(_subscriptionId, ICaskSubscriptions.ManagerCommand.PastDue);\n                } else {\n                    processQueue[CheckType.PastDue][_bucketAt(timestamp + paymentRetryDelay)].push(_subscriptionId);\n                }\n\n            }\n        }\n    }\n\n    function _discountCurrentlyApplies(\n        address _consumer,\n        bytes32 _discountValidator,\n        ICaskSubscriptionPlans.Discount memory _discountInfo\n    ) internal returns(bool) {\n        if (_discountInfo.discountType == ICaskSubscriptionPlans.DiscountType.Code) {\n            return true;\n        } else if (_discountInfo.discountType == ICaskSubscriptionPlans.DiscountType.ERC20) {\n            return subscriptionPlans.erc20DiscountCurrentlyApplies(_consumer, _discountValidator);\n        }\n        return false;\n    }\n\n\n    /************************** ADMIN FUNCTIONS **************************/\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function setParameters(\n        uint256 _paymentMinValue,\n        uint256 _paymentFeeMin,\n        uint256 _paymentFeeRateMin,\n        uint256 _paymentFeeRateMax,\n        uint256 _stakeTargetFactor,\n        uint32 _processBucketSize,\n        uint32 _processBucketMaxAge,\n        uint32 _paymentRetryDelay\n    ) external onlyOwner {\n        require(_paymentFeeRateMin < 10000, \"!INVALID(paymentFeeRateMin)\");\n        require(_paymentFeeRateMax < 10000, \"!INVALID(paymentFeeRateMax)\");\n\n        paymentMinValue = _paymentMinValue;\n        paymentFeeMin = _paymentFeeMin;\n        paymentFeeRateMin = _paymentFeeRateMin;\n        paymentFeeRateMax = _paymentFeeRateMax;\n        stakeTargetFactor = _stakeTargetFactor;\n        processBucketSize = _processBucketSize;\n        processBucketMaxAge = _processBucketMaxAge;\n        paymentRetryDelay = _paymentRetryDelay;\n\n        // re-map to new bucket size\n        processingBucket[CheckType.Active] = _bucketAt(processingBucket[CheckType.Active]);\n        processingBucket[CheckType.PastDue] = _bucketAt(processingBucket[CheckType.PastDue]);\n\n        emit SetParameters();\n    }\n\n    function setProcessingBucket(\n        CheckType _checkType,\n        uint32 _timestamp\n    ) external onlyOwner {\n        processingBucket[_checkType] = _bucketAt(_timestamp);\n    }\n\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easilly be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "contracts/p2p/CaskP2P.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@opengsn/contracts/src/BaseRelayRecipient.sol\";\n\nimport \"../interfaces/ICaskP2P.sol\";\nimport \"../interfaces/ICaskP2PManager.sol\";\n\ncontract CaskP2P is\nICaskP2P,\nInitializable,\nOwnableUpgradeable,\nPausableUpgradeable,\nBaseRelayRecipient\n{\n    using SafeERC20 for IERC20Metadata;\n\n    /** @dev contract to manage P2P executions. */\n    ICaskP2PManager public p2pManager;\n\n    /** @dev map of P2P ID to P2P info. */\n    mapping(bytes32 => P2P) private p2pMap; // p2pId => P2P\n    mapping(address => bytes32[]) private userP2Ps; // user => p2pId[]\n\n\n    /** @dev minimum amount of vault base asset for a P2P. */\n    uint256 public minAmount;\n\n    /** @dev minimum period for a P2P. */\n    uint32 public minPeriod;\n\n    function initialize() public initializer {\n        __Ownable_init();\n        __Pausable_init();\n\n        minAmount = 1;\n        minPeriod = 86400;\n    }\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    function versionRecipient() public pure override returns(string memory) { return \"2.2.0\"; }\n\n    function _msgSender() internal view override(ContextUpgradeable, BaseRelayRecipient)\n    returns (address sender) {\n        sender = BaseRelayRecipient._msgSender();\n    }\n\n    function _msgData() internal view override(ContextUpgradeable, BaseRelayRecipient)\n    returns (bytes calldata) {\n        return BaseRelayRecipient._msgData();\n    }\n\n    modifier onlyUser(bytes32 _p2pId) {\n        require(_msgSender() == p2pMap[_p2pId].user, \"!AUTH\");\n        _;\n    }\n\n    modifier onlyManager() {\n        require(_msgSender() == address(p2pManager), \"!AUTH\");\n        _;\n    }\n\n\n    function createP2P(\n        address _to,\n        uint256 _amount,\n        uint256 _totalAmount,\n        uint32 _period\n    ) external override returns(bytes32) {\n        require(_amount >= minAmount, \"!INVALID(amount)\");\n        require(_period >= minPeriod, \"!INVALID(period)\");\n\n        bytes32 p2pId = keccak256(abi.encodePacked(_msgSender(), _amount, _period, block.number, block.timestamp));\n\n        uint32 timestamp = uint32(block.timestamp);\n\n        P2P storage p2p = p2pMap[p2pId];\n        p2p.user = _msgSender();\n        p2p.to = _to;\n        p2p.amount = _amount;\n        p2p.totalAmount = _totalAmount;\n        p2p.period = _period;\n        p2p.createdAt = timestamp;\n        p2p.processAt = timestamp;\n        p2p.status = P2PStatus.Active;\n\n        userP2Ps[_msgSender()].push(p2pId);\n\n        p2pManager.registerP2P(p2pId);\n\n        require(p2p.status == P2PStatus.Active, \"!UNPROCESSABLE\");\n        require(p2p.numPayments == 1, \"!UNPROCESSABLE\"); // make sure first P2P payment succeeded\n\n        emit P2PCreated(p2pId, p2p.user, p2p.to, _amount, _totalAmount, _period);\n\n        return p2pId;\n    }\n\n    function pauseP2P(\n        bytes32 _p2pId\n    ) external override onlyUser(_p2pId) {\n        P2P storage p2p = p2pMap[_p2pId];\n        require(p2p.status == P2PStatus.Active, \"!NOT_ACTIVE\");\n\n        p2p.status = P2PStatus.Paused;\n\n        emit P2PPaused(_p2pId, p2p.user);\n    }\n\n    function resumeP2P(\n        bytes32 _p2pId\n    ) external override onlyUser(_p2pId) {\n        P2P storage p2p = p2pMap[_p2pId];\n        require(p2p.status == P2PStatus.Paused, \"!NOT_PAUSED\");\n\n        p2p.status = P2PStatus.Active;\n\n        if (p2p.processAt < uint32(block.timestamp)) {\n            p2p.processAt = uint32(block.timestamp);\n        }\n\n        p2pManager.registerP2P(_p2pId);\n\n        emit P2PResumed(_p2pId, p2p.user);\n    }\n\n    function cancelP2P(\n        bytes32 _p2pId\n    ) external override onlyUser(_p2pId) {\n        P2P storage p2p = p2pMap[_p2pId];\n        require(p2p.status == P2PStatus.Active ||\n            p2p.status == P2PStatus.Paused, \"!INVALID(status)\");\n\n        p2p.status = P2PStatus.Canceled;\n\n        emit P2PResumed(_p2pId, p2p.user);\n    }\n\n    function getP2P(\n        bytes32 _p2pId\n    ) external override view returns (P2P memory) {\n        return p2pMap[_p2pId];\n    }\n\n    function getUserP2P(\n        address _user,\n        uint256 _idx\n    ) external override view returns (bytes32) {\n        return userP2Ps[_user][_idx];\n    }\n\n    function getUserP2PCount(\n        address _user\n    ) external override view returns (uint256) {\n        return userP2Ps[_user].length;\n    }\n\n\n    /************************** MANAGER FUNCTIONS **************************/\n\n    function managerCommand(\n        bytes32 _p2pId,\n        ManagerCommand _command\n    ) external override onlyManager {\n\n        P2P storage p2p = p2pMap[_p2pId];\n\n        if (_command == ManagerCommand.Skip) {\n\n            p2p.processAt = p2p.processAt + p2p.period;\n            p2p.numSkips += 1;\n\n            emit P2PSkipped(_p2pId, p2p.user);\n\n        } else if (_command == ManagerCommand.Pause) {\n\n            p2p.status = P2PStatus.Paused;\n\n            emit P2PPaused(_p2pId, p2p.user);\n\n        } else if (_command == ManagerCommand.Cancel) {\n\n            p2p.status = P2PStatus.Canceled;\n\n            emit P2PCanceled(_p2pId, p2p.user);\n\n        }\n    }\n\n    function managerProcessed(\n        bytes32 _p2pId,\n        uint256 _amount,\n        uint256 _fee\n    ) external override onlyManager {\n        P2P storage p2p = p2pMap[_p2pId];\n\n        p2p.processAt = p2p.processAt + p2p.period;\n        p2p.currentAmount += _amount;\n        p2p.numPayments += 1;\n\n        emit P2PProcessed(_p2pId, p2p.user, _amount, _fee);\n\n        if (p2p.totalAmount > 0 && p2p.currentAmount >= p2p.totalAmount) {\n            p2p.status = P2PStatus.Complete;\n            emit P2PCompleted(_p2pId, p2p.user);\n        }\n\n    }\n\n    /************************** ADMIN FUNCTIONS **************************/\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function setManager(\n        address _p2pManager\n    ) external onlyOwner {\n        p2pManager = ICaskP2PManager(_p2pManager);\n    }\n\n    function setTrustedForwarder(\n        address _forwarder\n    ) external onlyOwner {\n        _setTrustedForwarder(_forwarder);\n    }\n\n    function setMinAmount(\n        uint256 _minAmount\n    ) external onlyOwner {\n        minAmount = _minAmount;\n    }\n\n    function setMinPeriod(\n        uint32 _minPeriod\n    ) external onlyOwner {\n        minPeriod = _minPeriod;\n    }\n}"
    },
    "contracts/interfaces/ICaskP2P.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICaskP2P {\n\n    enum P2PStatus {\n        None,\n        Active,\n        Paused,\n        Canceled,\n        Complete\n    }\n\n    enum ManagerCommand {\n        None,\n        Cancel,\n        Skip,\n        Pause\n    }\n\n    struct P2P {\n        address user;\n        address to;\n        uint256 amount;\n        uint256 totalAmount;\n        uint256 currentAmount;\n        uint256 numPayments;\n        uint256 numSkips;\n        uint32 period;\n        uint32 createdAt;\n        uint32 processAt;\n        P2PStatus status;\n    }\n\n    function createP2P(\n        address _to,\n        uint256 _amount,\n        uint256 _totalAmount,\n        uint32 _period\n    ) external returns(bytes32);\n\n    function getP2P(bytes32 _p2pId) external view returns (P2P memory);\n\n    function getUserP2P(address _user, uint256 _idx) external view returns (bytes32);\n\n    function getUserP2PCount(address _user) external view returns (uint256);\n\n    function cancelP2P(bytes32 _p2pId) external;\n\n    function pauseP2P(bytes32 _p2pId) external;\n\n    function resumeP2P(bytes32 _p2pId) external;\n\n    function managerCommand(bytes32 _p2pId, ManagerCommand _command) external;\n\n    function managerProcessed(bytes32 _p2pId, uint256 amount, uint256 _fee) external;\n\n\n    event P2PCreated(bytes32 indexed p2pId, address indexed user, address indexed to,\n        uint256 amount, uint256 totalAmount, uint32 period);\n\n    event P2PPaused(bytes32 indexed p2pId, address indexed user);\n\n    event P2PResumed(bytes32 indexed p2pId, address indexed user);\n\n    event P2PSkipped(bytes32 indexed p2pId, address indexed user);\n\n    event P2PProcessed(bytes32 indexed p2pId, address indexed user, uint256 amount, uint256 fee);\n\n    event P2PCanceled(bytes32 indexed p2pId, address indexed user);\n\n    event P2PCompleted(bytes32 indexed p2pId, address indexed user);\n}"
    },
    "contracts/interfaces/ICaskP2PManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICaskP2PManager {\n\n    function registerP2P(bytes32 _p2pId) external;\n\n}"
    },
    "contracts/p2p/CaskP2PManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../job_queue/CaskJobQueue.sol\";\nimport \"../interfaces/ICaskP2PManager.sol\";\nimport \"../interfaces/ICaskP2P.sol\";\nimport \"../interfaces/ICaskVault.sol\";\n\ncontract CaskP2PManager is\nInitializable,\nReentrancyGuardUpgradeable,\nCaskJobQueue,\nICaskP2PManager\n{\n    using SafeERC20 for IERC20Metadata;\n\n    uint8 private constant QUEUE_ID_P2P = 1;\n\n\n    /** @dev Pointer to CaskP2P contract */\n    ICaskP2P public caskP2P;\n\n    /** @dev vault to use for P2P funding. */\n    ICaskVault public caskVault;\n    \n\n    /************************** PARAMETERS **************************/\n\n    /** @dev max number of failed P2P purchases before P2P is permanently canceled. */\n    uint256 public maxSkips;\n\n    /** @dev P2P transaction fee. */\n    uint256 public paymentFee;\n\n\n\n    function initialize(\n        address _caskP2P,\n        address _caskVault\n    ) public initializer {\n        caskP2P = ICaskP2P(_caskP2P);\n        caskVault = ICaskVault(_caskVault);\n\n        maxSkips = 0;\n        paymentFee = 0;\n\n        __CaskJobQueue_init(3600);\n    }\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    function registerP2P(\n        bytes32 _p2pId\n    ) override external nonReentrant whenNotPaused {\n        processWorkUnit(QUEUE_ID_P2P, _p2pId);\n    }\n\n    function processWorkUnit(\n        uint8 _queueId,\n        bytes32 _p2pId\n    ) override internal {\n\n        ICaskP2P.P2P memory p2p = caskP2P.getP2P(_p2pId);\n\n        if (p2p.status != ICaskP2P.P2PStatus.Active){\n            return;\n        }\n\n        uint32 timestamp = uint32(block.timestamp);\n\n        // not time to process yet, re-queue for processAt time\n        if (p2p.processAt > timestamp) {\n            scheduleWorkUnit(_queueId, _p2pId, bucketAt(p2p.processAt));\n            return;\n        }\n\n        uint256 amount = p2p.amount;\n        if (p2p.totalAmount > 0 && amount > p2p.totalAmount - p2p.currentAmount) {\n            amount = p2p.totalAmount - p2p.currentAmount;\n        }\n        // did a transfer happen successfully?\n        if (_processP2PTransfer(p2p, amount)) {\n\n            if (p2p.totalAmount == 0 || p2p.currentAmount + amount < p2p.totalAmount) {\n                scheduleWorkUnit(_queueId, _p2pId, bucketAt(p2p.processAt + p2p.period));\n            }\n\n            caskP2P.managerProcessed(_p2pId, amount, paymentFee);\n\n        } else {\n            if (maxSkips > 0 && p2p.numSkips >= maxSkips) {\n                caskP2P.managerCommand(_p2pId, ICaskP2P.ManagerCommand.Pause);\n            } else {\n                scheduleWorkUnit(_queueId, _p2pId, bucketAt(p2p.processAt + p2p.period));\n\n                caskP2P.managerCommand(_p2pId, ICaskP2P.ManagerCommand.Skip);\n            }\n        }\n\n    }\n\n    function _processP2PTransfer(\n        ICaskP2P.P2P memory _p2p,\n        uint256 _amount\n    ) internal returns(bool) {\n        try caskVault.protocolPayment(_p2p.user, _p2p.to, _amount, paymentFee) {\n            return true;\n        } catch (bytes memory) {\n            return false;\n        }\n    }\n\n\n    function setParameters(\n        uint256 _maxSkips,\n        uint256 _paymentFee,\n        uint32 _queueBucketSize\n    ) external onlyOwner {\n        maxSkips = _maxSkips;\n        paymentFee = _paymentFee;\n        queueBucketSize = _queueBucketSize;\n    }\n\n    function recoverFunds(\n        address _asset,\n        address _dest\n    ) external onlyOwner {\n        IERC20Metadata(_asset).transfer(_dest, IERC20Metadata(_asset).balanceOf(address(this)));\n    }\n}\n"
    },
    "contracts/job_queue/CaskJobQueue.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/ICaskJobQueue.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\n\nabstract contract CaskJobQueue is\nInitializable,\nOwnableUpgradeable,\nPausableUpgradeable,\nKeeperCompatibleInterface,\nReentrancyGuardUpgradeable,\nICaskJobQueue\n{\n\n    /** @dev size (in seconds) of buckets to group jobs into for processing */\n    uint32 public queueBucketSize;\n\n    /** @dev max age (in seconds) of a bucket before a processing is triggered */\n    uint32 public maxQueueAge;\n\n    /** @dev map used to track jobs in the queues */\n    mapping(uint8 => mapping(uint32 => bytes32[])) private queue; // renewal bucket => workUnit[]\n    mapping(uint8 => uint32) private queueBucket; // current bucket being processed\n\n\n    function __CaskJobQueue_init(\n        uint32 _queueBucketSize\n    ) internal onlyInitializing {\n        __Ownable_init();\n        __Pausable_init();\n        __ICaskJobQueue_init_unchained();\n        __CaskJobQueue_init_unchained(_queueBucketSize);\n    }\n\n    function __CaskJobQueue_init_unchained(\n        uint32 _queueBucketSize\n    ) internal onlyInitializing {\n        queueBucketSize = _queueBucketSize;\n        maxQueueAge = queueBucketSize * 20;\n    }\n\n\n    function bucketAt(\n        uint32 _timestamp\n    ) internal view returns(uint32) {\n        return _timestamp - (_timestamp % queueBucketSize) + queueBucketSize;\n    }\n\n    function currentBucket() internal view returns(uint32) {\n        uint32 timestamp = uint32(block.timestamp);\n        return timestamp - (timestamp % queueBucketSize);\n    }\n\n    function queueItem(\n        uint8 _queueId,\n        uint32 _bucket,\n        uint256 _idx\n    ) external override view returns(bytes32) {\n        return queue[_queueId][_bucket][_idx];\n    }\n\n    function queueSize(\n        uint8 _queueId,\n        uint32 _bucket\n    ) external override view returns(uint256) {\n        return queue[_queueId][_bucket].length;\n    }\n\n    function queuePosition(\n        uint8 _queueId\n    ) external override view returns(uint32) {\n        return queueBucket[_queueId];\n    }\n\n    function setQueuePosition(\n        uint8 _queueId,\n        uint32 _timestamp\n    ) external override onlyOwner {\n        queueBucket[_queueId] = bucketAt(_timestamp);\n    }\n\n    function checkUpkeep(\n        bytes calldata checkData\n    ) external view override returns(bool upkeepNeeded, bytes memory performData) {\n        (\n        uint256 limit,\n        uint256 minDepth,\n        uint8 queueId\n        ) = abi.decode(checkData, (uint256, uint256, uint8));\n\n        uint32 bucket = currentBucket();\n        upkeepNeeded = false;\n\n        uint32 checkBucket = queueBucket[queueId];\n        if (checkBucket == 0) {\n            checkBucket = bucket;\n        }\n\n        // if queue is over maxQueueAge and needs upkeep regardless of anything queued\n        if (bucket >= checkBucket && bucket - checkBucket >= maxQueueAge) {\n            upkeepNeeded = true;\n        } else {\n            while (checkBucket <= bucket) {\n                if (queue[queueId][checkBucket].length > 0 &&\n                    queue[queueId][checkBucket].length >= minDepth)\n                {\n                    upkeepNeeded = true;\n                    break;\n                }\n                checkBucket += queueBucketSize;\n            }\n        }\n\n        performData = abi.encode(limit, queue[queueId][checkBucket].length, queueId);\n    }\n\n\n    function performUpkeep(\n        bytes calldata performData\n    ) external override whenNotPaused nonReentrant {\n        (\n        uint256 limit,\n        uint256 depth,\n        uint8 queueId\n        ) = abi.decode(performData, (uint256, uint256, uint8));\n\n        uint32 bucket = currentBucket();\n        uint256 jobsProcessed = 0;\n        uint256 maxBucketChecks = limit * 5;\n\n        if (queueBucket[queueId] == 0) {\n            queueBucket[queueId] = bucket;\n        }\n\n        while (jobsProcessed < limit && maxBucketChecks > 0 && queueBucket[queueId] <= bucket) {\n            uint256 queueLen = queue[queueId][queueBucket[queueId]].length;\n            if (queueLen > 0) {\n                bytes32 workUnit = queue[queueId][queueBucket[queueId]][queueLen-1];\n                queue[queueId][queueBucket[queueId]].pop();\n                processWorkUnit(queueId, workUnit);\n                emit WorkUnitProcessed(queueId, workUnit);\n                jobsProcessed += 1;\n            } else {\n                if (queueBucket[queueId] < bucket) {\n                    queueBucket[queueId] += queueBucketSize;\n                    maxBucketChecks -= 1;\n                } else {\n                    break; // nothing left to do\n                }\n            }\n        }\n\n        emit QueueRunReport(limit, jobsProcessed, depth, queueId,\n            queue[queueId][queueBucket[queueId]].length, queueBucket[queueId]);\n    }\n\n\n    function scheduleWorkUnit(\n        uint8 _queueId,\n        bytes32 _workUnit,\n        uint32 _processAt\n    ) internal override {\n        queue[_queueId][bucketAt(_processAt)].push(_workUnit);\n        emit WorkUnitQueued(_queueId, _workUnit, _processAt);\n    }\n\n    function setQueueBucketSize(\n        uint32 _queueBucketSize\n    ) external override onlyOwner {\n        queueBucketSize = _queueBucketSize;\n    }\n\n    function setMaxQueueAge(\n        uint32 _maxQueueAge\n    ) external override onlyOwner {\n        maxQueueAge = _maxQueueAge;\n    }\n\n}"
    },
    "contracts/interfaces/ICaskJobQueue.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nabstract contract ICaskJobQueue is Initializable {\n\n    function __ICaskJobQueue_init() internal onlyInitializing {\n        __ICaskJobQueue_init_unchained();\n    }\n\n    function __ICaskJobQueue_init_unchained() internal onlyInitializing {\n    }\n\n\n    function processWorkUnit(uint8 _queueId, bytes32 _workUnit) virtual internal;\n\n    function scheduleWorkUnit(uint8 _queueId, bytes32 _workUnit, uint32 _processAt) virtual internal;\n\n    function queueItem(uint8 _queueId, uint32 _bucket, uint256 _idx) virtual external view returns(bytes32);\n\n    function queueSize(uint8 _queueId, uint32 _bucket) virtual external view returns(uint256);\n\n    function queuePosition(uint8 _queueId) virtual external view returns(uint32);\n\n    function setQueuePosition(uint8 _queueId, uint32 _timestamp) virtual external;\n\n    function setQueueBucketSize(uint32 _queueBucketSize) virtual external;\n\n    function setMaxQueueAge(uint32 _maxQueueAge) virtual external;\n\n\n    event WorkUnitProcessed(uint8 queueId, bytes32 workUnit);\n\n    event WorkUnitQueued(uint8 queueId, bytes32 workUnit, uint32 processAt);\n\n    /** @dev Emitted when a queue run is finished */\n    event QueueRunReport(uint256 limit, uint256 jobsProcessed, uint256 depth, uint8 queueId,\n        uint256 queueRemaining, uint32 currentBucket);\n\n}"
    },
    "contracts/dca/CaskDCAManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\n\nimport \"../job_queue/CaskJobQueue.sol\";\nimport \"../interfaces/ICaskDCAManager.sol\";\nimport \"../interfaces/ICaskDCA.sol\";\nimport \"../interfaces/ICaskVault.sol\";\n\ncontract CaskDCAManager is\nInitializable,\nReentrancyGuardUpgradeable,\nCaskJobQueue,\nICaskDCAManager\n{\n    using SafeERC20 for IERC20Metadata;\n\n    uint8 private constant QUEUE_ID_DCA = 1;\n\n\n    /** @dev Pointer to CaskDCA contract */\n    ICaskDCA public caskDCA;\n\n    /** @dev vault to use for DCA funding. */\n    ICaskVault public caskVault;\n\n    /** @dev merkle root of allowed assets definitions. */\n    bytes32 public assetsMerkleRoot;\n\n    /** @dev map of assetSpecs that are deemed unsafe and any active DCA to them will be canceled */\n    mapping(bytes32 => bool) public blacklistedAssetspecs;\n\n\n    /************************** PARAMETERS **************************/\n\n    /** @dev max number of failed DCA purchases before DCA is permanently canceled. */\n    uint256 public maxSkips;\n\n    /** @dev DCA transaction fee in basis points. */\n    uint256 public dcaFeeBps;\n\n    /** @dev Minimum DCA transaction fee. */\n    uint256 public dcaFeeMin;\n\n    /** @dev Smallest allowable DCA amount. */\n    uint256 public dcaMinValue;\n\n    /** @dev revert if price feed age is older than this number of seconds. set to 0 to disable check. */\n    uint256 public maxPriceFeedAge;\n\n    /** @dev Address to receive DCA fees. */\n    address public feeDistributor;\n\n\n    function initialize(\n        address _caskDCA,\n        address _caskVault,\n        address _feeDistributor\n    ) public initializer {\n        caskDCA = ICaskDCA(_caskDCA);\n        caskVault = ICaskVault(_caskVault);\n        feeDistributor = _feeDistributor;\n\n        maxSkips = 0;\n        dcaFeeBps = 0;\n        dcaFeeMin = 0;\n        dcaMinValue = 0;\n        maxPriceFeedAge = 0;\n\n        __CaskJobQueue_init(3600);\n    }\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    function registerDCA(\n        bytes32 _dcaId\n    ) override external nonReentrant whenNotPaused {\n        processWorkUnit(QUEUE_ID_DCA, _dcaId);\n    }\n\n    function processWorkUnit(\n        uint8 _queueId,\n        bytes32 _dcaId\n    ) override internal {\n\n        ICaskDCA.DCA memory dca = caskDCA.getDCA(_dcaId);\n\n        bytes32 assetSpecHash = keccak256(abi.encode(dca.router, dca.priceFeed, dca.path));\n\n        if (blacklistedAssetspecs[assetSpecHash]) {\n            caskDCA.managerCommand(_dcaId, ICaskDCA.ManagerCommand.Cancel);\n            return;\n        }\n\n        if (dca.status != ICaskDCA.DCAStatus.Active){\n            return;\n        }\n\n        if (dca.amount < dcaMinValue) {\n            caskDCA.managerCommand(_dcaId, ICaskDCA.ManagerCommand.Cancel);\n            return;\n        }\n\n        uint32 timestamp = uint32(block.timestamp);\n\n        // not time to process yet, re-queue for processAt time\n        if (dca.processAt > timestamp) {\n            scheduleWorkUnit(_queueId, _dcaId, bucketAt(dca.processAt));\n            return;\n        }\n\n        uint256 amount = dca.amount;\n        if (dca.totalAmount > 0 && amount > dca.totalAmount - dca.currentAmount) {\n            amount = dca.totalAmount - dca.currentAmount;\n        }\n\n        uint256 protocolFee = (amount * dcaFeeBps) / 10000;\n        if (protocolFee < dcaFeeMin) {\n            protocolFee = dcaFeeMin;\n        }\n\n        address inputAsset = dca.path[0];\n        address outputAsset = dca.path[dca.path.length-1];\n\n        ICaskVault.Asset memory inputAssetInfo = caskVault.getAsset(inputAsset);\n\n        if (!inputAssetInfo.allowed) {\n            scheduleWorkUnit(_queueId, _dcaId, bucketAt(dca.processAt + dca.period));\n            caskDCA.managerSkipped(_dcaId, ICaskDCA.SkipReason.AssetNotAllowed);\n            return;\n        }\n\n        if (!_checkMinMaxPrice(_dcaId, inputAsset, outputAsset, amount, dca.priceFeed)) {\n            scheduleWorkUnit(_queueId, _dcaId, bucketAt(dca.processAt + dca.period));\n\n            try caskVault.protocolPayment(dca.user, address(this), dcaFeeMin) {\n                caskDCA.managerSkipped(_dcaId, ICaskDCA.SkipReason.OutsideLimits);\n            } catch (bytes memory) {\n                caskDCA.managerCommand(_dcaId, ICaskDCA.ManagerCommand.Cancel);\n            }\n\n            return;\n        }\n\n        uint256 buyQty = _processDCABuy(_dcaId, inputAsset, outputAsset, amount, protocolFee);\n\n        // did a swap happen successfully?\n        if (buyQty > 0) {\n\n            if (dca.totalAmount == 0 || dca.currentAmount + amount < dca.totalAmount) {\n                scheduleWorkUnit(_queueId, _dcaId, bucketAt(dca.processAt + dca.period));\n            }\n\n            caskDCA.managerProcessed(_dcaId, amount, buyQty, protocolFee);\n\n        } else {\n            if (maxSkips > 0 && dca.numSkips >= maxSkips) {\n                caskDCA.managerCommand(_dcaId, ICaskDCA.ManagerCommand.Pause);\n            } else {\n                scheduleWorkUnit(_queueId, _dcaId, bucketAt(dca.processAt + dca.period));\n            }\n        }\n\n    }\n\n    function _processDCABuy(\n        bytes32 _dcaId,\n        address _inputAsset,\n        address _outputAsset,\n        uint256 _amount,\n        uint256 _protocolFee\n    ) internal returns(uint256) {\n\n        ICaskDCA.DCA memory dca = caskDCA.getDCA(_dcaId);\n        ICaskVault.Asset memory inputAssetInfo = caskVault.getAsset(_inputAsset);\n\n        uint256 beforeBalance = IERC20Metadata(_inputAsset).balanceOf(address(this));\n\n        // perform a 'payment' to this contract, fee goes to vault\n        try caskVault.protocolPayment(dca.user, address(this), _amount, 0) {\n            // noop\n        } catch (bytes memory) {\n            caskDCA.managerSkipped(_dcaId, ICaskDCA.SkipReason.PaymentFailed);\n            return 0;\n        }\n\n        // then withdraw the MASH received above as input asset to fund swap\n        uint256 withdrawShares = caskVault.sharesForValue(_amount - _protocolFee);\n        if (withdrawShares > caskVault.balanceOf(address(this))) {\n            withdrawShares = caskVault.balanceOf(address(this));\n        }\n        caskVault.withdraw(_inputAsset, withdrawShares);\n\n        // calculate actual amount of inputAsset that was received from payment/withdraw\n        uint256 amountIn = IERC20Metadata(_inputAsset).balanceOf(address(this)) - beforeBalance;\n        require(amountIn > 0, \"!INVALID(amountIn)\");\n\n        uint256 minOutput = 0;\n        if (dca.priceFeed != address(0)) {\n            minOutput = _convertPrice(inputAssetInfo, _outputAsset, dca.priceFeed, _amount - _protocolFee);\n        }\n        uint256[] memory amountOuts = IUniswapV2Router02(dca.router).getAmountsOut(_amount - _protocolFee, dca.path);\n        if (minOutput > 0) {\n            minOutput = minOutput - ((minOutput * dca.slippageBps) / 10000);\n            if (amountOuts[amountOuts.length-1] < minOutput) {\n\n                // undo withdraw and send shares back to user\n                IERC20Metadata(_inputAsset).safeIncreaseAllowance(address(caskVault), amountIn);\n                caskVault.deposit(_inputAsset, amountIn);\n                caskVault.transfer(dca.user, caskVault.balanceOf(address(this))); // refund full amount\n\n                caskDCA.managerSkipped(_dcaId, ICaskDCA.SkipReason.ExcessiveSlippage);\n\n                return 0;\n            }\n        } else {\n            minOutput = amountOuts[amountOuts.length-1] - ((amountOuts[amountOuts.length-1] * dca.slippageBps) / 10000);\n        }\n\n        // let swap router spend the amount of newly acquired inputAsset\n        IERC20Metadata(_inputAsset).safeIncreaseAllowance(dca.router, amountIn);\n\n        // perform swap\n        try IUniswapV2Router02(dca.router).swapExactTokensForTokens(\n            amountIn,\n            minOutput,\n            dca.path,\n            dca.to,\n            block.timestamp + 1 hours\n        ) returns (uint256[] memory amounts) {\n            require(amounts.length >= 2, \"!INVALID(amounts)\");\n\n            // any non-withdrawn shares are the fee portion - send to fee distributor\n            caskVault.transfer(feeDistributor, caskVault.balanceOf(address(this)));\n\n            return amounts[amounts.length-1]; // last amount is final output amount\n        } catch (bytes memory) {\n\n            // undo withdraw and send shares back to user\n            IERC20Metadata(_inputAsset).safeIncreaseAllowance(address(caskVault), amountIn);\n            caskVault.deposit(_inputAsset, amountIn);\n            caskVault.transfer(dca.user, caskVault.balanceOf(address(this))); // refund full amount\n\n            caskDCA.managerSkipped(_dcaId, ICaskDCA.SkipReason.SwapFailed);\n\n            return 0;\n        }\n    }\n\n    function _checkMinMaxPrice(\n        bytes32 _dcaId,\n        address _inputAsset,\n        address _outputAsset,\n        uint256 _amount,\n        address _outputPriceFeed\n    ) internal view returns(bool) {\n        ICaskDCA.DCA memory dca = caskDCA.getDCA(_dcaId);\n        ICaskVault.Asset memory inputAssetInfo = caskVault.getAsset(_inputAsset);\n\n        if (dca.minPrice == 0 && dca.maxPrice == 0) {\n            return true;\n        }\n\n        uint256 pricePerOutputUnit;\n        uint8 outputAssetDecimals = IERC20Metadata(_outputAsset).decimals();\n        uint256 outputAssetOneUnit = uint256(10 ** outputAssetDecimals);\n\n        if (dca.priceFeed != address(0)) { // use price feed\n            pricePerOutputUnit =\n                    outputAssetOneUnit *\n                    outputAssetOneUnit /\n                    _convertPrice(inputAssetInfo, _outputAsset, _outputPriceFeed, uint256(10 ** inputAssetInfo.assetDecimals));\n\n        } else { // use swap router price\n            uint256[] memory amountOuts = IUniswapV2Router02(dca.router).getAmountsOut(_amount, dca.path);\n            pricePerOutputUnit =\n                    _scalePrice(_amount, inputAssetInfo.assetDecimals, outputAssetDecimals) *\n                    outputAssetOneUnit /\n                    amountOuts[amountOuts.length-1];\n        }\n\n        if (dca.minPrice > 0 && pricePerOutputUnit < dca.minPrice) {\n            return false;\n        } else if (dca.maxPrice > 0 && pricePerOutputUnit > dca.maxPrice) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function _convertPrice(\n        ICaskVault.Asset memory _fromAsset,\n        address _toAsset,\n        address _toPriceFeed,\n        uint256 _amount\n    ) internal view returns(uint256) {\n        if (_amount == 0) {\n            return 0;\n        }\n\n        int256 oraclePrice;\n        uint256 updatedAt;\n\n        uint8 toAssetDecimals = IERC20Metadata(_toAsset).decimals();\n        uint8 toFeedDecimals = AggregatorV3Interface(_toPriceFeed).decimals();\n        \n        ( , oraclePrice, , updatedAt, ) = AggregatorV3Interface(_fromAsset.priceFeed).latestRoundData();\n        uint256 fromOraclePrice = uint256(oraclePrice);\n        require(maxPriceFeedAge == 0 || block.timestamp - updatedAt <= maxPriceFeedAge, \"!PRICE_OUTDATED\");\n        ( , oraclePrice, , updatedAt, ) = AggregatorV3Interface(_toPriceFeed).latestRoundData();\n        uint256 toOraclePrice = uint256(oraclePrice);\n        require(maxPriceFeedAge == 0 || block.timestamp - updatedAt <= maxPriceFeedAge, \"!PRICE_OUTDATED\");\n\n        if (_fromAsset.priceFeedDecimals != toFeedDecimals) {\n            // since oracle precision is different, scale everything\n            // to _toAsset precision and do conversion\n            return _scalePrice(_amount, _fromAsset.assetDecimals, toAssetDecimals) *\n                _scalePrice(fromOraclePrice, _fromAsset.priceFeedDecimals, toAssetDecimals) /\n                _scalePrice(toOraclePrice, toFeedDecimals, toAssetDecimals);\n        } else {\n            // oracles are already in same precision, so just scale _amount to oracle precision,\n            // do the price conversion and convert back to _toAsset precision\n            return _scalePrice(\n                _scalePrice(_amount, _fromAsset.assetDecimals, toFeedDecimals) * fromOraclePrice / toOraclePrice,\n                    toFeedDecimals,\n                    toAssetDecimals\n            );\n        }\n    }\n\n    function _scalePrice(\n        uint256 _price,\n        uint8 _priceDecimals,\n        uint8 _decimals\n    ) internal pure returns (uint256){\n        if (_priceDecimals < _decimals) {\n            return _price * uint256(10 ** uint256(_decimals - _priceDecimals));\n        } else if (_priceDecimals > _decimals) {\n            return _price / uint256(10 ** uint256(_priceDecimals - _decimals));\n        }\n        return _price;\n    }\n\n    function setParameters(\n        uint256 _maxSkips,\n        uint256 _dcaFeeBps,\n        uint256 _dcaFeeMin,\n        uint256 _dcaMinValue,\n        uint256 _maxPriceFeedAge,\n        uint32 _queueBucketSize,\n        uint32 _maxQueueAge\n    ) external onlyOwner {\n        require(_dcaFeeBps < 10000, \"!INVALID(dcaFeeBps)\");\n\n        maxSkips = _maxSkips;\n        dcaFeeBps = _dcaFeeBps;\n        dcaFeeMin = _dcaFeeMin;\n        dcaMinValue = _dcaMinValue;\n        maxPriceFeedAge = _maxPriceFeedAge;\n        queueBucketSize = _queueBucketSize;\n        maxQueueAge = _maxQueueAge;\n\n        emit SetParameters();\n    }\n\n    function setFeeDistributor(\n        address _feeDistributor\n    ) external onlyOwner {\n        feeDistributor = _feeDistributor;\n        emit SetFeeDistributor(_feeDistributor);\n    }\n\n    function blacklistAssetspec(\n        bytes32 _assetSpec\n    ) external onlyOwner {\n        blacklistedAssetspecs[_assetSpec] = true;\n\n        emit BlacklistAssetSpec(_assetSpec);\n    }\n\n    function unblacklistAssetspec(\n        bytes32 _assetSpec\n    ) external onlyOwner {\n        blacklistedAssetspecs[_assetSpec] = false;\n\n        emit UnblacklistAssetSpec(_assetSpec);\n    }\n\n    function recoverFunds(\n        address _asset,\n        address _dest\n    ) external onlyOwner {\n        IERC20Metadata(_asset).transfer(_dest, IERC20Metadata(_asset).balanceOf(address(this)));\n    }\n\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "pragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/ICaskDCAManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICaskDCAManager {\n\n    function registerDCA(bytes32 _dcaId) external;\n\n    /** @dev Emitted when manager parameters are changed. */\n    event SetParameters();\n\n    /** @dev Emitted when an assetSpec is blacklisted. */\n    event BlacklistAssetSpec(bytes32 indexed assetSpec);\n\n    /** @dev Emitted when an assetSpec is unblacklisted. */\n    event UnblacklistAssetSpec(bytes32 indexed assetSpec);\n\n    /** @dev Emitted the feeDistributor is changed. */\n    event SetFeeDistributor(address feeDistributor);\n}"
    },
    "contracts/interfaces/ICaskDCA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICaskDCA {\n\n    enum DCAStatus {\n        None,\n        Active,\n        Paused,\n        Canceled,\n        Complete\n    }\n\n    enum ManagerCommand {\n        None,\n        Cancel,\n        Skip,\n        Pause\n    }\n\n    enum SkipReason {\n        None,\n        AssetNotAllowed,\n        PaymentFailed,\n        OutsideLimits,\n        ExcessiveSlippage,\n        SwapFailed\n    }\n\n    struct DCA {\n        address user;\n        address to;\n        address router;\n        address priceFeed;\n        uint256 amount;\n        uint256 totalAmount;\n        uint256 currentAmount;\n        uint256 currentQty;\n        uint256 numBuys;\n        uint256 numSkips;\n        uint256 slippageBps;\n        uint256 maxPrice;\n        uint256 minPrice;\n        uint32 period;\n        uint32 createdAt;\n        uint32 processAt;\n        DCAStatus status;\n        address[] path;\n    }\n\n    function createDCA(\n        address[] calldata _assetSpec, // router, priceFeed, path...\n        bytes32[] calldata _merkleProof,\n        address _to,\n        uint256 _amount,\n        uint256 _totalAmount,\n        uint32 _period,\n        uint256 _slippageBps,\n        uint256 _minPrice,\n        uint256 _maxPrice\n    ) external returns(bytes32);\n\n    function getDCA(bytes32 _dcaId) external view returns (DCA memory);\n\n    function getUserDCA(address _user, uint256 _idx) external view returns (bytes32);\n\n    function getUserDCACount(address _user) external view returns (uint256);\n\n    function cancelDCA(bytes32 _dcaId) external;\n\n    function pauseDCA(bytes32 _dcaId) external;\n\n    function resumeDCA(bytes32 _dcaId) external;\n\n    function managerCommand(bytes32 _dcaId, ManagerCommand _command) external;\n\n    function managerProcessed(bytes32 _dcaId, uint256 _amount, uint256 _buyQty, uint256 _fee) external;\n\n    function managerSkipped(bytes32 _dcaId, SkipReason _skipReason) external;\n\n    event DCACreated(bytes32 indexed dcaId, address indexed user, address indexed to, address inputAsset,\n        address outputAsset, uint256 amount, uint256 totalAmount, uint32 period);\n\n    event DCAPaused(bytes32 indexed dcaId, address indexed user);\n\n    event DCAResumed(bytes32 indexed dcaId, address indexed user);\n\n    event DCASkipped(bytes32 indexed dcaId, address indexed user, SkipReason skipReason);\n\n    event DCAProcessed(bytes32 indexed dcaId, address indexed user, uint256 amount, uint256 buyQty, uint256 fee);\n\n    event DCACanceled(bytes32 indexed dcaId, address indexed user);\n\n    event DCACompleted(bytes32 indexed dcaId, address indexed user);\n}"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/dca/CaskDCA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@opengsn/contracts/src/BaseRelayRecipient.sol\";\n\nimport \"../interfaces/ICaskDCA.sol\";\nimport \"../interfaces/ICaskDCAManager.sol\";\n\ncontract CaskDCA is\nICaskDCA,\nInitializable,\nOwnableUpgradeable,\nPausableUpgradeable,\nBaseRelayRecipient\n{\n    using SafeERC20 for IERC20Metadata;\n\n    /** @dev contract to manage DCA executions. */\n    ICaskDCAManager public dcaManager;\n\n    /** @dev map of DCA ID to DCA info. */\n    mapping(bytes32 => DCA) private dcaMap; // dcaId => DCA\n    mapping(address => bytes32[]) private userDCAs; // user => dcaId[]\n\n\n    /** @dev merkle root of approved assets. */\n    bytes32 public assetsMerkleRoot;\n\n    /** @dev minimum amount of vault base asset for a DCA. */\n    uint256 public minAmount;\n\n    /** @dev minimum period for a DCA. */\n    uint32 public minPeriod;\n\n    /** @dev minimum slippage allowed for a DCA. */\n    uint256 public minSlippage;\n\n\n    function initialize(\n        bytes32 _assetsMerkleRoot\n    ) public initializer {\n        __Ownable_init();\n        __Pausable_init();\n\n        assetsMerkleRoot = _assetsMerkleRoot;\n        minAmount = 1;\n        minPeriod = 86400;\n        minSlippage = 10;\n    }\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    function versionRecipient() public pure override returns(string memory) { return \"2.2.0\"; }\n\n    function _msgSender() internal view override(ContextUpgradeable, BaseRelayRecipient)\n    returns (address sender) {\n        sender = BaseRelayRecipient._msgSender();\n    }\n\n    function _msgData() internal view override(ContextUpgradeable, BaseRelayRecipient)\n    returns (bytes calldata) {\n        return BaseRelayRecipient._msgData();\n    }\n\n    modifier onlyUser(bytes32 _dcaId) {\n        require(_msgSender() == dcaMap[_dcaId].user, \"!AUTH\");\n        _;\n    }\n\n    modifier onlyManager() {\n        require(_msgSender() == address(dcaManager), \"!AUTH\");\n        _;\n    }\n\n\n    function createDCA(\n        address[] calldata _assetSpec, // router, priceFeed, path...\n        bytes32[] calldata _merkleProof,\n        address _to,\n        uint256 _amount,\n        uint256 _totalAmount,\n        uint32 _period,\n        uint256 _slippageBps,\n        uint256 _minPrice,\n        uint256 _maxPrice\n    ) external override returns(bytes32) {\n        require(_amount >= minAmount, \"!INVALID(amount)\");\n        require(_period >= minPeriod, \"!INVALID(period)\");\n        require(_slippageBps >= minSlippage, \"!INVALID(slippageBps)\");\n        require(_assetSpec.length >= 4, \"!INVALID(assetSpec)\");\n        require(_verifyAssetSpec(_assetSpec, _merkleProof), \"!INVALID(assetSpec)\");\n\n        bytes32 dcaId = keccak256(abi.encodePacked(_msgSender(), _assetSpec, _amount, _period,\n            block.number, block.timestamp));\n\n        uint32 timestamp = uint32(block.timestamp);\n\n        DCA storage dca = dcaMap[dcaId];\n        dca.user = _msgSender();\n        dca.to = _to;\n        dca.router = _assetSpec[0];\n        dca.priceFeed = _assetSpec[1];\n        dca.path = _assetSpec[2:];\n        dca.amount = _amount;\n        dca.totalAmount = _totalAmount;\n        dca.period = _period;\n        dca.minPrice = _minPrice;\n        dca.maxPrice = _maxPrice;\n        dca.slippageBps = _slippageBps;\n        dca.createdAt = timestamp;\n        dca.processAt = timestamp;\n        dca.status = DCAStatus.Active;\n\n        userDCAs[_msgSender()].push(dcaId);\n\n        dcaManager.registerDCA(dcaId);\n\n        require(dca.status == DCAStatus.Active, \"!UNPROCESSABLE\");\n        require(dca.numBuys == 1, \"!UNPROCESSABLE\"); // make sure first DCA purchase succeeded\n\n        emit DCACreated(dcaId, dca.user, dca.to, dca.path[0], dca.path[dca.path.length-1],\n            _amount, _totalAmount, _period);\n\n        return dcaId;\n    }\n\n    function pauseDCA(\n        bytes32 _dcaId\n    ) external override onlyUser(_dcaId) {\n        DCA storage dca = dcaMap[_dcaId];\n        require(dca.status == DCAStatus.Active, \"!NOT_ACTIVE\");\n\n        dca.status = DCAStatus.Paused;\n\n        emit DCAPaused(_dcaId, dca.user);\n    }\n\n    function resumeDCA(\n        bytes32 _dcaId\n    ) external override onlyUser(_dcaId) {\n        DCA storage dca = dcaMap[_dcaId];\n        require(dca.status == DCAStatus.Paused, \"!NOT_PAUSED\");\n\n        dca.status = DCAStatus.Active;\n\n        if (dca.processAt < uint32(block.timestamp)) {\n            dca.processAt = uint32(block.timestamp);\n        }\n\n        dcaManager.registerDCA(_dcaId);\n\n        emit DCAResumed(_dcaId, dca.user);\n    }\n\n    function cancelDCA(\n        bytes32 _dcaId\n    ) external override onlyUser(_dcaId) {\n        DCA storage dca = dcaMap[_dcaId];\n        require(dca.status == DCAStatus.Active ||\n                dca.status == DCAStatus.Paused, \"!INVALID(status)\");\n\n        dca.status = DCAStatus.Canceled;\n\n        emit DCAResumed(_dcaId, dca.user);\n    }\n\n    function _verifyAssetSpec(\n        address[] calldata _assetSpec,\n        bytes32[] calldata _merkleProof\n    ) internal view returns(bool) {\n        return MerkleProof.verify(_merkleProof, assetsMerkleRoot,\n            keccak256(abi.encode(_assetSpec[0], _assetSpec[1], _assetSpec[2:])));\n    }\n\n\n    function getDCA(\n        bytes32 _dcaId\n    ) external override view returns (DCA memory) {\n        return dcaMap[_dcaId];\n    }\n\n    function getUserDCA(\n        address _user,\n        uint256 _idx\n    ) external override view returns (bytes32) {\n        return userDCAs[_user][_idx];\n    }\n\n    function getUserDCACount(\n        address _user\n    ) external override view returns (uint256) {\n        return userDCAs[_user].length;\n    }\n\n\n    /************************** MANAGER FUNCTIONS **************************/\n\n    function managerCommand(\n        bytes32 _dcaId,\n        ManagerCommand _command\n    ) external override onlyManager {\n\n        DCA storage dca = dcaMap[_dcaId];\n\n        if (_command == ManagerCommand.Pause) {\n\n            dca.status = DCAStatus.Paused;\n\n            emit DCAPaused(_dcaId, dca.user);\n\n        } else if (_command == ManagerCommand.Cancel) {\n\n            dca.status = DCAStatus.Canceled;\n\n            emit DCACanceled(_dcaId, dca.user);\n\n        }\n    }\n\n    function managerSkipped(\n        bytes32 _dcaId,\n        SkipReason _skipReason\n    ) external override onlyManager {\n        DCA storage dca = dcaMap[_dcaId];\n\n        dca.processAt = dca.processAt + dca.period;\n        dca.numSkips += 1;\n\n        emit DCASkipped(_dcaId, dca.user, _skipReason);\n    }\n\n    function managerProcessed(\n        bytes32 _dcaId,\n        uint256 _amount,\n        uint256 _buyQty,\n        uint256 _fee\n    ) external override onlyManager {\n        DCA storage dca = dcaMap[_dcaId];\n\n        dca.processAt = dca.processAt + dca.period;\n        dca.currentAmount += _amount;\n        dca.currentQty += _buyQty;\n        dca.numBuys += 1;\n\n        emit DCAProcessed(_dcaId, dca.user, _amount, _buyQty, _fee);\n\n        if (dca.totalAmount > 0 && dca.currentAmount >= dca.totalAmount) {\n            dca.status = DCAStatus.Complete;\n            emit DCACompleted(_dcaId, dca.user);\n        }\n\n    }\n\n    /************************** ADMIN FUNCTIONS **************************/\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function setManager(\n        address _dcaManager\n    ) external onlyOwner {\n        dcaManager = ICaskDCAManager(_dcaManager);\n    }\n\n    function setTrustedForwarder(\n        address _forwarder\n    ) external onlyOwner {\n        _setTrustedForwarder(_forwarder);\n    }\n\n    function setAssetsMerkleRoot(\n        bytes32 _assetsMerkleRoot\n    ) external onlyOwner {\n        assetsMerkleRoot = _assetsMerkleRoot;\n    }\n\n    function setMinAmount(\n        uint256 _minAmount\n    ) external onlyOwner {\n        minAmount = _minAmount;\n    }\n\n    function setMinPeriod(\n        uint32 _minPeriod\n    ) external onlyOwner {\n        minPeriod = _minPeriod;\n    }\n\n    function setMinSlippage(\n        uint256 _minSlippage\n    ) external onlyOwner {\n        minSlippage = _minSlippage;\n    }\n}"
    },
    "contracts/mocks/MockChainlinkOracleFeed.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract MockChainlinkOracleFeed is AggregatorV3Interface {\n    int256 price;\n    uint8 numDecimals;\n    uint256 age;\n\n    constructor(int256 _price, uint8 _decimals) {\n        price = _price;\n        numDecimals = _decimals;\n        age = 30;\n    }\n\n    function decimals() external view override returns (uint8) {\n        return numDecimals;\n    }\n\n    function description() external pure override returns (string memory) {\n        return \"MockOracleFeed\";\n    }\n\n    function version() external pure override returns (uint256) {\n        return 1;\n    }\n\n    function setPrice(int256 _price) public {\n        price = _price;\n    }\n\n    function setDecimals(uint8 _decimals) public {\n        numDecimals = _decimals;\n    }\n\n    function setAge(uint256 _age) public {\n        age = _age;\n    }\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n    external\n    view\n    override\n    returns (\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    )\n    {\n        roundId = _roundId;\n        answer = price;\n        startedAt = block.timestamp - age;\n        updatedAt = block.timestamp - age;\n        answeredInRound = 0;\n    }\n\n    function latestRoundData()\n    external\n    view\n    override\n    returns (\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    )\n    {\n        roundId = 0;\n        answer = price;\n        startedAt = block.timestamp - age;\n        updatedAt = block.timestamp - age;\n        answeredInRound = 0;\n    }\n}\n"
    },
    "contracts/mocks/MockUniswapRouter.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ncontract MockUniswapRouter {\n\n    mapping(address => address) public pairMaps;\n    uint256 outputBps;\n\n    function initialize(\n        address[] calldata _0tokens,\n        address[] calldata _1tokens\n    ) public {\n        require(\n            _0tokens.length == _1tokens.length,\n            \"Mock token pairs should be of the same length\"\n        );\n        for (uint256 i = 0; i < _0tokens.length; i++) {\n            pairMaps[_0tokens[i]] = _1tokens[i];\n        }\n        outputBps = 10000; // by default output the same as the input\n    }\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory) {\n        address tok0 = path[0];\n        address tok1 = pairMaps[tok0];\n        // Give 1:1\n        uint256 amountOut = _scaleBy(amountIn, IERC20Metadata(tok1).decimals(), IERC20Metadata(tok0).decimals());\n        amountOut = amountOut * outputBps / 10000;\n\n        require(amountOut >= amountOutMin, \"Slippage error\");\n        require(deadline > block.timestamp);\n\n        IERC20Metadata(tok0).transferFrom(msg.sender, address(this), amountIn);\n        IERC20Metadata(tok1).transfer(to, amountOut);\n\n        uint256[] memory amounts = new uint256[](2);\n        amounts[0] = amountIn;\n        amounts[1] = amountOut;\n\n        return amounts;\n    }\n\n    function getAmountsOut(\n        uint256 amountIn,\n        address[] memory path\n    ) external view returns (uint256[] memory) {\n        address tok0 = path[0];\n        address tok1 = pairMaps[tok0];\n        // Give 1:1\n        uint256 amountOut = _scaleBy(amountIn, IERC20Metadata(tok1).decimals(), IERC20Metadata(tok0).decimals());\n        amountOut = amountOut * outputBps / 10000;\n\n        uint256[] memory amounts = new uint256[](2);\n        amounts[0] = amountIn;\n        amounts[1] = amountOut;\n\n        return amounts;\n    }\n\n    function setOutputBps(\n        uint256 _outputBps\n    ) external {\n        outputBps = _outputBps;\n    }\n\n    function _scaleBy(\n        uint256 x,\n        uint256 to,\n        uint256 from\n    ) internal pure returns (uint256) {\n        if (to > from) {\n            return x * (10**(to - from));\n        } else if (to < from) {\n            return x / (10**(from - to));\n        } else {\n            return x;\n        }\n    }\n}\n"
    },
    "contracts/dao/CaskVestedEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/*\nUpdated Convex VestedEscrow\nfound at https://github.com/convex-eth/platform/blob/main/contracts/contracts/VestedEscrow.sol\n\nChanges:\n- update to solidity 0.8\n- added back disable feature\n- remove staking\n- implement per address vesting start time\n- implemented cliff\n*/\n\nimport \"../utils/MathUtil.sol\";\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n\ncontract CaskVestedEscrow is ReentrancyGuard{\n    using SafeERC20 for IERC20;\n\n    IERC20 public rewardToken;\n    address public admin;\n    address public fundAdmin;\n\n    uint256 public startAfter;\n    uint256 public duration;\n\n    uint256 public initialLockedSupply;\n    uint256 public unallocatedSupply;\n\n    mapping(address => uint256) public startedAt;\n    mapping(address => uint256) public cliffAt;\n    mapping(address => uint256) public initialLocked;\n    mapping(address => uint256) public totalClaimed;\n\n    bool public canDisable;\n    mapping(address => uint256) public disabledAt;\n\n    address[] public members;\n\n    event Fund(address indexed recipient, uint256 reward);\n    event Claim(address indexed user, uint256 amount);\n    event ToggleDisable(address recipient, bool disabled);\n\n    constructor(\n        address rewardToken_,\n        uint256 startafter_,\n        uint256 duration_,\n        bool canDisable_,\n        address fundAdmin_\n    ) {\n        require(startafter_ >= block.timestamp,\"start must be future\");\n        require(duration_ > 0,\"duration must be greater\");\n\n        rewardToken = IERC20(rewardToken_);\n        startAfter = startafter_;\n        duration = duration_;\n        canDisable = canDisable_;\n        admin = msg.sender;\n        fundAdmin = fundAdmin_;\n    }\n\n    function setAdmin(address _admin) external {\n        require(msg.sender == admin, \"!auth\");\n        admin = _admin;\n    }\n\n    function setFundAdmin(address _fundadmin) external {\n        require(msg.sender == admin, \"!auth\");\n        fundAdmin = _fundadmin;\n    }\n\n    function addTokens(uint256 _amount) external returns(bool){\n        require(msg.sender == admin, \"!auth\");\n\n        rewardToken.safeTransferFrom(msg.sender, address(this), _amount);\n        unallocatedSupply = unallocatedSupply + _amount;\n        return true;\n    }\n\n    function fund(\n        uint256 _startAt,\n        uint256 _cliffDuration,\n        address[] calldata _recipient,\n        uint256[] calldata _amount\n    ) external nonReentrant returns(bool){\n        return _fund(_startAt, _cliffDuration, _recipient, _amount);\n    }\n\n    function fund(\n        uint256 _startAt,\n        address[] calldata _recipient,\n        uint256[] calldata _amount\n    ) external nonReentrant returns(bool){\n        return _fund(_startAt, 0, _recipient, _amount);\n    }\n\n    function fund(\n        address[] calldata _recipient,\n        uint256[] calldata _amount\n    ) external nonReentrant returns(bool){\n        return _fund(startAfter, 0, _recipient, _amount);\n    }\n\n    function _fund(\n        uint256 _startAt,\n        uint256 _cliffDuration,\n        address[] calldata _recipient,\n        uint256[] calldata _amount\n    ) internal returns(bool){\n        require(msg.sender == fundAdmin || msg.sender == admin, \"!auth\");\n\n        // startAt for this new batch is not allowed to start\n        // before the global escrow startAfter date\n        uint256 startAt = _startAt;\n        if (startAt < startAfter) {\n            startAt = startAfter;\n        }\n\n        uint256 totalAmount = 0;\n        for(uint256 i = 0; i < _recipient.length; i++){\n            uint256 amount = _amount[i];\n            // can only set startedAt and cliffDuration on first funding\n            if (startedAt[_recipient[i]] == 0){\n                require(_recipient[i] != address(0), \"!zeroAddress\");\n                members.push(_recipient[i]);\n                startedAt[_recipient[i]] = startAt;\n                cliffAt[_recipient[i]] = startAt + _cliffDuration;\n            }\n            initialLocked[_recipient[i]] = initialLocked[_recipient[i]] + amount;\n            totalAmount = totalAmount + amount;\n            emit Fund(_recipient[i],amount);\n        }\n\n        require(totalAmount <= unallocatedSupply, \"!balance\");\n\n        initialLockedSupply = initialLockedSupply + totalAmount;\n        unallocatedSupply = unallocatedSupply - totalAmount;\n        return true;\n    }\n\n    function toggle_disable(address _recipient) external {\n        require(msg.sender == admin, \"!auth\");\n        require(canDisable, \"!canDisable\");\n\n        bool isEnabled = disabledAt[_recipient] == 0;\n        if (isEnabled) {\n            disabledAt[_recipient] = block.timestamp;\n        } else {\n            disabledAt[_recipient] = 0;\n        }\n\n        emit ToggleDisable(_recipient, isEnabled);\n    }\n\n    function disableCanDisable() external {\n        require(msg.sender == admin, \"!auth\");\n        canDisable = false;\n    }\n\n    function _totalVestedOf(address _recipient) internal view returns(uint256){\n        uint256 startTime = startedAt[_recipient];\n        uint256 endTime = disabledAt[_recipient];\n        if (endTime == 0) {\n            endTime = block.timestamp;\n        }\n        if(endTime < startTime){ // not started yet\n            return 0;\n        }\n        if (cliffAt[_recipient] > endTime){ // cliff end not happened yet\n            return 0;\n        }\n        uint256 locked = initialLocked[_recipient];\n        uint256 elapsed = endTime - startTime;\n        uint256 total = MathUtil.min(locked * elapsed / duration, locked );\n        return total;\n    }\n\n    function _totalVested() internal view returns(uint256){\n        if(block.timestamp < startAfter){\n            return 0;\n        }\n        uint256 total = 0;\n        for (uint256 i = 0; i < members.length; i++) {\n            total = total + _totalVestedOf(members[i]);\n        }\n        return total;\n    }\n\n    function vestedSupply() external view returns(uint256){\n        return _totalVested();\n    }\n\n    function lockedSupply() external view returns(uint256){\n        return initialLockedSupply - _totalVested();\n    }\n\n    function vestedOf(address _recipient) external view returns(uint256){\n        return _totalVestedOf(_recipient);\n    }\n\n    function balanceOf(address _recipient) external view returns(uint256){\n        return _totalVestedOf(_recipient) - totalClaimed[_recipient];\n    }\n\n    function lockedOf(address _recipient) external view returns(uint256){\n        return initialLocked[_recipient] - _totalVestedOf(_recipient);\n    }\n\n    function claim(address _recipient) public nonReentrant{\n        uint256 vested = _totalVestedOf(_recipient);\n        uint256 claimable = vested - totalClaimed[_recipient];\n\n        totalClaimed[_recipient] = totalClaimed[_recipient] + claimable;\n        rewardToken.safeTransfer(_recipient, claimable);\n\n        emit Claim(msg.sender, claimable);\n    }\n\n    function claim() external{\n        claim(msg.sender);\n    }\n\n}"
    },
    "contracts/utils/MathUtil.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUtil {\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/dao/CaskTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/*\nUpdated Convex TreasuryFunds (https://github.com/convex-eth/platform/blob/main/contracts/contracts/TreasuryFunds.sol)\n\nChanges:\n- update to solidity 0.8\n- use openzeppelin ownable\n- add claim method to get vested/rewarded tokens from contracts\n*/\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\ninterface IClaimable {\n    function claim() external;\n}\n\ncontract CaskTreasury is Ownable {\n    using SafeERC20 for IERC20;\n    using Address for address;\n\n    event WithdrawTo(address indexed _to, address _asset, uint256 _amount);\n\n    function withdrawTo(\n        address _to,\n        address _asset,\n        uint256 _amount\n    ) external onlyOwner {\n        IERC20(_asset).safeTransfer(_to, _amount);\n        emit WithdrawTo(_to, _asset, _amount);\n    }\n\n    function execute(\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external onlyOwner returns(bool, bytes memory) {\n        (bool success, bytes memory result) = _to.call{value:_value}(_data);\n\n        return (success, result);\n    }\n\n    function claim(\n        address _contract\n    ) external onlyOwner {\n        IClaimable(_contract).claim();\n    }\n\n}"
    },
    "contracts/mocks/MockBandOracleFeed.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IStdReference.sol\";\n\ncontract MockBandOracleFeed is IStdReference {\n    uint256 price;\n    uint256 age;\n\n    constructor(uint256 _price, uint8 _decimals) {\n        price = _price;\n        age = 30;\n    }\n\n    function setPrice(uint256 _price) public {\n        price = _price;\n    }\n\n    function setAge(uint256 _age) public {\n        age = _age;\n    }\n\n    function getReferenceData(string memory _base, string memory _quote)\n    external\n    view\n    returns (ReferenceData memory) {\n        return ReferenceData({\n            rate: price,\n            lastUpdatedBase: block.timestamp - age,\n            lastUpdatedQuote: block.timestamp - age\n        });\n    }\n\n    function getReferenceDataBulk(string[] memory _bases, string[] memory _quotes)\n    external\n    view\n    returns (ReferenceData[] memory) {\n        ReferenceData[] memory data = new ReferenceData[](1);\n        data[0] = ReferenceData({\n            rate: price,\n            lastUpdatedBase: block.timestamp - age,\n            lastUpdatedQuote: block.timestamp - age\n        });\n        return data;\n    }\n\n}\n"
    },
    "contracts/dao/TimelockController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/TimelockController.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * @dev Contract module which acts as a timelocked controller. When set as the\n * owner of an `Ownable` smart contract, it enforces a timelock on all\n * `onlyOwner` maintenance operations. This gives time for users of the\n * controlled contract to exit before a potentially dangerous maintenance\n * operation is applied.\n *\n * By default, this contract is self administered, meaning administration tasks\n * have to go through the timelock process. The proposer (resp executor) role\n * is in charge of proposing (resp executing) operations. A common use case is\n * to position this {TimelockController} as the owner of a smart contract, with\n * a multisig or a DAO as the sole proposer.\n *\n * _Available since v3.3._\n */\ncontract TimelockController is AccessControl {\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\"TIMELOCK_ADMIN_ROLE\");\n    bytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n    mapping(bytes32 => uint256) private _timestamps;\n    uint256 private _minDelay;\n\n    /**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n    event CallScheduled(\n        bytes32 indexed id,\n        uint256 indexed index,\n        address target,\n        uint256 value,\n        bytes data,\n        bytes32 predecessor,\n        uint256 delay\n    );\n\n    /**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\n\n    /**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n    event Cancelled(bytes32 indexed id);\n\n    /**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\n\n    /**\n     * @dev Initializes the contract with a given `minDelay`.\n     */\n    constructor(\n        uint256 minDelay,\n        address[] memory proposers,\n        address[] memory executors\n    ) {\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\n\n        // deployer + self administration\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\n\n        // register proposers\n        for (uint256 i = 0; i < proposers.length; ++i) {\n            _setupRole(PROPOSER_ROLE, proposers[i]);\n        }\n\n        // register executors\n        for (uint256 i = 0; i < executors.length; ++i) {\n            _setupRole(EXECUTOR_ROLE, executors[i]);\n        }\n\n        _minDelay = minDelay;\n        emit MinDelayChange(0, minDelay);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n    modifier onlyRoleOrOpenRole(bytes32 role) {\n        if (!hasRole(role, address(0))) {\n            _checkRole(role, _msgSender());\n        }\n        _;\n    }\n\n    /**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev Returns whether an id correspond to a registered operation. This\n     * includes both Pending, Ready and Done operations.\n     */\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > 0;\n    }\n\n    /**\n     * @dev Returns whether an operation is pending or not.\n     */\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns whether an operation is ready or not.\n     */\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\n        uint256 timestamp = getTimestamp(id);\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\n    }\n\n    /**\n     * @dev Returns whether an operation is done or not.\n     */\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\n        return getTimestamp(id) == _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\n        return _timestamps[id];\n    }\n\n    /**\n     * @dev Returns the minimum delay for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n    function getMinDelay() public view virtual returns (uint256 duration) {\n        return _minDelay;\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n    function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n    function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\n    }\n\n    /**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits a {CallScheduled} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n    }\n\n    /**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation that is to becomes valid after a given delay.\n     */\n    function _schedule(bytes32 id, uint256 delay) private {\n        require(!isOperation(id), \"TimelockController: operation already scheduled\");\n        require(delay >= getMinDelay(), \"TimelockController: insufficient delay\");\n        _timestamps[id] = block.timestamp + delay;\n    }\n\n    /**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {\n        require(isOperationPending(id), \"TimelockController: operation cannot be cancelled\");\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function execute(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _beforeCall(id, predecessor);\n        _call(id, 0, target, value, data);\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n        _beforeCall(id, predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            _call(id, i, targets[i], values[i], datas[i]);\n        }\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Checks before execution of an operation's calls.\n     */\n    function _beforeCall(bytes32 id, bytes32 predecessor) private view {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \"TimelockController: missing dependency\");\n    }\n\n    /**\n     * @dev Checks after execution of an operation's calls.\n     */\n    function _afterCall(bytes32 id) private {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Execute an operation's call.\n     *\n     * Emits a {CallExecuted} event.\n     */\n    function _call(\n        bytes32 id,\n        uint256 index,\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) private {\n        (bool success, ) = target.call{value: value}(data);\n        require(success, \"TimelockController: underlying transaction reverted\");\n\n        emit CallExecuted(id, index, target, value, data);\n    }\n\n    /**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n    function updateDelay(uint256 newDelay) external virtual {\n        require(msg.sender == address(this), \"TimelockController: caller must be timelock\");\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/presets/ERC20PresetMinterPauser.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/mocks/MockUSDT.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\ncontract MockUSDT is ERC20PresetMinterPauser {\n    constructor() ERC20PresetMinterPauser(\"Cask USDT\", \"USDT\") {}\n\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/mocks/MockUSDC.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\ncontract MockUSDC is ERC20PresetMinterPauser {\n    constructor() ERC20PresetMinterPauser(\"Cask USDC\", \"USDC\") {}\n\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/mocks/MockFRAX.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\ncontract MockFRAX is ERC20PresetMinterPauser {\n    constructor() ERC20PresetMinterPauser(\"Cask FRAX\", \"FRAX\") {}\n}\n"
    },
    "contracts/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\ncontract MockERC20 is ERC20PresetMinterPauser {\n    constructor() ERC20PresetMinterPauser(\"Cask ERC20 Mock\", \"CEM\") {}\n\n    function decimals() public pure override returns (uint8) {\n        return 18;\n    }\n}\n"
    },
    "contracts/mocks/MockDAI.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\ncontract MockDAI is ERC20PresetMinterPauser {\n    constructor() ERC20PresetMinterPauser(\"Cask DAI\", \"DAI\") {}\n}\n"
    },
    "contracts/mocks/MockABC.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\ncontract MockABC is ERC20PresetMinterPauser {\n    constructor() ERC20PresetMinterPauser(\"Cask ABC\", \"ABC\") {}\n}\n"
    },
    "contracts/mocks/MockNFT.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol\";\n\ncontract MockNFT is ERC721PresetMinterPauserAutoId {\n    constructor() ERC721PresetMinterPauserAutoId(\"Cask Mock NFT\", \"CMN\", \"http://nft.cask.fi/\") {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}