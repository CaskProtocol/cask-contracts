{
  "address": "0xbdB5Bb45e7b509130fa087B37e3DD3CC2F76BaFe",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AssetAdminChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "prevRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        }
      ],
      "name": "AssetsMerkleRootChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dcaId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "DCACanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dcaId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "DCACompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dcaId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inputAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "outputAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "period",
          "type": "uint32"
        }
      ],
      "name": "DCACreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dcaId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "DCAPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dcaId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyQty",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "DCAProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dcaId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "DCAResumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dcaId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ICaskDCA.SkipReason",
          "name": "skipReason",
          "type": "uint8"
        }
      ],
      "name": "DCASkipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "assetsAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetsMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_dcaId",
          "type": "bytes32"
        }
      ],
      "name": "cancelDCA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_assetSpec",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "enum ICaskDCA.SwapProtocol",
          "name": "_swapProtocol",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_swapData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_priceSpec",
          "type": "uint256[]"
        }
      ],
      "name": "createDCA",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dcaManager",
      "outputs": [
        {
          "internalType": "contract ICaskDCAManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_dcaId",
          "type": "bytes32"
        }
      ],
      "name": "getDCA",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceFeed",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "currentQty",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numBuys",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numSkips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippageBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "period",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "createdAt",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "processAt",
              "type": "uint32"
            },
            {
              "internalType": "enum ICaskDCA.DCAStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            }
          ],
          "internalType": "struct ICaskDCA.DCA",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_dcaId",
          "type": "bytes32"
        }
      ],
      "name": "getSwapInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ICaskDCA.SwapProtocol",
              "name": "swapProtocol",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "swapData",
              "type": "bytes"
            }
          ],
          "internalType": "struct ICaskDCA.SwapInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "getUserDCA",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserDCACount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_assetsMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_dcaId",
          "type": "bytes32"
        },
        {
          "internalType": "enum ICaskDCA.ManagerCommand",
          "name": "_command",
          "type": "uint8"
        }
      ],
      "name": "managerCommand",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_dcaId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buyQty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "managerProcessed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_dcaId",
          "type": "bytes32"
        },
        {
          "internalType": "enum ICaskDCA.SkipReason",
          "name": "_skipReason",
          "type": "uint8"
        }
      ],
      "name": "managerSkipped",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minPeriod",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_dcaId",
          "type": "bytes32"
        }
      ],
      "name": "pauseDCA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prevAssetsMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_dcaId",
          "type": "bytes32"
        }
      ],
      "name": "resumeDCA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetsAdmin",
          "type": "address"
        }
      ],
      "name": "setAssetsAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_assetsMerkleRoot",
          "type": "bytes32"
        }
      ],
      "name": "setAssetsMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dcaManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_minPeriod",
          "type": "uint32"
        }
      ],
      "name": "setMinPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minSlippage",
          "type": "uint256"
        }
      ],
      "name": "setMinSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xef766f9a5116d682c26879622055a1dcd81f96a7b9392bcdeb1cca3343613c1d",
  "receipt": {
    "to": null,
    "from": "0x54812dBaB593674CD4F1216264895be48B55C5e3",
    "contractAddress": "0xbdB5Bb45e7b509130fa087B37e3DD3CC2F76BaFe",
    "transactionIndex": 47,
    "gasUsed": "2436182",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6c5f3b690b464aac18d53584b741e44c171e843f7da9e946d76c4fbf3f8e6507",
    "transactionHash": "0xef766f9a5116d682c26879622055a1dcd81f96a7b9392bcdeb1cca3343613c1d",
    "logs": [],
    "blockNumber": 23394983,
    "cumulativeGasUsed": "7750802",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "024379f4eb3406737d1bd2549fb94b33",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AssetAdminChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"prevRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"AssetsMerkleRootChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dcaId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"DCACanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dcaId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"DCACompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dcaId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inputAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"}],\"name\":\"DCACreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dcaId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"DCAPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dcaId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyQty\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"DCAProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dcaId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"DCAResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dcaId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ICaskDCA.SkipReason\",\"name\":\"skipReason\",\"type\":\"uint8\"}],\"name\":\"DCASkipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assetsAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dcaId\",\"type\":\"bytes32\"}],\"name\":\"cancelDCA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_assetSpec\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"enum ICaskDCA.SwapProtocol\",\"name\":\"_swapProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_swapData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_priceSpec\",\"type\":\"uint256[]\"}],\"name\":\"createDCA\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dcaManager\",\"outputs\":[{\"internalType\":\"contract ICaskDCAManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dcaId\",\"type\":\"bytes32\"}],\"name\":\"getDCA\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numBuys\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numSkips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"period\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"processAt\",\"type\":\"uint32\"},{\"internalType\":\"enum ICaskDCA.DCAStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"internalType\":\"struct ICaskDCA.DCA\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dcaId\",\"type\":\"bytes32\"}],\"name\":\"getSwapInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ICaskDCA.SwapProtocol\",\"name\":\"swapProtocol\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"internalType\":\"struct ICaskDCA.SwapInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getUserDCA\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserDCACount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_assetsMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dcaId\",\"type\":\"bytes32\"},{\"internalType\":\"enum ICaskDCA.ManagerCommand\",\"name\":\"_command\",\"type\":\"uint8\"}],\"name\":\"managerCommand\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dcaId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyQty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"managerProcessed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dcaId\",\"type\":\"bytes32\"},{\"internalType\":\"enum ICaskDCA.SkipReason\",\"name\":\"_skipReason\",\"type\":\"uint8\"}],\"name\":\"managerSkipped\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minPeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dcaId\",\"type\":\"bytes32\"}],\"name\":\"pauseDCA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prevAssetsMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dcaId\",\"type\":\"bytes32\"}],\"name\":\"resumeDCA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetsAdmin\",\"type\":\"address\"}],\"name\":\"setAssetsAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_assetsMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setAssetsMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dcaManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_minPeriod\",\"type\":\"uint32\"}],\"name\":\"setMinPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSlippage\",\"type\":\"uint256\"}],\"name\":\"setMinSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"assetsAdmin\":{\"details\":\"address allowed to update asset merkle root. \"},\"assetsMerkleRoot\":{\"details\":\"merkle root of approved assets. \"},\"dcaManager\":{\"details\":\"contract to manage DCA executions. \"},\"dcaMap\":{\"details\":\"map of DCA ID to DCA info. \"},\"minAmount\":{\"details\":\"minimum amount of vault base asset for a DCA. \"},\"minPeriod\":{\"details\":\"minimum period for a DCA. \"},\"minSlippage\":{\"details\":\"minimum slippage allowed for a DCA. \"},\"prevAssetsMerkleRoot\":{\"details\":\"previous merkle root of approved assets. \"},\"swapInfoMap\":{\"details\":\"swap type and optional swap data for a DCA. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dca/CaskDCA.sol\":\"CaskDCA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@opengsn/contracts/src/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    function trustedForwarder() public virtual view returns (address){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce3168b37fc87ec34a18b56b4b16a06432119c07fd2e1d864b871dcf40372ebe\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0x199e82e0a2833a97213b5c16ac9b4e2b1814f2e90a4c4916855cbc21e710ad5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"contracts/dca/CaskDCA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@opengsn/contracts/src/BaseRelayRecipient.sol\\\";\\n\\nimport \\\"../interfaces/ICaskDCA.sol\\\";\\nimport \\\"../interfaces/ICaskDCAManager.sol\\\";\\n\\ncontract CaskDCA is\\nICaskDCA,\\nInitializable,\\nOwnableUpgradeable,\\nPausableUpgradeable,\\nBaseRelayRecipient\\n{\\n    using SafeERC20 for IERC20Metadata;\\n\\n    /** @dev contract to manage DCA executions. */\\n    ICaskDCAManager public dcaManager;\\n\\n    /** @dev map of DCA ID to DCA info. */\\n    mapping(bytes32 => DCA) private dcaMap; // dcaId => DCA\\n    mapping(address => bytes32[]) private userDCAs; // user => dcaId[]\\n\\n\\n    /** @dev merkle root of approved assets. */\\n    bytes32 public assetsMerkleRoot;\\n\\n    /** @dev minimum amount of vault base asset for a DCA. */\\n    uint256 public minAmount;\\n\\n    /** @dev minimum period for a DCA. */\\n    uint32 public minPeriod;\\n\\n    /** @dev minimum slippage allowed for a DCA. */\\n    uint256 public minSlippage;\\n\\n    /** @dev swap type and optional swap data for a DCA. */\\n    mapping(bytes32 => SwapInfo) private swapInfoMap; // dcaId => DCASwapInfo\\n\\n    /** @dev previous merkle root of approved assets. */\\n    bytes32 public prevAssetsMerkleRoot;\\n\\n    /** @dev address allowed to update asset merkle root. */\\n    address public assetsAdmin;\\n\\n\\n    modifier onlyAssetsAdmin() {\\n        require(_msgSender() == address(assetsAdmin), \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        bytes32 _assetsMerkleRoot\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n\\n        assetsMerkleRoot = _assetsMerkleRoot;\\n        prevAssetsMerkleRoot = assetsMerkleRoot;\\n        minAmount = 1;\\n        minPeriod = 86400;\\n        minSlippage = 10;\\n        assetsAdmin = _msgSender();\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function versionRecipient() public pure override returns(string memory) { return \\\"2.2.0\\\"; }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (address sender) {\\n        sender = BaseRelayRecipient._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (bytes calldata) {\\n        return BaseRelayRecipient._msgData();\\n    }\\n\\n    modifier onlyUser(bytes32 _dcaId) {\\n        require(_msgSender() == dcaMap[_dcaId].user, \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(_msgSender() == address(dcaManager), \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n\\n    function createDCA(\\n        address[] calldata _assetSpec, // router, priceFeed, path...\\n        bytes32[] calldata _merkleProof,\\n        SwapProtocol _swapProtocol,\\n        bytes calldata _swapData,\\n        address _to,\\n        uint256[] calldata _priceSpec // period, amount, totalAmount, maxSlippageBps, minPrice, maxPrice\\n    ) external override returns(bytes32) {\\n        require(_assetSpec.length >= 4, \\\"!INVALID(assetSpec)\\\");\\n        require(_priceSpec.length == 6, \\\"!INVALID(priceSpec)\\\");\\n        require(_priceSpec[0] >= minPeriod, \\\"!INVALID(period)\\\");\\n        require(_priceSpec[1] >= minAmount, \\\"!INVALID(amount)\\\");\\n        require(_priceSpec[3] >= minSlippage, \\\"!INVALID(maxSlippageBps)\\\");\\n        require(_verifyAssetSpec(_swapProtocol, _swapData, _assetSpec, _merkleProof), \\\"!INVALID(assetSpec)\\\");\\n\\n        bytes32 dcaId = keccak256(abi.encodePacked(_msgSender(), _swapProtocol, _swapData, _assetSpec, _priceSpec,\\n            block.number, block.timestamp));\\n\\n        DCA storage dca = dcaMap[dcaId];\\n        dca.user = _msgSender();\\n        dca.to = _to;\\n        dca.router = _assetSpec[0];\\n        dca.priceFeed = _assetSpec[1];\\n        dca.path = _assetSpec[2:];\\n        dca.amount = _priceSpec[1];\\n        dca.totalAmount = _priceSpec[2];\\n        dca.period = uint32(_priceSpec[0]);\\n        dca.minPrice = _priceSpec[4];\\n        dca.maxPrice = _priceSpec[5];\\n        dca.maxSlippageBps = _priceSpec[3];\\n        dca.createdAt = uint32(block.timestamp);\\n        dca.processAt = uint32(block.timestamp);\\n        dca.status = DCAStatus.Active;\\n\\n        SwapInfo storage swapData = swapInfoMap[dcaId];\\n        swapData.swapProtocol = _swapProtocol;\\n        swapData.swapData = _swapData;\\n\\n        userDCAs[_msgSender()].push(dcaId);\\n\\n        dcaManager.registerDCA(dcaId);\\n\\n        require(dca.status == DCAStatus.Active, \\\"!UNPROCESSABLE\\\");\\n        require(dca.numBuys == 1, \\\"!UNPROCESSABLE\\\"); // make sure first DCA purchase succeeded\\n\\n        emit DCACreated(dcaId, dca.user, dca.to, dca.path[0], dca.path[dca.path.length-1],\\n            dca.amount, dca.totalAmount, dca.period);\\n\\n        return dcaId;\\n    }\\n\\n    function pauseDCA(\\n        bytes32 _dcaId\\n    ) external override onlyUser(_dcaId) {\\n        DCA storage dca = dcaMap[_dcaId];\\n        require(dca.status == DCAStatus.Active, \\\"!NOT_ACTIVE\\\");\\n\\n        dca.status = DCAStatus.Paused;\\n\\n        emit DCAPaused(_dcaId, dca.user);\\n    }\\n\\n    function resumeDCA(\\n        bytes32 _dcaId\\n    ) external override onlyUser(_dcaId) {\\n        DCA storage dca = dcaMap[_dcaId];\\n        require(dca.status == DCAStatus.Paused, \\\"!NOT_PAUSED\\\");\\n\\n        dca.status = DCAStatus.Active;\\n\\n        if (dca.processAt < uint32(block.timestamp)) {\\n            dca.processAt = uint32(block.timestamp);\\n        }\\n\\n        dcaManager.registerDCA(_dcaId);\\n\\n        emit DCAResumed(_dcaId, dca.user);\\n    }\\n\\n    function cancelDCA(\\n        bytes32 _dcaId\\n    ) external override onlyUser(_dcaId) {\\n        DCA storage dca = dcaMap[_dcaId];\\n        require(dca.status == DCAStatus.Active ||\\n                dca.status == DCAStatus.Paused, \\\"!INVALID(status)\\\");\\n\\n        dca.status = DCAStatus.Canceled;\\n\\n        emit DCACanceled(_dcaId, dca.user);\\n    }\\n\\n    function _verifyAssetSpec(\\n        SwapProtocol _swapProtocol,\\n        bytes calldata _swapData,\\n        address[] calldata _assetSpec,\\n        bytes32[] calldata _merkleProof\\n    ) internal view returns(bool) {\\n        bytes32 assetSpecHash =\\n            keccak256(abi.encode(_swapProtocol, _swapData, _assetSpec[0], _assetSpec[1], _assetSpec[2:]));\\n\\n        return MerkleProof.verify(_merkleProof, assetsMerkleRoot, assetSpecHash) ||\\n            MerkleProof.verify(_merkleProof, prevAssetsMerkleRoot, assetSpecHash);\\n    }\\n\\n\\n    function getDCA(\\n        bytes32 _dcaId\\n    ) external override view returns (DCA memory) {\\n        return dcaMap[_dcaId];\\n    }\\n\\n    function getSwapInfo(\\n        bytes32 _dcaId\\n    ) external override view returns (SwapInfo memory) {\\n        return swapInfoMap[_dcaId];\\n    }\\n\\n    function getUserDCA(\\n        address _user,\\n        uint256 _idx\\n    ) external override view returns (bytes32) {\\n        return userDCAs[_user][_idx];\\n    }\\n\\n    function getUserDCACount(\\n        address _user\\n    ) external override view returns (uint256) {\\n        return userDCAs[_user].length;\\n    }\\n\\n\\n    /************************** MANAGER FUNCTIONS **************************/\\n\\n    function managerCommand(\\n        bytes32 _dcaId,\\n        ManagerCommand _command\\n    ) external override onlyManager {\\n\\n        DCA storage dca = dcaMap[_dcaId];\\n\\n        if (_command == ManagerCommand.Pause) {\\n\\n            dca.status = DCAStatus.Paused;\\n\\n            emit DCAPaused(_dcaId, dca.user);\\n\\n        } else if (_command == ManagerCommand.Cancel) {\\n\\n            dca.status = DCAStatus.Canceled;\\n\\n            emit DCACanceled(_dcaId, dca.user);\\n\\n        }\\n    }\\n\\n    function managerSkipped(\\n        bytes32 _dcaId,\\n        SkipReason _skipReason\\n    ) external override onlyManager {\\n        DCA storage dca = dcaMap[_dcaId];\\n\\n        dca.processAt = dca.processAt + dca.period;\\n        dca.numSkips += 1;\\n\\n        emit DCASkipped(_dcaId, dca.user, _skipReason);\\n    }\\n\\n    function managerProcessed(\\n        bytes32 _dcaId,\\n        uint256 _amount,\\n        uint256 _buyQty,\\n        uint256 _fee\\n    ) external override onlyManager {\\n        DCA storage dca = dcaMap[_dcaId];\\n\\n        dca.processAt = dca.processAt + dca.period;\\n        dca.currentAmount += _amount;\\n        dca.currentQty += _buyQty;\\n        dca.numBuys += 1;\\n\\n        emit DCAProcessed(_dcaId, dca.user, _amount, _buyQty, _fee);\\n\\n        if (dca.totalAmount > 0 && dca.currentAmount >= dca.totalAmount) {\\n            dca.status = DCAStatus.Complete;\\n            emit DCACompleted(_dcaId, dca.user);\\n        }\\n\\n    }\\n\\n    /************************** ADMIN FUNCTIONS **************************/\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setManager(\\n        address _dcaManager\\n    ) external onlyOwner {\\n        dcaManager = ICaskDCAManager(_dcaManager);\\n    }\\n\\n    function setTrustedForwarder(\\n        address _forwarder\\n    ) external onlyOwner {\\n        _setTrustedForwarder(_forwarder);\\n    }\\n\\n    function setAssetsAdmin(\\n        address _assetsAdmin\\n    ) external onlyOwner {\\n        assetsAdmin = _assetsAdmin;\\n        emit AssetAdminChange(assetsAdmin);\\n    }\\n\\n    function setAssetsMerkleRoot(\\n        bytes32 _assetsMerkleRoot\\n    ) external onlyAssetsAdmin {\\n        prevAssetsMerkleRoot = assetsMerkleRoot;\\n        assetsMerkleRoot = _assetsMerkleRoot;\\n        emit AssetsMerkleRootChanged(prevAssetsMerkleRoot, assetsMerkleRoot);\\n    }\\n\\n    function setMinAmount(\\n        uint256 _minAmount\\n    ) external onlyOwner {\\n        minAmount = _minAmount;\\n    }\\n\\n    function setMinPeriod(\\n        uint32 _minPeriod\\n    ) external onlyOwner {\\n        minPeriod = _minPeriod;\\n    }\\n\\n    function setMinSlippage(\\n        uint256 _minSlippage\\n    ) external onlyOwner {\\n        minSlippage = _minSlippage;\\n    }\\n}\",\"keccak256\":\"0xa53e97fdbc1cbe25c03853388bebdaafff5c521f75667fb20c49fddac95e1709\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskDCA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskDCA {\\n\\n    enum SwapProtocol {\\n        UNIV2,\\n        UNIV3,\\n        GMX\\n    }\\n\\n    enum DCAStatus {\\n        None,\\n        Active,\\n        Paused,\\n        Canceled,\\n        Complete\\n    }\\n\\n    enum ManagerCommand {\\n        None,\\n        Cancel,\\n        Skip,\\n        Pause\\n    }\\n\\n    enum SkipReason {\\n        None,\\n        AssetNotAllowed,\\n        PaymentFailed,\\n        OutsideLimits,\\n        ExcessiveSlippage,\\n        SwapFailed\\n    }\\n\\n    struct DCA {\\n        address user;\\n        address to;\\n        address router;\\n        address priceFeed;\\n        uint256 amount;\\n        uint256 totalAmount;\\n        uint256 currentAmount;\\n        uint256 currentQty;\\n        uint256 numBuys;\\n        uint256 numSkips;\\n        uint256 maxSlippageBps;\\n        uint256 maxPrice;\\n        uint256 minPrice;\\n        uint32 period;\\n        uint32 createdAt;\\n        uint32 processAt;\\n        DCAStatus status;\\n        address[] path;\\n    }\\n\\n    struct SwapInfo {\\n        SwapProtocol swapProtocol;\\n        bytes swapData;\\n    }\\n\\n    function createDCA(\\n        address[] calldata _assetSpec, // router, priceFeed, path...\\n        bytes32[] calldata _merkleProof,\\n        SwapProtocol _swapProtocol,\\n        bytes calldata _swapData,\\n        address _to,\\n        uint256[] calldata _priceSpec\\n    ) external returns(bytes32);\\n\\n    function getDCA(bytes32 _dcaId) external view returns (DCA memory);\\n\\n    function getSwapInfo(bytes32 _dcaId) external view returns (SwapInfo memory);\\n\\n    function getUserDCA(address _user, uint256 _idx) external view returns (bytes32);\\n\\n    function getUserDCACount(address _user) external view returns (uint256);\\n\\n    function cancelDCA(bytes32 _dcaId) external;\\n\\n    function pauseDCA(bytes32 _dcaId) external;\\n\\n    function resumeDCA(bytes32 _dcaId) external;\\n\\n    function managerCommand(bytes32 _dcaId, ManagerCommand _command) external;\\n\\n    function managerProcessed(bytes32 _dcaId, uint256 _amount, uint256 _buyQty, uint256 _fee) external;\\n\\n    function managerSkipped(bytes32 _dcaId, SkipReason _skipReason) external;\\n\\n    event DCACreated(bytes32 indexed dcaId, address indexed user, address indexed to, address inputAsset,\\n        address outputAsset, uint256 amount, uint256 totalAmount, uint32 period);\\n\\n    event DCAPaused(bytes32 indexed dcaId, address indexed user);\\n\\n    event DCAResumed(bytes32 indexed dcaId, address indexed user);\\n\\n    event DCASkipped(bytes32 indexed dcaId, address indexed user, SkipReason skipReason);\\n\\n    event DCAProcessed(bytes32 indexed dcaId, address indexed user, uint256 amount, uint256 buyQty, uint256 fee);\\n\\n    event DCACanceled(bytes32 indexed dcaId, address indexed user);\\n\\n    event DCACompleted(bytes32 indexed dcaId, address indexed user);\\n\\n    event AssetAdminChange(address indexed newAdmin);\\n\\n    event AssetsMerkleRootChanged(bytes32 prevRoot, bytes32 newRoot);\\n\\n}\",\"keccak256\":\"0xaa66649b5b06c8c7d74c35ce00876cdd4786277a200d8b643a93a5ad28f5f1c5\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskDCAManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskDCAManager {\\n\\n    function registerDCA(bytes32 _dcaId) external;\\n\\n    /** @dev Emitted when manager parameters are changed. */\\n    event SetParameters();\\n\\n    /** @dev Emitted when an assetSpec is blacklisted. */\\n    event BlacklistAssetSpec(bytes32 indexed assetSpec);\\n\\n    /** @dev Emitted when an assetSpec is unblacklisted. */\\n    event UnblacklistAssetSpec(bytes32 indexed assetSpec);\\n\\n    /** @dev Emitted the feeDistributor is changed. */\\n    event SetFeeDistributor(address feeDistributor);\\n}\",\"keccak256\":\"0xfdf473d202cfc47ff1bc460b5be31fdee53f530d889f78d03d8bc44f4b27489a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b62001bb81760201c565b15905090565b3b151590565b612a9580620001126000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c80638da5cb5b11610125578063c0677c47116100ad578063da7422281161007c578063da7422281461048b578063e3e01f9f1461049e578063f2fde38b146104b1578063f7b7159f146104c4578063ffd49c84146104d757600080fd5b8063c0677c4714610453578063c453824f1461045c578063d0ebdbe71461046f578063d26c167f1461048257600080fd5b8063abcfd154116100f4578063abcfd154146103f4578063b4cbc9e414610407578063b4e38a8d1461041a578063bc78e9161461042d578063bd78b2b31461044057600080fd5b80638da5cb5b146103a757806392c65f4b146103b85780639498bd71146103d85780639b2cb5d8146103eb57600080fd5b8063572b6c05116101a8578063715018a611610177578063715018a6146103605780637da0a877146103685780638456cb591461037957806387eb01bf14610381578063897b06371461039457600080fd5b8063572b6c05146102e55780635ba581cd146103175780635c975abb1461032a5780636a82763c1461033557600080fd5b80632d3d0405116101e45780632d3d04051461029a5780633f4ba83a146102ad578063486ff0cd146102b55780634b51dd22146102dc57600080fd5b806316ef2c41146102165780632a74cbb5146102525780632ce17578146102675780632d0fc6b41461027a575b600080fd5b61023f610224366004612237565b6001600160a01b03166000908152609a602052604090205490565b6040519081526020015b60405180910390f35b610265610260366004612259565b6104fc565b005b61026561027536600461228d565b6105f5565b61028d61028836600461228d565b610678565b604051610249919061231d565b61023f6102a83660046123ee565b61075e565b610265610e54565b60408051808201825260058152640322e322e360dc1b6020820152905161024991906124dc565b61023f609b5481565b6103076102f3366004612237565b6097546001600160a01b0391821691161490565b6040519015158152602001610249565b6102656103253660046124ef565b610ea7565b60655460ff16610307565b609854610348906001600160a01b031681565b6040516001600160a01b039091168152602001610249565b610265610fd2565b6097546001600160a01b0316610348565b610265611025565b61026561038f36600461228d565b611076565b6102656103a236600461228d565b611174565b6033546001600160a01b0316610348565b6103cb6103c636600461228d565b6111c2565b604051610249919061256c565b6102656103e636600461228d565b61134c565b61023f609c5481565b61026561040236600461228d565b611464565b6102656104153660046126b8565b611602565b61023f6104283660046126ea565b6117a3565b61026561043b366004612237565b6117e0565b61026561044e36600461228d565b611873565b61023f609e5481565b61026561046a366004612714565b611979565b61026561047d366004612237565b6119de565b61023f60a05481565b610265610499366004612237565b611a49565b6102656104ac36600461228d565b611ab3565b6102656104bf366004612237565b611b01565b60a154610348906001600160a01b031681565b609d546104e79063ffffffff1681565b60405163ffffffff9091168152602001610249565b6098546001600160a01b0316610510611bbe565b6001600160a01b03161461053f5760405162461bcd60e51b81526004016105369061273a565b60405180910390fd5b6000828152609960205260409020600d81015461056c9063ffffffff80821691600160401b90041661276f565b81600d0160086101000a81548163ffffffff021916908363ffffffff16021790555060018160090160008282546105a39190612797565b909155505080546040516001600160a01b039091169084907f39e94fc57f494ff14c5e6240aaa121bb05346a3baf4434132df8f9075d587491906105e89086906127af565b60405180910390a3505050565b60a1546001600160a01b0316610609611bbe565b6001600160a01b03161461062f5760405162461bcd60e51b81526004016105369061273a565b609b805460a08190559082905560408051918252602082018390527f5215e49387517b606aec376216c289f200ca6ce6ff98bbbfd0976914cc2b3cfb910160405180910390a150565b61068061204f565b6000828152609f60205260409081902081518083019092528054829060ff1660028111156106b0576106b06122a6565b60028111156106c1576106c16122a6565b81526020016001820180546106d5906127c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610701906127c9565b801561074e5780601f106107235761010080835404028352916020019161074e565b820191906000526020600020905b81548152906001019060200180831161073157829003601f168201915b5050505050815250509050919050565b600060048a10156107a75760405162461bcd60e51b815260206004820152601360248201527221494e56414c4944286173736574537065632960681b6044820152606401610536565b600682146107ed5760405162461bcd60e51b815260206004820152601360248201527221494e56414c4944287072696365537065632960681b6044820152606401610536565b609d5463ffffffff16838360008161080757610807612804565b90506020020135101561084f5760405162461bcd60e51b815260206004820152601060248201526f21494e56414c494428706572696f642960801b6044820152606401610536565b609c548383600181811061086557610865612804565b9050602002013510156108ad5760405162461bcd60e51b815260206004820152601060248201526f21494e56414c494428616d6f756e742960801b6044820152606401610536565b609e54838360038181106108c3576108c3612804565b9050602002013510156109185760405162461bcd60e51b815260206004820152601860248201527f21494e56414c4944286d6178536c6970706167654270732900000000000000006044820152606401610536565b6109278787878e8e8e8e611bcd565b6109695760405162461bcd60e51b815260206004820152601360248201527221494e56414c4944286173736574537065632960681b6044820152606401610536565b6000610973611bbe565b8888888f8f898943426040516020016109959a99989796959493929190612847565b60408051601f1981840301815291815281516020928301206000818152609990935291209091506109c4611bbe565b81546001600160a01b03199081166001600160a01b039283161783556001830180549091169188169190911790558c8c600081610a0357610a03612804565b9050602002016020810190610a189190612237565b6002820180546001600160a01b0319166001600160a01b03929092169190911790558c8c6001818110610a4d57610a4d612804565b9050602002016020810190610a629190612237565b8160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508c8c6002908092610a9d939291906128e1565b610aab91600e84019161206a565b5084846001818110610abf57610abf612804565b602002919091013560048301555084846002818110610ae057610ae0612804565b60200291909101356005830155508484600081610aff57610aff612804565b9050602002013581600d0160006101000a81548163ffffffff021916908363ffffffff16021790555084846004818110610b3b57610b3b612804565b6020029190910135600c8301555084846005818110610b5c57610b5c612804565b6020029190910135600b8301555084846003818110610b7d57610b7d612804565b6020029190910135600a83015550600d810180546bffffffffffffffff0000000019166401000000004263ffffffff1690810263ffffffff60401b191691909117600160401b91909102178082556001919060ff60601b1916600160601b8302179055506000828152609f6020526040902080548a90829060ff19166001836002811115610c0d57610c0d6122a6565b0217905550610c20600182018a8a6120cd565b50609a6000610c2d611bbe565b6001600160a01b0390811682526020808301939093526040918201600090812080546001810182559082529390209092018590556098549051637d0c250f60e11b81526004810186905291169063fa184a1e90602401600060405180830381600087803b158015610c9d57600080fd5b505af1158015610cb1573d6000803e3d6000fd5b5060019250610cbe915050565b600d830154600160601b900460ff166004811115610cde57610cde6122a6565b14610d1c5760405162461bcd60e51b815260206004820152600e60248201526d21554e50524f4345535341424c4560901b6044820152606401610536565b8160080154600114610d615760405162461bcd60e51b815260206004820152600e60248201526d21554e50524f4345535341424c4560901b6044820152606401610536565b60018201548254600e840180546001600160a01b03938416939092169186917f9d1e5b985dd0611bc11e93d5075cdea08f64d1d51dd07489e6f288c20cd6669091600090610db157610db1612804565b600091825260209091200154600e870180546001600160a01b0390921691610ddb9060019061290f565b81548110610deb57610deb612804565b60009182526020918290200154600489015460058a0154600d8b0154604080516001600160a01b039788168152969094169486019490945291840152606083015263ffffffff16608082015260a00160405180910390a450909c9b505050505050505050505050565b610e5c611bbe565b6001600160a01b0316610e776033546001600160a01b031690565b6001600160a01b031614610e9d5760405162461bcd60e51b815260040161053690612926565b610ea5611cf3565b565b6098546001600160a01b0316610ebb611bbe565b6001600160a01b031614610ee15760405162461bcd60e51b81526004016105369061273a565b60008281526099602052604090206003826003811115610f0357610f036122a6565b1415610f5c57600d8101805460ff60601b1916600160611b17905580546040516001600160a01b039091169084907f3d63c73b75a797c741bcfc0ae2644bc392388e97ea718a8731d44f47da2b23a490600090a3505050565b6001826003811115610f7057610f706122a6565b1415610fcd57600d810180546003919060ff60601b1916600160601b835b021790555080546040516001600160a01b039091169084907f5d3baeac0d91b82fe19cca4c28f0768ed59c65d7f64d48d53f166f9ec0f099c090600090a35b505050565b610fda611bbe565b6001600160a01b0316610ff56033546001600160a01b031690565b6001600160a01b03161461101b5760405162461bcd60e51b815260040161053690612926565b610ea56000611d8c565b61102d611bbe565b6001600160a01b03166110486033546001600160a01b031690565b6001600160a01b03161461106e5760405162461bcd60e51b815260040161053690612926565b610ea5611dde565b60008181526099602052604090205481906001600160a01b0316611098611bbe565b6001600160a01b0316146110be5760405162461bcd60e51b81526004016105369061273a565b60008281526099602052604090206001600d820154600160601b900460ff1660048111156110ee576110ee6122a6565b148061111957506002600d820154600160601b900460ff166004811115611117576111176122a6565b145b6111585760405162461bcd60e51b815260206004820152601060248201526f21494e56414c4944287374617475732960801b6044820152606401610536565b600d810180546003919060ff60601b1916600160601b83610f8e565b61117c611bbe565b6001600160a01b03166111976033546001600160a01b031690565b6001600160a01b0316146111bd5760405162461bcd60e51b815260040161053690612926565b609c55565b6111ca612141565b60008281526099602090815260409182902082516102408101845281546001600160a01b03908116825260018301548116938201939093526002820154831693810193909352600381015490911660608301526004808201546080840152600582015460a0840152600682015460c0840152600782015460e084015260088201546101008401526009820154610120840152600a820154610140840152600b820154610160840152600c820154610180840152600d82015463ffffffff8082166101a0860152640100000000820481166101c0860152600160401b8204166101e0850152610200840191600160601b90910460ff16908111156112cf576112cf6122a6565b60048111156112e0576112e06122a6565b8152602001600e820180548060200260200160405190810160405280929190818152602001828054801561074e57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161131f575050505050815250509050919050565b600054610100900460ff166113675760005460ff161561136b565b303b155b6113ce5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610536565b600054610100900460ff161580156113f0576000805461ffff19166101011790555b6113f8611e5a565b611400611e91565b609b82905560a08290556001609c55609d805463ffffffff191662015180179055600a609e5561142e611bbe565b60a180546001600160a01b0319166001600160a01b03929092169190911790558015611460576000805461ff00191690555b5050565b60008181526099602052604090205481906001600160a01b0316611486611bbe565b6001600160a01b0316146114ac5760405162461bcd60e51b81526004016105369061273a565b60008281526099602052604090206002600d820154600160601b900460ff1660048111156114dc576114dc6122a6565b146115175760405162461bcd60e51b815260206004820152600b60248201526a085393d517d4105554d15160aa1b6044820152606401610536565b600d8101805460ff60601b1916600160601b179081905563ffffffff428116600160401b90920416101561156657600d8101805463ffffffff60401b1916600160401b4263ffffffff16021790555b609854604051637d0c250f60e11b8152600481018590526001600160a01b039091169063fa184a1e90602401600060405180830381600087803b1580156115ac57600080fd5b505af11580156115c0573d6000803e3d6000fd5b505082546040516001600160a01b0390911692508591507f0d04c91a4cb25e87e66b2337207d34bd31384c15371c944d543b0d90c866e32c90600090a3505050565b6098546001600160a01b0316611616611bbe565b6001600160a01b03161461163c5760405162461bcd60e51b81526004016105369061273a565b6000848152609960205260409020600d8101546116699063ffffffff80821691600160401b90041661276f565b81600d0160086101000a81548163ffffffff021916908363ffffffff1602179055508381600601600082825461169f9190612797565b92505081905550828160070160008282546116ba9190612797565b9250508190555060018160080160008282546116d69190612797565b9091555050805460408051868152602081018690529081018490526001600160a01b039091169086907f2cd977fbc4930a01c7a1d2d4f59916c67f5e443ee1b3efc3cf295b30b95499289060600160405180910390a36000816005015411801561174857508060050154816006015410155b1561179c57600d8101805460ff60601b1916600160621b17905580546040516001600160a01b039091169086907fe91db046d37f56c01a0949ac11e488007e1e26ea683caaee32d54c4cea5d851b90600090a35b5050505050565b6001600160a01b0382166000908152609a602052604081208054839081106117cd576117cd612804565b9060005260206000200154905092915050565b6117e8611bbe565b6001600160a01b03166118036033546001600160a01b031690565b6001600160a01b0316146118295760405162461bcd60e51b815260040161053690612926565b60a180546001600160a01b0319166001600160a01b0383169081179091556040517f3a99482b294ac192dccc0f45604a8e3a48889930e9e8c089bb0f434bbfd1e55990600090a250565b60008181526099602052604090205481906001600160a01b0316611895611bbe565b6001600160a01b0316146118bb5760405162461bcd60e51b81526004016105369061273a565b60008281526099602052604090206001600d820154600160601b900460ff1660048111156118eb576118eb6122a6565b146119265760405162461bcd60e51b815260206004820152600b60248201526a214e4f545f41435449564560a81b6044820152606401610536565b600d8101805460ff60601b1916600160611b17905580546040516001600160a01b039091169084907f3d63c73b75a797c741bcfc0ae2644bc392388e97ea718a8731d44f47da2b23a490600090a3505050565b611981611bbe565b6001600160a01b031661199c6033546001600160a01b031690565b6001600160a01b0316146119c25760405162461bcd60e51b815260040161053690612926565b609d805463ffffffff191663ffffffff92909216919091179055565b6119e6611bbe565b6001600160a01b0316611a016033546001600160a01b031690565b6001600160a01b031614611a275760405162461bcd60e51b815260040161053690612926565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b611a51611bbe565b6001600160a01b0316611a6c6033546001600160a01b031690565b6001600160a01b031614611a925760405162461bcd60e51b815260040161053690612926565b609780546001600160a01b0319166001600160a01b03831617905550565b50565b611abb611bbe565b6001600160a01b0316611ad66033546001600160a01b031690565b6001600160a01b031614611afc5760405162461bcd60e51b815260040161053690612926565b609e55565b611b09611bbe565b6001600160a01b0316611b246033546001600160a01b031690565b6001600160a01b031614611b4a5760405162461bcd60e51b815260040161053690612926565b6001600160a01b038116611baf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610536565b611ab081611d8c565b3b151590565b6000611bc8611ec8565b905090565b60008088888888886000818110611be657611be6612804565b9050602002016020810190611bfb9190612237565b89896001818110611c0e57611c0e612804565b9050602002016020810190611c239190612237565b611c308a6002818e6128e1565b604051602001611c46979695949392919061295b565b604051602081830303815290604052805190602001209050611c9f84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050609b549150849050611efc565b80611ce65750611ce68484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060a0549150849050611efc565b9998505050505050505050565b60655460ff16611d3c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610536565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611d6f611bbe565b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff1615611e245760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610536565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d6f611bbe565b600054610100900460ff16611e815760405162461bcd60e51b8152600401610536906129f9565b611e89611f12565b610ea5611f39565b600054610100900460ff16611eb85760405162461bcd60e51b8152600401610536906129f9565b611ec0611f12565b610ea5611f70565b600060143610801590611ee557506097546001600160a01b031633145b15611ef7575060131936013560601c90565b503390565b600082611f098584611fa3565b14949350505050565b600054610100900460ff16610ea55760405162461bcd60e51b8152600401610536906129f9565b600054610100900460ff16611f605760405162461bcd60e51b8152600401610536906129f9565b610ea5611f6b611bbe565b611d8c565b600054610100900460ff16611f975760405162461bcd60e51b8152600401610536906129f9565b6065805460ff19169055565b600081815b8451811015612047576000858281518110611fc557611fc5612804565b60200260200101519050808311612007576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250612034565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061203f81612a44565b915050611fa8565b509392505050565b604080518082019091528060005b8152602001606081525090565b8280548282559060005260206000209081019282156120bd579160200282015b828111156120bd5781546001600160a01b0319166001600160a01b0384351617825560209092019160019091019061208a565b506120c9929150612206565b5090565b8280546120d9906127c9565b90600052602060002090601f0160209004810192826120fb57600085556120bd565b82601f106121145782800160ff198235161785556120bd565b828001600101855582156120bd579182015b828111156120bd578235825591602001919060010190612126565b60405180610240016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020016000600481111561205d5761205d6122a6565b5b808211156120c95760008155600101612207565b80356001600160a01b038116811461223257600080fd5b919050565b60006020828403121561224957600080fd5b6122528261221b565b9392505050565b6000806040838503121561226c57600080fd5b8235915060208301356006811061228257600080fd5b809150509250929050565b60006020828403121561229f57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600381106122cc576122cc6122a6565b9052565b6000815180845260005b818110156122f6576020818501810151868301820152016122da565b81811115612308576000602083870101525b50601f01601f19169290920160200192915050565b6020815261232f6020820183516122bc565b6000602083015160408084015261234960608401826122d0565b949350505050565b60008083601f84011261236357600080fd5b50813567ffffffffffffffff81111561237b57600080fd5b6020830191508360208260051b850101111561239657600080fd5b9250929050565b80356003811061223257600080fd5b60008083601f8401126123be57600080fd5b50813567ffffffffffffffff8111156123d657600080fd5b60208301915083602082850101111561239657600080fd5b60008060008060008060008060008060c08b8d03121561240d57600080fd5b8a3567ffffffffffffffff8082111561242557600080fd5b6124318e838f01612351565b909c509a5060208d013591508082111561244a57600080fd5b6124568e838f01612351565b909a50985088915061246a60408e0161239d565b975060608d013591508082111561248057600080fd5b61248c8e838f016123ac565b90975095508591506124a060808e0161221b565b945060a08d01359150808211156124b657600080fd5b506124c38d828e01612351565b915080935050809150509295989b9194979a5092959850565b60208152600061225260208301846122d0565b6000806040838503121561250257600080fd5b8235915060208301356004811061228257600080fd5b600581106122cc576122cc6122a6565b600081518084526020808501945080840160005b838110156125615781516001600160a01b03168752958201959082019060010161253c565b509495945050505050565b602081526125866020820183516001600160a01b03169052565b600060208301516125a260408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b038116608084015250608083015160a08381019190915283015160c08084019190915283015160e08084019190915283015161010080840191909152830151610120808401919091528301516101408084019190915283015161016080840191909152830151610180808401919091528301516101a0808401919091528301516101c06126588185018363ffffffff169052565b84015190506101e06126718482018363ffffffff169052565b840151905061020061268a8482018363ffffffff169052565b840151905061022061269e84820183612518565b840151610240848101529050612349610260840182612528565b600080600080608085870312156126ce57600080fd5b5050823594602084013594506040840135936060013592509050565b600080604083850312156126fd57600080fd5b6127068361221b565b946020939093013593505050565b60006020828403121561272657600080fd5b813563ffffffff8116811461225257600080fd5b60208082526005908201526404282aaa8960db1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff80831681851680830382111561278e5761278e612759565b01949350505050565b600082198211156127aa576127aa612759565b500190565b60208101600683106127c3576127c36122a6565b91905290565b600181811c908216806127dd57607f821691505b602082108114156127fe57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006001600160fb1b0383111561283057600080fd5b8260051b8083863760009401938452509192915050565b6bffffffffffffffffffffffff198b60601b168152600060038b1061286e5761286e6122a6565b8a60f81b6014830152888a60158401376000828a0160150181815289915b898110156128ba576001600160a01b036128a58461221b565b1682526020928301929091019060010161288c565b506128c681888a61281a565b95865250505050602082015260400198975050505050505050565b600080858511156128f157600080fd5b838611156128fe57600080fd5b5050600583901b0193919092039150565b60008282101561292157612921612759565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b61296581896122bc565b6000602060a0818401528760a0840152878960c0850137600060c089850181018290526001600160a01b0389811660408701528881166060870152601f8b01601f191686018681038301608088015291820187905287929160e0015b878310156129e857816129d38561221b565b168152928401926001929092019184016129c1565b9d9c50505050505050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000600019821415612a5857612a58612759565b506001019056fea2646970667358221220e44394e567ea279007e0b84473747b6079b209825d32e6af0f49d0c0fd1a9de664736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c80638da5cb5b11610125578063c0677c47116100ad578063da7422281161007c578063da7422281461048b578063e3e01f9f1461049e578063f2fde38b146104b1578063f7b7159f146104c4578063ffd49c84146104d757600080fd5b8063c0677c4714610453578063c453824f1461045c578063d0ebdbe71461046f578063d26c167f1461048257600080fd5b8063abcfd154116100f4578063abcfd154146103f4578063b4cbc9e414610407578063b4e38a8d1461041a578063bc78e9161461042d578063bd78b2b31461044057600080fd5b80638da5cb5b146103a757806392c65f4b146103b85780639498bd71146103d85780639b2cb5d8146103eb57600080fd5b8063572b6c05116101a8578063715018a611610177578063715018a6146103605780637da0a877146103685780638456cb591461037957806387eb01bf14610381578063897b06371461039457600080fd5b8063572b6c05146102e55780635ba581cd146103175780635c975abb1461032a5780636a82763c1461033557600080fd5b80632d3d0405116101e45780632d3d04051461029a5780633f4ba83a146102ad578063486ff0cd146102b55780634b51dd22146102dc57600080fd5b806316ef2c41146102165780632a74cbb5146102525780632ce17578146102675780632d0fc6b41461027a575b600080fd5b61023f610224366004612237565b6001600160a01b03166000908152609a602052604090205490565b6040519081526020015b60405180910390f35b610265610260366004612259565b6104fc565b005b61026561027536600461228d565b6105f5565b61028d61028836600461228d565b610678565b604051610249919061231d565b61023f6102a83660046123ee565b61075e565b610265610e54565b60408051808201825260058152640322e322e360dc1b6020820152905161024991906124dc565b61023f609b5481565b6103076102f3366004612237565b6097546001600160a01b0391821691161490565b6040519015158152602001610249565b6102656103253660046124ef565b610ea7565b60655460ff16610307565b609854610348906001600160a01b031681565b6040516001600160a01b039091168152602001610249565b610265610fd2565b6097546001600160a01b0316610348565b610265611025565b61026561038f36600461228d565b611076565b6102656103a236600461228d565b611174565b6033546001600160a01b0316610348565b6103cb6103c636600461228d565b6111c2565b604051610249919061256c565b6102656103e636600461228d565b61134c565b61023f609c5481565b61026561040236600461228d565b611464565b6102656104153660046126b8565b611602565b61023f6104283660046126ea565b6117a3565b61026561043b366004612237565b6117e0565b61026561044e36600461228d565b611873565b61023f609e5481565b61026561046a366004612714565b611979565b61026561047d366004612237565b6119de565b61023f60a05481565b610265610499366004612237565b611a49565b6102656104ac36600461228d565b611ab3565b6102656104bf366004612237565b611b01565b60a154610348906001600160a01b031681565b609d546104e79063ffffffff1681565b60405163ffffffff9091168152602001610249565b6098546001600160a01b0316610510611bbe565b6001600160a01b03161461053f5760405162461bcd60e51b81526004016105369061273a565b60405180910390fd5b6000828152609960205260409020600d81015461056c9063ffffffff80821691600160401b90041661276f565b81600d0160086101000a81548163ffffffff021916908363ffffffff16021790555060018160090160008282546105a39190612797565b909155505080546040516001600160a01b039091169084907f39e94fc57f494ff14c5e6240aaa121bb05346a3baf4434132df8f9075d587491906105e89086906127af565b60405180910390a3505050565b60a1546001600160a01b0316610609611bbe565b6001600160a01b03161461062f5760405162461bcd60e51b81526004016105369061273a565b609b805460a08190559082905560408051918252602082018390527f5215e49387517b606aec376216c289f200ca6ce6ff98bbbfd0976914cc2b3cfb910160405180910390a150565b61068061204f565b6000828152609f60205260409081902081518083019092528054829060ff1660028111156106b0576106b06122a6565b60028111156106c1576106c16122a6565b81526020016001820180546106d5906127c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610701906127c9565b801561074e5780601f106107235761010080835404028352916020019161074e565b820191906000526020600020905b81548152906001019060200180831161073157829003601f168201915b5050505050815250509050919050565b600060048a10156107a75760405162461bcd60e51b815260206004820152601360248201527221494e56414c4944286173736574537065632960681b6044820152606401610536565b600682146107ed5760405162461bcd60e51b815260206004820152601360248201527221494e56414c4944287072696365537065632960681b6044820152606401610536565b609d5463ffffffff16838360008161080757610807612804565b90506020020135101561084f5760405162461bcd60e51b815260206004820152601060248201526f21494e56414c494428706572696f642960801b6044820152606401610536565b609c548383600181811061086557610865612804565b9050602002013510156108ad5760405162461bcd60e51b815260206004820152601060248201526f21494e56414c494428616d6f756e742960801b6044820152606401610536565b609e54838360038181106108c3576108c3612804565b9050602002013510156109185760405162461bcd60e51b815260206004820152601860248201527f21494e56414c4944286d6178536c6970706167654270732900000000000000006044820152606401610536565b6109278787878e8e8e8e611bcd565b6109695760405162461bcd60e51b815260206004820152601360248201527221494e56414c4944286173736574537065632960681b6044820152606401610536565b6000610973611bbe565b8888888f8f898943426040516020016109959a99989796959493929190612847565b60408051601f1981840301815291815281516020928301206000818152609990935291209091506109c4611bbe565b81546001600160a01b03199081166001600160a01b039283161783556001830180549091169188169190911790558c8c600081610a0357610a03612804565b9050602002016020810190610a189190612237565b6002820180546001600160a01b0319166001600160a01b03929092169190911790558c8c6001818110610a4d57610a4d612804565b9050602002016020810190610a629190612237565b8160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508c8c6002908092610a9d939291906128e1565b610aab91600e84019161206a565b5084846001818110610abf57610abf612804565b602002919091013560048301555084846002818110610ae057610ae0612804565b60200291909101356005830155508484600081610aff57610aff612804565b9050602002013581600d0160006101000a81548163ffffffff021916908363ffffffff16021790555084846004818110610b3b57610b3b612804565b6020029190910135600c8301555084846005818110610b5c57610b5c612804565b6020029190910135600b8301555084846003818110610b7d57610b7d612804565b6020029190910135600a83015550600d810180546bffffffffffffffff0000000019166401000000004263ffffffff1690810263ffffffff60401b191691909117600160401b91909102178082556001919060ff60601b1916600160601b8302179055506000828152609f6020526040902080548a90829060ff19166001836002811115610c0d57610c0d6122a6565b0217905550610c20600182018a8a6120cd565b50609a6000610c2d611bbe565b6001600160a01b0390811682526020808301939093526040918201600090812080546001810182559082529390209092018590556098549051637d0c250f60e11b81526004810186905291169063fa184a1e90602401600060405180830381600087803b158015610c9d57600080fd5b505af1158015610cb1573d6000803e3d6000fd5b5060019250610cbe915050565b600d830154600160601b900460ff166004811115610cde57610cde6122a6565b14610d1c5760405162461bcd60e51b815260206004820152600e60248201526d21554e50524f4345535341424c4560901b6044820152606401610536565b8160080154600114610d615760405162461bcd60e51b815260206004820152600e60248201526d21554e50524f4345535341424c4560901b6044820152606401610536565b60018201548254600e840180546001600160a01b03938416939092169186917f9d1e5b985dd0611bc11e93d5075cdea08f64d1d51dd07489e6f288c20cd6669091600090610db157610db1612804565b600091825260209091200154600e870180546001600160a01b0390921691610ddb9060019061290f565b81548110610deb57610deb612804565b60009182526020918290200154600489015460058a0154600d8b0154604080516001600160a01b039788168152969094169486019490945291840152606083015263ffffffff16608082015260a00160405180910390a450909c9b505050505050505050505050565b610e5c611bbe565b6001600160a01b0316610e776033546001600160a01b031690565b6001600160a01b031614610e9d5760405162461bcd60e51b815260040161053690612926565b610ea5611cf3565b565b6098546001600160a01b0316610ebb611bbe565b6001600160a01b031614610ee15760405162461bcd60e51b81526004016105369061273a565b60008281526099602052604090206003826003811115610f0357610f036122a6565b1415610f5c57600d8101805460ff60601b1916600160611b17905580546040516001600160a01b039091169084907f3d63c73b75a797c741bcfc0ae2644bc392388e97ea718a8731d44f47da2b23a490600090a3505050565b6001826003811115610f7057610f706122a6565b1415610fcd57600d810180546003919060ff60601b1916600160601b835b021790555080546040516001600160a01b039091169084907f5d3baeac0d91b82fe19cca4c28f0768ed59c65d7f64d48d53f166f9ec0f099c090600090a35b505050565b610fda611bbe565b6001600160a01b0316610ff56033546001600160a01b031690565b6001600160a01b03161461101b5760405162461bcd60e51b815260040161053690612926565b610ea56000611d8c565b61102d611bbe565b6001600160a01b03166110486033546001600160a01b031690565b6001600160a01b03161461106e5760405162461bcd60e51b815260040161053690612926565b610ea5611dde565b60008181526099602052604090205481906001600160a01b0316611098611bbe565b6001600160a01b0316146110be5760405162461bcd60e51b81526004016105369061273a565b60008281526099602052604090206001600d820154600160601b900460ff1660048111156110ee576110ee6122a6565b148061111957506002600d820154600160601b900460ff166004811115611117576111176122a6565b145b6111585760405162461bcd60e51b815260206004820152601060248201526f21494e56414c4944287374617475732960801b6044820152606401610536565b600d810180546003919060ff60601b1916600160601b83610f8e565b61117c611bbe565b6001600160a01b03166111976033546001600160a01b031690565b6001600160a01b0316146111bd5760405162461bcd60e51b815260040161053690612926565b609c55565b6111ca612141565b60008281526099602090815260409182902082516102408101845281546001600160a01b03908116825260018301548116938201939093526002820154831693810193909352600381015490911660608301526004808201546080840152600582015460a0840152600682015460c0840152600782015460e084015260088201546101008401526009820154610120840152600a820154610140840152600b820154610160840152600c820154610180840152600d82015463ffffffff8082166101a0860152640100000000820481166101c0860152600160401b8204166101e0850152610200840191600160601b90910460ff16908111156112cf576112cf6122a6565b60048111156112e0576112e06122a6565b8152602001600e820180548060200260200160405190810160405280929190818152602001828054801561074e57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161131f575050505050815250509050919050565b600054610100900460ff166113675760005460ff161561136b565b303b155b6113ce5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610536565b600054610100900460ff161580156113f0576000805461ffff19166101011790555b6113f8611e5a565b611400611e91565b609b82905560a08290556001609c55609d805463ffffffff191662015180179055600a609e5561142e611bbe565b60a180546001600160a01b0319166001600160a01b03929092169190911790558015611460576000805461ff00191690555b5050565b60008181526099602052604090205481906001600160a01b0316611486611bbe565b6001600160a01b0316146114ac5760405162461bcd60e51b81526004016105369061273a565b60008281526099602052604090206002600d820154600160601b900460ff1660048111156114dc576114dc6122a6565b146115175760405162461bcd60e51b815260206004820152600b60248201526a085393d517d4105554d15160aa1b6044820152606401610536565b600d8101805460ff60601b1916600160601b179081905563ffffffff428116600160401b90920416101561156657600d8101805463ffffffff60401b1916600160401b4263ffffffff16021790555b609854604051637d0c250f60e11b8152600481018590526001600160a01b039091169063fa184a1e90602401600060405180830381600087803b1580156115ac57600080fd5b505af11580156115c0573d6000803e3d6000fd5b505082546040516001600160a01b0390911692508591507f0d04c91a4cb25e87e66b2337207d34bd31384c15371c944d543b0d90c866e32c90600090a3505050565b6098546001600160a01b0316611616611bbe565b6001600160a01b03161461163c5760405162461bcd60e51b81526004016105369061273a565b6000848152609960205260409020600d8101546116699063ffffffff80821691600160401b90041661276f565b81600d0160086101000a81548163ffffffff021916908363ffffffff1602179055508381600601600082825461169f9190612797565b92505081905550828160070160008282546116ba9190612797565b9250508190555060018160080160008282546116d69190612797565b9091555050805460408051868152602081018690529081018490526001600160a01b039091169086907f2cd977fbc4930a01c7a1d2d4f59916c67f5e443ee1b3efc3cf295b30b95499289060600160405180910390a36000816005015411801561174857508060050154816006015410155b1561179c57600d8101805460ff60601b1916600160621b17905580546040516001600160a01b039091169086907fe91db046d37f56c01a0949ac11e488007e1e26ea683caaee32d54c4cea5d851b90600090a35b5050505050565b6001600160a01b0382166000908152609a602052604081208054839081106117cd576117cd612804565b9060005260206000200154905092915050565b6117e8611bbe565b6001600160a01b03166118036033546001600160a01b031690565b6001600160a01b0316146118295760405162461bcd60e51b815260040161053690612926565b60a180546001600160a01b0319166001600160a01b0383169081179091556040517f3a99482b294ac192dccc0f45604a8e3a48889930e9e8c089bb0f434bbfd1e55990600090a250565b60008181526099602052604090205481906001600160a01b0316611895611bbe565b6001600160a01b0316146118bb5760405162461bcd60e51b81526004016105369061273a565b60008281526099602052604090206001600d820154600160601b900460ff1660048111156118eb576118eb6122a6565b146119265760405162461bcd60e51b815260206004820152600b60248201526a214e4f545f41435449564560a81b6044820152606401610536565b600d8101805460ff60601b1916600160611b17905580546040516001600160a01b039091169084907f3d63c73b75a797c741bcfc0ae2644bc392388e97ea718a8731d44f47da2b23a490600090a3505050565b611981611bbe565b6001600160a01b031661199c6033546001600160a01b031690565b6001600160a01b0316146119c25760405162461bcd60e51b815260040161053690612926565b609d805463ffffffff191663ffffffff92909216919091179055565b6119e6611bbe565b6001600160a01b0316611a016033546001600160a01b031690565b6001600160a01b031614611a275760405162461bcd60e51b815260040161053690612926565b609880546001600160a01b0319166001600160a01b0392909216919091179055565b611a51611bbe565b6001600160a01b0316611a6c6033546001600160a01b031690565b6001600160a01b031614611a925760405162461bcd60e51b815260040161053690612926565b609780546001600160a01b0319166001600160a01b03831617905550565b50565b611abb611bbe565b6001600160a01b0316611ad66033546001600160a01b031690565b6001600160a01b031614611afc5760405162461bcd60e51b815260040161053690612926565b609e55565b611b09611bbe565b6001600160a01b0316611b246033546001600160a01b031690565b6001600160a01b031614611b4a5760405162461bcd60e51b815260040161053690612926565b6001600160a01b038116611baf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610536565b611ab081611d8c565b3b151590565b6000611bc8611ec8565b905090565b60008088888888886000818110611be657611be6612804565b9050602002016020810190611bfb9190612237565b89896001818110611c0e57611c0e612804565b9050602002016020810190611c239190612237565b611c308a6002818e6128e1565b604051602001611c46979695949392919061295b565b604051602081830303815290604052805190602001209050611c9f84848080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050609b549150849050611efc565b80611ce65750611ce68484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060a0549150849050611efc565b9998505050505050505050565b60655460ff16611d3c5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610536565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611d6f611bbe565b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff1615611e245760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610536565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611d6f611bbe565b600054610100900460ff16611e815760405162461bcd60e51b8152600401610536906129f9565b611e89611f12565b610ea5611f39565b600054610100900460ff16611eb85760405162461bcd60e51b8152600401610536906129f9565b611ec0611f12565b610ea5611f70565b600060143610801590611ee557506097546001600160a01b031633145b15611ef7575060131936013560601c90565b503390565b600082611f098584611fa3565b14949350505050565b600054610100900460ff16610ea55760405162461bcd60e51b8152600401610536906129f9565b600054610100900460ff16611f605760405162461bcd60e51b8152600401610536906129f9565b610ea5611f6b611bbe565b611d8c565b600054610100900460ff16611f975760405162461bcd60e51b8152600401610536906129f9565b6065805460ff19169055565b600081815b8451811015612047576000858281518110611fc557611fc5612804565b60200260200101519050808311612007576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250612034565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061203f81612a44565b915050611fa8565b509392505050565b604080518082019091528060005b8152602001606081525090565b8280548282559060005260206000209081019282156120bd579160200282015b828111156120bd5781546001600160a01b0319166001600160a01b0384351617825560209092019160019091019061208a565b506120c9929150612206565b5090565b8280546120d9906127c9565b90600052602060002090601f0160209004810192826120fb57600085556120bd565b82601f106121145782800160ff198235161785556120bd565b828001600101855582156120bd579182015b828111156120bd578235825591602001919060010190612126565b60405180610240016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff1681526020016000600481111561205d5761205d6122a6565b5b808211156120c95760008155600101612207565b80356001600160a01b038116811461223257600080fd5b919050565b60006020828403121561224957600080fd5b6122528261221b565b9392505050565b6000806040838503121561226c57600080fd5b8235915060208301356006811061228257600080fd5b809150509250929050565b60006020828403121561229f57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b600381106122cc576122cc6122a6565b9052565b6000815180845260005b818110156122f6576020818501810151868301820152016122da565b81811115612308576000602083870101525b50601f01601f19169290920160200192915050565b6020815261232f6020820183516122bc565b6000602083015160408084015261234960608401826122d0565b949350505050565b60008083601f84011261236357600080fd5b50813567ffffffffffffffff81111561237b57600080fd5b6020830191508360208260051b850101111561239657600080fd5b9250929050565b80356003811061223257600080fd5b60008083601f8401126123be57600080fd5b50813567ffffffffffffffff8111156123d657600080fd5b60208301915083602082850101111561239657600080fd5b60008060008060008060008060008060c08b8d03121561240d57600080fd5b8a3567ffffffffffffffff8082111561242557600080fd5b6124318e838f01612351565b909c509a5060208d013591508082111561244a57600080fd5b6124568e838f01612351565b909a50985088915061246a60408e0161239d565b975060608d013591508082111561248057600080fd5b61248c8e838f016123ac565b90975095508591506124a060808e0161221b565b945060a08d01359150808211156124b657600080fd5b506124c38d828e01612351565b915080935050809150509295989b9194979a5092959850565b60208152600061225260208301846122d0565b6000806040838503121561250257600080fd5b8235915060208301356004811061228257600080fd5b600581106122cc576122cc6122a6565b600081518084526020808501945080840160005b838110156125615781516001600160a01b03168752958201959082019060010161253c565b509495945050505050565b602081526125866020820183516001600160a01b03169052565b600060208301516125a260408401826001600160a01b03169052565b5060408301516001600160a01b03811660608401525060608301516001600160a01b038116608084015250608083015160a08381019190915283015160c08084019190915283015160e08084019190915283015161010080840191909152830151610120808401919091528301516101408084019190915283015161016080840191909152830151610180808401919091528301516101a0808401919091528301516101c06126588185018363ffffffff169052565b84015190506101e06126718482018363ffffffff169052565b840151905061020061268a8482018363ffffffff169052565b840151905061022061269e84820183612518565b840151610240848101529050612349610260840182612528565b600080600080608085870312156126ce57600080fd5b5050823594602084013594506040840135936060013592509050565b600080604083850312156126fd57600080fd5b6127068361221b565b946020939093013593505050565b60006020828403121561272657600080fd5b813563ffffffff8116811461225257600080fd5b60208082526005908201526404282aaa8960db1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff80831681851680830382111561278e5761278e612759565b01949350505050565b600082198211156127aa576127aa612759565b500190565b60208101600683106127c3576127c36122a6565b91905290565b600181811c908216806127dd57607f821691505b602082108114156127fe57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60006001600160fb1b0383111561283057600080fd5b8260051b8083863760009401938452509192915050565b6bffffffffffffffffffffffff198b60601b168152600060038b1061286e5761286e6122a6565b8a60f81b6014830152888a60158401376000828a0160150181815289915b898110156128ba576001600160a01b036128a58461221b565b1682526020928301929091019060010161288c565b506128c681888a61281a565b95865250505050602082015260400198975050505050505050565b600080858511156128f157600080fd5b838611156128fe57600080fd5b5050600583901b0193919092039150565b60008282101561292157612921612759565b500390565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b61296581896122bc565b6000602060a0818401528760a0840152878960c0850137600060c089850181018290526001600160a01b0389811660408701528881166060870152601f8b01601f191686018681038301608088015291820187905287929160e0015b878310156129e857816129d38561221b565b168152928401926001929092019184016129c1565b9d9c50505050505050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000600019821415612a5857612a58612759565b506001019056fea2646970667358221220e44394e567ea279007e0b84473747b6079b209825d32e6af0f49d0c0fd1a9de664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "assetsAdmin": {
        "details": "address allowed to update asset merkle root. "
      },
      "assetsMerkleRoot": {
        "details": "merkle root of approved assets. "
      },
      "dcaManager": {
        "details": "contract to manage DCA executions. "
      },
      "dcaMap": {
        "details": "map of DCA ID to DCA info. "
      },
      "minAmount": {
        "details": "minimum amount of vault base asset for a DCA. "
      },
      "minPeriod": {
        "details": "minimum period for a DCA. "
      },
      "minSlippage": {
        "details": "minimum slippage allowed for a DCA. "
      },
      "prevAssetsMerkleRoot": {
        "details": "previous merkle root of approved assets. "
      },
      "swapInfoMap": {
        "details": "swap type and optional swap data for a DCA. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 327,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 330,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2551,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 205,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 319,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 415,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 506,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 72,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 13145,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "dcaManager",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(ICaskDCAManager)16372"
      },
      {
        "astId": 13151,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "dcaMap",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes32,t_struct(DCA)16171_storage)"
      },
      {
        "astId": 13156,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "userDCAs",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 13159,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "assetsMerkleRoot",
        "offset": 0,
        "slot": "155",
        "type": "t_bytes32"
      },
      {
        "astId": 13162,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "minAmount",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 13165,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "minPeriod",
        "offset": 0,
        "slot": "157",
        "type": "t_uint32"
      },
      {
        "astId": 13168,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "minSlippage",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 13174,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "swapInfoMap",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_bytes32,t_struct(SwapInfo)16177_storage)"
      },
      {
        "astId": 13177,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "prevAssetsMerkleRoot",
        "offset": 0,
        "slot": "160",
        "type": "t_bytes32"
      },
      {
        "astId": 13180,
        "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
        "label": "assetsAdmin",
        "offset": 0,
        "slot": "161",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(ICaskDCAManager)16372": {
        "encoding": "inplace",
        "label": "contract ICaskDCAManager",
        "numberOfBytes": "20"
      },
      "t_enum(DCAStatus)16120": {
        "encoding": "inplace",
        "label": "enum ICaskDCA.DCAStatus",
        "numberOfBytes": "1"
      },
      "t_enum(SwapProtocol)16114": {
        "encoding": "inplace",
        "label": "enum ICaskDCA.SwapProtocol",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_struct(DCA)16171_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ICaskDCA.DCA)",
        "numberOfBytes": "32",
        "value": "t_struct(DCA)16171_storage"
      },
      "t_mapping(t_bytes32,t_struct(SwapInfo)16177_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ICaskDCA.SwapInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SwapInfo)16177_storage"
      },
      "t_struct(DCA)16171_storage": {
        "encoding": "inplace",
        "label": "struct ICaskDCA.DCA",
        "members": [
          {
            "astId": 16134,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16136,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16138,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "router",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16140,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "priceFeed",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 16142,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "amount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16144,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "totalAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 16146,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "currentAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 16148,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "currentQty",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 16150,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "numBuys",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 16152,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "numSkips",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 16154,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "maxSlippageBps",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 16156,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "maxPrice",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 16158,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "minPrice",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 16160,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "period",
            "offset": 0,
            "slot": "13",
            "type": "t_uint32"
          },
          {
            "astId": 16162,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "createdAt",
            "offset": 4,
            "slot": "13",
            "type": "t_uint32"
          },
          {
            "astId": 16164,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "processAt",
            "offset": 8,
            "slot": "13",
            "type": "t_uint32"
          },
          {
            "astId": 16167,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "status",
            "offset": 12,
            "slot": "13",
            "type": "t_enum(DCAStatus)16120"
          },
          {
            "astId": 16170,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "path",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(SwapInfo)16177_storage": {
        "encoding": "inplace",
        "label": "struct ICaskDCA.SwapInfo",
        "members": [
          {
            "astId": 16174,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "swapProtocol",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(SwapProtocol)16114"
          },
          {
            "astId": 16176,
            "contract": "contracts/dca/CaskDCA.sol:CaskDCA",
            "label": "swapData",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}