{
  "address": "0x58cD4e8AEa6637BF6589a340766b29BD55933e07",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "BlacklistRouter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "jobsProcessed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "queueId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "queueRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "currentBucket",
          "type": "uint32"
        }
      ],
      "name": "QueueRunReport",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SetParameters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "UnblacklistRouter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "queueId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "workUnit",
          "type": "bytes32"
        }
      ],
      "name": "WorkUnitProcessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "queueId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "workUnit",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "processAt",
          "type": "uint32"
        }
      ],
      "name": "WorkUnitQueued",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "assetsMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "blacklistRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "blacklistedRouters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "caskDCA",
      "outputs": [
        {
          "internalType": "contract ICaskDCA",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "caskVault",
      "outputs": [
        {
          "internalType": "contract ICaskVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dcaFeeBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dcaFeeMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dcaMinValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_caskDCA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_caskVault",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPriceFeedAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxQueueAge",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSkips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queueBucketSize",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_queueId",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "_bucket",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "queueItem",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_queueId",
          "type": "uint8"
        }
      ],
      "name": "queuePosition",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_queueId",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "_bucket",
          "type": "uint32"
        }
      ],
      "name": "queueSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_dcaId",
          "type": "bytes32"
        }
      ],
      "name": "registerDCA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_maxQueueAge",
          "type": "uint32"
        }
      ],
      "name": "setMaxQueueAge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSkips",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dcaFeeBps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dcaFeeMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dcaMinValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPriceFeedAge",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_queueBucketSize",
          "type": "uint32"
        }
      ],
      "name": "setParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_queueBucketSize",
          "type": "uint32"
        }
      ],
      "name": "setQueueBucketSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_queueId",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "_timestamp",
          "type": "uint32"
        }
      ],
      "name": "setQueuePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "unblacklistRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x370918d34cc1652b233d4a1efce06e9aa21d3500b6b0dff874ecb3587438a231",
  "receipt": {
    "to": null,
    "from": "0x83e50cD4123bAA60f6d6c8A83ca85Ac72e826bD0",
    "contractAddress": "0x58cD4e8AEa6637BF6589a340766b29BD55933e07",
    "transactionIndex": 0,
    "gasUsed": "2809775",
    "logsBloom": "0x
    "blockHash": "0x5e93c82396af85a5c671aa706ad1e7ec3d6ffb82f6e905614add969d589bd135",
    "transactionHash": "0x370918d34cc1652b233d4a1efce06e9aa21d3500b6b0dff874ecb3587438a231",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 26974722,
        "transactionHash": "0x370918d34cc1652b233d4a1efce06e9aa21d3500b6b0dff874ecb3587438a231",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000083e50cd4123baa60f6d6c8a83ca85ac72e826bd0",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001c5af45be785dd70000000000000000000000000000000000000000000000002d40322e8de3d3db0000000000000000000000000000000000000000000003fc02ce71cbd7d6d1640000000000000000000000000000000000000000000000002b7a82e8cf6b76040000000000000000000000000000000000000000000003fc04942111964f2f3b",
        "logIndex": 0,
        "blockHash": "0x5e93c82396af85a5c671aa706ad1e7ec3d6ffb82f6e905614add969d589bd135"
      }
    ],
    "blockNumber": 26974722,
    "cumulativeGasUsed": "2809775",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "79a7f6ff9bd8a3922495b96a9b369300",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"BlacklistRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"jobsProcessed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"queueId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"queueRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"currentBucket\",\"type\":\"uint32\"}],\"name\":\"QueueRunReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SetParameters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"UnblacklistRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"queueId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"workUnit\",\"type\":\"bytes32\"}],\"name\":\"WorkUnitProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"queueId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"workUnit\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"processAt\",\"type\":\"uint32\"}],\"name\":\"WorkUnitQueued\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assetsMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"blacklistRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklistedRouters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caskDCA\",\"outputs\":[{\"internalType\":\"contract ICaskDCA\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caskVault\",\"outputs\":[{\"internalType\":\"contract ICaskVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dcaFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dcaFeeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dcaMinValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caskDCA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_caskVault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceFeedAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxQueueAge\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSkips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queueBucketSize\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_queueId\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_bucket\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"queueItem\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_queueId\",\"type\":\"uint8\"}],\"name\":\"queuePosition\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_queueId\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_bucket\",\"type\":\"uint32\"}],\"name\":\"queueSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_dcaId\",\"type\":\"bytes32\"}],\"name\":\"registerDCA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_maxQueueAge\",\"type\":\"uint32\"}],\"name\":\"setMaxQueueAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSkips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dcaFeeBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dcaFeeMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dcaMinValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPriceFeedAge\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_queueBucketSize\",\"type\":\"uint32\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_queueBucketSize\",\"type\":\"uint32\"}],\"name\":\"setQueueBucketSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_queueId\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_timestamp\",\"type\":\"uint32\"}],\"name\":\"setQueuePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"unblacklistRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easilly be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"assetsMerkleRoot\":{\"details\":\"merkle root of allowed assets definitions. \"},\"blacklistedRouters\":{\"details\":\"map of swap routers that are deemed unsafe and any active DCA to them will be canceled \"},\"caskDCA\":{\"details\":\"Pointer to CaskDCA contract \"},\"caskVault\":{\"details\":\"vault to use for DCA funding. \"},\"dcaFeeBps\":{\"details\":\"DCA transaction fee in basis points. \"},\"dcaFeeMin\":{\"details\":\"Minimum DCA transaction fee. \"},\"dcaMinValue\":{\"details\":\"Smallest allowable DCA amount. \"},\"maxPriceFeedAge\":{\"details\":\"revert if price feed age is older than this number of seconds. set to 0 to disable check. \"},\"maxSkips\":{\"details\":\"max number of failed DCA purchases before DCA is permanently canceled. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dca/CaskDCAManager.sol\":\"CaskDCAManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easilly be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xc4a031d4b6e3fa6d40a09bfbf99d3fdd22bbe77ba97065bc790b4cab22adee85\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/dca/CaskDCAManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\nimport \\\"../job_queue/CaskJobQueue.sol\\\";\\nimport \\\"../interfaces/ICaskDCAManager.sol\\\";\\nimport \\\"../interfaces/ICaskDCA.sol\\\";\\nimport \\\"../interfaces/ICaskVault.sol\\\";\\n\\ncontract CaskDCAManager is\\nInitializable,\\nReentrancyGuardUpgradeable,\\nCaskJobQueue,\\nICaskDCAManager\\n{\\n    using SafeERC20 for IERC20Metadata;\\n\\n    uint8 private constant QUEUE_ID_DCA = 1;\\n\\n\\n    /** @dev Pointer to CaskDCA contract */\\n    ICaskDCA public caskDCA;\\n\\n    /** @dev vault to use for DCA funding. */\\n    ICaskVault public caskVault;\\n\\n    /** @dev merkle root of allowed assets definitions. */\\n    bytes32 public assetsMerkleRoot;\\n\\n    /** @dev map of swap routers that are deemed unsafe and any active DCA to them will be canceled */\\n    mapping(address => bool) public blacklistedRouters;\\n\\n\\n    /************************** PARAMETERS **************************/\\n\\n    /** @dev max number of failed DCA purchases before DCA is permanently canceled. */\\n    uint256 public maxSkips;\\n\\n    /** @dev DCA transaction fee in basis points. */\\n    uint256 public dcaFeeBps;\\n\\n    /** @dev Minimum DCA transaction fee. */\\n    uint256 public dcaFeeMin;\\n\\n    /** @dev Smallest allowable DCA amount. */\\n    uint256 public dcaMinValue;\\n\\n    /** @dev revert if price feed age is older than this number of seconds. set to 0 to disable check. */\\n    uint256 public maxPriceFeedAge;\\n\\n\\n    function initialize(\\n        address _caskDCA,\\n        address _caskVault\\n    ) public initializer {\\n        caskDCA = ICaskDCA(_caskDCA);\\n        caskVault = ICaskVault(_caskVault);\\n\\n        maxSkips = 0;\\n        dcaFeeBps = 0;\\n        dcaFeeMin = 0;\\n        dcaMinValue = 0;\\n        maxPriceFeedAge = 0;\\n\\n        __CaskJobQueue_init(3600);\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function registerDCA(\\n        bytes32 _dcaId\\n    ) override external nonReentrant whenNotPaused {\\n        processWorkUnit(QUEUE_ID_DCA, _dcaId);\\n    }\\n\\n    function processWorkUnit(\\n        uint8 _queueId,\\n        bytes32 _dcaId\\n    ) override internal {\\n\\n        ICaskDCA.DCA memory dca = caskDCA.getDCA(_dcaId);\\n\\n        if (blacklistedRouters[dca.router]) {\\n            caskDCA.managerCommand(_dcaId, ICaskDCA.ManagerCommand.Cancel);\\n            return;\\n        }\\n\\n        if (dca.status != ICaskDCA.DCAStatus.Active){\\n            return;\\n        }\\n\\n        if (dca.amount < dcaMinValue) {\\n            caskDCA.managerCommand(_dcaId, ICaskDCA.ManagerCommand.Cancel);\\n        }\\n\\n        uint32 timestamp = uint32(block.timestamp);\\n\\n        // not time to process yet, re-queue for processAt time\\n        if (dca.processAt > timestamp) {\\n            scheduleWorkUnit(_queueId, _dcaId, bucketAt(dca.processAt));\\n            return;\\n        }\\n\\n        uint256 amount = dca.amount;\\n        if (dca.totalAmount > 0 && amount > dca.totalAmount - dca.currentAmount) {\\n            amount = dca.totalAmount - dca.currentAmount;\\n        }\\n\\n        uint256 protocolFee = (amount * dcaFeeBps) / 10000;\\n        if (protocolFee < dcaFeeMin) {\\n            protocolFee = dcaFeeMin;\\n        }\\n\\n        uint256 buyQty = _processDCABuy(dca, amount, protocolFee);\\n\\n        // did a swap happen successfully?\\n        if (buyQty > 0) {\\n\\n            if (dca.totalAmount == 0 || dca.currentAmount + amount < dca.totalAmount) {\\n                scheduleWorkUnit(_queueId, _dcaId, bucketAt(dca.processAt + dca.period));\\n            }\\n\\n            caskDCA.managerProcessed(_dcaId, amount, buyQty, protocolFee);\\n\\n        } else {\\n            if (maxSkips > 0 && dca.numSkips >= maxSkips) {\\n                caskDCA.managerCommand(_dcaId, ICaskDCA.ManagerCommand.Pause);\\n            } else {\\n                scheduleWorkUnit(_queueId, _dcaId, bucketAt(dca.processAt + dca.period));\\n\\n                caskDCA.managerCommand(_dcaId, ICaskDCA.ManagerCommand.Skip);\\n            }\\n        }\\n\\n    }\\n\\n    function _processDCABuy(\\n        ICaskDCA.DCA memory _dca,\\n        uint256 _amount,\\n        uint256 _protocolFee\\n    ) internal returns(uint256) {\\n\\n        address inputAsset = _dca.path[0];\\n        address outputAsset = _dca.path[_dca.path.length-1];\\n\\n        ICaskVault.Asset memory inputAssetInfo = caskVault.getAsset(inputAsset);\\n        if (!inputAssetInfo.allowed) {\\n            return 0;\\n        }\\n\\n        if (!_checkMinMaxPrice(_dca, _amount, inputAssetInfo, outputAsset, _dca.priceFeed)) {\\n            return 0;\\n        }\\n\\n        uint256 beforeBalance = IERC20Metadata(inputAsset).balanceOf(address(this));\\n\\n        // perform a 'payment' to this contract, fee goes to vault\\n        try caskVault.protocolPayment(_dca.user, address(this), _amount, _protocolFee) {\\n            // noop\\n        } catch (bytes memory) {\\n            return 0;\\n        }\\n\\n        // then withdraw the MASH received above as input asset to fund swap\\n        uint256 withdrawShares = caskVault.sharesForValue(_amount - _protocolFee);\\n        if (withdrawShares > caskVault.balanceOf(address(this))) {\\n            withdrawShares = caskVault.balanceOf(address(this));\\n        }\\n        try caskVault.withdraw(inputAsset, withdrawShares) {\\n            // noop\\n        } catch (bytes memory) {\\n            return 0;\\n        }\\n\\n        // calculate actual amount of inputAsset that was received from payment/withdraw\\n        uint256 amountIn = IERC20Metadata(inputAsset).balanceOf(address(this)) - beforeBalance;\\n        require(amountIn > 0, \\\"!INVALID(amountIn)\\\");\\n\\n        uint256 optimalOutput;\\n        if (_dca.priceFeed != address(0)) {\\n            optimalOutput = _convertPrice(inputAssetInfo, outputAsset, _dca.priceFeed, _amount);\\n        } else {\\n            uint256[] memory amountOuts = IUniswapV2Router02(_dca.router).getAmountsOut(_amount, _dca.path);\\n            optimalOutput = amountOuts[amountOuts.length-1];\\n        }\\n\\n        // let swap router spend the amount of newly acquired inputAsset\\n        IERC20Metadata(inputAsset).safeIncreaseAllowance(_dca.router, amountIn);\\n\\n        // perform swap\\n        try IUniswapV2Router02(_dca.router).swapExactTokensForTokens(\\n            amountIn,\\n            optimalOutput - ((optimalOutput * _dca.slippageBps) / 10000), // adjust for slippage\\n            _dca.path,\\n            _dca.to,\\n            block.timestamp + 1 hours\\n        ) returns (uint256[] memory amounts) {\\n            require(amounts.length >= 2, \\\"!INVALID(amounts)\\\");\\n            return amounts[amounts.length-1]; // last amount is final output amount\\n        } catch (bytes memory) {\\n            return 0;\\n        }\\n    }\\n\\n    function _checkMinMaxPrice(\\n        ICaskDCA.DCA memory _dca,\\n        uint256 _amount,\\n        ICaskVault.Asset memory _inputAssetInfo,\\n        address _outputAsset,\\n        address _outputPriceFeed\\n    ) internal view returns(bool) {\\n        if (_dca.minPrice == 0 && _dca.maxPrice == 0) {\\n            return true;\\n        }\\n\\n        uint256 pricePerOutputUnit;\\n        uint8 outputAssetDecimals = IERC20Metadata(_outputAsset).decimals();\\n        uint256 outputAssetOneUnit = uint256(10 ** outputAssetDecimals);\\n\\n        if (_dca.priceFeed != address(0)) { // use price feed\\n            pricePerOutputUnit =\\n                    outputAssetOneUnit *\\n                    outputAssetOneUnit /\\n                    _convertPrice(_inputAssetInfo, _outputAsset, _outputPriceFeed, uint256(10 ** _inputAssetInfo.assetDecimals));\\n\\n        } else { // use swap router price\\n            uint256[] memory amountOuts = IUniswapV2Router02(_dca.router).getAmountsOut(_amount, _dca.path);\\n            pricePerOutputUnit =\\n                    _scalePrice(_amount, _inputAssetInfo.assetDecimals, outputAssetDecimals) *\\n                    outputAssetOneUnit /\\n                    amountOuts[amountOuts.length-1];\\n        }\\n\\n        if (_dca.minPrice > 0 && pricePerOutputUnit < _dca.minPrice) {\\n            return false;\\n        } else if (_dca.maxPrice > 0 && pricePerOutputUnit > _dca.maxPrice) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function _convertPrice(\\n        ICaskVault.Asset memory _fromAsset,\\n        address _toAsset,\\n        address _toPriceFeed,\\n        uint256 _amount\\n    ) internal view returns(uint256) {\\n        if (_amount == 0) {\\n            return 0;\\n        }\\n\\n        int256 oraclePrice;\\n        uint256 updatedAt;\\n\\n        uint8 toAssetDecimals = IERC20Metadata(_toAsset).decimals();\\n        uint8 toFeedDecimals = AggregatorV3Interface(_toPriceFeed).decimals();\\n        \\n        ( , oraclePrice, , updatedAt, ) = AggregatorV3Interface(_fromAsset.priceFeed).latestRoundData();\\n        uint256 fromOraclePrice = uint256(oraclePrice);\\n        require(maxPriceFeedAge == 0 || block.timestamp - updatedAt <= maxPriceFeedAge, \\\"!PRICE_OUTDATED\\\");\\n        ( , oraclePrice, , updatedAt, ) = AggregatorV3Interface(_toPriceFeed).latestRoundData();\\n        uint256 toOraclePrice = uint256(oraclePrice);\\n        require(maxPriceFeedAge == 0 || block.timestamp - updatedAt <= maxPriceFeedAge, \\\"!PRICE_OUTDATED\\\");\\n\\n        if (_fromAsset.priceFeedDecimals != toFeedDecimals) {\\n            // since oracle precision is different, scale everything\\n            // to _toAsset precision and do conversion\\n            return _scalePrice(_amount, _fromAsset.assetDecimals, toAssetDecimals) *\\n                _scalePrice(fromOraclePrice, _fromAsset.priceFeedDecimals, toAssetDecimals) /\\n                _scalePrice(toOraclePrice, toFeedDecimals, toAssetDecimals);\\n        } else {\\n            // oracles are already in same precision, so just scale _amount to oracle precision,\\n            // do the price conversion and convert back to _toAsset precision\\n            return _scalePrice(\\n                _scalePrice(_amount, _fromAsset.assetDecimals, toFeedDecimals) * fromOraclePrice / toOraclePrice,\\n                    toFeedDecimals,\\n                    toAssetDecimals\\n            );\\n        }\\n    }\\n\\n    function _scalePrice(\\n        uint256 _price,\\n        uint8 _priceDecimals,\\n        uint8 _decimals\\n    ) internal pure returns (uint256){\\n        if (_priceDecimals < _decimals) {\\n            return _price * uint256(10 ** uint256(_decimals - _priceDecimals));\\n        } else if (_priceDecimals > _decimals) {\\n            return _price / uint256(10 ** uint256(_priceDecimals - _decimals));\\n        }\\n        return _price;\\n    }\\n\\n    function setParameters(\\n        uint256 _maxSkips,\\n        uint256 _dcaFeeBps,\\n        uint256 _dcaFeeMin,\\n        uint256 _dcaMinValue,\\n        uint256 _maxPriceFeedAge,\\n        uint32 _queueBucketSize\\n    ) external onlyOwner {\\n        require(_dcaFeeBps < 10000, \\\"!INVALID(dcaFeeBps)\\\");\\n\\n        maxSkips = _maxSkips;\\n        dcaFeeBps = _dcaFeeBps;\\n        dcaFeeMin = _dcaFeeMin;\\n        dcaMinValue = _dcaMinValue;\\n        maxPriceFeedAge = _maxPriceFeedAge;\\n        queueBucketSize = _queueBucketSize;\\n\\n        emit SetParameters();\\n    }\\n\\n    function blacklistRouter(\\n        address _router\\n    ) external onlyOwner {\\n        blacklistedRouters[_router] = true;\\n\\n        emit BlacklistRouter(_router);\\n    }\\n\\n    function unblacklistRouter(\\n        address _router\\n    ) external onlyOwner {\\n        blacklistedRouters[_router] = false;\\n\\n        emit UnblacklistRouter(_router);\\n    }\\n}\\n\",\"keccak256\":\"0xe62234e32829c866465d4ea01332a83309ce9cf3fcb8546e5da6c8b7d14b7cee\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskDCA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskDCA {\\n\\n    enum DCAStatus {\\n        None,\\n        Active,\\n        Paused,\\n        Canceled,\\n        Complete\\n    }\\n\\n    enum ManagerCommand {\\n        None,\\n        Cancel,\\n        Skip,\\n        Pause\\n    }\\n\\n    struct DCA {\\n        address user;\\n        address to;\\n        address router;\\n        address priceFeed;\\n        uint256 amount;\\n        uint256 totalAmount;\\n        uint256 currentAmount;\\n        uint256 currentQty;\\n        uint256 numBuys;\\n        uint256 numSkips;\\n        uint256 slippageBps;\\n        uint256 maxPrice;\\n        uint256 minPrice;\\n        uint32 period;\\n        uint32 createdAt;\\n        uint32 processAt;\\n        DCAStatus status;\\n        address[] path;\\n    }\\n\\n    function createDCA(\\n        address[] calldata _assetSpec, // router, priceFeed, path...\\n        bytes32[] calldata _merkleProof,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _totalAmount,\\n        uint32 _period,\\n        uint256 _slippageBps,\\n        uint256 _minPrice,\\n        uint256 _maxPrice\\n    ) external returns(bytes32);\\n\\n    function getDCA(bytes32 _dcaId) external view returns (DCA memory);\\n\\n    function getUserDCA(address _user, uint256 _idx) external view returns (bytes32);\\n\\n    function getUserDCACount(address _user) external view returns (uint256);\\n\\n    function cancelDCA(bytes32 _dcaId) external;\\n\\n    function pauseDCA(bytes32 _dcaId) external;\\n\\n    function resumeDCA(bytes32 _dcaId) external;\\n\\n    function managerCommand(bytes32 _dcaId, ManagerCommand _command) external;\\n\\n    function managerProcessed(bytes32 _dcaId, uint256 _amount, uint256 _buyQty, uint256 _fee) external;\\n\\n\\n    event DCACreated(bytes32 indexed dcaId, address indexed user, address indexed to, address inputAsset,\\n        address outputAsset, uint256 amount, uint256 totalAmount, uint32 period);\\n\\n    event DCAPaused(bytes32 indexed dcaId, address indexed user);\\n\\n    event DCAResumed(bytes32 indexed dcaId, address indexed user);\\n\\n    event DCASkipped(bytes32 indexed dcaId, address indexed user);\\n\\n    event DCAProcessed(bytes32 indexed dcaId, address indexed user, uint256 amount, uint256 buyQty, uint256 fee);\\n\\n    event DCACanceled(bytes32 indexed dcaId, address indexed user);\\n\\n    event DCACompleted(bytes32 indexed dcaId, address indexed user);\\n}\",\"keccak256\":\"0xa845f882a85c1b90cdbbb07a0a1685a5c2a413f41d27f93924ae641093342bb2\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskDCAManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskDCAManager {\\n\\n    function registerDCA(bytes32 _dcaId) external;\\n\\n    /** @dev Emitted when manager parameters are changed. */\\n    event SetParameters();\\n\\n    /** @dev Emitted when a swap router address is blacklisted. */\\n    event BlacklistRouter(address indexed router);\\n\\n    /** @dev Emitted when a swap router address is unblacklisted. */\\n    event UnblacklistRouter(address indexed router);\\n}\",\"keccak256\":\"0xadb9fd01482b80e25bf9aaf3de03ab1f75a82d8fef959ab4d64d1f4da1492af2\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskJobQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract ICaskJobQueue is Initializable {\\n\\n    function __ICaskJobQueue_init() internal onlyInitializing {\\n        __ICaskJobQueue_init_unchained();\\n    }\\n\\n    function __ICaskJobQueue_init_unchained() internal onlyInitializing {\\n    }\\n\\n\\n    function processWorkUnit(uint8 _queueId, bytes32 _workUnit) virtual internal;\\n\\n    function scheduleWorkUnit(uint8 _queueId, bytes32 _workUnit, uint32 _processAt) virtual internal;\\n\\n    function queueItem(uint8 _queueId, uint32 _bucket, uint256 _idx) virtual external view returns(bytes32);\\n\\n    function queueSize(uint8 _queueId, uint32 _bucket) virtual external view returns(uint256);\\n\\n    function queuePosition(uint8 _queueId) virtual external view returns(uint32);\\n\\n    function setQueuePosition(uint8 _queueId, uint32 _timestamp) virtual external;\\n\\n    function setQueueBucketSize(uint32 _queueBucketSize) virtual external;\\n\\n    function setMaxQueueAge(uint32 _maxQueueAge) virtual external;\\n\\n\\n    event WorkUnitProcessed(uint8 queueId, bytes32 workUnit);\\n\\n    event WorkUnitQueued(uint8 queueId, bytes32 workUnit, uint32 processAt);\\n\\n    /** @dev Emitted when a queue run is finished */\\n    event QueueRunReport(uint256 limit, uint256 jobsProcessed, uint256 depth, uint8 queueId,\\n        uint256 queueRemaining, uint32 currentBucket);\\n\\n}\",\"keccak256\":\"0x253d197ede522fc4a51e2d69586384c0e0c9b5339b46e4b4d3cc6d5c24077a51\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @title  Interface for vault\\n  */\\n\\ninterface ICaskVault is IERC20MetadataUpgradeable {\\n\\n    // whitelisted stablecoin assets supported by the vault\\n    struct Asset {\\n        address priceFeed;\\n        uint256 slippageBps;\\n        uint256 depositLimit;\\n        uint8 assetDecimals;\\n        uint8 priceFeedDecimals;\\n        bool allowed;\\n    }\\n\\n    // sources for payments\\n    enum FundingSource {\\n        Cask,\\n        Personal\\n    }\\n\\n    // funding profile for a given address\\n    struct FundingProfile {\\n        FundingSource fundingSource;\\n        address fundingAsset;\\n    }\\n\\n    /**\\n      * @dev Get base asset of vault.\\n     */\\n    function getBaseAsset() external view returns (address);\\n\\n    /**\\n      * @dev Get all the assets supported by the vault.\\n     */\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Get asset details\\n     * @param _asset Asset address\\n     * @return Asset Asset details\\n     */\\n    function getAsset(address _asset) external view returns(Asset memory);\\n\\n    /**\\n     * @dev Check if the vault supports an asset\\n     * @param _asset Asset address\\n     * @return bool `true` if asset supported, `false` otherwise\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _value Amount of baseAsset value to transfer\\n     * @param _protocolFee Protocol fee to deduct from `_value`\\n     * @param _network Address of network fee collector\\n     * @param _networkFee Network fee to deduct from `_value`\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _protocolFee,\\n        address _network,\\n        uint256 _networkFee\\n    ) external;\\n\\n    /**\\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _value Amount of baseAsset value to transfer\\n     * @param _protocolFee Protocol fee to deduct from `_value`\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _protocolFee\\n    ) external;\\n\\n    /**\\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _value Amount of baseAsset value to transfer\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external;\\n\\n    /**\\n     * @dev Transfer the equivalent vault shares of base asset `value` to `_recipient`\\n     * @param _recipient To address\\n     * @param _value Amount of baseAsset value to transfer\\n     */\\n    function transferValue(\\n        address _recipient,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Transfer the equivalent vault shares of base asset `value` from `_sender` to `_recipient`\\n     * @param _sender From address\\n     * @param _recipient To address\\n     * @param _value Amount of baseAsset value to transfer\\n     */\\n    function transferValueFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\\n     * @param _asset Address of incoming asset\\n     * @param _assetAmount Amount of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _assetAmount) external;\\n\\n    /**\\n     * @dev Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\\n     * @param _to Recipient of funds\\n     * @param _asset Address of incoming asset\\n     * @param _assetAmount Amount of asset to deposit\\n     */\\n    function depositTo(address _to, address _asset, uint256 _assetAmount) external;\\n\\n    /**\\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\\n     * @param _asset Address of outgoing asset\\n     * @param _shares Amount of shares to withdraw\\n     */\\n    function withdraw(address _asset, uint256 _shares) external;\\n\\n    /**\\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\\n     * @param _recipient Recipient who will receive the withdrawn assets\\n     * @param _asset Address of outgoing asset\\n     * @param _shares Amount of shares to withdraw\\n     */\\n    function withdrawTo(address _recipient, address _asset, uint256 _shares) external;\\n\\n    /**\\n     * @dev Retrieve the funding source for an address\\n     * @param _address Address for lookup\\n     */\\n    function fundingSource(address _address) external view returns(FundingProfile memory);\\n\\n    /**\\n     * @dev Set the funding source and, if using a personal wallet, the asset to use for funding payments\\n     * @param _fundingSource Funding source to use\\n     * @param _fundingAsset Asset to use for payments (if using personal funding source)\\n     */\\n    function setFundingSource(FundingSource _fundingSource, address _fundingAsset) external;\\n\\n    /**\\n     * @dev Get current vault value of `_address` denominated in `baseAsset`\\n     * @param _address Address to check\\n     */\\n    function currentValueOf(address _address) external view returns(uint256);\\n\\n    /**\\n     * @dev Get current vault value a vault share\\n     */\\n    function pricePerShare() external view returns(uint256);\\n\\n    /**\\n     * @dev Get the number of vault shares that represents a given value of the base asset\\n     * @param _value Amount of value\\n     */\\n    function sharesForValue(uint256 _value) external view returns(uint256);\\n\\n    /**\\n     * @dev Get total value in vault and managed by admin - denominated in `baseAsset`\\n     */\\n    function totalValue() external view returns(uint256);\\n\\n    /**\\n     * @dev Get total amount of an asset held in vault and managed by admin\\n     * @param _asset Address of asset\\n     */\\n    function totalAssetBalance(address _asset) external view returns(uint256);\\n\\n\\n    /************************** EVENTS **************************/\\n\\n    /** @dev Emitted when `sender` transfers `baseAssetValue` (denominated in vault baseAsset) to `recipient` */\\n    event TransferValue(address indexed from, address indexed to, uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when an amount of `baseAsset` is paid from `from` to `to` within the vault */\\n    event Payment(address indexed from, address indexed to, uint256 baseAssetAmount, uint256 shares,\\n        uint256 protocolFee, uint256 protocolFeeShares,\\n        address indexed network, uint256 networkFee, uint256 networkFeeShares);\\n\\n    /** @dev Emitted when `asset` is added as a new supported asset */\\n    event AllowedAsset(address indexed asset);\\n\\n    /** @dev Emitted when `asset` is disallowed t */\\n    event DisallowedAsset(address indexed asset);\\n\\n    /** @dev Emitted when `participant` deposits `asset` */\\n    event AssetDeposited(address indexed participant, address indexed asset, uint256 assetAmount,\\n        uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when `participant` withdraws `asset` */\\n    event AssetWithdrawn(address indexed participant, address indexed asset, uint256 assetAmount,\\n        uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when `participant` sets their funding source */\\n    event SetFundingSource(address indexed participant, FundingSource fundingSource, address fundingAsset);\\n\\n    /** @dev Emitted when a new protocol is allowed to use the vault */\\n    event AddProtocol(address indexed protocol);\\n\\n    /** @dev Emitted when a protocol is no longer allowed to use the vault */\\n    event RemoveProtocol(address indexed protocol);\\n\\n    /** @dev Emitted when the vault fee distributor is changed */\\n    event SetFeeDistributor(address indexed feeDistributor);\\n\\n    /** @dev Emitted when minDeposit is changed */\\n    event SetMinDeposit(uint256 minDeposit);\\n\\n    /** @dev Emitted when maxPriceFeedAge is changed */\\n    event SetMaxPriceFeedAge(uint256 maxPriceFeedAge);\\n\\n    /** @dev Emitted when the trustedForwarder address is changed */\\n    event SetTrustedForwarder(address indexed feeDistributor);\\n}\",\"keccak256\":\"0x4aabade5025aef5bfe39e3d487b0b93d896a4cbea5ccf8d1fde2f02e5792330c\",\"license\":\"MIT\"},\"contracts/job_queue/CaskJobQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/ICaskJobQueue.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n\\nabstract contract CaskJobQueue is\\nInitializable,\\nOwnableUpgradeable,\\nPausableUpgradeable,\\nKeeperCompatibleInterface,\\nICaskJobQueue\\n{\\n\\n    /** @dev size (in seconds) of buckets to group jobs into for processing */\\n    uint32 public queueBucketSize;\\n\\n    /** @dev max age (in seconds) of a bucket before a processing is triggered */\\n    uint32 public maxQueueAge;\\n\\n    /** @dev map used to track jobs in the queues */\\n    mapping(uint8 => mapping(uint32 => bytes32[])) private queue; // renewal bucket => workUnit[]\\n    mapping(uint8 => uint32) private queueBucket; // current bucket being processed\\n\\n\\n    function __CaskJobQueue_init(\\n        uint32 _queueBucketSize\\n    ) internal onlyInitializing {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ICaskJobQueue_init_unchained();\\n        __CaskJobQueue_init_unchained(_queueBucketSize);\\n    }\\n\\n    function __CaskJobQueue_init_unchained(\\n        uint32 _queueBucketSize\\n    ) internal onlyInitializing {\\n        queueBucketSize = _queueBucketSize;\\n        maxQueueAge = queueBucketSize * 20;\\n    }\\n\\n\\n    function bucketAt(\\n        uint32 _timestamp\\n    ) internal view returns(uint32) {\\n        return _timestamp - (_timestamp % queueBucketSize) + queueBucketSize;\\n    }\\n\\n    function currentBucket() internal view returns(uint32) {\\n        uint32 timestamp = uint32(block.timestamp);\\n        return timestamp - (timestamp % queueBucketSize);\\n    }\\n\\n    function queueItem(\\n        uint8 _queueId,\\n        uint32 _bucket,\\n        uint256 _idx\\n    ) external override view returns(bytes32) {\\n        return queue[_queueId][_bucket][_idx];\\n    }\\n\\n    function queueSize(\\n        uint8 _queueId,\\n        uint32 _bucket\\n    ) external override view returns(uint256) {\\n        return queue[_queueId][_bucket].length;\\n    }\\n\\n    function queuePosition(\\n        uint8 _queueId\\n    ) external override view returns(uint32) {\\n        return queueBucket[_queueId];\\n    }\\n\\n    function setQueuePosition(\\n        uint8 _queueId,\\n        uint32 _timestamp\\n    ) external override onlyOwner {\\n        queueBucket[_queueId] = bucketAt(_timestamp);\\n    }\\n\\n    function checkUpkeep(\\n        bytes calldata checkData\\n    ) external view override returns(bool upkeepNeeded, bytes memory performData) {\\n        (\\n        uint256 limit,\\n        uint256 minDepth,\\n        uint8 queueId\\n        ) = abi.decode(checkData, (uint256, uint256, uint8));\\n\\n        uint32 bucket = currentBucket();\\n        upkeepNeeded = false;\\n\\n        uint32 checkBucket = queueBucket[queueId];\\n        if (checkBucket == 0) {\\n            checkBucket = bucket;\\n        }\\n\\n        // if queue is over maxQueueAge and needs upkeep regardless of anything queued\\n        if (bucket >= checkBucket && bucket - checkBucket >= maxQueueAge) {\\n            upkeepNeeded = true;\\n        } else {\\n            while (checkBucket <= bucket) {\\n                if (queue[queueId][checkBucket].length > 0 &&\\n                    queue[queueId][checkBucket].length >= minDepth)\\n                {\\n                    upkeepNeeded = true;\\n                    break;\\n                }\\n                checkBucket += queueBucketSize;\\n            }\\n        }\\n\\n        performData = abi.encode(limit, queue[queueId][checkBucket].length, queueId);\\n    }\\n\\n\\n    function performUpkeep(\\n        bytes calldata performData\\n    ) external override whenNotPaused {\\n        (\\n        uint256 limit,\\n        uint256 depth,\\n        uint8 queueId\\n        ) = abi.decode(performData, (uint256, uint256, uint8));\\n\\n        uint32 bucket = currentBucket();\\n        uint256 jobsProcessed = 0;\\n        uint256 maxBucketChecks = limit * 5;\\n\\n        if (queueBucket[queueId] == 0) {\\n            queueBucket[queueId] = bucket;\\n        }\\n\\n        while (jobsProcessed < limit && maxBucketChecks > 0 && queueBucket[queueId] <= bucket) {\\n            uint256 queueLen = queue[queueId][queueBucket[queueId]].length;\\n            if (queueLen > 0) {\\n                bytes32 workUnit = queue[queueId][queueBucket[queueId]][queueLen-1];\\n                queue[queueId][queueBucket[queueId]].pop();\\n                processWorkUnit(queueId, workUnit);\\n                emit WorkUnitProcessed(queueId, workUnit);\\n                jobsProcessed += 1;\\n            } else {\\n                if (queueBucket[queueId] < bucket) {\\n                    queueBucket[queueId] += queueBucketSize;\\n                    maxBucketChecks -= 1;\\n                } else {\\n                    break; // nothing left to do\\n                }\\n            }\\n        }\\n\\n        emit QueueRunReport(limit, jobsProcessed, depth, queueId,\\n            queue[queueId][queueBucket[queueId]].length, queueBucket[queueId]);\\n    }\\n\\n\\n    function scheduleWorkUnit(\\n        uint8 _queueId,\\n        bytes32 _workUnit,\\n        uint32 _processAt\\n    ) internal override {\\n        queue[_queueId][bucketAt(_processAt)].push(_workUnit);\\n        emit WorkUnitQueued(_queueId, _workUnit, _processAt);\\n    }\\n\\n    function setQueueBucketSize(\\n        uint32 _queueBucketSize\\n    ) external override onlyOwner {\\n        queueBucketSize = _queueBucketSize;\\n    }\\n\\n    function setMaxQueueAge(\\n        uint32 _maxQueueAge\\n    ) external override onlyOwner {\\n        maxQueueAge = _maxQueueAge;\\n    }\\n\\n}\",\"keccak256\":\"0xece753efde19c22fafcead187d62cad59a9400aae98e988e2de815b68d671911\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b62000e971760201c565b15905090565b3b151590565b61316580620001126000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c8063715018a6116100f9578063b5c60b3811610097578063cd48a61411610071578063cd48a614146103c8578063e775d1ac146103db578063f2fde38b146103ee578063fa184a1e1461040157600080fd5b8063b5c60b3814610394578063c5064653146103a7578063c6f8806c146103b057600080fd5b80638da5cb5b116100d35780638da5cb5b14610354578063a47755d114610365578063aa878f7614610378578063ab4de5ed1461038b57600080fd5b8063715018a614610329578063729d8107146103315780638bddd2e41461034457600080fd5b8063453c3ea1116101665780634b51dd22116101405780634b51dd22146102c15780634d1ed891146102ca5780635c975abb146102fd5780636e04ff0d1461030857600080fd5b8063453c3ea1146102885780634585e33b1461029b578063485cc955146102ae57600080fd5b806314fad707116101a257806314fad707146102255780631ac6c56b146102385780631c39033c1461024157806330f01be81461027f57600080fd5b806308058e7c146101c95780630816c847146101f95780630caae41d14610210575b600080fd5b60cc546101dc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61020260d45481565b6040519081526020016101f0565b61022361021e36600461260d565b610414565b005b610202610233366004612646565b61047f565b61020260d15481565b61026a61024f366004612687565b60ff16600090815260cb602052604090205463ffffffff1690565b60405163ffffffff90911681526020016101f0565b61020260d35481565b6102236102963660046126b9565b6104c9565b6102236102a93660046126d6565b61053c565b6102236102bc366004612748565b61087f565b61020260ce5481565b6102ed6102d83660046126b9565b60cf6020526000908152604090205460ff1681565b60405190151581526020016101f0565b60975460ff166102ed565b61031b6103163660046126d6565b61098e565b6040516101f09291906127ce565b610223610b0d565b61022361033f3660046127e9565b610b43565b60c95461026a9063ffffffff1681565b6065546001600160a01b03166101dc565b60cd546101dc906001600160a01b031681565b61020261038636600461260d565b610b95565b61020260d25481565b6102236103a23660046126b9565b610bc0565b61020260d05481565b60c95461026a90640100000000900463ffffffff1681565b6102236103d63660046127e9565b610c36565b6102236103e9366004612806565b610c7c565b6102236103fc3660046126b9565b610d4c565b61022361040f36600461285b565b610de7565b6065546001600160a01b031633146104475760405162461bcd60e51b815260040161043e90612874565b60405180910390fd5b61045081610e9d565b60ff92909216600090815260cb60205260409020805463ffffffff191663ffffffff9093169290921790915550565b60ff8316600090815260ca6020908152604080832063ffffffff8616845290915281208054839081106104b4576104b46128a9565b906000526020600020015490505b9392505050565b6065546001600160a01b031633146104f35760405162461bcd60e51b815260040161043e90612874565b6001600160a01b038116600081815260cf6020526040808220805460ff19169055517fbe68633f03b6fc1b408a601ddf93393cc980ad052eb3a3a2cc7e3599ec117b3d9190a250565b60975460ff16156105825760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161043e565b60008080610592848601866128bf565b92509250925060006105a2610ec7565b90506000806105b286600561290e565b60ff8516600090815260cb602052604090205490915063ffffffff166105f85760ff8416600090815260cb60205260409020805463ffffffff191663ffffffff85161790555b85821080156106075750600081115b801561062e575060ff8416600090815260cb602052604090205463ffffffff808516911611155b156107ed5760ff8416600090815260ca6020908152604080832060cb83528184205463ffffffff168452909152902054801561075d5760ff8516600090815260ca6020908152604080832060cb83528184205463ffffffff168452909152812061069960018461292d565b815481106106a9576106a96128a9565b600091825260208083209091015460ff8916835260ca8252604080842060cb84528185205463ffffffff1685529092529120805491925090806106ee576106ee612944565b6001900381819060005260206000200160009055905561070e8682610eef565b6040805160ff88168152602081018390527f58c7ae721fd25aaf84e68db9ce9ac6fed4f08438a370a4299d19f8c1425c499e910160405180910390a161075560018561295a565b9350506107e7565b60ff8516600090815260cb602052604090205463ffffffff808616911610156107e15760c95460ff8616600090815260cb60205260408120805463ffffffff938416939192916107af91859116612972565b92506101000a81548163ffffffff021916908363ffffffff1602179055506001826107da919061292d565b91506107e7565b506107ed565b506105f8565b60ff8416600081815260ca6020908152604080832060cb8084528285205463ffffffff168086529184528285205494869052835281518b81529283018790528282018a90526060830194909452608082019290925260a0810192909252517fd69140f88b9a25350749bb371882f4479133fc8b65602aac60f6c1b3598f08329181900360c00190a15050505050505050565b600054610100900460ff1661089a5760005460ff161561089e565b303b155b6109015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161043e565b600054610100900460ff16158015610923576000805461ffff19166101011790555b60cc80546001600160a01b038086166001600160a01b03199283161790925560cd805492851692909116919091179055600060d081905560d181905560d281905560d381905560d455610977610e106112f7565b8015610989576000805461ff00191690555b505050565b600060608180806109a1868801886128bf565b92509250925060006109b1610ec7565b60ff8316600090815260cb602052604081205490975090915063ffffffff16806109d85750805b8063ffffffff168263ffffffff1610158015610a13575060c954640100000000900463ffffffff16610a0a828461299a565b63ffffffff1610155b15610a215760019650610ab1565b8163ffffffff168163ffffffff1611610ab15760ff8316600090815260ca6020908152604080832063ffffffff8516845290915290205415801590610a89575060ff8316600090815260ca6020908152604080832063ffffffff851684529091529020548411155b15610a975760019650610ab1565b60c954610aaa9063ffffffff1682612972565b9050610a21565b60ff8316600081815260ca6020908152604080832063ffffffff86168452825291829020548251918201899052918101919091526060810191909152608001604051602081830303815290604052955050505050509250929050565b6065546001600160a01b03163314610b375760405162461bcd60e51b815260040161043e90612874565b610b41600061133f565b565b6065546001600160a01b03163314610b6d5760405162461bcd60e51b815260040161043e90612874565b60c9805463ffffffff9092166401000000000267ffffffff0000000019909216919091179055565b60ff8216600090815260ca6020908152604080832063ffffffff851684529091529020545b92915050565b6065546001600160a01b03163314610bea5760405162461bcd60e51b815260040161043e90612874565b6001600160a01b038116600081815260cf6020526040808220805460ff19166001179055517ffd53558403e69775f527253d59778a7280ef9037a9285f1f1df3595b6ac996319190a250565b6065546001600160a01b03163314610c605760405162461bcd60e51b815260040161043e90612874565b60c9805463ffffffff191663ffffffff92909216919091179055565b6065546001600160a01b03163314610ca65760405162461bcd60e51b815260040161043e90612874565b6127108510610ced5760405162461bcd60e51b815260206004820152601360248201527221494e56414c4944286463614665654270732960681b604482015260640161043e565b60d086905560d185905560d284905560d383905560d482905560c9805463ffffffff191663ffffffff83161790556040517f3b5fda6f71b960b21be0b432d9b7c87d9c8c996477ea1eba5c19cb77d1e027aa90600090a1505050505050565b6065546001600160a01b03163314610d765760405162461bcd60e51b815260040161043e90612874565b6001600160a01b038116610ddb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161043e565b610de48161133f565b50565b60026001541415610e3a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161043e565b600260015560975460ff1615610e855760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161043e565b610e90600182610eef565b5060018055565b3b151590565b60c95460009063ffffffff16610eb381846129d5565b610ebd908461299a565b610bba9190612972565b60c9546000904290610edf9063ffffffff16826129d5565b610ee9908261299a565b91505090565b60cc546040516392c65f4b60e01b8152600481018390526000916001600160a01b0316906392c65f4b9060240160006040518083038186803b158015610f3457600080fd5b505afa158015610f48573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f709190810190612b2b565b6040808201516001600160a01b0316600090815260cf602052205490915060ff16156110005760cc54604051635ba581cd60e01b81526001600160a01b0390911690635ba581cd90610fc9908590600190600401612c9e565b600060405180830381600087803b158015610fe357600080fd5b505af1158015610ff7573d6000803e3d6000fd5b50505050505050565b6001816102000151600481111561101957611019612c88565b1461102357505050565b60d354816080015110156110975760cc54604051635ba581cd60e01b81526001600160a01b0390911690635ba581cd90611064908590600190600401612c9e565b600060405180830381600087803b15801561107e57600080fd5b505af1158015611092573d6000803e3d6000fd5b505050505b6101e0810151429063ffffffff808316911611156110cd576110c784846110c2856101e00151610e9d565b611391565b50505050565b608082015160a0830151158015906110f757508260c001518360a001516110f4919061292d565b81115b15611113578260c001518360a00151611110919061292d565b90505b600061271060d15483611126919061290e565b6111309190612cd0565b905060d254811015611141575060d2545b600061114e858484611421565b9050801561121a5760a0850151158061117957508460a00151838660c00151611177919061295a565b105b156111a1576111a187876110c2886101a00151896101e0015161119c9190612972565b610e9d565b60cc54604051632d32f27960e21b8152600481018890526024810185905260448101839052606481018490526001600160a01b039091169063b4cbc9e4906084015b600060405180830381600087803b1580156111fd57600080fd5b505af1158015611211573d6000803e3d6000fd5b50505050610ff7565b600060d054118015611233575060d05485610120015110155b1561126b5760cc54604051635ba581cd60e01b81526001600160a01b0390911690635ba581cd906111e3908990600390600401612c9e565b61128987876110c2886101a00151896101e0015161119c9190612972565b60cc54604051635ba581cd60e01b81526001600160a01b0390911690635ba581cd906112bc908990600290600401612c9e565b600060405180830381600087803b1580156112d657600080fd5b505af11580156112ea573d6000803e3d6000fd5b5050505050505050505050565b600054610100900460ff1661131e5760405162461bcd60e51b815260040161043e90612ce4565b611326611be4565b61132e611c1b565b611336611c52565b610de481611c79565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60ff8316600090815260ca60205260408120906113ad83610e9d565b63ffffffff90811682526020808301939093526040918201600090812080546001810182559082529084902001859055815160ff87168152928301859052831682820152517f67778e52b18dcf574ab071142a886fce91a8ce5e60e176229fdadb8c063caaed9181900360600190a1505050565b60008084610220015160008151811061143c5761143c6128a9565b602002602001015190506000856102200151600187610220015151611461919061292d565b81518110611471576114716128a9565b602090810291909101015160cd5460405163185c596360e11b81526001600160a01b038581166004830152929350600092909116906330b8b2c69060240160c06040518083038186803b1580156114c757600080fd5b505afa1580156114db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ff9190612d3f565b90508060a0015161151657600093505050506104c2565b611527878783858b60600151611ce6565b61153757600093505050506104c2565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b15801561157957600080fd5b505afa15801561158d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b19190612dd8565b60cd54895160405163fcd6a25b60e01b81526001600160a01b039182166004820152306024820152604481018b9052606481018a9052929350169063fcd6a25b90608401600060405180830381600087803b15801561160f57600080fd5b505af1925050508015611620575060015b611662573d80801561164e576040519150601f19603f3d011682016040523d82523d6000602084013e611653565b606091505b506000955050505050506104c2565b60cd546000906001600160a01b031663e1ded2de611680898b61292d565b6040518263ffffffff1660e01b815260040161169e91815260200190565b60206040518083038186803b1580156116b657600080fd5b505afa1580156116ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ee9190612dd8565b60cd546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b15801561173257600080fd5b505afa158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190612dd8565b8111156117ef5760cd546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156117b457600080fd5b505afa1580156117c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ec9190612dd8565b90505b60cd5460405163f3fef3a360e01b81526001600160a01b038781166004830152602482018490529091169063f3fef3a390604401600060405180830381600087803b15801561183d57600080fd5b505af192505050801561184e575060015b611891573d80801561187c576040519150601f19603f3d011682016040523d82523d6000602084013e611881565b606091505b50600096505050505050506104c2565b6040516370a0823160e01b815230600482015260009083906001600160a01b038816906370a082319060240160206040518083038186803b1580156118d557600080fd5b505afa1580156118e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190d9190612dd8565b611917919061292d565b90506000811161195e5760405162461bcd60e51b815260206004820152601260248201527121494e56414c494428616d6f756e74496e2960701b604482015260640161043e565b60608a01516000906001600160a01b03161561198b5761198485878d606001518d611f20565b9050611a45565b60008b604001516001600160a01b031663d06ca61f8c8e61022001516040518363ffffffff1660e01b81526004016119c4929190612e35565b60006040518083038186803b1580156119dc57600080fd5b505afa1580156119f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a189190810190612e4e565b90508060018251611a29919061292d565b81518110611a3957611a396128a9565b60200260200101519150505b60408b0151611a5f906001600160a01b0389169084612258565b8a604001516001600160a01b03166338ed1739836127108e610140015185611a87919061290e565b611a919190612cd0565b611a9b908561292d565b8e61022001518f6020015142610e10611ab4919061295a565b6040518663ffffffff1660e01b8152600401611ad4959493929190612ed4565b600060405180830381600087803b158015611aee57600080fd5b505af1925050508015611b2357506040513d6000823e601f3d908101601f19168201604052611b209190810190612e4e565b60015b611b68573d808015611b51576040519150601f19603f3d011682016040523d82523d6000602084013e611b56565b606091505b506000985050505050505050506104c2565b600281511015611bae5760405162461bcd60e51b815260206004820152601160248201527021494e56414c494428616d6f756e74732960781b604482015260640161043e565b8060018251611bbd919061292d565b81518110611bcd57611bcd6128a9565b6020026020010151985050505050505050506104c2565b600054610100900460ff16611c0b5760405162461bcd60e51b815260040161043e90612ce4565b611c13611c52565b610b4161233b565b600054610100900460ff16611c425760405162461bcd60e51b815260040161043e90612ce4565b611c4a611c52565b610b4161236b565b600054610100900460ff16610b415760405162461bcd60e51b815260040161043e90612ce4565b600054610100900460ff16611ca05760405162461bcd60e51b815260040161043e90612ce4565b60c9805463ffffffff191663ffffffff8316908117909155611cc3906014612f10565b60c960046101000a81548163ffffffff021916908363ffffffff16021790555050565b60008561018001516000148015611d005750610160860151155b15611d0d57506001611f17565b600080846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d4957600080fd5b505afa158015611d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d819190612f3c565b90506000611d9082600a61303d565b60608a01519091506001600160a01b031615611ddd57611dc28787878a60600151600a611dbd919061303d565b611f20565b611dcc828061290e565b611dd69190612cd0565b9250611ebb565b600089604001516001600160a01b031663d06ca61f8a8c61022001516040518363ffffffff1660e01b8152600401611e16929190612e35565b60006040518083038186803b158015611e2e57600080fd5b505afa158015611e42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e6a9190810190612e4e565b90508060018251611e7b919061292d565b81518110611e8b57611e8b6128a9565b602002602001015182611ea38b8b606001518761239e565b611ead919061290e565b611eb79190612cd0565b9350505b6000896101800151118015611ed4575088610180015183105b15611ee55760009350505050611f17565b6000896101600151118015611efe575088610160015183115b15611f0f5760009350505050611f17565b600193505050505b95945050505050565b600081611f2f57506000612250565b6000806000866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611f6d57600080fd5b505afa158015611f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa59190612f3c565b90506000866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611fe257600080fd5b505afa158015611ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201a9190612f3c565b905088600001516001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561205957600080fd5b505afa15801561206d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120919190613066565b5060d45492975095508692505015806120b5575060d4546120b2854261292d565b11155b6120f35760405162461bcd60e51b815260206004820152600f60248201526e0854149250d157d3d5551110551151608a1b604482015260640161043e565b876001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561212c57600080fd5b505afa158015612140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121649190613066565b5060d4549298509650879250501580612188575060d454612185864261292d565b11155b6121c65760405162461bcd60e51b815260206004820152600f60248201526e0854149250d157d3d5551110551151608a1b604482015260640161043e565b8260ff168b6080015160ff1614612221576121e281848661239e565b6121f1838d608001518761239e565b6122008a8e606001518861239e565b61220a919061290e565b6122149190612cd0565b9650505050505050612250565b61221481836122358b8f606001518861239e565b61223f919061290e565b6122499190612cd0565b848661239e565b949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156122a457600080fd5b505afa1580156122b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122dc9190612dd8565b6122e6919061295a565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790529091506110c790859061240f565b600054610100900460ff166123625760405162461bcd60e51b815260040161043e90612ce4565b610b413361133f565b600054610100900460ff166123925760405162461bcd60e51b815260040161043e90612ce4565b6097805460ff19169055565b60008160ff168360ff1610156123d7576123b883836130b6565b6123c69060ff16600a6130d9565b6123d0908561290e565b90506104c2565b8160ff168360ff161115612407576123ef82846130b6565b6123fd9060ff16600a6130d9565b6123d09085612cd0565b509192915050565b6000612464826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124e19092919063ffffffff16565b805190915015610989578080602001905181019061248291906130e5565b6109895760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161043e565b6060612250848460008585843b61253a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161043e565b600080866001600160a01b031685876040516125569190613100565b60006040518083038185875af1925050503d8060008114612593576040519150601f19603f3d011682016040523d82523d6000602084013e612598565b606091505b50915091506125a88282866125b3565b979650505050505050565b606083156125c25750816104c2565b8251156125d25782518084602001fd5b8160405162461bcd60e51b815260040161043e919061311c565b60ff81168114610de457600080fd5b63ffffffff81168114610de457600080fd5b6000806040838503121561262057600080fd5b823561262b816125ec565b9150602083013561263b816125fb565b809150509250929050565b60008060006060848603121561265b57600080fd5b8335612666816125ec565b92506020840135612676816125fb565b929592945050506040919091013590565b60006020828403121561269957600080fd5b81356104c2816125ec565b6001600160a01b0381168114610de457600080fd5b6000602082840312156126cb57600080fd5b81356104c2816126a4565b600080602083850312156126e957600080fd5b823567ffffffffffffffff8082111561270157600080fd5b818501915085601f83011261271557600080fd5b81358181111561272457600080fd5b86602082850101111561273657600080fd5b60209290920196919550909350505050565b6000806040838503121561275b57600080fd5b8235612766816126a4565b9150602083013561263b816126a4565b60005b83811015612791578181015183820152602001612779565b838111156110c75750506000910152565b600081518084526127ba816020860160208601612776565b601f01601f19169290920160200192915050565b821515815260406020820152600061225060408301846127a2565b6000602082840312156127fb57600080fd5b81356104c2816125fb565b60008060008060008060c0878903121561281f57600080fd5b863595506020870135945060408701359350606087013592506080870135915060a087013561284d816125fb565b809150509295509295509295565b60006020828403121561286d57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000806000606084860312156128d457600080fd5b833592506020840135915060408401356128ed816125ec565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612928576129286128f8565b500290565b60008282101561293f5761293f6128f8565b500390565b634e487b7160e01b600052603160045260246000fd5b6000821982111561296d5761296d6128f8565b500190565b600063ffffffff808316818516808303821115612991576129916128f8565b01949350505050565b600063ffffffff838116908316818110156129b7576129b76128f8565b039392505050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff808416806129ec576129ec6129bf565b92169190910692915050565b634e487b7160e01b600052604160045260246000fd5b604051610240810167ffffffffffffffff81118282101715612a3257612a326129f8565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612a6157612a616129f8565b604052919050565b8051612a74816126a4565b919050565b8051612a74816125fb565b805160058110612a7457600080fd5b600067ffffffffffffffff821115612aad57612aad6129f8565b5060051b60200190565b600082601f830112612ac857600080fd5b81516020612add612ad883612a93565b612a38565b82815260059290921b84018101918181019086841115612afc57600080fd5b8286015b84811015612b20578051612b13816126a4565b8352918301918301612b00565b509695505050505050565b600060208284031215612b3d57600080fd5b815167ffffffffffffffff80821115612b5557600080fd5b908301906102408286031215612b6a57600080fd5b612b72612a0e565b612b7b83612a69565b8152612b8960208401612a69565b6020820152612b9a60408401612a69565b6040820152612bab60608401612a69565b60608201526080838101519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a0612c1d818501612a79565b908201526101c0612c2f848201612a79565b908201526101e0612c41848201612a79565b90820152610200612c53848201612a84565b908201526102208381015183811115612c6b57600080fd5b612c7788828701612ab7565b918301919091525095945050505050565b634e487b7160e01b600052602160045260246000fd5b8281526040810160048310612cc357634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b600082612cdf57612cdf6129bf565b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b80518015158114612a7457600080fd5b600060c08284031215612d5157600080fd5b60405160c0810181811067ffffffffffffffff82111715612d7457612d746129f8565b6040528251612d82816126a4565b8082525060208301516020820152604083015160408201526060830151612da8816125ec565b60608201526080830151612dbb816125ec565b6080820152612dcc60a08401612d2f565b60a08201529392505050565b600060208284031215612dea57600080fd5b5051919050565b600081518084526020808501945080840160005b83811015612e2a5781516001600160a01b031687529582019590820190600101612e05565b509495945050505050565b8281526040602082015260006122506040830184612df1565b60006020808385031215612e6157600080fd5b825167ffffffffffffffff811115612e7857600080fd5b8301601f81018513612e8957600080fd5b8051612e97612ad882612a93565b81815260059190911b82018301908381019087831115612eb657600080fd5b928401925b828410156125a857835182529284019290840190612ebb565b85815284602082015260a060408201526000612ef360a0830186612df1565b6001600160a01b0394909416606083015250608001529392505050565b600063ffffffff80831681851681830481118215151615612f3357612f336128f8565b02949350505050565b600060208284031215612f4e57600080fd5b81516104c2816125ec565b600181815b80851115612f94578160001904821115612f7a57612f7a6128f8565b80851615612f8757918102915b93841c9390800290612f5e565b509250929050565b600082612fab57506001610bba565b81612fb857506000610bba565b8160018114612fce5760028114612fd857612ff4565b6001915050610bba565b60ff841115612fe957612fe96128f8565b50506001821b610bba565b5060208310610133831016604e8410600b8410161715613017575081810a610bba565b6130218383612f59565b8060001904821115613035576130356128f8565b029392505050565b60006104c260ff841683612f9c565b805169ffffffffffffffffffff81168114612a7457600080fd5b600080600080600060a0868803121561307e57600080fd5b6130878661304c565b94506020860151935060408601519250606086015191506130aa6080870161304c565b90509295509295909350565b600060ff821660ff8416808210156130d0576130d06128f8565b90039392505050565b60006104c28383612f9c565b6000602082840312156130f757600080fd5b6104c282612d2f565b60008251613112818460208701612776565b9190910192915050565b6020815260006104c260208301846127a256fea264697066735822122074859d43045d805fc8b98553904c6333c190690f9786df0f8d817b2bdd91f1ca64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c8063715018a6116100f9578063b5c60b3811610097578063cd48a61411610071578063cd48a614146103c8578063e775d1ac146103db578063f2fde38b146103ee578063fa184a1e1461040157600080fd5b8063b5c60b3814610394578063c5064653146103a7578063c6f8806c146103b057600080fd5b80638da5cb5b116100d35780638da5cb5b14610354578063a47755d114610365578063aa878f7614610378578063ab4de5ed1461038b57600080fd5b8063715018a614610329578063729d8107146103315780638bddd2e41461034457600080fd5b8063453c3ea1116101665780634b51dd22116101405780634b51dd22146102c15780634d1ed891146102ca5780635c975abb146102fd5780636e04ff0d1461030857600080fd5b8063453c3ea1146102885780634585e33b1461029b578063485cc955146102ae57600080fd5b806314fad707116101a257806314fad707146102255780631ac6c56b146102385780631c39033c1461024157806330f01be81461027f57600080fd5b806308058e7c146101c95780630816c847146101f95780630caae41d14610210575b600080fd5b60cc546101dc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61020260d45481565b6040519081526020016101f0565b61022361021e36600461260d565b610414565b005b610202610233366004612646565b61047f565b61020260d15481565b61026a61024f366004612687565b60ff16600090815260cb602052604090205463ffffffff1690565b60405163ffffffff90911681526020016101f0565b61020260d35481565b6102236102963660046126b9565b6104c9565b6102236102a93660046126d6565b61053c565b6102236102bc366004612748565b61087f565b61020260ce5481565b6102ed6102d83660046126b9565b60cf6020526000908152604090205460ff1681565b60405190151581526020016101f0565b60975460ff166102ed565b61031b6103163660046126d6565b61098e565b6040516101f09291906127ce565b610223610b0d565b61022361033f3660046127e9565b610b43565b60c95461026a9063ffffffff1681565b6065546001600160a01b03166101dc565b60cd546101dc906001600160a01b031681565b61020261038636600461260d565b610b95565b61020260d25481565b6102236103a23660046126b9565b610bc0565b61020260d05481565b60c95461026a90640100000000900463ffffffff1681565b6102236103d63660046127e9565b610c36565b6102236103e9366004612806565b610c7c565b6102236103fc3660046126b9565b610d4c565b61022361040f36600461285b565b610de7565b6065546001600160a01b031633146104475760405162461bcd60e51b815260040161043e90612874565b60405180910390fd5b61045081610e9d565b60ff92909216600090815260cb60205260409020805463ffffffff191663ffffffff9093169290921790915550565b60ff8316600090815260ca6020908152604080832063ffffffff8616845290915281208054839081106104b4576104b46128a9565b906000526020600020015490505b9392505050565b6065546001600160a01b031633146104f35760405162461bcd60e51b815260040161043e90612874565b6001600160a01b038116600081815260cf6020526040808220805460ff19169055517fbe68633f03b6fc1b408a601ddf93393cc980ad052eb3a3a2cc7e3599ec117b3d9190a250565b60975460ff16156105825760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161043e565b60008080610592848601866128bf565b92509250925060006105a2610ec7565b90506000806105b286600561290e565b60ff8516600090815260cb602052604090205490915063ffffffff166105f85760ff8416600090815260cb60205260409020805463ffffffff191663ffffffff85161790555b85821080156106075750600081115b801561062e575060ff8416600090815260cb602052604090205463ffffffff808516911611155b156107ed5760ff8416600090815260ca6020908152604080832060cb83528184205463ffffffff168452909152902054801561075d5760ff8516600090815260ca6020908152604080832060cb83528184205463ffffffff168452909152812061069960018461292d565b815481106106a9576106a96128a9565b600091825260208083209091015460ff8916835260ca8252604080842060cb84528185205463ffffffff1685529092529120805491925090806106ee576106ee612944565b6001900381819060005260206000200160009055905561070e8682610eef565b6040805160ff88168152602081018390527f58c7ae721fd25aaf84e68db9ce9ac6fed4f08438a370a4299d19f8c1425c499e910160405180910390a161075560018561295a565b9350506107e7565b60ff8516600090815260cb602052604090205463ffffffff808616911610156107e15760c95460ff8616600090815260cb60205260408120805463ffffffff938416939192916107af91859116612972565b92506101000a81548163ffffffff021916908363ffffffff1602179055506001826107da919061292d565b91506107e7565b506107ed565b506105f8565b60ff8416600081815260ca6020908152604080832060cb8084528285205463ffffffff168086529184528285205494869052835281518b81529283018790528282018a90526060830194909452608082019290925260a0810192909252517fd69140f88b9a25350749bb371882f4479133fc8b65602aac60f6c1b3598f08329181900360c00190a15050505050505050565b600054610100900460ff1661089a5760005460ff161561089e565b303b155b6109015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161043e565b600054610100900460ff16158015610923576000805461ffff19166101011790555b60cc80546001600160a01b038086166001600160a01b03199283161790925560cd805492851692909116919091179055600060d081905560d181905560d281905560d381905560d455610977610e106112f7565b8015610989576000805461ff00191690555b505050565b600060608180806109a1868801886128bf565b92509250925060006109b1610ec7565b60ff8316600090815260cb602052604081205490975090915063ffffffff16806109d85750805b8063ffffffff168263ffffffff1610158015610a13575060c954640100000000900463ffffffff16610a0a828461299a565b63ffffffff1610155b15610a215760019650610ab1565b8163ffffffff168163ffffffff1611610ab15760ff8316600090815260ca6020908152604080832063ffffffff8516845290915290205415801590610a89575060ff8316600090815260ca6020908152604080832063ffffffff851684529091529020548411155b15610a975760019650610ab1565b60c954610aaa9063ffffffff1682612972565b9050610a21565b60ff8316600081815260ca6020908152604080832063ffffffff86168452825291829020548251918201899052918101919091526060810191909152608001604051602081830303815290604052955050505050509250929050565b6065546001600160a01b03163314610b375760405162461bcd60e51b815260040161043e90612874565b610b41600061133f565b565b6065546001600160a01b03163314610b6d5760405162461bcd60e51b815260040161043e90612874565b60c9805463ffffffff9092166401000000000267ffffffff0000000019909216919091179055565b60ff8216600090815260ca6020908152604080832063ffffffff851684529091529020545b92915050565b6065546001600160a01b03163314610bea5760405162461bcd60e51b815260040161043e90612874565b6001600160a01b038116600081815260cf6020526040808220805460ff19166001179055517ffd53558403e69775f527253d59778a7280ef9037a9285f1f1df3595b6ac996319190a250565b6065546001600160a01b03163314610c605760405162461bcd60e51b815260040161043e90612874565b60c9805463ffffffff191663ffffffff92909216919091179055565b6065546001600160a01b03163314610ca65760405162461bcd60e51b815260040161043e90612874565b6127108510610ced5760405162461bcd60e51b815260206004820152601360248201527221494e56414c4944286463614665654270732960681b604482015260640161043e565b60d086905560d185905560d284905560d383905560d482905560c9805463ffffffff191663ffffffff83161790556040517f3b5fda6f71b960b21be0b432d9b7c87d9c8c996477ea1eba5c19cb77d1e027aa90600090a1505050505050565b6065546001600160a01b03163314610d765760405162461bcd60e51b815260040161043e90612874565b6001600160a01b038116610ddb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161043e565b610de48161133f565b50565b60026001541415610e3a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161043e565b600260015560975460ff1615610e855760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161043e565b610e90600182610eef565b5060018055565b3b151590565b60c95460009063ffffffff16610eb381846129d5565b610ebd908461299a565b610bba9190612972565b60c9546000904290610edf9063ffffffff16826129d5565b610ee9908261299a565b91505090565b60cc546040516392c65f4b60e01b8152600481018390526000916001600160a01b0316906392c65f4b9060240160006040518083038186803b158015610f3457600080fd5b505afa158015610f48573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f709190810190612b2b565b6040808201516001600160a01b0316600090815260cf602052205490915060ff16156110005760cc54604051635ba581cd60e01b81526001600160a01b0390911690635ba581cd90610fc9908590600190600401612c9e565b600060405180830381600087803b158015610fe357600080fd5b505af1158015610ff7573d6000803e3d6000fd5b50505050505050565b6001816102000151600481111561101957611019612c88565b1461102357505050565b60d354816080015110156110975760cc54604051635ba581cd60e01b81526001600160a01b0390911690635ba581cd90611064908590600190600401612c9e565b600060405180830381600087803b15801561107e57600080fd5b505af1158015611092573d6000803e3d6000fd5b505050505b6101e0810151429063ffffffff808316911611156110cd576110c784846110c2856101e00151610e9d565b611391565b50505050565b608082015160a0830151158015906110f757508260c001518360a001516110f4919061292d565b81115b15611113578260c001518360a00151611110919061292d565b90505b600061271060d15483611126919061290e565b6111309190612cd0565b905060d254811015611141575060d2545b600061114e858484611421565b9050801561121a5760a0850151158061117957508460a00151838660c00151611177919061295a565b105b156111a1576111a187876110c2886101a00151896101e0015161119c9190612972565b610e9d565b60cc54604051632d32f27960e21b8152600481018890526024810185905260448101839052606481018490526001600160a01b039091169063b4cbc9e4906084015b600060405180830381600087803b1580156111fd57600080fd5b505af1158015611211573d6000803e3d6000fd5b50505050610ff7565b600060d054118015611233575060d05485610120015110155b1561126b5760cc54604051635ba581cd60e01b81526001600160a01b0390911690635ba581cd906111e3908990600390600401612c9e565b61128987876110c2886101a00151896101e0015161119c9190612972565b60cc54604051635ba581cd60e01b81526001600160a01b0390911690635ba581cd906112bc908990600290600401612c9e565b600060405180830381600087803b1580156112d657600080fd5b505af11580156112ea573d6000803e3d6000fd5b5050505050505050505050565b600054610100900460ff1661131e5760405162461bcd60e51b815260040161043e90612ce4565b611326611be4565b61132e611c1b565b611336611c52565b610de481611c79565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60ff8316600090815260ca60205260408120906113ad83610e9d565b63ffffffff90811682526020808301939093526040918201600090812080546001810182559082529084902001859055815160ff87168152928301859052831682820152517f67778e52b18dcf574ab071142a886fce91a8ce5e60e176229fdadb8c063caaed9181900360600190a1505050565b60008084610220015160008151811061143c5761143c6128a9565b602002602001015190506000856102200151600187610220015151611461919061292d565b81518110611471576114716128a9565b602090810291909101015160cd5460405163185c596360e11b81526001600160a01b038581166004830152929350600092909116906330b8b2c69060240160c06040518083038186803b1580156114c757600080fd5b505afa1580156114db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ff9190612d3f565b90508060a0015161151657600093505050506104c2565b611527878783858b60600151611ce6565b61153757600093505050506104c2565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a082319060240160206040518083038186803b15801561157957600080fd5b505afa15801561158d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b19190612dd8565b60cd54895160405163fcd6a25b60e01b81526001600160a01b039182166004820152306024820152604481018b9052606481018a9052929350169063fcd6a25b90608401600060405180830381600087803b15801561160f57600080fd5b505af1925050508015611620575060015b611662573d80801561164e576040519150601f19603f3d011682016040523d82523d6000602084013e611653565b606091505b506000955050505050506104c2565b60cd546000906001600160a01b031663e1ded2de611680898b61292d565b6040518263ffffffff1660e01b815260040161169e91815260200190565b60206040518083038186803b1580156116b657600080fd5b505afa1580156116ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ee9190612dd8565b60cd546040516370a0823160e01b81523060048201529192506001600160a01b0316906370a082319060240160206040518083038186803b15801561173257600080fd5b505afa158015611746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176a9190612dd8565b8111156117ef5760cd546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156117b457600080fd5b505afa1580156117c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ec9190612dd8565b90505b60cd5460405163f3fef3a360e01b81526001600160a01b038781166004830152602482018490529091169063f3fef3a390604401600060405180830381600087803b15801561183d57600080fd5b505af192505050801561184e575060015b611891573d80801561187c576040519150601f19603f3d011682016040523d82523d6000602084013e611881565b606091505b50600096505050505050506104c2565b6040516370a0823160e01b815230600482015260009083906001600160a01b038816906370a082319060240160206040518083038186803b1580156118d557600080fd5b505afa1580156118e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190d9190612dd8565b611917919061292d565b90506000811161195e5760405162461bcd60e51b815260206004820152601260248201527121494e56414c494428616d6f756e74496e2960701b604482015260640161043e565b60608a01516000906001600160a01b03161561198b5761198485878d606001518d611f20565b9050611a45565b60008b604001516001600160a01b031663d06ca61f8c8e61022001516040518363ffffffff1660e01b81526004016119c4929190612e35565b60006040518083038186803b1580156119dc57600080fd5b505afa1580156119f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a189190810190612e4e565b90508060018251611a29919061292d565b81518110611a3957611a396128a9565b60200260200101519150505b60408b0151611a5f906001600160a01b0389169084612258565b8a604001516001600160a01b03166338ed1739836127108e610140015185611a87919061290e565b611a919190612cd0565b611a9b908561292d565b8e61022001518f6020015142610e10611ab4919061295a565b6040518663ffffffff1660e01b8152600401611ad4959493929190612ed4565b600060405180830381600087803b158015611aee57600080fd5b505af1925050508015611b2357506040513d6000823e601f3d908101601f19168201604052611b209190810190612e4e565b60015b611b68573d808015611b51576040519150601f19603f3d011682016040523d82523d6000602084013e611b56565b606091505b506000985050505050505050506104c2565b600281511015611bae5760405162461bcd60e51b815260206004820152601160248201527021494e56414c494428616d6f756e74732960781b604482015260640161043e565b8060018251611bbd919061292d565b81518110611bcd57611bcd6128a9565b6020026020010151985050505050505050506104c2565b600054610100900460ff16611c0b5760405162461bcd60e51b815260040161043e90612ce4565b611c13611c52565b610b4161233b565b600054610100900460ff16611c425760405162461bcd60e51b815260040161043e90612ce4565b611c4a611c52565b610b4161236b565b600054610100900460ff16610b415760405162461bcd60e51b815260040161043e90612ce4565b600054610100900460ff16611ca05760405162461bcd60e51b815260040161043e90612ce4565b60c9805463ffffffff191663ffffffff8316908117909155611cc3906014612f10565b60c960046101000a81548163ffffffff021916908363ffffffff16021790555050565b60008561018001516000148015611d005750610160860151155b15611d0d57506001611f17565b600080846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d4957600080fd5b505afa158015611d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d819190612f3c565b90506000611d9082600a61303d565b60608a01519091506001600160a01b031615611ddd57611dc28787878a60600151600a611dbd919061303d565b611f20565b611dcc828061290e565b611dd69190612cd0565b9250611ebb565b600089604001516001600160a01b031663d06ca61f8a8c61022001516040518363ffffffff1660e01b8152600401611e16929190612e35565b60006040518083038186803b158015611e2e57600080fd5b505afa158015611e42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e6a9190810190612e4e565b90508060018251611e7b919061292d565b81518110611e8b57611e8b6128a9565b602002602001015182611ea38b8b606001518761239e565b611ead919061290e565b611eb79190612cd0565b9350505b6000896101800151118015611ed4575088610180015183105b15611ee55760009350505050611f17565b6000896101600151118015611efe575088610160015183115b15611f0f5760009350505050611f17565b600193505050505b95945050505050565b600081611f2f57506000612250565b6000806000866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611f6d57600080fd5b505afa158015611f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fa59190612f3c565b90506000866001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611fe257600080fd5b505afa158015611ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201a9190612f3c565b905088600001516001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561205957600080fd5b505afa15801561206d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120919190613066565b5060d45492975095508692505015806120b5575060d4546120b2854261292d565b11155b6120f35760405162461bcd60e51b815260206004820152600f60248201526e0854149250d157d3d5551110551151608a1b604482015260640161043e565b876001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561212c57600080fd5b505afa158015612140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121649190613066565b5060d4549298509650879250501580612188575060d454612185864261292d565b11155b6121c65760405162461bcd60e51b815260206004820152600f60248201526e0854149250d157d3d5551110551151608a1b604482015260640161043e565b8260ff168b6080015160ff1614612221576121e281848661239e565b6121f1838d608001518761239e565b6122008a8e606001518861239e565b61220a919061290e565b6122149190612cd0565b9650505050505050612250565b61221481836122358b8f606001518861239e565b61223f919061290e565b6122499190612cd0565b848661239e565b949350505050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e9060440160206040518083038186803b1580156122a457600080fd5b505afa1580156122b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122dc9190612dd8565b6122e6919061295a565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790529091506110c790859061240f565b600054610100900460ff166123625760405162461bcd60e51b815260040161043e90612ce4565b610b413361133f565b600054610100900460ff166123925760405162461bcd60e51b815260040161043e90612ce4565b6097805460ff19169055565b60008160ff168360ff1610156123d7576123b883836130b6565b6123c69060ff16600a6130d9565b6123d0908561290e565b90506104c2565b8160ff168360ff161115612407576123ef82846130b6565b6123fd9060ff16600a6130d9565b6123d09085612cd0565b509192915050565b6000612464826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166124e19092919063ffffffff16565b805190915015610989578080602001905181019061248291906130e5565b6109895760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161043e565b6060612250848460008585843b61253a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161043e565b600080866001600160a01b031685876040516125569190613100565b60006040518083038185875af1925050503d8060008114612593576040519150601f19603f3d011682016040523d82523d6000602084013e612598565b606091505b50915091506125a88282866125b3565b979650505050505050565b606083156125c25750816104c2565b8251156125d25782518084602001fd5b8160405162461bcd60e51b815260040161043e919061311c565b60ff81168114610de457600080fd5b63ffffffff81168114610de457600080fd5b6000806040838503121561262057600080fd5b823561262b816125ec565b9150602083013561263b816125fb565b809150509250929050565b60008060006060848603121561265b57600080fd5b8335612666816125ec565b92506020840135612676816125fb565b929592945050506040919091013590565b60006020828403121561269957600080fd5b81356104c2816125ec565b6001600160a01b0381168114610de457600080fd5b6000602082840312156126cb57600080fd5b81356104c2816126a4565b600080602083850312156126e957600080fd5b823567ffffffffffffffff8082111561270157600080fd5b818501915085601f83011261271557600080fd5b81358181111561272457600080fd5b86602082850101111561273657600080fd5b60209290920196919550909350505050565b6000806040838503121561275b57600080fd5b8235612766816126a4565b9150602083013561263b816126a4565b60005b83811015612791578181015183820152602001612779565b838111156110c75750506000910152565b600081518084526127ba816020860160208601612776565b601f01601f19169290920160200192915050565b821515815260406020820152600061225060408301846127a2565b6000602082840312156127fb57600080fd5b81356104c2816125fb565b60008060008060008060c0878903121561281f57600080fd5b863595506020870135945060408701359350606087013592506080870135915060a087013561284d816125fb565b809150509295509295509295565b60006020828403121561286d57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000806000606084860312156128d457600080fd5b833592506020840135915060408401356128ed816125ec565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612928576129286128f8565b500290565b60008282101561293f5761293f6128f8565b500390565b634e487b7160e01b600052603160045260246000fd5b6000821982111561296d5761296d6128f8565b500190565b600063ffffffff808316818516808303821115612991576129916128f8565b01949350505050565b600063ffffffff838116908316818110156129b7576129b76128f8565b039392505050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff808416806129ec576129ec6129bf565b92169190910692915050565b634e487b7160e01b600052604160045260246000fd5b604051610240810167ffffffffffffffff81118282101715612a3257612a326129f8565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612a6157612a616129f8565b604052919050565b8051612a74816126a4565b919050565b8051612a74816125fb565b805160058110612a7457600080fd5b600067ffffffffffffffff821115612aad57612aad6129f8565b5060051b60200190565b600082601f830112612ac857600080fd5b81516020612add612ad883612a93565b612a38565b82815260059290921b84018101918181019086841115612afc57600080fd5b8286015b84811015612b20578051612b13816126a4565b8352918301918301612b00565b509695505050505050565b600060208284031215612b3d57600080fd5b815167ffffffffffffffff80821115612b5557600080fd5b908301906102408286031215612b6a57600080fd5b612b72612a0e565b612b7b83612a69565b8152612b8960208401612a69565b6020820152612b9a60408401612a69565b6040820152612bab60608401612a69565b60608201526080838101519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a0612c1d818501612a79565b908201526101c0612c2f848201612a79565b908201526101e0612c41848201612a79565b90820152610200612c53848201612a84565b908201526102208381015183811115612c6b57600080fd5b612c7788828701612ab7565b918301919091525095945050505050565b634e487b7160e01b600052602160045260246000fd5b8281526040810160048310612cc357634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b600082612cdf57612cdf6129bf565b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b80518015158114612a7457600080fd5b600060c08284031215612d5157600080fd5b60405160c0810181811067ffffffffffffffff82111715612d7457612d746129f8565b6040528251612d82816126a4565b8082525060208301516020820152604083015160408201526060830151612da8816125ec565b60608201526080830151612dbb816125ec565b6080820152612dcc60a08401612d2f565b60a08201529392505050565b600060208284031215612dea57600080fd5b5051919050565b600081518084526020808501945080840160005b83811015612e2a5781516001600160a01b031687529582019590820190600101612e05565b509495945050505050565b8281526040602082015260006122506040830184612df1565b60006020808385031215612e6157600080fd5b825167ffffffffffffffff811115612e7857600080fd5b8301601f81018513612e8957600080fd5b8051612e97612ad882612a93565b81815260059190911b82018301908381019087831115612eb657600080fd5b928401925b828410156125a857835182529284019290840190612ebb565b85815284602082015260a060408201526000612ef360a0830186612df1565b6001600160a01b0394909416606083015250608001529392505050565b600063ffffffff80831681851681830481118215151615612f3357612f336128f8565b02949350505050565b600060208284031215612f4e57600080fd5b81516104c2816125ec565b600181815b80851115612f94578160001904821115612f7a57612f7a6128f8565b80851615612f8757918102915b93841c9390800290612f5e565b509250929050565b600082612fab57506001610bba565b81612fb857506000610bba565b8160018114612fce5760028114612fd857612ff4565b6001915050610bba565b60ff841115612fe957612fe96128f8565b50506001821b610bba565b5060208310610133831016604e8410600b8410161715613017575081810a610bba565b6130218383612f59565b8060001904821115613035576130356128f8565b029392505050565b60006104c260ff841683612f9c565b805169ffffffffffffffffffff81168114612a7457600080fd5b600080600080600060a0868803121561307e57600080fd5b6130878661304c565b94506020860151935060408601519250606086015191506130aa6080870161304c565b90509295509295909350565b600060ff821660ff8416808210156130d0576130d06128f8565b90039392505050565b60006104c28383612f9c565b6000602082840312156130f757600080fd5b6104c282612d2f565b60008251613112818460208701612776565b9190910192915050565b6020815260006104c260208301846127a256fea264697066735822122074859d43045d805fc8b98553904c6333c190690f9786df0f8d817b2bdd91f1ca64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.",
        "params": {
          "checkData": "specified in the upkeep registration so it is always the same for a registered upkeep. This can easilly be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."
        },
        "returns": {
          "performData": "bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.",
          "upkeepNeeded": "boolean to indicate whether the keeper should call performUpkeep or not."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "assetsMerkleRoot": {
        "details": "merkle root of allowed assets definitions. "
      },
      "blacklistedRouters": {
        "details": "map of swap routers that are deemed unsafe and any active DCA to them will be canceled "
      },
      "caskDCA": {
        "details": "Pointer to CaskDCA contract "
      },
      "caskVault": {
        "details": "vault to use for DCA funding. "
      },
      "dcaFeeBps": {
        "details": "DCA transaction fee in basis points. "
      },
      "dcaFeeMin": {
        "details": "Minimum DCA transaction fee. "
      },
      "dcaMinValue": {
        "details": "Smallest allowable DCA amount. "
      },
      "maxPriceFeedAge": {
        "details": "revert if price feed age is older than this number of seconds. set to 0 to disable check. "
      },
      "maxSkips": {
        "details": "max number of failed DCA purchases before DCA is permanently canceled. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."
      },
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 327,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 330,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 521,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 564,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2551,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 205,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 319,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 415,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 506,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13429,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "queueBucketSize",
        "offset": 0,
        "slot": "201",
        "type": "t_uint32"
      },
      {
        "astId": 13432,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "maxQueueAge",
        "offset": 4,
        "slot": "201",
        "type": "t_uint32"
      },
      {
        "astId": 13440,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "queue",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint8,t_mapping(t_uint32,t_array(t_bytes32)dyn_storage))"
      },
      {
        "astId": 13444,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "queueBucket",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint8,t_uint32)"
      },
      {
        "astId": 10942,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "caskDCA",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(ICaskDCA)12154"
      },
      {
        "astId": 10946,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "caskVault",
        "offset": 0,
        "slot": "205",
        "type": "t_contract(ICaskVault)13409"
      },
      {
        "astId": 10949,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "assetsMerkleRoot",
        "offset": 0,
        "slot": "206",
        "type": "t_bytes32"
      },
      {
        "astId": 10954,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "blacklistedRouters",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10957,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "maxSkips",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 10960,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "dcaFeeBps",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 10963,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "dcaFeeMin",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 10966,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "dcaMinValue",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 10969,
        "contract": "contracts/dca/CaskDCAManager.sol:CaskDCAManager",
        "label": "maxPriceFeedAge",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICaskDCA)12154": {
        "encoding": "inplace",
        "label": "contract ICaskDCA",
        "numberOfBytes": "20"
      },
      "t_contract(ICaskVault)13409": {
        "encoding": "inplace",
        "label": "contract ICaskVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_uint8,t_mapping(t_uint32,t_array(t_bytes32)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(uint32 => bytes32[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_array(t_bytes32)dyn_storage)"
      },
      "t_mapping(t_uint8,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}