{
  "address": "0x59ac5F03E98b99ad7983a77ec5cf682b4D07693F",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "protocol",
          "type": "address"
        }
      ],
      "name": "AddProtocol",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AllowedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "AssetDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "AssetWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "DisallowedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFeeShares",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "network",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "networkFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "networkFeeShares",
          "type": "uint256"
        }
      ],
      "name": "Payment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "protocol",
          "type": "address"
        }
      ],
      "name": "RemoveProtocol",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeDistributor",
          "type": "address"
        }
      ],
      "name": "SetFeeDistributor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum ICaskVault.FundingSource",
          "name": "fundingSource",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "fundingAsset",
          "type": "address"
        }
      ],
      "name": "SetFundingSource",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPriceFeedAge",
          "type": "uint256"
        }
      ],
      "name": "SetMaxPriceFeedAge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minDeposit",
          "type": "uint256"
        }
      ],
      "name": "SetMinDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum ICaskVault.PriceFeedType",
          "name": "priceFeedType",
          "type": "uint8"
        }
      ],
      "name": "SetPriceFeedType",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "feeDistributor",
          "type": "address"
        }
      ],
      "name": "SetTrustedForwarder",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "TransferValue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "addProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippageBps",
          "type": "uint256"
        }
      ],
      "name": "allowAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bandAssetSymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromAmount",
          "type": "uint256"
        }
      ],
      "name": "convertPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "currentValueOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "disallowAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDistributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "fundingSource",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ICaskVault.FundingSource",
              "name": "fundingSource",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "fundingAsset",
              "type": "address"
            }
          ],
          "internalType": "struct ICaskVault.FundingProfile",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getAsset",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "priceFeed",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "slippageBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "assetDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "priceFeedDecimals",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "allowed",
              "type": "bool"
            }
          ],
          "internalType": "struct ICaskVault.Asset",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_baseAssetPriceFeed",
          "type": "address"
        },
        {
          "internalType": "enum ICaskVault.PriceFeedType",
          "name": "_priceFeedType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_feeDistributor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPriceFeedAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeedType",
      "outputs": [
        {
          "internalType": "enum ICaskVault.PriceFeedType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_networkFee",
          "type": "uint256"
        }
      ],
      "name": "protocolPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "protocolPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolFee",
          "type": "uint256"
        }
      ],
      "name": "protocolPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "protocols",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "removeProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserved1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "setBandAssetSymbol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeDistributor",
          "type": "address"
        }
      ],
      "name": "setFeeDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ICaskVault.FundingSource",
          "name": "_fundingSource",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_fundingAsset",
          "type": "address"
        }
      ],
      "name": "setFundingSource",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPriceFeedAge",
          "type": "uint256"
        }
      ],
      "name": "setMaxPriceFeedAge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDeposit",
          "type": "uint256"
        }
      ],
      "name": "setMinDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ICaskVault.PriceFeedType",
          "name": "_priceFeedType",
          "type": "uint8"
        }
      ],
      "name": "setPriceFeedType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "sharesForValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "totalAssetBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferValueFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionRecipient",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2e6e6332c0697f73911eee70b016095183344ea57bea54fe3f18bf127cfe5569",
  "receipt": {
    "to": null,
    "from": "0x83e50cD4123bAA60f6d6c8A83ca85Ac72e826bD0",
    "contractAddress": "0x59ac5F03E98b99ad7983a77ec5cf682b4D07693F",
    "transactionIndex": 0,
    "gasUsed": "4467899",
    "logsBloom": "0x
    "blockHash": "0xc8b9e57f23e40c3e6b536fa8c7bfaf3d3e206eaea368a5ab8f1c0beaab546dd0",
    "transactionHash": "0x2e6e6332c0697f73911eee70b016095183344ea57bea54fe3f18bf127cfe5569",
    "logs": [],
    "blockNumber": 13335576,
    "cumulativeGasUsed": "4467899",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "75ec186f450e569618c39764161b7a32",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"AddProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AllowedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"AssetDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"AssetWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"DisallowedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFeeShares\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"network\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"networkFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"networkFeeShares\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocol\",\"type\":\"address\"}],\"name\":\"RemoveProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeDistributor\",\"type\":\"address\"}],\"name\":\"SetFeeDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum ICaskVault.FundingSource\",\"name\":\"fundingSource\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fundingAsset\",\"type\":\"address\"}],\"name\":\"SetFundingSource\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPriceFeedAge\",\"type\":\"uint256\"}],\"name\":\"SetMaxPriceFeedAge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"}],\"name\":\"SetMinDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ICaskVault.PriceFeedType\",\"name\":\"priceFeedType\",\"type\":\"uint8\"}],\"name\":\"SetPriceFeedType\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feeDistributor\",\"type\":\"address\"}],\"name\":\"SetTrustedForwarder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"TransferValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"addProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippageBps\",\"type\":\"uint256\"}],\"name\":\"allowAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bandAssetSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"}],\"name\":\"convertPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"currentValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"disallowAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"fundingSource\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ICaskVault.FundingSource\",\"name\":\"fundingSource\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"fundingAsset\",\"type\":\"address\"}],\"internalType\":\"struct ICaskVault.FundingProfile\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slippageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"assetDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"priceFeedDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct ICaskVault.Asset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseAssetPriceFeed\",\"type\":\"address\"},{\"internalType\":\"enum ICaskVault.PriceFeedType\",\"name\":\"_priceFeedType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceFeedAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeedType\",\"outputs\":[{\"internalType\":\"enum ICaskVault.PriceFeedType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_networkFee\",\"type\":\"uint256\"}],\"name\":\"protocolPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"protocolPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"protocolPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protocols\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"removeProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserved1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setBandAssetSymbol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeDistributor\",\"type\":\"address\"}],\"name\":\"setFeeDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICaskVault.FundingSource\",\"name\":\"_fundingSource\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_fundingAsset\",\"type\":\"address\"}],\"name\":\"setFundingSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPriceFeedAge\",\"type\":\"uint256\"}],\"name\":\"setMaxPriceFeedAge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDeposit\",\"type\":\"uint256\"}],\"name\":\"setMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICaskVault.PriceFeedType\",\"name\":\"_priceFeedType\",\"type\":\"uint8\"}],\"name\":\"setPriceFeedType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"sharesForValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"totalAssetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferValueFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"currentValueOf(address)\":{\"details\":\"Get current vault value of `_address` denominated in `baseAsset`\",\"params\":{\"_address\":\"Address to check\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(address,uint256)\":{\"details\":\"Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\",\"params\":{\"_asset\":\"Address of incoming asset\",\"_assetAmount\":\"Amount of asset to deposit\"}},\"depositTo(address,address,uint256)\":{\"details\":\"Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\",\"params\":{\"_asset\":\"Address of incoming asset\",\"_assetAmount\":\"Amount of asset to deposit\",\"_to\":\"Recipient of funds\"}},\"fundingSource(address)\":{\"details\":\"Retrieve the funding source for an address\",\"params\":{\"_address\":\"Address for lookup\"}},\"getAllAssets()\":{\"details\":\"Get all the assets supported by the vault.\"},\"getAsset(address)\":{\"details\":\"Get asset details\",\"params\":{\"_asset\":\"Asset address\"},\"returns\":{\"_0\":\"Asset Asset details\"}},\"getBaseAsset()\":{\"details\":\"Get base asset of vault.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pricePerShare()\":{\"details\":\"Get current vault value a vault share\"},\"protocolPayment(address,address,uint256)\":{\"details\":\"Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\",\"params\":{\"_from\":\"From address\",\"_to\":\"To address\",\"_value\":\"Amount of baseAsset value to transfer\"}},\"protocolPayment(address,address,uint256,uint256)\":{\"details\":\"Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\",\"params\":{\"_from\":\"From address\",\"_protocolFee\":\"Protocol fee to deduct from `_value`\",\"_to\":\"To address\",\"_value\":\"Amount of baseAsset value to transfer\"}},\"protocolPayment(address,address,uint256,uint256,address,uint256)\":{\"details\":\"Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\",\"params\":{\"_from\":\"From address\",\"_network\":\"Address of network fee collector\",\"_networkFee\":\"Network fee to deduct from `_value`\",\"_protocolFee\":\"Protocol fee to deduct from `_value`\",\"_to\":\"To address\",\"_value\":\"Amount of baseAsset value to transfer\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setFundingSource(uint8,address)\":{\"details\":\"Set the funding source and, if using a personal wallet, the asset to use for funding payments\",\"params\":{\"_fundingAsset\":\"Asset to use for payments (if using personal funding source)\",\"_fundingSource\":\"Funding source to use\"}},\"sharesForValue(uint256)\":{\"details\":\"Get the number of vault shares that represents a given value of the base asset\",\"params\":{\"_value\":\"Amount of value\"}},\"supportsAsset(address)\":{\"details\":\"Check if the vault supports an asset\",\"params\":{\"_asset\":\"Asset address\"},\"returns\":{\"_0\":\"bool `true` if asset supported, `false` otherwise\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssetBalance(address)\":{\"details\":\"Get total amount of an asset held in vault and managed by admin\",\"params\":{\"_asset\":\"Address of asset\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"totalValue()\":{\"details\":\"Get total value in vault and managed by admin - denominated in `baseAsset`\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferValue(address,uint256)\":{\"details\":\"Transfer the equivalent vault shares of base asset `value` to `_recipient`\",\"params\":{\"_recipient\":\"To address\",\"_value\":\"Amount of baseAsset value to transfer\"}},\"transferValueFrom(address,address,uint256)\":{\"details\":\"Transfer the equivalent vault shares of base asset `value` from `_sender` to `_recipient`\",\"params\":{\"_recipient\":\"To address\",\"_sender\":\"From address\",\"_value\":\"Amount of baseAsset value to transfer\"}},\"withdraw(address,uint256)\":{\"details\":\"Withdraw an amount of shares from the vault in the form of `_asset`\",\"params\":{\"_asset\":\"Address of outgoing asset\",\"_shares\":\"Amount of shares to withdraw\"}},\"withdrawTo(address,address,uint256)\":{\"details\":\"Withdraw an amount of shares from the vault in the form of `_asset`\",\"params\":{\"_asset\":\"Address of outgoing asset\",\"_recipient\":\"Recipient who will receive the withdrawn assets\",\"_shares\":\"Amount of shares to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/CaskVault.sol\":\"CaskVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@opengsn/contracts/src/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IRelayRecipient.sol\\\";\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\nabstract contract BaseRelayRecipient is IRelayRecipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    function trustedForwarder() public virtual view returns (address){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, return the original sender.\\n     * otherwise, return `msg.sender`.\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce3168b37fc87ec34a18b56b4b16a06432119c07fd2e1d864b871dcf40372ebe\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * a contract must implement this interface in order to support relayed transaction.\\n * It is better to inherit the BaseRelayRecipient as its implementation.\\n */\\nabstract contract IRelayRecipient {\\n\\n    /**\\n     * return if the forwarder is trusted to forward relayed transactions to us.\\n     * the forwarder is required to verify the sender's signature, and verify\\n     * the call is not a replay.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * return the sender of this call.\\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\\n     * of the msg.data.\\n     * otherwise, return `msg.sender`\\n     * should be used in the contract anywhere instead of msg.sender\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * return the msg.data of this call.\\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\\n     * of the msg.data - so this method will strip those 20 bytes off.\\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\\n     * should be used in the contract instead of msg.data, where this difference matters.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n\\n    function versionRecipient() external virtual view returns (string memory);\\n}\\n\",\"keccak256\":\"0x199e82e0a2833a97213b5c16ac9b4e2b1814f2e90a4c4916855cbc21e710ad5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x23a373902059fb51db98e32e13f89a0ef0c570039081a1345022e66bc7e315d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @title  Interface for vault\\n  */\\n\\ninterface ICaskVault is IERC20MetadataUpgradeable {\\n\\n    // whitelisted stablecoin assets supported by the vault\\n    struct Asset {\\n        address priceFeed;\\n        uint256 slippageBps;\\n        uint256 depositLimit;\\n        uint8 assetDecimals;\\n        uint8 priceFeedDecimals;\\n        bool allowed;\\n    }\\n\\n    enum PriceFeedType {\\n        Chainlink,\\n        Band\\n    }\\n\\n    // sources for payments\\n    enum FundingSource {\\n        Cask,\\n        Personal\\n    }\\n\\n    // funding profile for a given address\\n    struct FundingProfile {\\n        FundingSource fundingSource;\\n        address fundingAsset;\\n    }\\n\\n    /**\\n      * @dev Get base asset of vault.\\n     */\\n    function getBaseAsset() external view returns (address);\\n\\n    /**\\n      * @dev Get all the assets supported by the vault.\\n     */\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Get asset details\\n     * @param _asset Asset address\\n     * @return Asset Asset details\\n     */\\n    function getAsset(address _asset) external view returns(Asset memory);\\n\\n    /**\\n     * @dev Check if the vault supports an asset\\n     * @param _asset Asset address\\n     * @return bool `true` if asset supported, `false` otherwise\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _value Amount of baseAsset value to transfer\\n     * @param _protocolFee Protocol fee to deduct from `_value`\\n     * @param _network Address of network fee collector\\n     * @param _networkFee Network fee to deduct from `_value`\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _protocolFee,\\n        address _network,\\n        uint256 _networkFee\\n    ) external;\\n\\n    /**\\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _value Amount of baseAsset value to transfer\\n     * @param _protocolFee Protocol fee to deduct from `_value`\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _protocolFee\\n    ) external;\\n\\n    /**\\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _value Amount of baseAsset value to transfer\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external;\\n\\n    /**\\n     * @dev Transfer the equivalent vault shares of base asset `value` to `_recipient`\\n     * @param _recipient To address\\n     * @param _value Amount of baseAsset value to transfer\\n     */\\n    function transferValue(\\n        address _recipient,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Transfer the equivalent vault shares of base asset `value` from `_sender` to `_recipient`\\n     * @param _sender From address\\n     * @param _recipient To address\\n     * @param _value Amount of baseAsset value to transfer\\n     */\\n    function transferValueFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\\n     * @param _asset Address of incoming asset\\n     * @param _assetAmount Amount of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _assetAmount) external;\\n\\n    /**\\n     * @dev Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\\n     * @param _to Recipient of funds\\n     * @param _asset Address of incoming asset\\n     * @param _assetAmount Amount of asset to deposit\\n     */\\n    function depositTo(address _to, address _asset, uint256 _assetAmount) external;\\n\\n    /**\\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\\n     * @param _asset Address of outgoing asset\\n     * @param _shares Amount of shares to withdraw\\n     */\\n    function withdraw(address _asset, uint256 _shares) external;\\n\\n    /**\\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\\n     * @param _recipient Recipient who will receive the withdrawn assets\\n     * @param _asset Address of outgoing asset\\n     * @param _shares Amount of shares to withdraw\\n     */\\n    function withdrawTo(address _recipient, address _asset, uint256 _shares) external;\\n\\n    /**\\n     * @dev Retrieve the funding source for an address\\n     * @param _address Address for lookup\\n     */\\n    function fundingSource(address _address) external view returns(FundingProfile memory);\\n\\n    /**\\n     * @dev Set the funding source and, if using a personal wallet, the asset to use for funding payments\\n     * @param _fundingSource Funding source to use\\n     * @param _fundingAsset Asset to use for payments (if using personal funding source)\\n     */\\n    function setFundingSource(FundingSource _fundingSource, address _fundingAsset) external;\\n\\n    /**\\n     * @dev Get current vault value of `_address` denominated in `baseAsset`\\n     * @param _address Address to check\\n     */\\n    function currentValueOf(address _address) external view returns(uint256);\\n\\n    /**\\n     * @dev Get current vault value a vault share\\n     */\\n    function pricePerShare() external view returns(uint256);\\n\\n    /**\\n     * @dev Get the number of vault shares that represents a given value of the base asset\\n     * @param _value Amount of value\\n     */\\n    function sharesForValue(uint256 _value) external view returns(uint256);\\n\\n    /**\\n     * @dev Get total value in vault and managed by admin - denominated in `baseAsset`\\n     */\\n    function totalValue() external view returns(uint256);\\n\\n    /**\\n     * @dev Get total amount of an asset held in vault and managed by admin\\n     * @param _asset Address of asset\\n     */\\n    function totalAssetBalance(address _asset) external view returns(uint256);\\n\\n\\n    /************************** EVENTS **************************/\\n\\n    /** @dev Emitted when `sender` transfers `baseAssetValue` (denominated in vault baseAsset) to `recipient` */\\n    event TransferValue(address indexed from, address indexed to, uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when an amount of `baseAsset` is paid from `from` to `to` within the vault */\\n    event Payment(address indexed from, address indexed to, uint256 baseAssetAmount, uint256 shares,\\n        uint256 protocolFee, uint256 protocolFeeShares,\\n        address indexed network, uint256 networkFee, uint256 networkFeeShares);\\n\\n    /** @dev Emitted when `asset` is added as a new supported asset */\\n    event AllowedAsset(address indexed asset);\\n\\n    /** @dev Emitted when `asset` is disallowed t */\\n    event DisallowedAsset(address indexed asset);\\n\\n    /** @dev Emitted when `participant` deposits `asset` */\\n    event AssetDeposited(address indexed participant, address indexed asset, uint256 assetAmount,\\n        uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when `participant` withdraws `asset` */\\n    event AssetWithdrawn(address indexed participant, address indexed asset, uint256 assetAmount,\\n        uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when `participant` sets their funding source */\\n    event SetFundingSource(address indexed participant, FundingSource fundingSource, address fundingAsset);\\n\\n    /** @dev Emitted when a new protocol is allowed to use the vault */\\n    event AddProtocol(address indexed protocol);\\n\\n    /** @dev Emitted when a protocol is no longer allowed to use the vault */\\n    event RemoveProtocol(address indexed protocol);\\n\\n    /** @dev Emitted when the vault price feed type is changed */\\n    event SetPriceFeedType(PriceFeedType priceFeedType);\\n\\n    /** @dev Emitted when the vault fee distributor is changed */\\n    event SetFeeDistributor(address indexed feeDistributor);\\n\\n    /** @dev Emitted when minDeposit is changed */\\n    event SetMinDeposit(uint256 minDeposit);\\n\\n    /** @dev Emitted when maxPriceFeedAge is changed */\\n    event SetMaxPriceFeedAge(uint256 maxPriceFeedAge);\\n\\n    /** @dev Emitted when the trustedForwarder address is changed */\\n    event SetTrustedForwarder(address indexed feeDistributor);\\n}\",\"keccak256\":\"0x8b5113f18542564ec417a2b270807cabd152b11c16dca68f52cecfdb366ef72d\",\"license\":\"MIT\"},\"contracts/interfaces/IStdReference.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStdReference {\\n    /// A structure returned whenever someone requests for standard reference data.\\n    struct ReferenceData {\\n        uint256 rate; // base/quote exchange rate, multiplied by 1e18.\\n        uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\\n        uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\\n    }\\n\\n    /// Returns the price data for the given base/quote pair. Revert if not available.\\n    function getReferenceData(string memory _base, string memory _quote)\\n    external\\n    view\\n    returns (ReferenceData memory);\\n\\n    /// Similar to getReferenceData, but with multiple base/quote pairs at once.\\n    function getReferenceDataBulk(string[] memory _bases, string[] memory _quotes)\\n    external\\n    view\\n    returns (ReferenceData[] memory);\\n}\",\"keccak256\":\"0xf54845173a0b625bc0b5fd327c6937363b83d5bfe6f4a2c9eebb783bcf55006d\",\"license\":\"MIT\"},\"contracts/vault/CaskVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@opengsn/contracts/src/BaseRelayRecipient.sol\\\";\\nimport \\\"../interfaces/IStdReference.sol\\\";\\n\\n\\nimport \\\"../interfaces/ICaskVault.sol\\\";\\n\\ncontract CaskVault is\\nICaskVault,\\nBaseRelayRecipient,\\nERC20Upgradeable,\\nOwnableUpgradeable,\\nPausableUpgradeable,\\nReentrancyGuardUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    modifier onlyProtocol {\\n        bool isProtocol = false;\\n        for (uint256 i = 0; i < protocols.length; i++) {\\n            if (_msgSender() == protocols[i]) {\\n                isProtocol = true;\\n                break;\\n            }\\n        }\\n        require(isProtocol, \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n\\n    /************************** STATE **************************/\\n\\n    address public reserved1;\\n\\n    // base asset for vault - much is denominated in this\\n    address public baseAsset;\\n\\n    // address of contract that collects and distributes fees\\n    address public feeDistributor;\\n\\n    // assets supported by vault\\n    mapping(address => Asset) internal assets;\\n    address[] internal allAssets;\\n\\n    // list of approved protocols that can perform payments\\n    address[] public protocols;\\n\\n    // require deposit of at least this amount denominated in the baseAsset\\n    uint256 public minDeposit;\\n\\n    // revert if price feed age is older than this number of seconds. set to 0 to disable check.\\n    uint256 public maxPriceFeedAge;\\n\\n    // consumer funding profile\\n    mapping(address => FundingProfile) internal fundingProfiles;\\n\\n    // CELO SPECIFIC:\\n    // type of oracle to use for price conversions\\n    PriceFeedType public priceFeedType;\\n    mapping(address => string) public bandAssetSymbol;\\n\\n\\n    function initialize(\\n        address _baseAsset,\\n        address _baseAssetPriceFeed,\\n        PriceFeedType _priceFeedType,\\n        address _feeDistributor\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n        __ERC20_init(\\\"Cask Vault Tokens\\\",\\\"MASH\\\");\\n\\n        require(IERC20Metadata(_baseAsset).decimals() > 0, \\\"!INVALID(baseAsset)\\\");\\n        if (_priceFeedType == PriceFeedType.Chainlink) {\\n            require(AggregatorV3Interface(_baseAssetPriceFeed).decimals() > 0, \\\"!INVALID(baseAssetPriceFeed)\\\");\\n        } else if (_priceFeedType == PriceFeedType.Band) {\\n            // noop\\n        } else {\\n            revert(\\\"unknown price feed type\\\");\\n        }\\n        require(_feeDistributor != address(0), \\\"!INVALID(feeDistributor)\\\");\\n\\n        Asset storage asset = assets[_baseAsset];\\n        asset.priceFeed = _baseAssetPriceFeed;\\n        asset.assetDecimals = IERC20Metadata(_baseAsset).decimals();\\n        if (_priceFeedType == PriceFeedType.Chainlink) {\\n            asset.priceFeedDecimals = AggregatorV3Interface(_baseAssetPriceFeed).decimals();\\n        } else if (_priceFeedType == PriceFeedType.Band) {\\n            asset.priceFeedDecimals = 18; // band prices are always in 1e18\\n        } else {\\n            revert(\\\"unknown price feed type\\\");\\n        }\\n\\n        asset.depositLimit = type(uint256).max;\\n        asset.slippageBps = 0;\\n        asset.allowed = true;\\n        allAssets.push(_baseAsset);\\n\\n        baseAsset = _baseAsset;\\n        priceFeedType = _priceFeedType;\\n        feeDistributor = _feeDistributor;\\n        minDeposit = 0;\\n        maxPriceFeedAge = 0;\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function decimals() public view override(ERC20Upgradeable, IERC20MetadataUpgradeable) returns (uint8) {\\n        return IERC20Metadata(baseAsset).decimals();\\n    }\\n\\n    function versionRecipient() public pure override returns(string memory) { return \\\"2.2.0\\\"; }\\n\\n    function _msgSender() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (address sender) {\\n        sender = BaseRelayRecipient._msgSender();\\n    }\\n\\n    function _msgData() internal view override(ContextUpgradeable, BaseRelayRecipient)\\n    returns (bytes calldata) {\\n        return BaseRelayRecipient._msgData();\\n    }\\n\\n\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _protocolFee,\\n        address _network,\\n        uint256 _networkFee\\n    ) external override nonReentrant onlyProtocol whenNotPaused {\\n        _protocolPayment(_from, _to, _value, _protocolFee, _network, _networkFee);\\n    }\\n\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _protocolFee\\n    ) external override nonReentrant onlyProtocol whenNotPaused {\\n        _protocolPayment(_from, _to, _value, _protocolFee, address(0), 0);\\n    }\\n\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external override nonReentrant onlyProtocol whenNotPaused {\\n        _protocolPayment(_from, _to, _value, 0, address(0), 0);\\n    }\\n\\n    function _protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _protocolFee,\\n        address _network,\\n        uint256 _networkFee\\n    ) internal {\\n        require(_value > _protocolFee + _networkFee, \\\"!VALUE_TOO_LOW\\\");\\n\\n        FundingProfile memory profile = fundingProfiles[_from];\\n\\n        if (profile.fundingSource == FundingSource.Personal) {\\n            uint256 assetAmount = _value;\\n            if (profile.fundingAsset != baseAsset) {\\n                Asset storage asset = assets[profile.fundingAsset];\\n                require(asset.allowed, \\\"!NOT_ALLOWED(fundingAsset)\\\");\\n\\n                // convert to equivalent amount in specified asset and add slippage\\n                assetAmount = _convertPrice(baseAsset, profile.fundingAsset, _value);\\n\\n                if (asset.slippageBps > 0) {\\n                    // the +1 is to fix underfunding due to decimal drops when the\\n                    // slippage is removed in the deposit\\n                    assetAmount = (assetAmount * 10000 / (10000 - asset.slippageBps)) + 1;\\n                }\\n            }\\n            _depositTo(_from, _from, profile.fundingAsset, assetAmount);\\n        } else {\\n            require(profile.fundingSource == FundingSource.Cask, \\\"!INVALID(fundingSource)\\\");\\n        }\\n        uint256 shares = _sharesForValue(_value);\\n\\n        uint256 protocolFeeShares = 0;\\n        if (_protocolFee > 0) {\\n            protocolFeeShares = _sharesForValue(_protocolFee);\\n        }\\n\\n        uint256 networkFeeShares = 0;\\n        if (_networkFee > 0 && _network != address(0)) {\\n            networkFeeShares = _sharesForValue(_networkFee);\\n        }\\n\\n        _transfer(_from, _to, shares); // payment from consumer to provider\\n\\n        if (protocolFeeShares > 0) {\\n            _transfer(_to, feeDistributor, protocolFeeShares); // take back fee from provider to fee distributor\\n        }\\n        if (networkFeeShares > 0) {\\n            _transfer(_to, _network, networkFeeShares); // take network fee from provider to network\\n        }\\n\\n        emit Payment(_from, _to, _value, shares, _protocolFee, protocolFeeShares, _network,\\n            _networkFee, networkFeeShares);\\n    }\\n\\n    function transferValue(\\n        address _recipient,\\n        uint256 _value\\n    ) external override nonReentrant whenNotPaused returns (bool) {\\n        uint256 amount = _sharesForValue(_value);\\n        _transfer(_msgSender(), _recipient, amount);\\n        emit TransferValue(_msgSender(), _recipient, _value, amount);\\n        return true;\\n    }\\n\\n    function transferValueFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _value\\n    ) external override nonReentrant whenNotPaused returns (bool) {\\n        uint256 amount = _sharesForValue(_value);\\n        _transfer(_sender, _recipient, amount);\\n\\n        uint256 currentAllowance = allowance(_sender, _msgSender());\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(_sender, _msgSender(), currentAllowance - amount);\\n        }\\n        emit TransferValue(_sender, _recipient, _value, amount);\\n        return true;\\n    }\\n\\n    function deposit(\\n        address _asset,\\n        uint256 _assetAmount\\n    ) external override nonReentrant whenNotPaused {\\n        _depositTo(_msgSender(), _msgSender(), _asset, _assetAmount);\\n    }\\n\\n    function depositTo(\\n        address _to,\\n        address _asset,\\n        uint256 _assetAmount\\n    ) external override nonReentrant whenNotPaused {\\n        _depositTo(_msgSender(), _to, _asset, _assetAmount);\\n    }\\n\\n    function _depositTo(\\n        address _assetFrom,\\n        address _sharesTo,\\n        address _asset,\\n        uint256 _assetAmount\\n    ) internal {\\n        require(assets[_asset].allowed, \\\"!NOT_ALLOWED(asset)\\\");\\n        require(_assetAmount > 0, \\\"!INVALID(assetAmount)\\\");\\n        require(_totalAssetBalance(_asset) + _assetAmount <= assets[_asset].depositLimit, \\\"!DEPOSIT_LIMIT(asset)\\\");\\n\\n        uint256 baseAssetAmount = _assetAmount;\\n        if (_asset != baseAsset) {\\n            Asset storage asset = assets[_asset];\\n\\n            // subtract slippage bps from deposited amount\\n            uint256 slippage = (_assetAmount * asset.slippageBps) / 10000;\\n\\n            baseAssetAmount = _convertPrice(_asset, baseAsset, (_assetAmount - slippage));\\n        }\\n\\n        require(baseAssetAmount >= minDeposit, \\\"!MIN_DEPOSIT\\\");\\n\\n        // calculate shares before transferring new asset into vault\\n        uint256 shares = baseAssetAmount;\\n        if (totalSupply() > 0) {\\n            // use round up integer division so that deposits are not short changed\\n            shares = ((baseAssetAmount * totalSupply()) - 1) / _totalValue() + 1;\\n        }\\n\\n        IERC20(_asset).safeTransferFrom(_assetFrom, address(this), _assetAmount);\\n\\n        _mint(_sharesTo, shares);\\n\\n        emit AssetDeposited(_sharesTo, _asset, _assetAmount, baseAssetAmount, shares);\\n    }\\n\\n    function withdraw(\\n        address _asset,\\n        uint256 _shares\\n    ) external override nonReentrant whenNotPaused {\\n        _withdrawTo(_msgSender(), _asset, _shares);\\n    }\\n\\n    function withdrawTo(\\n        address _recipient,\\n        address _asset,\\n        uint256 _shares\\n    ) external override nonReentrant whenNotPaused {\\n        _withdrawTo(_recipient, _asset, _shares);\\n    }\\n\\n    function _withdrawTo(\\n        address _recipient,\\n        address _asset,\\n        uint256 _shares\\n    ) internal {\\n        require(assets[_asset].allowed, \\\"!NOT_ALLOWED(asset)\\\");\\n        require(_shares > 0, \\\"!INVALID(sharesAmount)\\\");\\n\\n        // calculate amount before supply adjustment\\n        uint256 baseAmount = _shareValue(_shares);\\n\\n        _burn(_msgSender(), _shares);\\n\\n        uint256 assetAmount = baseAmount;\\n        if (_asset != baseAsset) {\\n            Asset storage asset = assets[_asset];\\n\\n            assetAmount = _convertPrice(baseAsset, _asset, baseAmount);\\n\\n            // subtract slippage bps from withdrawing amount\\n            uint256 slippage = (assetAmount * asset.slippageBps) / 10000;\\n            assetAmount = assetAmount - slippage;\\n        }\\n\\n        // transfer requested stablecoin to _recipient\\n        IERC20(_asset).safeTransfer(_recipient, assetAmount);\\n\\n        emit AssetWithdrawn(_recipient, _asset, assetAmount, baseAmount, _shares);\\n    }\\n\\n    function currentValueOf(\\n        address _address\\n    ) external override view returns(uint256) {\\n        return _shareValue(balanceOf(_address));\\n    }\\n\\n    function pricePerShare() external override view returns(uint256) {\\n        return _shareValue(10 ** assets[baseAsset].assetDecimals);\\n    }\\n\\n\\n    /************************** FUNDING SOURCE FUNCTIONS **************************/\\n\\n    function fundingSource(\\n        address _address\\n    ) external view override returns(FundingProfile memory) {\\n        return fundingProfiles[_address];\\n    }\\n\\n    function setFundingSource(\\n        FundingSource _fundingSource,\\n        address _fundingAsset\\n    ) external override {\\n        require(assets[_fundingAsset].allowed, \\\"!ASSET_NOT_ALLOWED\\\");\\n\\n        FundingProfile storage profile = fundingProfiles[_msgSender()];\\n\\n        profile.fundingSource = _fundingSource;\\n        profile.fundingAsset = _fundingAsset;\\n\\n        emit SetFundingSource(_msgSender(), _fundingSource, _fundingAsset);\\n    }\\n\\n    /************************** SHARES FUNCTIONS **************************/\\n\\n    function sharesForValue(\\n        uint256 _value\\n    ) external override view returns(uint256) {\\n        return _sharesForValue(_value);\\n    }\\n\\n    function _sharesForValue(\\n        uint256 _value\\n    ) internal view returns(uint256) {\\n        if (totalSupply() > 0) {\\n            return (_value * totalSupply()) / _totalValue();\\n        } else {\\n            return _value;\\n        }\\n    }\\n\\n    function _shareValue(\\n        uint256 _shares\\n    ) internal view returns(uint256) {\\n        if (totalSupply() == 0) {\\n            return _shares;\\n        }\\n        return (_totalValue() * _shares) / totalSupply();\\n    }\\n\\n    function totalValue() external override view returns(uint256) {\\n        return _totalValue();\\n    }\\n    function _totalValue() internal view returns(uint256) {\\n        uint256 total = 0;\\n\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            if (allAssets[i] == baseAsset) {\\n                total = total + _totalAssetBalance(baseAsset);\\n            } else {\\n                total = total + _convertPrice(allAssets[i], baseAsset, _totalAssetBalance(allAssets[i]));\\n            }\\n        }\\n\\n        return total;\\n    }\\n\\n    function totalAssetBalance(\\n        address _asset\\n    ) external override view returns(uint256) {\\n        return _totalAssetBalance(_asset);\\n    }\\n    function _totalAssetBalance(\\n        address _asset\\n    ) internal view returns(uint256) {\\n        return IERC20(_asset).balanceOf(address(this));\\n    }\\n\\n\\n    /************************** ADMIN FUNCTIONS **************************/\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function addProtocol(\\n        address _protocol\\n    ) external onlyOwner {\\n        protocols.push(_protocol);\\n        emit AddProtocol(_protocol);\\n    }\\n\\n    function removeProtocol(\\n        address _protocol\\n    ) external onlyOwner {\\n        uint256 idx = protocols.length;\\n        for (uint256 i = 0; i < protocols.length; i++) {\\n            if (protocols[i] == _protocol) {\\n                idx = i;\\n                break;\\n            }\\n        }\\n        if (idx < protocols.length) {\\n            protocols[idx] = protocols[protocols.length - 1];\\n            protocols.pop();\\n        }\\n        emit RemoveProtocol(_protocol);\\n    }\\n\\n    function protocolCount() external view returns(uint256) {\\n        return protocols.length;\\n    }\\n\\n    function setPriceFeedType(\\n        PriceFeedType _priceFeedType\\n    ) external onlyOwner {\\n        priceFeedType = _priceFeedType;\\n        emit SetPriceFeedType(_priceFeedType);\\n    }\\n\\n    function setFeeDistributor(\\n        address _feeDistributor\\n    ) external onlyOwner {\\n        feeDistributor = _feeDistributor;\\n        emit SetFeeDistributor(_feeDistributor);\\n    }\\n\\n    function setMinDeposit(\\n        uint256 _minDeposit\\n    ) external onlyOwner {\\n        minDeposit = _minDeposit;\\n        emit SetMinDeposit(_minDeposit);\\n    }\\n\\n    function setMaxPriceFeedAge(\\n        uint256 _maxPriceFeedAge\\n    ) external onlyOwner {\\n        maxPriceFeedAge = _maxPriceFeedAge;\\n        emit SetMaxPriceFeedAge(_maxPriceFeedAge);\\n    }\\n\\n    function setTrustedForwarder(\\n        address _forwarder\\n    ) external onlyOwner {\\n        _setTrustedForwarder(_forwarder);\\n        emit SetTrustedForwarder(_forwarder);\\n    }\\n\\n\\n    /************************** ASSET FUNCTIONS **************************/\\n\\n    function getBaseAsset() external view override returns(address) {\\n        return baseAsset;\\n    }\\n\\n    function getAllAssets() external view override returns(address[] memory) {\\n        return allAssets;\\n    }\\n\\n    function getAsset(\\n        address _asset\\n    ) external view override returns(Asset memory) {\\n        return assets[_asset];\\n    }\\n\\n    function supportsAsset(\\n        address _asset\\n    ) external view override returns (bool) {\\n        return assets[_asset].allowed;\\n    }\\n\\n    function allowAsset(\\n        address _asset,\\n        address _priceFeed,\\n        uint256 _depositLimit,\\n        uint256 _slippageBps\\n    ) external onlyOwner {\\n        require(IERC20Metadata(_asset).decimals() > 0, \\\"!INVALID(asset)\\\");\\n\\n        Asset storage asset = assets[_asset];\\n\\n        // add to allAsset list just the first time\\n        if (asset.assetDecimals == 0) {\\n            allAssets.push(_asset);\\n        }\\n\\n        asset.allowed = true;\\n        asset.priceFeed = _priceFeed;\\n        asset.depositLimit = _depositLimit;\\n        asset.slippageBps = _slippageBps;\\n        asset.assetDecimals = IERC20Metadata(_asset).decimals();\\n        if (priceFeedType == PriceFeedType.Chainlink) {\\n            asset.priceFeedDecimals = AggregatorV3Interface(_priceFeed).decimals();\\n        } else if (priceFeedType == PriceFeedType.Band) {\\n            asset.priceFeedDecimals = 18; // band prices are always in 1e18\\n        }\\n\\n        emit AllowedAsset(_asset);\\n    }\\n\\n    function disallowAsset(\\n        address _asset\\n    ) external onlyOwner {\\n        require(assets[_asset].allowed, \\\"!ASSET_NOT_ALLOWED\\\");\\n\\n        assets[_asset].allowed = false;\\n\\n        emit DisallowedAsset(_asset);\\n    }\\n\\n    function setBandAssetSymbol(\\n        address _asset,\\n        string calldata _symbol\\n    ) external onlyOwner {\\n        require(assets[_asset].allowed, \\\"!ASSET_NOT_ALLOWED\\\");\\n\\n        bandAssetSymbol[_asset] = _symbol;\\n    }\\n\\n    function convertPrice(\\n        address _fromAsset,\\n        address _toAsset,\\n        uint256 _fromAmount\\n    ) external view returns(uint256) {\\n        return _convertPrice(_fromAsset, _toAsset, _fromAmount);\\n    }\\n\\n    function _convertPrice(\\n        address _fromAsset,\\n        address _toAsset,\\n        uint256 _fromAmount\\n    ) internal view returns(uint256) {\\n        require(_fromAsset != _toAsset, \\\"!SAME_ASSET\\\");\\n        if (priceFeedType == PriceFeedType.Chainlink) {\\n            return _convertPriceChainlink(_fromAsset, _toAsset, _fromAmount);\\n        } else if (priceFeedType == PriceFeedType.Band) {\\n            return _convertPriceBand(_fromAsset, _toAsset, _fromAmount);\\n        } else {\\n            revert(\\\"unknown price feed types\\\");\\n        }\\n    }\\n\\n    function _assetSymbol(\\n        address _asset\\n    ) internal view returns(string memory) {\\n        if (bytes(bandAssetSymbol[_asset]).length > 0) {\\n            return bandAssetSymbol[_asset];\\n        } else {\\n            return IERC20Metadata(_asset).symbol();\\n        }\\n    }\\n\\n    function _convertPriceBand(\\n        address _fromAsset,\\n        address _toAsset,\\n        uint256 _fromAmount\\n    ) internal view returns(uint256) {\\n        IStdReference.ReferenceData memory result = IStdReference(assets[_fromAsset].priceFeed).getReferenceData(\\n            _assetSymbol(_fromAsset),\\n            _assetSymbol(_toAsset));\\n\\n        require(maxPriceFeedAge == 0 || block.timestamp - result.lastUpdatedBase <= maxPriceFeedAge, \\\"!PRICE_OUTDATED\\\");\\n        require(maxPriceFeedAge == 0 || block.timestamp - result.lastUpdatedQuote <= maxPriceFeedAge, \\\"!PRICE_OUTDATED\\\");\\n\\n        return _scalePrice(_fromAmount *\\n                _scalePrice(result.rate, assets[_fromAsset].priceFeedDecimals, assets[_fromAsset].assetDecimals),\\n            assets[_fromAsset].assetDecimals * 2,\\n            assets[_toAsset].assetDecimals);\\n    }\\n\\n    function _convertPriceChainlink(\\n        address _fromAsset,\\n        address _toAsset,\\n        uint256 _fromAmount\\n    ) internal view returns(uint256) {\\n        require(assets[_fromAsset].priceFeed != address(0), \\\"!INVALID(fromAsset)\\\");\\n        require(assets[_toAsset].priceFeed != address(0), \\\"!NOT_ALLOWED(toAsset)\\\");\\n\\n        if (_fromAmount == 0) {\\n            return 0;\\n        }\\n\\n        int256 oraclePrice;\\n        uint256 updatedAt;\\n\\n        ( , oraclePrice, , updatedAt, ) = AggregatorV3Interface(assets[_fromAsset].priceFeed).latestRoundData();\\n        uint256 fromOraclePrice = uint256(oraclePrice);\\n        require(maxPriceFeedAge == 0 || block.timestamp - updatedAt <= maxPriceFeedAge, \\\"!PRICE_OUTDATED\\\");\\n        ( , oraclePrice, , updatedAt, ) = AggregatorV3Interface(assets[_toAsset].priceFeed).latestRoundData();\\n        uint256 toOraclePrice = uint256(oraclePrice);\\n        require(maxPriceFeedAge == 0 || block.timestamp - updatedAt <= maxPriceFeedAge, \\\"!PRICE_OUTDATED\\\");\\n\\n        if (assets[_fromAsset].priceFeedDecimals != assets[_toAsset].priceFeedDecimals) {\\n            // since oracle precision is different, scale everything\\n            // to _toAsset precision and do conversion\\n            return _scalePrice(_fromAmount, assets[_fromAsset].assetDecimals, assets[_toAsset].assetDecimals) *\\n                    _scalePrice(fromOraclePrice, assets[_fromAsset].priceFeedDecimals, assets[_toAsset].assetDecimals) /\\n                    _scalePrice(toOraclePrice, assets[_toAsset].priceFeedDecimals, assets[_toAsset].assetDecimals);\\n        } else {\\n            // oracles are already in same precision, so just scale _amount to asset precision,\\n            // and multiply by the price feed ratio\\n            return _scalePrice(_fromAmount, assets[_fromAsset].assetDecimals, assets[_toAsset].assetDecimals) *\\n                fromOraclePrice / toOraclePrice;\\n        }\\n    }\\n\\n    function _scalePrice(\\n        uint256 _price,\\n        uint8 _priceDecimals,\\n        uint8 _decimals\\n    ) internal pure returns (uint256){\\n        if (_priceDecimals < _decimals) {\\n            return _price * uint256(10 ** uint256(_decimals - _priceDecimals));\\n        } else if (_priceDecimals > _decimals) {\\n            return _price / uint256(10 ** uint256(_priceDecimals - _decimals));\\n        }\\n        return _price;\\n    }\\n\\n}\",\"keccak256\":\"0x42bf11f9586871ca709db6e8be4f20a72baf40e9d3a70a913a72b8f229cd44d5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b6200279b1760201c565b15905090565b3b151590565b614f6580620001126000396000f3fe608060405234801561001057600080fd5b50600436106103af5760003560e01c806379b2125f116101f4578063ccfc2e8d1161011a578063e300eec7116100ad578063f3fef3a31161007c578063f3fef3a31461094e578063fc58d77114610961578063fcd6a25b14610974578063ffea632b1461098757600080fd5b8063e300eec714610902578063e4db8f6414610915578063f213159c14610928578063f2fde38b1461093b57600080fd5b8063da742228116100e9578063da7422281461089a578063dd62ed3e146108ad578063e1ded2de146108e6578063e2eed04f146108f957600080fd5b8063ccfc2e8d14610859578063cdf456e11461086c578063d4c3eea01461087f578063d73f730b1461088757600080fd5b80638fcc9cfb11610192578063a9059cbb11610161578063a9059cbb146107ea578063aa388af6146107fd578063aaac831f14610833578063c3b35a7e1461084657600080fd5b80638fcc9cfb146107b457806395d89b41146107c757806399530b06146107cf578063a457c2d7146107d757600080fd5b80638c396220116101ce5780638c3962201461076c5780638d3a4af61461077f5780638da5cb5b146107905780638e3e580d146107a157600080fd5b806379b2125f146107405780637da0a877146107535780638456cb591461076457600080fd5b80633fd0875f116102d9578063597435cb1161027757806370a082311161024657806370a08231146106e9578063715018a614610712578063757d6e1c1461071a578063771d4c281461072d57600080fd5b8063597435cb146106985780635979d7b8146106ab5780635a4161ff146106cb5780635c975abb146106de57600080fd5b8063486ff0cd116102b3578063486ff0cd1461062f5780634bb846e1146106505780635517575d14610663578063572b6c051461067657600080fd5b80633fd0875f146105f757806341b3d1851461061257806347e7ef241461061c57600080fd5b80631e377d391161035157806330b8b2c61161032057806330b8b2c6146104b6578063313ce567146105c257806339509351146105dc5780633f4ba83a146105ef57600080fd5b80631e377d39146104685780632298d8491461047b57806323b872dd1461048e5780632acada4d146104a157600080fd5b8063095ea7b31161038d578063095ea7b31461040d5780630d43e8ad1461042057806318160ddd1461044b57806318ff57681461045357600080fd5b806306fdde03146103b45780630816c847146103d257806308751b18146103ea575b600080fd5b6103bc61099a565b6040516103c99190614592565b60405180910390f35b6103dc6101035481565b6040519081526020016103c9565b6103fd6103f83660046145bc565b610a2c565b60405190151581526020016103c9565b6103fd61041b3660046145f8565b610b46565b60fe54610433906001600160a01b031681565b6040516001600160a01b0390911681526020016103c9565b6036546103dc565b610466610461366004614622565b610b64565b005b61046661047636600461463d565b610d07565b610466610489366004614622565b61105b565b6103fd61049c3660046145bc565b611134565b6104a96111c6565b6040516103c9919061467f565b6105666104c4366004614622565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506001600160a01b03908116600090815260ff6020818152604092839020835160c08101855281549095168552600181015491850191909152600281015492840192909252600390910154808216606084015261010081048216608084015262010000900416151560a082015290565b6040516103c99190600060c08201905060018060a01b038351168252602083015160208301526040830151604083015260ff606084015116606083015260ff608084015116608083015260a0830151151560a083015292915050565b6105ca611228565b60405160ff90911681526020016103c9565b6103fd6105ea3660046145f8565b6112aa565b6104666112fe565b610105546106059060ff1681565b6040516103c99190614700565b6103dc6101025481565b61046661062a3660046145f8565b611351565b6040805180820190915260058152640322e322e360dc1b60208201526103bc565b6103dc61065e3660046145bc565b6113bf565b6103dc610671366004614622565b6113d4565b6103fd610684366004614622565b6033546001600160a01b0391821691161490565b6103dc6106a6366004614622565b6113df565b6106be6106b9366004614622565b611406565b6040516103c99190614713565b6103fd6106d93660046145f8565b611484565b60985460ff166103fd565b6103dc6106f7366004614622565b6001600160a01b031660009081526034602052604090205490565b61046661155d565b61046661072836600461474c565b6115b0565b61046661073b366004614622565b611657565b61046661074e366004614769565b611719565b6033546001600160a01b0316610433565b610466611808565b61043361077a3660046147c8565b611859565b60fd546001600160a01b0316610433565b6066546001600160a01b0316610433565b6104666107af3660046145bc565b611884565b6104666107c23660046147c8565b611972565b6103bc6119f1565b6103dc611a00565b6103fd6107e53660046145f8565b611a30565b6103fd6107f83660046145f8565b611ae7565b6103fd61080b366004614622565b6001600160a01b0316600090815260ff60208190526040909120600301546201000090041690565b60fc54610433906001600160a01b031681565b6104666108543660046145bc565b611afb565b610466610867366004614622565b611b5b565b60fd54610433906001600160a01b031681565b6103dc611bee565b6104666108953660046147e1565b611bf8565b6104666108a8366004614622565b611cf4565b6103dc6108bb366004614816565b6001600160a01b03918216600090815260356020908152604080832093909416825291909152205490565b6103dc6108f43660046147c8565b611d8f565b610101546103dc565b6104666109103660046147c8565b611d9a565b610466610923366004614832565b611e19565b6104666109363660046145bc565b611ece565b610466610949366004614622565b611f2c565b61046661095c3660046145f8565b611fe6565b6103bc61096f366004614622565b612043565b61046661098236600461463d565b6120de565b6104666109953660046148b5565b6121cc565b6060603780546109a99061490b565b80601f01602080910402602001604051908101604052809291908181526020018280546109d59061490b565b8015610a225780601f106109f757610100808354040283529160200191610a22565b820191906000526020600020905b815481529060010190602001808311610a0557829003601f168201915b5050505050905090565b6000600260ca541415610a5a5760405162461bcd60e51b8152600401610a5190614940565b60405180910390fd5b600260ca5560985460ff1615610a825760405162461bcd60e51b8152600401610a5190614977565b6000610a8d836127a1565b9050610a9a8585836127db565b6000610aa8866108bb6129a9565b905081811015610aca5760405162461bcd60e51b8152600401610a51906149a1565b610ade86610ad66129a9565b8484036129b3565b846001600160a01b0316866001600160a01b03167fc8cf4e5d87b5b4ffb59d20991b0840a27d2227ee272dae54bacf0f4b4184bf778685604051610b2c929190918252602082015260400190565b60405180910390a3600192505050600160ca559392505050565b6000610b5a610b536129a9565b84846129b3565b5060015b92915050565b610b6c6129a9565b6001600160a01b0316610b876066546001600160a01b031690565b6001600160a01b031614610bad5760405162461bcd60e51b8152600401610a51906149e9565b6101015460005b61010154811015610c1257826001600160a01b03166101018281548110610bdd57610bdd614a1e565b6000918252602090912001546001600160a01b03161415610c0057809150610c12565b80610c0a81614a4a565b915050610bb4565b5061010154811015610ccf576101018054610c2f90600190614a65565b81548110610c3f57610c3f614a1e565b60009182526020909120015461010180546001600160a01b039092169183908110610c6c57610c6c614a1e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610101805480610cac57610cac614a7c565b600082815260209020810160001990810180546001600160a01b03191690550190555b6040516001600160a01b038316907fb0e13246ae39a13158fc894c77b848e06901f1440d7cc8aaad18f0a0e1566b3890600090a25050565b610d0f6129a9565b6001600160a01b0316610d2a6066546001600160a01b031690565b6001600160a01b031614610d505760405162461bcd60e51b8152600401610a51906149e9565b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8b57600080fd5b505afa158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc39190614a92565b60ff1611610e055760405162461bcd60e51b815260206004820152600f60248201526e21494e56414c49442861737365742960881b6044820152606401610a51565b6001600160a01b038416600090815260ff602081905260409091206003810154909116610e795761010080546001810182556000919091527f45e010b9ae401e2eb71529478da8bd513a9bdc2d095a111e324f5b95c09ed87b0180546001600160a01b0319166001600160a01b0387161790555b60038101805462ff000019166201000017905580546001600160a01b038086166001600160a01b031990921691909117825560028201849055600182018390556040805163313ce56760e01b815290519187169163313ce56791600480820192602092909190829003018186803b158015610ef357600080fd5b505afa158015610f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2b9190614a92565b60038201805460ff191660ff92831617905561010554600091166001811115610f5657610f566146cc565b1415610fee57836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9557600080fd5b505afa158015610fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcd9190614a92565b8160030160016101000a81548160ff021916908360ff160217905550611020565b60016101055460ff166001811115611008576110086146cc565b14156110205760038101805461ff0019166112001790555b6040516001600160a01b038616907f06a94869c30cb7089f57f8d4a5ff251ac74a8c2bc361e7f91bda209898de8ead90600090a25050505050565b6110636129a9565b6001600160a01b031661107e6066546001600160a01b031690565b6001600160a01b0316146110a45760405162461bcd60e51b8152600401610a51906149e9565b6001600160a01b038116600090815260ff6020819052604090912060030154620100009004166110e65760405162461bcd60e51b8152600401610a5190614ab5565b6001600160a01b038116600081815260ff6020526040808220600301805462ff000019169055517f0a8090b3b8835c60a03ebb0cc69833b4359a1924917dbc2e80bb4516428da0a39190a250565b60006111418484846127db565b6001600160a01b0384166000908152603560205260408120816111626129a9565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156111a55760405162461bcd60e51b8152600401610a51906149a1565b6111b9856111b16129a9565b8584036129b3565b60019150505b9392505050565b6060610100805480602002602001604051908101604052809291908181526020018280548015610a2257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611201575050505050905090565b60fd546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561126d57600080fd5b505afa158015611281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a59190614a92565b905090565b6000610b5a6112b76129a9565b8484603560006112c56129a9565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546112f99190614ae1565b6129b3565b6113066129a9565b6001600160a01b03166113216066546001600160a01b031690565b6001600160a01b0316146113475760405162461bcd60e51b8152600401610a51906149e9565b61134f612ad7565b565b600260ca5414156113745760405162461bcd60e51b8152600401610a5190614940565b600260ca5560985460ff161561139c5760405162461bcd60e51b8152600401610a5190614977565b6113b66113a76129a9565b6113af6129a9565b8484612b70565b5050600160ca55565b60006113cc848484612e19565b949350505050565b6000610b5e82612f10565b6001600160a01b038116600090815260346020526040812054610b5e90612f8a565b612f8a565b60408051808201909152600080825260208201526001600160a01b038216600090815261010460205260409081902081518083019092528054829060ff166001811115611455576114556146cc565b6001811115611466576114666146cc565b8152905461010090046001600160a01b031660209091015292915050565b6000600260ca5414156114a95760405162461bcd60e51b8152600401610a5190614940565b600260ca5560985460ff16156114d15760405162461bcd60e51b8152600401610a5190614977565b60006114dc836127a1565b90506114f06114e96129a9565b85836127db565b836001600160a01b03166115026129a9565b6001600160a01b03167fc8cf4e5d87b5b4ffb59d20991b0840a27d2227ee272dae54bacf0f4b4184bf778584604051611545929190918252602082015260400190565b60405180910390a36001915050600160ca5592915050565b6115656129a9565b6001600160a01b03166115806066546001600160a01b031690565b6001600160a01b0316146115a65760405162461bcd60e51b8152600401610a51906149e9565b61134f6000612fb3565b6115b86129a9565b6001600160a01b03166115d36066546001600160a01b031690565b6001600160a01b0316146115f95760405162461bcd60e51b8152600401610a51906149e9565b610105805482919060ff191660018381811115611618576116186146cc565b02179055507fed7687310bc5f6a8e2d59841d2a610ced3906f81feb59737361c00aeb79dd6ea8160405161164c9190614700565b60405180910390a150565b61165f6129a9565b6001600160a01b031661167a6066546001600160a01b031690565b6001600160a01b0316146116a05760405162461bcd60e51b8152600401610a51906149e9565b610101805460018101825560009182527f109ea3cebb188b9c1b9fc5bb3920be60dfdc8699098dff92f3d80daaca7476890180546001600160a01b0319166001600160a01b03841690811790915560405190917f713b660c92a559fe6eecdbf5d129bf8e30d527db74b47b6dc5eeb65c7893f1e591a250565b600260ca54141561173c5760405162461bcd60e51b8152600401610a5190614940565b600260ca556000805b610101548110156117ab57610101818154811061176457611764614a1e565b6000918252602090912001546001600160a01b03166117816129a9565b6001600160a01b0316141561179957600191506117ab565b806117a381614a4a565b915050611745565b50806117c95760405162461bcd60e51b8152600401610a5190614af9565b60985460ff16156117ec5760405162461bcd60e51b8152600401610a5190614977565b6117fa878787878787613005565b5050600160ca555050505050565b6118106129a9565b6001600160a01b031661182b6066546001600160a01b031690565b6001600160a01b0316146118515760405162461bcd60e51b8152600401610a51906149e9565b61134f613335565b610101818154811061186a57600080fd5b6000918252602090912001546001600160a01b0316905081565b600260ca5414156118a75760405162461bcd60e51b8152600401610a5190614940565b600260ca556000805b610101548110156119165761010181815481106118cf576118cf614a1e565b6000918252602090912001546001600160a01b03166118ec6129a9565b6001600160a01b031614156119045760019150611916565b8061190e81614a4a565b9150506118b0565b50806119345760405162461bcd60e51b8152600401610a5190614af9565b60985460ff16156119575760405162461bcd60e51b8152600401610a5190614977565b6119678484846000806000613005565b5050600160ca555050565b61197a6129a9565b6001600160a01b03166119956066546001600160a01b031690565b6001600160a01b0316146119bb5760405162461bcd60e51b8152600401610a51906149e9565b6101028190556040518181527f8335b9d95c5f85895bf6ed3f9d159211b514ab77f7e20509e553c657cfa39b4e9060200161164c565b6060603880546109a99061490b565b60fd546001600160a01b0316600090815260ff602081905260408220600301546112a5916114019116600a614bfc565b60008060356000611a3f6129a9565b6001600160a01b0390811682526020808301939093526040918201600090812091881681529252902054905082811015611ac95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a51565b611add611ad46129a9565b858584036129b3565b5060019392505050565b6000610b5a611af46129a9565b84846127db565b600260ca541415611b1e5760405162461bcd60e51b8152600401610a5190614940565b600260ca5560985460ff1615611b465760405162461bcd60e51b8152600401610a5190614977565b611b5183838361338e565b5050600160ca5550565b611b636129a9565b6001600160a01b0316611b7e6066546001600160a01b031690565b6001600160a01b031614611ba45760405162461bcd60e51b8152600401610a51906149e9565b60fe80546001600160a01b0319166001600160a01b0383169081179091556040517f9e9a9a4a82acd1b28aab6bf1d43aad70ae6d290549c0d6183e2e91ebcdf5744190600090a250565b60006112a561353c565b6001600160a01b038116600090815260ff602081905260409091206003015462010000900416611c3a5760405162461bcd60e51b8152600401610a5190614ab5565b60006101046000611c496129a9565b6001600160a01b03168152602081019190915260400160002080549091508390829060ff191660018381811115611c8257611c826146cc565b02179055508054610100600160a81b0319166101006001600160a01b03841602178155611cad6129a9565b6001600160a01b03167f1d97f1da175e9fad2f79856dc3bb2ced51a7a3c6c62c366fa5f909579da4b1608484604051611ce7929190614c0b565b60405180910390a2505050565b611cfc6129a9565b6001600160a01b0316611d176066546001600160a01b031690565b6001600160a01b031614611d3d5760405162461bcd60e51b8152600401610a51906149e9565b603380546001600160a01b0319166001600160a01b0383161790556040516001600160a01b038216907f8c2bee8063bb4464870b7dfa415ebb2fe80bfa73ba20d6fbf0d42791274667ff90600090a250565b6000610b5e826127a1565b611da26129a9565b6001600160a01b0316611dbd6066546001600160a01b031690565b6001600160a01b031614611de35760405162461bcd60e51b8152600401610a51906149e9565b6101038190556040518181527f1fe1f9ede5e74676189934337b4dd60f437c0f524b40a4c18400f040dd592adb9060200161164c565b611e216129a9565b6001600160a01b0316611e3c6066546001600160a01b031690565b6001600160a01b031614611e625760405162461bcd60e51b8152600401610a51906149e9565b6001600160a01b038316600090815260ff602081905260409091206003015462010000900416611ea45760405162461bcd60e51b8152600401610a5190614ab5565b6001600160a01b038316600090815261010660205260409020611ec8908383614431565b50505050565b600260ca541415611ef15760405162461bcd60e51b8152600401610a5190614940565b600260ca5560985460ff1615611f195760405162461bcd60e51b8152600401610a5190614977565b611b51611f246129a9565b848484612b70565b611f346129a9565b6001600160a01b0316611f4f6066546001600160a01b031690565b6001600160a01b031614611f755760405162461bcd60e51b8152600401610a51906149e9565b6001600160a01b038116611fda5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a51565b611fe381612fb3565b50565b600260ca5414156120095760405162461bcd60e51b8152600401610a5190614940565b600260ca5560985460ff16156120315760405162461bcd60e51b8152600401610a5190614977565b6113b661203c6129a9565b838361338e565b610106602052600090815260409020805461205d9061490b565b80601f01602080910402602001604051908101604052809291908181526020018280546120899061490b565b80156120d65780601f106120ab576101008083540402835291602001916120d6565b820191906000526020600020905b8154815290600101906020018083116120b957829003601f168201915b505050505081565b600260ca5414156121015760405162461bcd60e51b8152600401610a5190614940565b600260ca556000805b6101015481101561217057610101818154811061212957612129614a1e565b6000918252602090912001546001600160a01b03166121466129a9565b6001600160a01b0316141561215e5760019150612170565b8061216881614a4a565b91505061210a565b508061218e5760405162461bcd60e51b8152600401610a5190614af9565b60985460ff16156121b15760405162461bcd60e51b8152600401610a5190614977565b6121c085858585600080613005565b5050600160ca55505050565b600054610100900460ff166121e75760005460ff16156121eb565b303b155b61224e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a51565b600054610100900460ff16158015612270576000805461ffff19166101011790555b612278613640565b612280613677565b6122886136ae565b6122d7604051806040016040528060118152602001704361736b205661756c7420546f6b656e7360781b8152506040518060400160405280600481526020016309a82a6960e31b8152506136dd565b6000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561231257600080fd5b505afa158015612326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234a9190614a92565b60ff16116123905760405162461bcd60e51b815260206004820152601360248201527221494e56414c4944286261736541737365742960681b6044820152606401610a51565b60008360018111156123a4576123a46146cc565b1415612472576000846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156123e557600080fd5b505afa1580156123f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241d9190614a92565b60ff161161246d5760405162461bcd60e51b815260206004820152601c60248201527f21494e56414c49442862617365417373657450726963654665656429000000006044820152606401610a51565b6124d9565b6001836001811115612486576124866146cc565b1415612491576124d9565b60405162461bcd60e51b815260206004820152601760248201527f756e6b6e6f776e207072696365206665656420747970650000000000000000006044820152606401610a51565b6001600160a01b03821661252f5760405162461bcd60e51b815260206004820152601860248201527f21494e56414c4944286665654469737472696275746f722900000000000000006044820152606401610a51565b6001600160a01b03858116600081815260ff602090815260409182902080546001600160a01b031916948916949094178455815163313ce56760e01b8152915163313ce567926004808201939291829003018186803b15801561259157600080fd5b505afa1580156125a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c99190614a92565b60038201805460ff191660ff9290921691909117905560008460018111156125f3576125f36146cc565b141561268b57846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561263257600080fd5b505afa158015612646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266a9190614a92565b8160030160016101000a81548160ff021916908360ff1602179055506126b7565b600184600181111561269f5761269f6146cc565b14156124915760038101805461ff0019166112001790555b60001960028201556000600180830182905560038301805462ff00001916620100001790556101008054808301825592527f45e010b9ae401e2eb71529478da8bd513a9bdc2d095a111e324f5b95c09ed87b90910180546001600160a01b0389166001600160a01b0319918216811790925560fd805490911690911790556101058054869260ff1991909116908381811115612755576127556146cc565b02179055505060fe80546001600160a01b0319166001600160a01b0384161790556000610102819055610103558015612794576000805461ff00191690555b5050505050565b3b151590565b6000806127ad60365490565b11156127d2576127bb61353c565b6036546127c89084614c30565b610b5e9190614c4f565b5090565b919050565b6001600160a01b03831661283f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a51565b6001600160a01b0382166128a15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a51565b6001600160a01b038316600090815260346020526040902054818110156129195760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a51565b6001600160a01b03808516600090815260346020526040808220858503905591851681529081208054849290612950908490614ae1565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161299c91815260200190565b60405180910390a3611ec8565b60006112a561371f565b6001600160a01b038316612a155760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a51565b6001600160a01b038216612a765760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a51565b6001600160a01b0383811660008181526035602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60985460ff16612b205760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a51565b6098805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612b536129a9565b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216600090815260ff602081905260409091206003015462010000900416612bd85760405162461bcd60e51b8152602060048201526013602482015272214e4f545f414c4c4f5745442861737365742960681b6044820152606401610a51565b60008111612c205760405162461bcd60e51b815260206004820152601560248201527421494e56414c4944286173736574416d6f756e742960581b6044820152606401610a51565b6001600160a01b038216600090815260ff602052604090206002015481612c4684612f10565b612c509190614ae1565b1115612c965760405162461bcd60e51b8152602060048201526015602482015274214445504f5349545f4c494d49542861737365742960581b6044820152606401610a51565b60fd5481906001600160a01b03848116911614612d0e576001600160a01b038316600090815260ff60205260408120600181015490919061271090612cdb9086614c30565b612ce59190614c4f565b60fd54909150612d099086906001600160a01b0316612d048488614a65565b612e19565b925050505b61010254811015612d505760405162461bcd60e51b815260206004820152600c60248201526b0853525397d1115413d4d25560a21b6044820152606401610a51565b806000612d5c60365490565b1115612da157612d6a61353c565b6001612d7560365490565b612d7f9085614c30565b612d899190614a65565b612d939190614c4f565b612d9e906001614ae1565b90505b612db66001600160a01b038516873086613753565b612dc085826137be565b60408051848152602081018490529081018290526001600160a01b0380861691908716907fbef68d45f01f5e2c114616dc4840e7a543da6ec57afc5700e4be96056a899b4e9060600160405180910390a3505050505050565b6000826001600160a01b0316846001600160a01b03161415612e6b5760405162461bcd60e51b815260206004820152600b60248201526a0854d0535157d054d4d15560aa1b6044820152606401610a51565b60006101055460ff166001811115612e8557612e856146cc565b1415612e9d57612e9684848461389d565b90506111bf565b60016101055460ff166001811115612eb757612eb76146cc565b1415612ec857612e96848484613c53565b60405162461bcd60e51b815260206004820152601860248201527f756e6b6e6f776e207072696365206665656420747970657300000000000000006044820152606401610a51565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015612f5257600080fd5b505afa158015612f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190614c71565b6000612f9560365490565b612f9d575090565b60365482612fa961353c565b6127c89190614c30565b606680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61300f8184614ae1565b841161304e5760405162461bcd60e51b815260206004820152600e60248201526d2156414c55455f544f4f5f4c4f5760901b6044820152606401610a51565b6001600160a01b0386166000908152610104602052604080822081518083019092528054829060ff166001811115613088576130886146cc565b6001811115613099576130996146cc565b8152905461010090046001600160a01b031660209091015290506001815160018111156130c8576130c86146cc565b14156131d95760fd54602082015186916001600160a01b039182169116146131c3576020808301516001600160a01b0316600090815260ff91829052604090206003810154909162010000909104166131635760405162461bcd60e51b815260206004820152601a60248201527f214e4f545f414c4c4f5745442866756e64696e674173736574290000000000006044820152606401610a51565b60fd54602084015161317f916001600160a01b03169089612e19565b6001820154909250156131c157600181015461319d90612710614a65565b6131a983612710614c30565b6131b39190614c4f565b6131be906001614ae1565b91505b505b6131d38889846020015184612b70565b5061323b565b6000815160018111156131ee576131ee6146cc565b1461323b5760405162461bcd60e51b815260206004820152601760248201527f21494e56414c49442866756e64696e67536f75726365290000000000000000006044820152606401610a51565b6000613246866127a1565b90506000851561325c57613259866127a1565b90505b6000808511801561327557506001600160a01b03861615155b1561328657613283856127a1565b90505b6132918a8a856127db565b81156132af5760fe546132af908a906001600160a01b0316846127db565b80156132c0576132c08987836127db565b6040805189815260208101859052908101889052606081018390526080810186905260a081018290526001600160a01b03808816918b8216918d16907fe231cd9559a5a16d19e2bf003665b108bb05f45a7318361550754822be725a1d9060c00160405180910390a450505050505050505050565b60985460ff16156133585760405162461bcd60e51b8152600401610a5190614977565b6098805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612b536129a9565b6001600160a01b038216600090815260ff6020819052604090912060030154620100009004166133f65760405162461bcd60e51b8152602060048201526013602482015272214e4f545f414c4c4f5745442861737365742960681b6044820152606401610a51565b6000811161343f5760405162461bcd60e51b815260206004820152601660248201527521494e56414c494428736861726573416d6f756e742960501b6044820152606401610a51565b600061344a82612f8a565b905061345d6134576129a9565b83613e10565b60fd5481906001600160a01b038581169116146134d0576001600160a01b03808516600090815260ff6020526040902060fd54909161349e91168685612e19565b915060006127108260010154846134b59190614c30565b6134bf9190614c4f565b90506134cb8184614a65565b925050505b6134e46001600160a01b0385168683613f5e565b60408051828152602081018490529081018490526001600160a01b0380861691908716907fc90b5405a6805d53680586ef15168b1d791e67ceebe68fa62eefdb81478763cc9060600160405180910390a35050505050565b600080805b6101005481101561363a5760fd5461010080546001600160a01b03909216918390811061357057613570614a1e565b6000918252602090912001546001600160a01b031614156135b15760fd546135a0906001600160a01b0316612f10565b6135aa9083614ae1565b9150613628565b61361b61010082815481106135c8576135c8614a1e565b60009182526020909120015460fd5461010080546001600160a01b039384169390921691612d0491908690811061360157613601614a1e565b6000918252602090912001546001600160a01b0316612f10565b6136259083614ae1565b91505b8061363281614a4a565b915050613541565b50919050565b600054610100900460ff166136675760405162461bcd60e51b8152600401610a5190614c8a565b61366f613f8e565b61134f613fb5565b600054610100900460ff1661369e5760405162461bcd60e51b8152600401610a5190614c8a565b6136a6613f8e565b61134f613fec565b600054610100900460ff166136d55760405162461bcd60e51b8152600401610a5190614c8a565b61134f61401f565b600054610100900460ff166137045760405162461bcd60e51b8152600401610a5190614c8a565b61370c613f8e565b613716828261404d565b5050565b505050565b60006014361080159061373c57506033546001600160a01b031633145b1561374e575060131936013560601c90565b503390565b6040516001600160a01b0380851660248301528316604482015260648101829052611ec89085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261409b565b6001600160a01b0382166138145760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a51565b80603660008282546138269190614ae1565b90915550506001600160a01b03821660009081526034602052604081208054839290613853908490614ae1565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b03838116600090815260ff60205260408120549091166138fc5760405162461bcd60e51b815260206004820152601360248201527221494e56414c49442866726f6d41737365742960681b6044820152606401610a51565b6001600160a01b03838116600090815260ff60205260409020541661395b5760405162461bcd60e51b8152602060048201526015602482015274214e4f545f414c4c4f57454428746f41737365742960581b6044820152606401610a51565b81613968575060006111bf565b6001600160a01b03808516600090815260ff6020526040808220548151633fabe5a360e21b815291519293849391169163feaf968c9160048083019260a0929190829003018186803b1580156139bd57600080fd5b505afa1580156139d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139f59190614cef565b50610103549295509350849250501580613a1b575061010354613a188342614a65565b11155b613a375760405162461bcd60e51b8152600401610a5190614d3f565b6001600160a01b03808716600090815260ff602052604090819020548151633fabe5a360e21b8152915192169163feaf968c9160048082019260a092909190829003018186803b158015613a8a57600080fd5b505afa158015613a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac29190614cef565b50610103549296509450859250501580613ae8575061010354613ae58442614a65565b11155b613b045760405162461bcd60e51b8152600401610a5190614d3f565b6001600160a01b03808816600090815260ff60208190526040808320600390810154948d16845292209091015461010090819004821692041614613c13576001600160a01b038716600090815260ff6020819052604090912060030154613b7591839161010081048216911661416d565b6001600160a01b03808a16600090815260ff60208190526040808320600390810154948d168452922090910154613bb79286926101009091048116911661416d565b6001600160a01b03808b16600090815260ff60208190526040808320600390810154948e168452922090910154613bf4928b92908116911661416d565b613bfe9190614c30565b613c089190614c4f565b9450505050506111bf565b6001600160a01b03808916600090815260ff60208190526040808320600390810154948c16845292209091015483928592613bf4928b928216911661416d565b6001600160a01b03808416600090815260ff602052604081205490918291166365555bcc613c80876141d7565b613c89876141d7565b6040518363ffffffff1660e01b8152600401613ca6929190614d68565b60606040518083038186803b158015613cbe57600080fd5b505afa158015613cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf69190614da3565b90506101035460001480613d1b5750610103546020820151613d189042614a65565b11155b613d375760405162461bcd60e51b8152600401610a5190614d3f565b610103541580613d585750610103546040820151613d559042614a65565b11155b613d745760405162461bcd60e51b8152600401610a5190614d3f565b80516001600160a01b038616600090815260ff6020819052604090912060030154613e0792613dad92909161010081048216911661416d565b613db79085614c30565b6001600160a01b038716600090815260ff6020819052604090912060030154613de291166002614dff565b6001600160a01b038716600090815260ff60208190526040909120600301541661416d565b95945050505050565b6001600160a01b038216613e705760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a51565b6001600160a01b03821660009081526034602052604090205481811015613ee45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a51565b6001600160a01b0383166000908152603460205260408120838303905560368054849290613f13908490614a65565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b03831660248201526044810182905261371a90849063a9059cbb60e01b90606401613787565b600054610100900460ff1661134f5760405162461bcd60e51b8152600401610a5190614c8a565b600054610100900460ff16613fdc5760405162461bcd60e51b8152600401610a5190614c8a565b61134f613fe76129a9565b612fb3565b600054610100900460ff166140135760405162461bcd60e51b8152600401610a5190614c8a565b6098805460ff19169055565b600054610100900460ff166140465760405162461bcd60e51b8152600401610a5190614c8a565b600160ca55565b600054610100900460ff166140745760405162461bcd60e51b8152600401610a5190614c8a565b81516140879060379060208501906144b1565b50805161371a9060389060208401906144b1565b60006140f0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166143269092919063ffffffff16565b80519091501561371a578080602001905181019061410e9190614e20565b61371a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a51565b60008160ff168360ff16101561419f576141878383614e42565b6141959060ff16600a614e65565b612e969085614c30565b8160ff168360ff1611156141cf576141b78284614e42565b6141c59060ff16600a614e65565b612e969085614c4f565b509192915050565b6001600160a01b038116600090815261010660205260408120805460609291906142009061490b565b905011156142b1576001600160a01b038216600090815261010660205260409020805461422c9061490b565b80601f01602080910402602001604051908101604052809291908181526020018280546142589061490b565b80156142a55780601f1061427a576101008083540402835291602001916142a5565b820191906000526020600020905b81548152906001019060200180831161428857829003601f168201915b50505050509050919050565b816001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156142ea57600080fd5b505afa1580156142fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b5e9190810190614e71565b60606113cc848460008585843b61437f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a51565b600080866001600160a01b0316858760405161439b9190614f13565b60006040518083038185875af1925050503d80600081146143d8576040519150601f19603f3d011682016040523d82523d6000602084013e6143dd565b606091505b50915091506143ed8282866143f8565b979650505050505050565b606083156144075750816111bf565b8251156144175782518084602001fd5b8160405162461bcd60e51b8152600401610a519190614592565b82805461443d9061490b565b90600052602060002090601f01602090048101928261445f57600085556144a5565b82601f106144785782800160ff198235161785556144a5565b828001600101855582156144a5579182015b828111156144a557823582559160200191906001019061448a565b506127d2929150614525565b8280546144bd9061490b565b90600052602060002090601f0160209004810192826144df57600085556144a5565b82601f106144f857805160ff19168380011785556144a5565b828001600101855582156144a5579182015b828111156144a557825182559160200191906001019061450a565b5b808211156127d25760008155600101614526565b60005b8381101561455557818101518382015260200161453d565b83811115611ec85750506000910152565b6000815180845261457e81602086016020860161453a565b601f01601f19169290920160200192915050565b6020815260006111bf6020830184614566565b80356001600160a01b03811681146127d657600080fd5b6000806000606084860312156145d157600080fd5b6145da846145a5565b92506145e8602085016145a5565b9150604084013590509250925092565b6000806040838503121561460b57600080fd5b614614836145a5565b946020939093013593505050565b60006020828403121561463457600080fd5b6111bf826145a5565b6000806000806080858703121561465357600080fd5b61465c856145a5565b935061466a602086016145a5565b93969395505050506040820135916060013590565b6020808252825182820181905260009190848201906040850190845b818110156146c05783516001600160a01b03168352928401929184019160010161469b565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b60028110611fe357634e487b7160e01b600052602160045260246000fd5b6020810161470d836146e2565b91905290565b81516040820190614723816146e2565b82526020928301516001600160a01b0316929091019190915290565b60028110611fe357600080fd5b60006020828403121561475e57600080fd5b81356111bf8161473f565b60008060008060008060c0878903121561478257600080fd5b61478b876145a5565b9550614799602088016145a5565b945060408701359350606087013592506147b5608088016145a5565b915060a087013590509295509295509295565b6000602082840312156147da57600080fd5b5035919050565b600080604083850312156147f457600080fd5b82356147ff8161473f565b915061480d602084016145a5565b90509250929050565b6000806040838503121561482957600080fd5b6147ff836145a5565b60008060006040848603121561484757600080fd5b614850846145a5565b9250602084013567ffffffffffffffff8082111561486d57600080fd5b818601915086601f83011261488157600080fd5b81358181111561489057600080fd5b8760208285010111156148a257600080fd5b6020830194508093505050509250925092565b600080600080608085870312156148cb57600080fd5b6148d4856145a5565b93506148e2602086016145a5565b925060408501356148f28161473f565b9150614900606086016145a5565b905092959194509250565b600181811c9082168061491f57607f821691505b6020821081141561363a57634e487b7160e01b600052602260045260246000fd5b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415614a5e57614a5e614a34565b5060010190565b600082821015614a7757614a77614a34565b500390565b634e487b7160e01b600052603160045260246000fd5b600060208284031215614aa457600080fd5b815160ff811681146111bf57600080fd5b602080825260129082015271085054d4d15517d393d517d0531313d5d15160721b604082015260600190565b60008219821115614af457614af4614a34565b500190565b60208082526005908201526404282aaa8960db1b604082015260600190565b600181815b80851115614b53578160001904821115614b3957614b39614a34565b80851615614b4657918102915b93841c9390800290614b1d565b509250929050565b600082614b6a57506001610b5e565b81614b7757506000610b5e565b8160018114614b8d5760028114614b9757614bb3565b6001915050610b5e565b60ff841115614ba857614ba8614a34565b50506001821b610b5e565b5060208310610133831016604e8410600b8410161715614bd6575081810a610b5e565b614be08383614b18565b8060001904821115614bf457614bf4614a34565b029392505050565b60006111bf60ff841683614b5b565b60408101614c18846146e2565b9281526001600160a01b039190911660209091015290565b6000816000190483118215151615614c4a57614c4a614a34565b500290565b600082614c6c57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215614c8357600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b805169ffffffffffffffffffff811681146127d657600080fd5b600080600080600060a08688031215614d0757600080fd5b614d1086614cd5565b9450602086015193506040860151925060608601519150614d3360808701614cd5565b90509295509295909350565b6020808252600f908201526e0854149250d157d3d5551110551151608a1b604082015260600190565b604081526000614d7b6040830185614566565b8281036020840152613e078185614566565b634e487b7160e01b600052604160045260246000fd5b600060608284031215614db557600080fd5b6040516060810181811067ffffffffffffffff82111715614dd857614dd8614d8d565b80604052508251815260208301516020820152604083015160408201528091505092915050565b600060ff821660ff84168160ff0481118215151615614bf457614bf4614a34565b600060208284031215614e3257600080fd5b815180151581146111bf57600080fd5b600060ff821660ff841680821015614e5c57614e5c614a34565b90039392505050565b60006111bf8383614b5b565b600060208284031215614e8357600080fd5b815167ffffffffffffffff80821115614e9b57600080fd5b818401915084601f830112614eaf57600080fd5b815181811115614ec157614ec1614d8d565b604051601f8201601f19908116603f01168101908382118183101715614ee957614ee9614d8d565b81604052828152876020848701011115614f0257600080fd5b6143ed83602083016020880161453a565b60008251614f2581846020870161453a565b919091019291505056fea264697066735822122085ed2c81f539cc77123eb863c03a51f942c7a738267da06057aefbab6e37ab3b64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103af5760003560e01c806379b2125f116101f4578063ccfc2e8d1161011a578063e300eec7116100ad578063f3fef3a31161007c578063f3fef3a31461094e578063fc58d77114610961578063fcd6a25b14610974578063ffea632b1461098757600080fd5b8063e300eec714610902578063e4db8f6414610915578063f213159c14610928578063f2fde38b1461093b57600080fd5b8063da742228116100e9578063da7422281461089a578063dd62ed3e146108ad578063e1ded2de146108e6578063e2eed04f146108f957600080fd5b8063ccfc2e8d14610859578063cdf456e11461086c578063d4c3eea01461087f578063d73f730b1461088757600080fd5b80638fcc9cfb11610192578063a9059cbb11610161578063a9059cbb146107ea578063aa388af6146107fd578063aaac831f14610833578063c3b35a7e1461084657600080fd5b80638fcc9cfb146107b457806395d89b41146107c757806399530b06146107cf578063a457c2d7146107d757600080fd5b80638c396220116101ce5780638c3962201461076c5780638d3a4af61461077f5780638da5cb5b146107905780638e3e580d146107a157600080fd5b806379b2125f146107405780637da0a877146107535780638456cb591461076457600080fd5b80633fd0875f116102d9578063597435cb1161027757806370a082311161024657806370a08231146106e9578063715018a614610712578063757d6e1c1461071a578063771d4c281461072d57600080fd5b8063597435cb146106985780635979d7b8146106ab5780635a4161ff146106cb5780635c975abb146106de57600080fd5b8063486ff0cd116102b3578063486ff0cd1461062f5780634bb846e1146106505780635517575d14610663578063572b6c051461067657600080fd5b80633fd0875f146105f757806341b3d1851461061257806347e7ef241461061c57600080fd5b80631e377d391161035157806330b8b2c61161032057806330b8b2c6146104b6578063313ce567146105c257806339509351146105dc5780633f4ba83a146105ef57600080fd5b80631e377d39146104685780632298d8491461047b57806323b872dd1461048e5780632acada4d146104a157600080fd5b8063095ea7b31161038d578063095ea7b31461040d5780630d43e8ad1461042057806318160ddd1461044b57806318ff57681461045357600080fd5b806306fdde03146103b45780630816c847146103d257806308751b18146103ea575b600080fd5b6103bc61099a565b6040516103c99190614592565b60405180910390f35b6103dc6101035481565b6040519081526020016103c9565b6103fd6103f83660046145bc565b610a2c565b60405190151581526020016103c9565b6103fd61041b3660046145f8565b610b46565b60fe54610433906001600160a01b031681565b6040516001600160a01b0390911681526020016103c9565b6036546103dc565b610466610461366004614622565b610b64565b005b61046661047636600461463d565b610d07565b610466610489366004614622565b61105b565b6103fd61049c3660046145bc565b611134565b6104a96111c6565b6040516103c9919061467f565b6105666104c4366004614622565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506001600160a01b03908116600090815260ff6020818152604092839020835160c08101855281549095168552600181015491850191909152600281015492840192909252600390910154808216606084015261010081048216608084015262010000900416151560a082015290565b6040516103c99190600060c08201905060018060a01b038351168252602083015160208301526040830151604083015260ff606084015116606083015260ff608084015116608083015260a0830151151560a083015292915050565b6105ca611228565b60405160ff90911681526020016103c9565b6103fd6105ea3660046145f8565b6112aa565b6104666112fe565b610105546106059060ff1681565b6040516103c99190614700565b6103dc6101025481565b61046661062a3660046145f8565b611351565b6040805180820190915260058152640322e322e360dc1b60208201526103bc565b6103dc61065e3660046145bc565b6113bf565b6103dc610671366004614622565b6113d4565b6103fd610684366004614622565b6033546001600160a01b0391821691161490565b6103dc6106a6366004614622565b6113df565b6106be6106b9366004614622565b611406565b6040516103c99190614713565b6103fd6106d93660046145f8565b611484565b60985460ff166103fd565b6103dc6106f7366004614622565b6001600160a01b031660009081526034602052604090205490565b61046661155d565b61046661072836600461474c565b6115b0565b61046661073b366004614622565b611657565b61046661074e366004614769565b611719565b6033546001600160a01b0316610433565b610466611808565b61043361077a3660046147c8565b611859565b60fd546001600160a01b0316610433565b6066546001600160a01b0316610433565b6104666107af3660046145bc565b611884565b6104666107c23660046147c8565b611972565b6103bc6119f1565b6103dc611a00565b6103fd6107e53660046145f8565b611a30565b6103fd6107f83660046145f8565b611ae7565b6103fd61080b366004614622565b6001600160a01b0316600090815260ff60208190526040909120600301546201000090041690565b60fc54610433906001600160a01b031681565b6104666108543660046145bc565b611afb565b610466610867366004614622565b611b5b565b60fd54610433906001600160a01b031681565b6103dc611bee565b6104666108953660046147e1565b611bf8565b6104666108a8366004614622565b611cf4565b6103dc6108bb366004614816565b6001600160a01b03918216600090815260356020908152604080832093909416825291909152205490565b6103dc6108f43660046147c8565b611d8f565b610101546103dc565b6104666109103660046147c8565b611d9a565b610466610923366004614832565b611e19565b6104666109363660046145bc565b611ece565b610466610949366004614622565b611f2c565b61046661095c3660046145f8565b611fe6565b6103bc61096f366004614622565b612043565b61046661098236600461463d565b6120de565b6104666109953660046148b5565b6121cc565b6060603780546109a99061490b565b80601f01602080910402602001604051908101604052809291908181526020018280546109d59061490b565b8015610a225780601f106109f757610100808354040283529160200191610a22565b820191906000526020600020905b815481529060010190602001808311610a0557829003601f168201915b5050505050905090565b6000600260ca541415610a5a5760405162461bcd60e51b8152600401610a5190614940565b60405180910390fd5b600260ca5560985460ff1615610a825760405162461bcd60e51b8152600401610a5190614977565b6000610a8d836127a1565b9050610a9a8585836127db565b6000610aa8866108bb6129a9565b905081811015610aca5760405162461bcd60e51b8152600401610a51906149a1565b610ade86610ad66129a9565b8484036129b3565b846001600160a01b0316866001600160a01b03167fc8cf4e5d87b5b4ffb59d20991b0840a27d2227ee272dae54bacf0f4b4184bf778685604051610b2c929190918252602082015260400190565b60405180910390a3600192505050600160ca559392505050565b6000610b5a610b536129a9565b84846129b3565b5060015b92915050565b610b6c6129a9565b6001600160a01b0316610b876066546001600160a01b031690565b6001600160a01b031614610bad5760405162461bcd60e51b8152600401610a51906149e9565b6101015460005b61010154811015610c1257826001600160a01b03166101018281548110610bdd57610bdd614a1e565b6000918252602090912001546001600160a01b03161415610c0057809150610c12565b80610c0a81614a4a565b915050610bb4565b5061010154811015610ccf576101018054610c2f90600190614a65565b81548110610c3f57610c3f614a1e565b60009182526020909120015461010180546001600160a01b039092169183908110610c6c57610c6c614a1e565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610101805480610cac57610cac614a7c565b600082815260209020810160001990810180546001600160a01b03191690550190555b6040516001600160a01b038316907fb0e13246ae39a13158fc894c77b848e06901f1440d7cc8aaad18f0a0e1566b3890600090a25050565b610d0f6129a9565b6001600160a01b0316610d2a6066546001600160a01b031690565b6001600160a01b031614610d505760405162461bcd60e51b8152600401610a51906149e9565b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610d8b57600080fd5b505afa158015610d9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc39190614a92565b60ff1611610e055760405162461bcd60e51b815260206004820152600f60248201526e21494e56414c49442861737365742960881b6044820152606401610a51565b6001600160a01b038416600090815260ff602081905260409091206003810154909116610e795761010080546001810182556000919091527f45e010b9ae401e2eb71529478da8bd513a9bdc2d095a111e324f5b95c09ed87b0180546001600160a01b0319166001600160a01b0387161790555b60038101805462ff000019166201000017905580546001600160a01b038086166001600160a01b031990921691909117825560028201849055600182018390556040805163313ce56760e01b815290519187169163313ce56791600480820192602092909190829003018186803b158015610ef357600080fd5b505afa158015610f07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2b9190614a92565b60038201805460ff191660ff92831617905561010554600091166001811115610f5657610f566146cc565b1415610fee57836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f9557600080fd5b505afa158015610fa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcd9190614a92565b8160030160016101000a81548160ff021916908360ff160217905550611020565b60016101055460ff166001811115611008576110086146cc565b14156110205760038101805461ff0019166112001790555b6040516001600160a01b038616907f06a94869c30cb7089f57f8d4a5ff251ac74a8c2bc361e7f91bda209898de8ead90600090a25050505050565b6110636129a9565b6001600160a01b031661107e6066546001600160a01b031690565b6001600160a01b0316146110a45760405162461bcd60e51b8152600401610a51906149e9565b6001600160a01b038116600090815260ff6020819052604090912060030154620100009004166110e65760405162461bcd60e51b8152600401610a5190614ab5565b6001600160a01b038116600081815260ff6020526040808220600301805462ff000019169055517f0a8090b3b8835c60a03ebb0cc69833b4359a1924917dbc2e80bb4516428da0a39190a250565b60006111418484846127db565b6001600160a01b0384166000908152603560205260408120816111626129a9565b6001600160a01b03166001600160a01b03168152602001908152602001600020549050828110156111a55760405162461bcd60e51b8152600401610a51906149a1565b6111b9856111b16129a9565b8584036129b3565b60019150505b9392505050565b6060610100805480602002602001604051908101604052809291908181526020018280548015610a2257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611201575050505050905090565b60fd546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561126d57600080fd5b505afa158015611281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a59190614a92565b905090565b6000610b5a6112b76129a9565b8484603560006112c56129a9565b6001600160a01b03908116825260208083019390935260409182016000908120918b16815292529020546112f99190614ae1565b6129b3565b6113066129a9565b6001600160a01b03166113216066546001600160a01b031690565b6001600160a01b0316146113475760405162461bcd60e51b8152600401610a51906149e9565b61134f612ad7565b565b600260ca5414156113745760405162461bcd60e51b8152600401610a5190614940565b600260ca5560985460ff161561139c5760405162461bcd60e51b8152600401610a5190614977565b6113b66113a76129a9565b6113af6129a9565b8484612b70565b5050600160ca55565b60006113cc848484612e19565b949350505050565b6000610b5e82612f10565b6001600160a01b038116600090815260346020526040812054610b5e90612f8a565b612f8a565b60408051808201909152600080825260208201526001600160a01b038216600090815261010460205260409081902081518083019092528054829060ff166001811115611455576114556146cc565b6001811115611466576114666146cc565b8152905461010090046001600160a01b031660209091015292915050565b6000600260ca5414156114a95760405162461bcd60e51b8152600401610a5190614940565b600260ca5560985460ff16156114d15760405162461bcd60e51b8152600401610a5190614977565b60006114dc836127a1565b90506114f06114e96129a9565b85836127db565b836001600160a01b03166115026129a9565b6001600160a01b03167fc8cf4e5d87b5b4ffb59d20991b0840a27d2227ee272dae54bacf0f4b4184bf778584604051611545929190918252602082015260400190565b60405180910390a36001915050600160ca5592915050565b6115656129a9565b6001600160a01b03166115806066546001600160a01b031690565b6001600160a01b0316146115a65760405162461bcd60e51b8152600401610a51906149e9565b61134f6000612fb3565b6115b86129a9565b6001600160a01b03166115d36066546001600160a01b031690565b6001600160a01b0316146115f95760405162461bcd60e51b8152600401610a51906149e9565b610105805482919060ff191660018381811115611618576116186146cc565b02179055507fed7687310bc5f6a8e2d59841d2a610ced3906f81feb59737361c00aeb79dd6ea8160405161164c9190614700565b60405180910390a150565b61165f6129a9565b6001600160a01b031661167a6066546001600160a01b031690565b6001600160a01b0316146116a05760405162461bcd60e51b8152600401610a51906149e9565b610101805460018101825560009182527f109ea3cebb188b9c1b9fc5bb3920be60dfdc8699098dff92f3d80daaca7476890180546001600160a01b0319166001600160a01b03841690811790915560405190917f713b660c92a559fe6eecdbf5d129bf8e30d527db74b47b6dc5eeb65c7893f1e591a250565b600260ca54141561173c5760405162461bcd60e51b8152600401610a5190614940565b600260ca556000805b610101548110156117ab57610101818154811061176457611764614a1e565b6000918252602090912001546001600160a01b03166117816129a9565b6001600160a01b0316141561179957600191506117ab565b806117a381614a4a565b915050611745565b50806117c95760405162461bcd60e51b8152600401610a5190614af9565b60985460ff16156117ec5760405162461bcd60e51b8152600401610a5190614977565b6117fa878787878787613005565b5050600160ca555050505050565b6118106129a9565b6001600160a01b031661182b6066546001600160a01b031690565b6001600160a01b0316146118515760405162461bcd60e51b8152600401610a51906149e9565b61134f613335565b610101818154811061186a57600080fd5b6000918252602090912001546001600160a01b0316905081565b600260ca5414156118a75760405162461bcd60e51b8152600401610a5190614940565b600260ca556000805b610101548110156119165761010181815481106118cf576118cf614a1e565b6000918252602090912001546001600160a01b03166118ec6129a9565b6001600160a01b031614156119045760019150611916565b8061190e81614a4a565b9150506118b0565b50806119345760405162461bcd60e51b8152600401610a5190614af9565b60985460ff16156119575760405162461bcd60e51b8152600401610a5190614977565b6119678484846000806000613005565b5050600160ca555050565b61197a6129a9565b6001600160a01b03166119956066546001600160a01b031690565b6001600160a01b0316146119bb5760405162461bcd60e51b8152600401610a51906149e9565b6101028190556040518181527f8335b9d95c5f85895bf6ed3f9d159211b514ab77f7e20509e553c657cfa39b4e9060200161164c565b6060603880546109a99061490b565b60fd546001600160a01b0316600090815260ff602081905260408220600301546112a5916114019116600a614bfc565b60008060356000611a3f6129a9565b6001600160a01b0390811682526020808301939093526040918201600090812091881681529252902054905082811015611ac95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610a51565b611add611ad46129a9565b858584036129b3565b5060019392505050565b6000610b5a611af46129a9565b84846127db565b600260ca541415611b1e5760405162461bcd60e51b8152600401610a5190614940565b600260ca5560985460ff1615611b465760405162461bcd60e51b8152600401610a5190614977565b611b5183838361338e565b5050600160ca5550565b611b636129a9565b6001600160a01b0316611b7e6066546001600160a01b031690565b6001600160a01b031614611ba45760405162461bcd60e51b8152600401610a51906149e9565b60fe80546001600160a01b0319166001600160a01b0383169081179091556040517f9e9a9a4a82acd1b28aab6bf1d43aad70ae6d290549c0d6183e2e91ebcdf5744190600090a250565b60006112a561353c565b6001600160a01b038116600090815260ff602081905260409091206003015462010000900416611c3a5760405162461bcd60e51b8152600401610a5190614ab5565b60006101046000611c496129a9565b6001600160a01b03168152602081019190915260400160002080549091508390829060ff191660018381811115611c8257611c826146cc565b02179055508054610100600160a81b0319166101006001600160a01b03841602178155611cad6129a9565b6001600160a01b03167f1d97f1da175e9fad2f79856dc3bb2ced51a7a3c6c62c366fa5f909579da4b1608484604051611ce7929190614c0b565b60405180910390a2505050565b611cfc6129a9565b6001600160a01b0316611d176066546001600160a01b031690565b6001600160a01b031614611d3d5760405162461bcd60e51b8152600401610a51906149e9565b603380546001600160a01b0319166001600160a01b0383161790556040516001600160a01b038216907f8c2bee8063bb4464870b7dfa415ebb2fe80bfa73ba20d6fbf0d42791274667ff90600090a250565b6000610b5e826127a1565b611da26129a9565b6001600160a01b0316611dbd6066546001600160a01b031690565b6001600160a01b031614611de35760405162461bcd60e51b8152600401610a51906149e9565b6101038190556040518181527f1fe1f9ede5e74676189934337b4dd60f437c0f524b40a4c18400f040dd592adb9060200161164c565b611e216129a9565b6001600160a01b0316611e3c6066546001600160a01b031690565b6001600160a01b031614611e625760405162461bcd60e51b8152600401610a51906149e9565b6001600160a01b038316600090815260ff602081905260409091206003015462010000900416611ea45760405162461bcd60e51b8152600401610a5190614ab5565b6001600160a01b038316600090815261010660205260409020611ec8908383614431565b50505050565b600260ca541415611ef15760405162461bcd60e51b8152600401610a5190614940565b600260ca5560985460ff1615611f195760405162461bcd60e51b8152600401610a5190614977565b611b51611f246129a9565b848484612b70565b611f346129a9565b6001600160a01b0316611f4f6066546001600160a01b031690565b6001600160a01b031614611f755760405162461bcd60e51b8152600401610a51906149e9565b6001600160a01b038116611fda5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a51565b611fe381612fb3565b50565b600260ca5414156120095760405162461bcd60e51b8152600401610a5190614940565b600260ca5560985460ff16156120315760405162461bcd60e51b8152600401610a5190614977565b6113b661203c6129a9565b838361338e565b610106602052600090815260409020805461205d9061490b565b80601f01602080910402602001604051908101604052809291908181526020018280546120899061490b565b80156120d65780601f106120ab576101008083540402835291602001916120d6565b820191906000526020600020905b8154815290600101906020018083116120b957829003601f168201915b505050505081565b600260ca5414156121015760405162461bcd60e51b8152600401610a5190614940565b600260ca556000805b6101015481101561217057610101818154811061212957612129614a1e565b6000918252602090912001546001600160a01b03166121466129a9565b6001600160a01b0316141561215e5760019150612170565b8061216881614a4a565b91505061210a565b508061218e5760405162461bcd60e51b8152600401610a5190614af9565b60985460ff16156121b15760405162461bcd60e51b8152600401610a5190614977565b6121c085858585600080613005565b5050600160ca55505050565b600054610100900460ff166121e75760005460ff16156121eb565b303b155b61224e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a51565b600054610100900460ff16158015612270576000805461ffff19166101011790555b612278613640565b612280613677565b6122886136ae565b6122d7604051806040016040528060118152602001704361736b205661756c7420546f6b656e7360781b8152506040518060400160405280600481526020016309a82a6960e31b8152506136dd565b6000856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561231257600080fd5b505afa158015612326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234a9190614a92565b60ff16116123905760405162461bcd60e51b815260206004820152601360248201527221494e56414c4944286261736541737365742960681b6044820152606401610a51565b60008360018111156123a4576123a46146cc565b1415612472576000846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156123e557600080fd5b505afa1580156123f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061241d9190614a92565b60ff161161246d5760405162461bcd60e51b815260206004820152601c60248201527f21494e56414c49442862617365417373657450726963654665656429000000006044820152606401610a51565b6124d9565b6001836001811115612486576124866146cc565b1415612491576124d9565b60405162461bcd60e51b815260206004820152601760248201527f756e6b6e6f776e207072696365206665656420747970650000000000000000006044820152606401610a51565b6001600160a01b03821661252f5760405162461bcd60e51b815260206004820152601860248201527f21494e56414c4944286665654469737472696275746f722900000000000000006044820152606401610a51565b6001600160a01b03858116600081815260ff602090815260409182902080546001600160a01b031916948916949094178455815163313ce56760e01b8152915163313ce567926004808201939291829003018186803b15801561259157600080fd5b505afa1580156125a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c99190614a92565b60038201805460ff191660ff9290921691909117905560008460018111156125f3576125f36146cc565b141561268b57846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561263257600080fd5b505afa158015612646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266a9190614a92565b8160030160016101000a81548160ff021916908360ff1602179055506126b7565b600184600181111561269f5761269f6146cc565b14156124915760038101805461ff0019166112001790555b60001960028201556000600180830182905560038301805462ff00001916620100001790556101008054808301825592527f45e010b9ae401e2eb71529478da8bd513a9bdc2d095a111e324f5b95c09ed87b90910180546001600160a01b0389166001600160a01b0319918216811790925560fd805490911690911790556101058054869260ff1991909116908381811115612755576127556146cc565b02179055505060fe80546001600160a01b0319166001600160a01b0384161790556000610102819055610103558015612794576000805461ff00191690555b5050505050565b3b151590565b6000806127ad60365490565b11156127d2576127bb61353c565b6036546127c89084614c30565b610b5e9190614c4f565b5090565b919050565b6001600160a01b03831661283f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610a51565b6001600160a01b0382166128a15760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a51565b6001600160a01b038316600090815260346020526040902054818110156129195760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610a51565b6001600160a01b03808516600090815260346020526040808220858503905591851681529081208054849290612950908490614ae1565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161299c91815260200190565b60405180910390a3611ec8565b60006112a561371f565b6001600160a01b038316612a155760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610a51565b6001600160a01b038216612a765760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610a51565b6001600160a01b0383811660008181526035602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60985460ff16612b205760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a51565b6098805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612b536129a9565b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216600090815260ff602081905260409091206003015462010000900416612bd85760405162461bcd60e51b8152602060048201526013602482015272214e4f545f414c4c4f5745442861737365742960681b6044820152606401610a51565b60008111612c205760405162461bcd60e51b815260206004820152601560248201527421494e56414c4944286173736574416d6f756e742960581b6044820152606401610a51565b6001600160a01b038216600090815260ff602052604090206002015481612c4684612f10565b612c509190614ae1565b1115612c965760405162461bcd60e51b8152602060048201526015602482015274214445504f5349545f4c494d49542861737365742960581b6044820152606401610a51565b60fd5481906001600160a01b03848116911614612d0e576001600160a01b038316600090815260ff60205260408120600181015490919061271090612cdb9086614c30565b612ce59190614c4f565b60fd54909150612d099086906001600160a01b0316612d048488614a65565b612e19565b925050505b61010254811015612d505760405162461bcd60e51b815260206004820152600c60248201526b0853525397d1115413d4d25560a21b6044820152606401610a51565b806000612d5c60365490565b1115612da157612d6a61353c565b6001612d7560365490565b612d7f9085614c30565b612d899190614a65565b612d939190614c4f565b612d9e906001614ae1565b90505b612db66001600160a01b038516873086613753565b612dc085826137be565b60408051848152602081018490529081018290526001600160a01b0380861691908716907fbef68d45f01f5e2c114616dc4840e7a543da6ec57afc5700e4be96056a899b4e9060600160405180910390a3505050505050565b6000826001600160a01b0316846001600160a01b03161415612e6b5760405162461bcd60e51b815260206004820152600b60248201526a0854d0535157d054d4d15560aa1b6044820152606401610a51565b60006101055460ff166001811115612e8557612e856146cc565b1415612e9d57612e9684848461389d565b90506111bf565b60016101055460ff166001811115612eb757612eb76146cc565b1415612ec857612e96848484613c53565b60405162461bcd60e51b815260206004820152601860248201527f756e6b6e6f776e207072696365206665656420747970657300000000000000006044820152606401610a51565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a082319060240160206040518083038186803b158015612f5257600080fd5b505afa158015612f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190614c71565b6000612f9560365490565b612f9d575090565b60365482612fa961353c565b6127c89190614c30565b606680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61300f8184614ae1565b841161304e5760405162461bcd60e51b815260206004820152600e60248201526d2156414c55455f544f4f5f4c4f5760901b6044820152606401610a51565b6001600160a01b0386166000908152610104602052604080822081518083019092528054829060ff166001811115613088576130886146cc565b6001811115613099576130996146cc565b8152905461010090046001600160a01b031660209091015290506001815160018111156130c8576130c86146cc565b14156131d95760fd54602082015186916001600160a01b039182169116146131c3576020808301516001600160a01b0316600090815260ff91829052604090206003810154909162010000909104166131635760405162461bcd60e51b815260206004820152601a60248201527f214e4f545f414c4c4f5745442866756e64696e674173736574290000000000006044820152606401610a51565b60fd54602084015161317f916001600160a01b03169089612e19565b6001820154909250156131c157600181015461319d90612710614a65565b6131a983612710614c30565b6131b39190614c4f565b6131be906001614ae1565b91505b505b6131d38889846020015184612b70565b5061323b565b6000815160018111156131ee576131ee6146cc565b1461323b5760405162461bcd60e51b815260206004820152601760248201527f21494e56414c49442866756e64696e67536f75726365290000000000000000006044820152606401610a51565b6000613246866127a1565b90506000851561325c57613259866127a1565b90505b6000808511801561327557506001600160a01b03861615155b1561328657613283856127a1565b90505b6132918a8a856127db565b81156132af5760fe546132af908a906001600160a01b0316846127db565b80156132c0576132c08987836127db565b6040805189815260208101859052908101889052606081018390526080810186905260a081018290526001600160a01b03808816918b8216918d16907fe231cd9559a5a16d19e2bf003665b108bb05f45a7318361550754822be725a1d9060c00160405180910390a450505050505050505050565b60985460ff16156133585760405162461bcd60e51b8152600401610a5190614977565b6098805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612b536129a9565b6001600160a01b038216600090815260ff6020819052604090912060030154620100009004166133f65760405162461bcd60e51b8152602060048201526013602482015272214e4f545f414c4c4f5745442861737365742960681b6044820152606401610a51565b6000811161343f5760405162461bcd60e51b815260206004820152601660248201527521494e56414c494428736861726573416d6f756e742960501b6044820152606401610a51565b600061344a82612f8a565b905061345d6134576129a9565b83613e10565b60fd5481906001600160a01b038581169116146134d0576001600160a01b03808516600090815260ff6020526040902060fd54909161349e91168685612e19565b915060006127108260010154846134b59190614c30565b6134bf9190614c4f565b90506134cb8184614a65565b925050505b6134e46001600160a01b0385168683613f5e565b60408051828152602081018490529081018490526001600160a01b0380861691908716907fc90b5405a6805d53680586ef15168b1d791e67ceebe68fa62eefdb81478763cc9060600160405180910390a35050505050565b600080805b6101005481101561363a5760fd5461010080546001600160a01b03909216918390811061357057613570614a1e565b6000918252602090912001546001600160a01b031614156135b15760fd546135a0906001600160a01b0316612f10565b6135aa9083614ae1565b9150613628565b61361b61010082815481106135c8576135c8614a1e565b60009182526020909120015460fd5461010080546001600160a01b039384169390921691612d0491908690811061360157613601614a1e565b6000918252602090912001546001600160a01b0316612f10565b6136259083614ae1565b91505b8061363281614a4a565b915050613541565b50919050565b600054610100900460ff166136675760405162461bcd60e51b8152600401610a5190614c8a565b61366f613f8e565b61134f613fb5565b600054610100900460ff1661369e5760405162461bcd60e51b8152600401610a5190614c8a565b6136a6613f8e565b61134f613fec565b600054610100900460ff166136d55760405162461bcd60e51b8152600401610a5190614c8a565b61134f61401f565b600054610100900460ff166137045760405162461bcd60e51b8152600401610a5190614c8a565b61370c613f8e565b613716828261404d565b5050565b505050565b60006014361080159061373c57506033546001600160a01b031633145b1561374e575060131936013560601c90565b503390565b6040516001600160a01b0380851660248301528316604482015260648101829052611ec89085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261409b565b6001600160a01b0382166138145760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610a51565b80603660008282546138269190614ae1565b90915550506001600160a01b03821660009081526034602052604081208054839290613853908490614ae1565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b03838116600090815260ff60205260408120549091166138fc5760405162461bcd60e51b815260206004820152601360248201527221494e56414c49442866726f6d41737365742960681b6044820152606401610a51565b6001600160a01b03838116600090815260ff60205260409020541661395b5760405162461bcd60e51b8152602060048201526015602482015274214e4f545f414c4c4f57454428746f41737365742960581b6044820152606401610a51565b81613968575060006111bf565b6001600160a01b03808516600090815260ff6020526040808220548151633fabe5a360e21b815291519293849391169163feaf968c9160048083019260a0929190829003018186803b1580156139bd57600080fd5b505afa1580156139d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139f59190614cef565b50610103549295509350849250501580613a1b575061010354613a188342614a65565b11155b613a375760405162461bcd60e51b8152600401610a5190614d3f565b6001600160a01b03808716600090815260ff602052604090819020548151633fabe5a360e21b8152915192169163feaf968c9160048082019260a092909190829003018186803b158015613a8a57600080fd5b505afa158015613a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ac29190614cef565b50610103549296509450859250501580613ae8575061010354613ae58442614a65565b11155b613b045760405162461bcd60e51b8152600401610a5190614d3f565b6001600160a01b03808816600090815260ff60208190526040808320600390810154948d16845292209091015461010090819004821692041614613c13576001600160a01b038716600090815260ff6020819052604090912060030154613b7591839161010081048216911661416d565b6001600160a01b03808a16600090815260ff60208190526040808320600390810154948d168452922090910154613bb79286926101009091048116911661416d565b6001600160a01b03808b16600090815260ff60208190526040808320600390810154948e168452922090910154613bf4928b92908116911661416d565b613bfe9190614c30565b613c089190614c4f565b9450505050506111bf565b6001600160a01b03808916600090815260ff60208190526040808320600390810154948c16845292209091015483928592613bf4928b928216911661416d565b6001600160a01b03808416600090815260ff602052604081205490918291166365555bcc613c80876141d7565b613c89876141d7565b6040518363ffffffff1660e01b8152600401613ca6929190614d68565b60606040518083038186803b158015613cbe57600080fd5b505afa158015613cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cf69190614da3565b90506101035460001480613d1b5750610103546020820151613d189042614a65565b11155b613d375760405162461bcd60e51b8152600401610a5190614d3f565b610103541580613d585750610103546040820151613d559042614a65565b11155b613d745760405162461bcd60e51b8152600401610a5190614d3f565b80516001600160a01b038616600090815260ff6020819052604090912060030154613e0792613dad92909161010081048216911661416d565b613db79085614c30565b6001600160a01b038716600090815260ff6020819052604090912060030154613de291166002614dff565b6001600160a01b038716600090815260ff60208190526040909120600301541661416d565b95945050505050565b6001600160a01b038216613e705760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610a51565b6001600160a01b03821660009081526034602052604090205481811015613ee45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610a51565b6001600160a01b0383166000908152603460205260408120838303905560368054849290613f13908490614a65565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6040516001600160a01b03831660248201526044810182905261371a90849063a9059cbb60e01b90606401613787565b600054610100900460ff1661134f5760405162461bcd60e51b8152600401610a5190614c8a565b600054610100900460ff16613fdc5760405162461bcd60e51b8152600401610a5190614c8a565b61134f613fe76129a9565b612fb3565b600054610100900460ff166140135760405162461bcd60e51b8152600401610a5190614c8a565b6098805460ff19169055565b600054610100900460ff166140465760405162461bcd60e51b8152600401610a5190614c8a565b600160ca55565b600054610100900460ff166140745760405162461bcd60e51b8152600401610a5190614c8a565b81516140879060379060208501906144b1565b50805161371a9060389060208401906144b1565b60006140f0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166143269092919063ffffffff16565b80519091501561371a578080602001905181019061410e9190614e20565b61371a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a51565b60008160ff168360ff16101561419f576141878383614e42565b6141959060ff16600a614e65565b612e969085614c30565b8160ff168360ff1611156141cf576141b78284614e42565b6141c59060ff16600a614e65565b612e969085614c4f565b509192915050565b6001600160a01b038116600090815261010660205260408120805460609291906142009061490b565b905011156142b1576001600160a01b038216600090815261010660205260409020805461422c9061490b565b80601f01602080910402602001604051908101604052809291908181526020018280546142589061490b565b80156142a55780601f1061427a576101008083540402835291602001916142a5565b820191906000526020600020905b81548152906001019060200180831161428857829003601f168201915b50505050509050919050565b816001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156142ea57600080fd5b505afa1580156142fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b5e9190810190614e71565b60606113cc848460008585843b61437f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a51565b600080866001600160a01b0316858760405161439b9190614f13565b60006040518083038185875af1925050503d80600081146143d8576040519150601f19603f3d011682016040523d82523d6000602084013e6143dd565b606091505b50915091506143ed8282866143f8565b979650505050505050565b606083156144075750816111bf565b8251156144175782518084602001fd5b8160405162461bcd60e51b8152600401610a519190614592565b82805461443d9061490b565b90600052602060002090601f01602090048101928261445f57600085556144a5565b82601f106144785782800160ff198235161785556144a5565b828001600101855582156144a5579182015b828111156144a557823582559160200191906001019061448a565b506127d2929150614525565b8280546144bd9061490b565b90600052602060002090601f0160209004810192826144df57600085556144a5565b82601f106144f857805160ff19168380011785556144a5565b828001600101855582156144a5579182015b828111156144a557825182559160200191906001019061450a565b5b808211156127d25760008155600101614526565b60005b8381101561455557818101518382015260200161453d565b83811115611ec85750506000910152565b6000815180845261457e81602086016020860161453a565b601f01601f19169290920160200192915050565b6020815260006111bf6020830184614566565b80356001600160a01b03811681146127d657600080fd5b6000806000606084860312156145d157600080fd5b6145da846145a5565b92506145e8602085016145a5565b9150604084013590509250925092565b6000806040838503121561460b57600080fd5b614614836145a5565b946020939093013593505050565b60006020828403121561463457600080fd5b6111bf826145a5565b6000806000806080858703121561465357600080fd5b61465c856145a5565b935061466a602086016145a5565b93969395505050506040820135916060013590565b6020808252825182820181905260009190848201906040850190845b818110156146c05783516001600160a01b03168352928401929184019160010161469b565b50909695505050505050565b634e487b7160e01b600052602160045260246000fd5b60028110611fe357634e487b7160e01b600052602160045260246000fd5b6020810161470d836146e2565b91905290565b81516040820190614723816146e2565b82526020928301516001600160a01b0316929091019190915290565b60028110611fe357600080fd5b60006020828403121561475e57600080fd5b81356111bf8161473f565b60008060008060008060c0878903121561478257600080fd5b61478b876145a5565b9550614799602088016145a5565b945060408701359350606087013592506147b5608088016145a5565b915060a087013590509295509295509295565b6000602082840312156147da57600080fd5b5035919050565b600080604083850312156147f457600080fd5b82356147ff8161473f565b915061480d602084016145a5565b90509250929050565b6000806040838503121561482957600080fd5b6147ff836145a5565b60008060006040848603121561484757600080fd5b614850846145a5565b9250602084013567ffffffffffffffff8082111561486d57600080fd5b818601915086601f83011261488157600080fd5b81358181111561489057600080fd5b8760208285010111156148a257600080fd5b6020830194508093505050509250925092565b600080600080608085870312156148cb57600080fd5b6148d4856145a5565b93506148e2602086016145a5565b925060408501356148f28161473f565b9150614900606086016145a5565b905092959194509250565b600181811c9082168061491f57607f821691505b6020821081141561363a57634e487b7160e01b600052602260045260246000fd5b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526028908201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616040820152676c6c6f77616e636560c01b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415614a5e57614a5e614a34565b5060010190565b600082821015614a7757614a77614a34565b500390565b634e487b7160e01b600052603160045260246000fd5b600060208284031215614aa457600080fd5b815160ff811681146111bf57600080fd5b602080825260129082015271085054d4d15517d393d517d0531313d5d15160721b604082015260600190565b60008219821115614af457614af4614a34565b500190565b60208082526005908201526404282aaa8960db1b604082015260600190565b600181815b80851115614b53578160001904821115614b3957614b39614a34565b80851615614b4657918102915b93841c9390800290614b1d565b509250929050565b600082614b6a57506001610b5e565b81614b7757506000610b5e565b8160018114614b8d5760028114614b9757614bb3565b6001915050610b5e565b60ff841115614ba857614ba8614a34565b50506001821b610b5e565b5060208310610133831016604e8410600b8410161715614bd6575081810a610b5e565b614be08383614b18565b8060001904821115614bf457614bf4614a34565b029392505050565b60006111bf60ff841683614b5b565b60408101614c18846146e2565b9281526001600160a01b039190911660209091015290565b6000816000190483118215151615614c4a57614c4a614a34565b500290565b600082614c6c57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215614c8357600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b805169ffffffffffffffffffff811681146127d657600080fd5b600080600080600060a08688031215614d0757600080fd5b614d1086614cd5565b9450602086015193506040860151925060608601519150614d3360808701614cd5565b90509295509295909350565b6020808252600f908201526e0854149250d157d3d5551110551151608a1b604082015260600190565b604081526000614d7b6040830185614566565b8281036020840152613e078185614566565b634e487b7160e01b600052604160045260246000fd5b600060608284031215614db557600080fd5b6040516060810181811067ffffffffffffffff82111715614dd857614dd8614d8d565b80604052508251815260208301516020820152604083015160408201528091505092915050565b600060ff821660ff84168160ff0481118215151615614bf457614bf4614a34565b600060208284031215614e3257600080fd5b815180151581146111bf57600080fd5b600060ff821660ff841680821015614e5c57614e5c614a34565b90039392505050565b60006111bf8383614b5b565b600060208284031215614e8357600080fd5b815167ffffffffffffffff80821115614e9b57600080fd5b818401915084601f830112614eaf57600080fd5b815181811115614ec157614ec1614d8d565b604051601f8201601f19908116603f01168101908382118183101715614ee957614ee9614d8d565b81604052828152876020848701011115614f0257600080fd5b6143ed83602083016020880161453a565b60008251614f2581846020870161453a565b919091019291505056fea264697066735822122085ed2c81f539cc77123eb863c03a51f942c7a738267da06057aefbab6e37ab3b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "currentValueOf(address)": {
        "details": "Get current vault value of `_address` denominated in `baseAsset`",
        "params": {
          "_address": "Address to check"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(address,uint256)": {
        "details": "Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`",
        "params": {
          "_asset": "Address of incoming asset",
          "_assetAmount": "Amount of asset to deposit"
        }
      },
      "depositTo(address,address,uint256)": {
        "details": "Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`",
        "params": {
          "_asset": "Address of incoming asset",
          "_assetAmount": "Amount of asset to deposit",
          "_to": "Recipient of funds"
        }
      },
      "fundingSource(address)": {
        "details": "Retrieve the funding source for an address",
        "params": {
          "_address": "Address for lookup"
        }
      },
      "getAllAssets()": {
        "details": "Get all the assets supported by the vault."
      },
      "getAsset(address)": {
        "details": "Get asset details",
        "params": {
          "_asset": "Asset address"
        },
        "returns": {
          "_0": "Asset Asset details"
        }
      },
      "getBaseAsset()": {
        "details": "Get base asset of vault."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pricePerShare()": {
        "details": "Get current vault value a vault share"
      },
      "protocolPayment(address,address,uint256)": {
        "details": "Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol",
        "params": {
          "_from": "From address",
          "_to": "To address",
          "_value": "Amount of baseAsset value to transfer"
        }
      },
      "protocolPayment(address,address,uint256,uint256)": {
        "details": "Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol",
        "params": {
          "_from": "From address",
          "_protocolFee": "Protocol fee to deduct from `_value`",
          "_to": "To address",
          "_value": "Amount of baseAsset value to transfer"
        }
      },
      "protocolPayment(address,address,uint256,uint256,address,uint256)": {
        "details": "Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol",
        "params": {
          "_from": "From address",
          "_network": "Address of network fee collector",
          "_networkFee": "Network fee to deduct from `_value`",
          "_protocolFee": "Protocol fee to deduct from `_value`",
          "_to": "To address",
          "_value": "Amount of baseAsset value to transfer"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setFundingSource(uint8,address)": {
        "details": "Set the funding source and, if using a personal wallet, the asset to use for funding payments",
        "params": {
          "_fundingAsset": "Asset to use for payments (if using personal funding source)",
          "_fundingSource": "Funding source to use"
        }
      },
      "sharesForValue(uint256)": {
        "details": "Get the number of vault shares that represents a given value of the base asset",
        "params": {
          "_value": "Amount of value"
        }
      },
      "supportsAsset(address)": {
        "details": "Check if the vault supports an asset",
        "params": {
          "_asset": "Asset address"
        },
        "returns": {
          "_0": "bool `true` if asset supported, `false` otherwise"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalAssetBalance(address)": {
        "details": "Get total amount of an asset held in vault and managed by admin",
        "params": {
          "_asset": "Address of asset"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "totalValue()": {
        "details": "Get total value in vault and managed by admin - denominated in `baseAsset`"
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferValue(address,uint256)": {
        "details": "Transfer the equivalent vault shares of base asset `value` to `_recipient`",
        "params": {
          "_recipient": "To address",
          "_value": "Amount of baseAsset value to transfer"
        }
      },
      "transferValueFrom(address,address,uint256)": {
        "details": "Transfer the equivalent vault shares of base asset `value` from `_sender` to `_recipient`",
        "params": {
          "_recipient": "To address",
          "_sender": "From address",
          "_value": "Amount of baseAsset value to transfer"
        }
      },
      "withdraw(address,uint256)": {
        "details": "Withdraw an amount of shares from the vault in the form of `_asset`",
        "params": {
          "_asset": "Address of outgoing asset",
          "_shares": "Amount of shares to withdraw"
        }
      },
      "withdrawTo(address,address,uint256)": {
        "details": "Withdraw an amount of shares from the vault in the form of `_asset`",
        "params": {
          "_asset": "Address of outgoing asset",
          "_recipient": "Recipient who will receive the withdrawn assets",
          "_shares": "Amount of shares to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isTrustedForwarder(address)": {
        "notice": "return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 327,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 330,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2551,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 72,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 584,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_balances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 590,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 592,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 594,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_name",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 596,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "56",
        "type": "t_string_storage"
      },
      {
        "astId": 1137,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "__gap",
        "offset": 0,
        "slot": "57",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 205,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_owner",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 319,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 415,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_paused",
        "offset": 0,
        "slot": "152",
        "type": "t_bool"
      },
      {
        "astId": 506,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 521,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_status",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 564,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "__gap",
        "offset": 0,
        "slot": "203",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 21620,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "reserved1",
        "offset": 0,
        "slot": "252",
        "type": "t_address"
      },
      {
        "astId": 21622,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "baseAsset",
        "offset": 0,
        "slot": "253",
        "type": "t_address"
      },
      {
        "astId": 21624,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "feeDistributor",
        "offset": 0,
        "slot": "254",
        "type": "t_address"
      },
      {
        "astId": 21629,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "assets",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_address,t_struct(Asset)13566_storage)"
      },
      {
        "astId": 21632,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "allAssets",
        "offset": 0,
        "slot": "256",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 21635,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "protocols",
        "offset": 0,
        "slot": "257",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 21637,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "minDeposit",
        "offset": 0,
        "slot": "258",
        "type": "t_uint256"
      },
      {
        "astId": 21639,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "maxPriceFeedAge",
        "offset": 0,
        "slot": "259",
        "type": "t_uint256"
      },
      {
        "astId": 21644,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "fundingProfiles",
        "offset": 0,
        "slot": "260",
        "type": "t_mapping(t_address,t_struct(FundingProfile)13578_storage)"
      },
      {
        "astId": 21647,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "priceFeedType",
        "offset": 0,
        "slot": "261",
        "type": "t_enum(PriceFeedType)13569"
      },
      {
        "astId": 21651,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "bandAssetSymbol",
        "offset": 0,
        "slot": "262",
        "type": "t_mapping(t_address,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(FundingSource)13572": {
        "encoding": "inplace",
        "label": "enum ICaskVault.FundingSource",
        "numberOfBytes": "1"
      },
      "t_enum(PriceFeedType)13569": {
        "encoding": "inplace",
        "label": "enum ICaskVault.PriceFeedType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_struct(Asset)13566_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICaskVault.Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)13566_storage"
      },
      "t_mapping(t_address,t_struct(FundingProfile)13578_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICaskVault.FundingProfile)",
        "numberOfBytes": "32",
        "value": "t_struct(FundingProfile)13578_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Asset)13566_storage": {
        "encoding": "inplace",
        "label": "struct ICaskVault.Asset",
        "members": [
          {
            "astId": 13555,
            "contract": "contracts/vault/CaskVault.sol:CaskVault",
            "label": "priceFeed",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13557,
            "contract": "contracts/vault/CaskVault.sol:CaskVault",
            "label": "slippageBps",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13559,
            "contract": "contracts/vault/CaskVault.sol:CaskVault",
            "label": "depositLimit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13561,
            "contract": "contracts/vault/CaskVault.sol:CaskVault",
            "label": "assetDecimals",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 13563,
            "contract": "contracts/vault/CaskVault.sol:CaskVault",
            "label": "priceFeedDecimals",
            "offset": 1,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 13565,
            "contract": "contracts/vault/CaskVault.sol:CaskVault",
            "label": "allowed",
            "offset": 2,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(FundingProfile)13578_storage": {
        "encoding": "inplace",
        "label": "struct ICaskVault.FundingProfile",
        "members": [
          {
            "astId": 13575,
            "contract": "contracts/vault/CaskVault.sol:CaskVault",
            "label": "fundingSource",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(FundingSource)13572"
          },
          {
            "astId": 13577,
            "contract": "contracts/vault/CaskVault.sol:CaskVault",
            "label": "fundingAsset",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}