{
  "address": "0xC00E342Fe9f35F73bcF57C466C1e1108816de966",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "renewals",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum ICaskSubscriptionManager.CheckType",
          "name": "checkType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "queueRemaining",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "currentBucket",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionManagerReport",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_subscriptionPlans",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_subscriptions",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentFeeMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentFeeRateMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentFeeRateMin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "processBucketSize",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "processSinglePayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ICaskSubscriptionManager.CheckType",
          "name": "_checkType",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "_bucket",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "queueItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ICaskSubscriptionManager.CheckType",
          "name": "_checkType",
          "type": "uint8"
        }
      ],
      "name": "queuePosition",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ICaskSubscriptionManager.CheckType",
          "name": "_checkType",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "_bucket",
          "type": "uint32"
        }
      ],
      "name": "queueSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "renewSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paymentFeeMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_paymentFeeRateMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_paymentFeeRateMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeTargetFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_processBucketSize",
          "type": "uint32"
        }
      ],
      "name": "setParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ICaskSubscriptionManager.CheckType",
          "name": "_checkType",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "_timestamp",
          "type": "uint32"
        }
      ],
      "name": "setProcessingBucket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeTargetFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionPlans",
      "outputs": [
        {
          "internalType": "contract ICaskSubscriptionPlans",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptions",
      "outputs": [
        {
          "internalType": "contract ICaskSubscriptions",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract ICaskVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x49452e1928374ec9d8f29add842ecf4b6e927a105aa2e9fa3b0cb80157ee2694",
  "receipt": {
    "to": null,
    "from": "0x83e50cD4123bAA60f6d6c8A83ca85Ac72e826bD0",
    "contractAddress": "0xC00E342Fe9f35F73bcF57C466C1e1108816de966",
    "transactionIndex": 0,
    "gasUsed": "2575760",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0b21536366714f473ab65079bea235a83ccbda58865906a9cf7fac007f8c3108",
    "transactionHash": "0x49452e1928374ec9d8f29add842ecf4b6e927a105aa2e9fa3b0cb80157ee2694",
    "logs": [],
    "blockNumber": 9290905,
    "cumulativeGasUsed": "2575760",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "c276bc92099fcbb92367a1ba0ee8e6a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"renewals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum ICaskSubscriptionManager.CheckType\",\"name\":\"checkType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"queueRemaining\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"currentBucket\",\"type\":\"uint32\"}],\"name\":\"SubscriptionManagerReport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subscriptionPlans\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_subscriptions\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentFeeMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentFeeRateMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentFeeRateMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processBucketSize\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"processSinglePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICaskSubscriptionManager.CheckType\",\"name\":\"_checkType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_bucket\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"queueItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICaskSubscriptionManager.CheckType\",\"name\":\"_checkType\",\"type\":\"uint8\"}],\"name\":\"queuePosition\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICaskSubscriptionManager.CheckType\",\"name\":\"_checkType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_bucket\",\"type\":\"uint32\"}],\"name\":\"queueSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"renewSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paymentFeeMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentFeeRateMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paymentFeeRateMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeTargetFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_processBucketSize\",\"type\":\"uint32\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ICaskSubscriptionManager.CheckType\",\"name\":\"_checkType\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_timestamp\",\"type\":\"uint32\"}],\"name\":\"setProcessingBucket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeTargetFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionPlans\",\"outputs\":[{\"internalType\":\"contract ICaskSubscriptionPlans\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptions\",\"outputs\":[{\"internalType\":\"contract ICaskSubscriptions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract ICaskVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easilly be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"paymentFeeMin\":{\"details\":\"minimum total fee to charge, if rate fees do not add up to this amount \"},\"paymentFeeRateMin\":{\"details\":\"min and max percentage to charge on payments, in bps. 50% = 5000. \"},\"processBucketSize\":{\"details\":\"size (in seconds) of buckets to group subscriptions into for processing \"},\"processQueue\":{\"details\":\"map used to track when subscriptions need attention next \"},\"stakeTargetFactor\":{\"details\":\"factor used to reduce payment fee based on qty of staked CASK \"},\"subscriptionPlans\":{\"details\":\"contract to manage subscription plan definitions. \"},\"vault\":{\"details\":\"vault to use for payments. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/CaskSubscriptionManager.sol\":\"CaskSubscriptionManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easilly be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xc4a031d4b6e3fa6d40a09bfbf99d3fdd22bbe77ba97065bc790b4cab22adee85\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x6c25d4211724a6f4cdc8d25397edc780f48d951fc81c1d507f59b3edb22afaf7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskSubscriptionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskSubscriptionManager {\\n\\n    enum CheckType {\\n        None,\\n        Active,\\n        PastDue\\n    }\\n\\n    function queueItem(CheckType _checkType, uint32 _bucket, uint256 _idx) external view returns(uint256);\\n\\n    function queueSize(CheckType _checkType, uint32 _bucket) external view returns(uint256);\\n\\n    function queuePosition(CheckType _checkType) external view returns(uint32);\\n\\n    function processSinglePayment(address _consumer, address _provider, uint256 _subscriptionId, uint256 _value) external;\\n\\n    function renewSubscription(uint256 _subscriptionId) external;\\n\\n    /** @dev Emitted when the keeper job performs renewals */\\n    event SubscriptionManagerReport(uint256 limit, uint256 renewals, uint256 depth, CheckType checkType,\\n        uint256 queueRemaining, uint32 currentBucket);\\n}\\n\",\"keccak256\":\"0x5a1ee9176344436c11f54ef6ec96640d18697ce2d06025de244c01bce9da6c4e\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskSubscriptionPlans.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskSubscriptionPlans {\\n\\n    enum PlanStatus {\\n        Enabled,\\n        Disabled,\\n        EndOfLife\\n    }\\n\\n    struct Discount {\\n        uint256 value;\\n        uint32 validAfter;\\n        uint32 expiresAt;\\n        uint32 maxRedemptions;\\n        uint32 planId;\\n        uint16 applyPeriods;\\n        bool isFixed;\\n    }\\n\\n    struct Provider {\\n        address paymentAddress;\\n        uint256 nonce;\\n        string cid;\\n    }\\n\\n    function setProviderProfile(address _paymentAddress, string calldata _cid, uint256 _nonce) external;\\n\\n    function getProviderProfile(address _provider) external view returns(Provider memory);\\n\\n    function getPlanStatus(address _provider, uint32 _planId) external view returns (PlanStatus);\\n\\n    function getPlanEOL(address _provider, uint32 _planId) external view returns (uint32);\\n\\n    function disablePlan(uint32 _planId) external;\\n\\n    function enablePlan(uint32 _planId) external;\\n\\n    function retirePlan(uint32 _planId, uint32 _retireAt) external;\\n\\n    function verifyPlan(bytes32 _planData, bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof) external view returns(bool);\\n\\n    function getDiscountRedemptions(address _provider, uint32 _planId,\\n        bytes32 _discountId) external view returns(uint256);\\n\\n    function verifyDiscount(address _provider, uint32 _planId, bytes32 _discountId, bytes32 _discountData,\\n        bytes32 _merkleRoot, bytes32[] calldata _merkleProof) external view returns(bool);\\n\\n    function verifyAndConsumeDiscount(address _provider, uint32 _planId, bytes32 _discountId, bytes32 _discountData,\\n        bytes32 _merkleRoot, bytes32[] calldata _merkleProof) external returns(bool);\\n\\n\\n    /** @dev Emitted when `provider` sets their profile info */\\n    event ProviderSetProfile(address indexed provider, address indexed paymentAddress, uint256 nonce, string cid);\\n\\n    /** @dev Emitted when `provider` disables a subscription plan */\\n    event PlanDisabled(address indexed provider, uint32 indexed planId);\\n\\n    /** @dev Emitted when `provider` enables a subscription plan */\\n    event PlanEnabled(address indexed provider, uint32 indexed planId);\\n\\n    /** @dev Emitted when `provider` end-of-lifes a subscription plan */\\n    event PlanRetired(address indexed provider, uint32 indexed planId, uint32 retireAt);\\n\\n}\",\"keccak256\":\"0x518f5b8e467c0f7bbd9f674e30bd8523287c9b3be615700d431b4b09875fd202\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"./ICaskSubscriptionManager.sol\\\";\\n\\ninterface ICaskSubscriptions is IERC721Upgradeable {\\n\\n    enum SubscriptionStatus {\\n        None,\\n        Trialing,\\n        Active,\\n        Paused,\\n        Canceled,\\n        PastDue\\n    }\\n\\n    enum ManagerCommand {\\n        None,\\n        PlanChange,\\n        Cancel,\\n        PastDue,\\n        Renew,\\n        ClearDiscount\\n    }\\n\\n    struct Subscription {\\n        bytes32 planData;\\n        bytes32 networkData;\\n        bytes32 discountId;\\n        bytes32 discountData;\\n        bytes32 ref;\\n        address provider;\\n        SubscriptionStatus status;\\n        uint32 planId;\\n        uint32 createdAt;\\n        uint32 renewAt;\\n        uint32 minTermAt;\\n        uint32 cancelAt;\\n        string cid;\\n        string dataCid;\\n    }\\n\\n    struct PlanInfo {\\n        uint256 price;\\n        uint32 planId;\\n        uint32 period;\\n        uint32 freeTrial;\\n        uint32 maxActive;\\n        uint16 minPeriods;\\n        uint8 gracePeriod;\\n        bool canPause;\\n        bool canTransfer;\\n    }\\n\\n    struct NetworkInfo {\\n        address network;\\n        uint16 feeBps;\\n    }\\n\\n    /************************** SUBSCRIPTION INSTANCE METHODS **************************/\\n\\n    function createSubscription(\\n        uint256 _nonce,\\n        bytes32[] calldata _planProof,\\n        bytes32[] calldata _discountProof,\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) external;\\n\\n    function createNetworkSubscription(\\n        uint256 _nonce,\\n        bytes32[] calldata _planProof,\\n        bytes32[] calldata _discountProof,\\n        bytes32 _networkData,\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        bytes memory _networkSignature,\\n        string calldata _cid\\n    ) external;\\n\\n    function changeSubscriptionPlan(\\n        uint256 _subscriptionId,\\n        uint256 _nonce,\\n        bytes32[] calldata _planProof,\\n        bytes32[] calldata _discountProof,\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) external;\\n\\n    function attachData(uint256 _subscriptionId, string calldata _dataCid) external;\\n\\n    function pauseSubscription(uint256 _subscriptionId) external;\\n\\n    function resumeSubscription(uint256 _subscriptionId) external;\\n\\n    function cancelSubscription(uint256 _subscriptionId, uint32 _cancelAt) external;\\n\\n    function managerCommand(uint256 _subscriptionId, ManagerCommand _command) external;\\n\\n    function getSubscription(uint256 _subscriptionId) external view returns\\n        (Subscription memory subscription, address currentOwner);\\n\\n    function getConsumerSubscriptions(address _consumer, uint256 limit,\\n        uint256 offset) external view returns (uint256[] memory);\\n\\n    function getConsumerSubscriptionCount(address _consumer) external view returns (uint256);\\n\\n    function getProviderSubscriptions(address _provider, uint256 limit,\\n        uint256 offset) external view returns (uint256[] memory);\\n\\n    function getProviderSubscriptionCount(\\n        address _provider,\\n        bool _includeCanceled,\\n        uint32 _planId\\n    ) external view returns (uint256);\\n\\n    function getPendingPlanChange(uint256 _subscriptionId) external view returns (bytes32);\\n\\n\\n    /************************** SUBSCRIPTION EVENTS **************************/\\n\\n    /** @dev Emitted when `consumer` subscribes to `provider` plan `planId` */\\n    event SubscriptionCreated(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId, bytes32 discountId);\\n\\n    /** @dev Emitted when `consumer` changes the plan to `provider` on subscription `subscriptionId` */\\n    event SubscriptionChangedPlan(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 prevPlanId, uint32 planId, bytes32 discountId);\\n\\n    /** @dev Emitted when `consumer` changes the plan to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPendingChangePlan(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 prevPlanId, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` pauses the subscription to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPaused(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` resumes the subscription to `provider` on subscription `subscriptionId` */\\n    event SubscriptionResumed(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` unsubscribes to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPendingCancel(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId, uint32 cancelAt);\\n\\n    /** @dev Emitted when `consumer` has canceled and the current period is over on subscription `subscriptionId` */\\n    event SubscriptionCanceled(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` successfully renews to `provider` on subscription `subscriptionId` */\\n    event SubscriptionRenewed(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` subscription trial ends and goes active to `provider` on subscription `subscriptionId` */\\n    event SubscriptionTrialEnded(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` renewal fails to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPastDue(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n}\\n\\n\",\"keccak256\":\"0x4631ee245bd60cc83301a69ad95e0fbeb5e710746283aa5964c170bc9d67b2ab\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @title  Interface for vault\\n  */\\n\\ninterface ICaskVault is IERC20MetadataUpgradeable {\\n\\n    // whitelisted stablecoin assets supported by the vault\\n    struct Asset {\\n        address priceFeed;\\n        uint256 slippageBps;\\n        uint256 depositLimit;\\n        uint8 assetDecimals;\\n        uint8 priceFeedDecimals;\\n        bool allowed;\\n    }\\n\\n\\n    /**\\n      * @dev Get base asset of vault.\\n     */\\n    function getBaseAsset() external view returns (address);\\n\\n    /**\\n      * @dev Get all the assets supported by the vault.\\n     */\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Get asset details\\n     * @param _asset Asset address\\n     * @return Asset Asset details\\n     */\\n    function getAsset(address _asset) external view returns(Asset memory);\\n\\n    /**\\n     * @dev Check if the vault supports an asset\\n     * @param _asset Asset address\\n     * @return bool `true` if asset supported, `false` otherwise\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _value Amount of baseAsset value to transfer\\n     * @param _protocolFee Protocol fee to deduct from `_value`\\n     * @param _network Address of network fee collector\\n     * @param _networkFee Network fee to deduct from `_value`\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _protocolFee,\\n        address _network,\\n        uint256 _networkFee\\n    ) external;\\n\\n    /**\\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _value Amount of baseAsset value to transfer\\n     * @param _protocolFee Protocol fee to deduct from `_value`\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value,\\n        uint256 _protocolFee\\n    ) external;\\n\\n    /**\\n     * @dev Pay `_value` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _value Amount of baseAsset value to transfer\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) external;\\n\\n    /**\\n     * @dev Transfer the equivalent vault shares of base asset `value` to `_recipient`\\n     * @param _recipient To address\\n     * @param _value Amount of baseAsset value to transfer\\n     */\\n    function transferValue(\\n        address _recipient,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Transfer the equivalent vault shares of base asset `value` from `_sender` to `_recipient`\\n     * @param _sender From address\\n     * @param _recipient To address\\n     * @param _value Amount of baseAsset value to transfer\\n     */\\n    function transferValueFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _value\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\\n     * @param _asset Address of incoming asset\\n     * @param _assetAmount Amount of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _assetAmount) external;\\n\\n    /**\\n     * @dev Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\\n     * @param _to Recipient of funds\\n     * @param _asset Address of incoming asset\\n     * @param _assetAmount Amount of asset to deposit\\n     */\\n    function depositTo(address _to, address _asset, uint256 _assetAmount) external;\\n\\n    /**\\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\\n     * @param _asset Address of outgoing asset\\n     * @param _shares Amount of shares to withdraw\\n     */\\n    function withdraw(address _asset, uint256 _shares) external;\\n\\n    /**\\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\\n     * @param _recipient Recipient who will receive the withdrawn assets\\n     * @param _asset Address of outgoing asset\\n     * @param _shares Amount of shares to withdraw\\n     */\\n    function withdrawTo(address _recipient, address _asset, uint256 _shares) external;\\n\\n    /**\\n     * @dev Get total shares of vault\\n     */\\n//    function totalSupply() external view returns(uint256);\\n\\n    /**\\n     * @dev Get current balance of shares for an address\\n     * @param _address Address to check\\n     */\\n//    function balanceOf(address _address) external view returns(uint256);\\n\\n    /**\\n     * @dev Get current vault value of `_address` denominated in `baseAsset`\\n     * @param _address Address to check\\n     */\\n    function currentValueOf(address _address) external view returns(uint256);\\n\\n    /**\\n     * @dev Get current vault value a vault share\\n     */\\n    function pricePerShare() external view returns(uint256);\\n\\n    /**\\n     * @dev Get the number of vault shares that represents a given value of the base asset\\n     * @param _value Amount of value\\n     */\\n    function sharesForValue(uint256 _value) external view returns(uint256);\\n\\n    /**\\n     * @dev Get total value in vault and managed by admin - denominated in `baseAsset`\\n     */\\n    function totalValue() external view returns(uint256);\\n\\n    /**\\n     * @dev Get total amount of an asset held in vault and managed by admin\\n     * @param _asset Address of asset\\n     */\\n    function totalAssetBalance(address _asset) external view returns(uint256);\\n\\n    /**\\n     * @dev Send an amount of asset to a strategy\\n     * @param _strategy Address of strategy\\n     * @param _asset Address of asset\\n     * @param _assetAmount Amount of asset to send\\n     */\\n    function allocateToStrategy(address _strategy, address _asset, uint256 _assetAmount) external;\\n\\n\\n    /************************** EVENTS **************************/\\n\\n    /** @dev Emitted when `sender` transfers `baseAssetValue` (denominated in vault baseAsset) to `recipient` */\\n    event TransferValue(address indexed from, address indexed to, uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when an amount of `baseAsset` is paid from `from` to `to` within the vault */\\n    event Payment(address indexed from, address indexed to, uint256 baseAssetAmount, uint256 shares,\\n        uint256 protocolFee, uint256 protocolFeeShares,\\n        address indexed network, uint256 networkFee, uint256 networkFeeShares);\\n\\n    /** @dev Emitted when `asset` is added as a new supported asset */\\n    event AllowedAsset(address indexed asset);\\n\\n    /** @dev Emitted when `asset` is disallowed t */\\n    event DisallowedAsset(address indexed asset);\\n\\n    /** @dev Emitted when `participant` deposits `asset` */\\n    event AssetDeposited(address indexed participant, address indexed asset, uint256 assetAmount,\\n        uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when `participant` withdraws `asset` */\\n    event AssetWithdrawn(address indexed participant, address indexed asset, uint256 assetAmount,\\n        uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when `asset` is allocated to strategy `strategy` */\\n    event AllocatedToStrategy(address indexed strategy, address indexed asset, uint256 assetAmount);\\n\\n}\",\"keccak256\":\"0x1c373716f31f70fc87365133927099aaaa0e98b37a5f408df07bb3ef0720fb6f\",\"license\":\"MIT\"},\"contracts/protocol/CaskSubscriptionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nimport \\\"../interfaces/ICaskSubscriptionManager.sol\\\";\\nimport \\\"../interfaces/ICaskSubscriptionPlans.sol\\\";\\nimport \\\"../interfaces/ICaskSubscriptions.sol\\\";\\nimport \\\"../interfaces/ICaskVault.sol\\\";\\n\\ncontract CaskSubscriptionManager is\\nICaskSubscriptionManager,\\nInitializable,\\nOwnableUpgradeable,\\nPausableUpgradeable,\\nKeeperCompatibleInterface\\n{\\n\\n    /************************** PARAMETERS **************************/\\n\\n    /** @dev contract to manage subscription plan definitions. */\\n    ICaskSubscriptionPlans public subscriptionPlans;\\n    ICaskSubscriptions public subscriptions;\\n\\n    /** @dev vault to use for payments. */\\n    ICaskVault public vault;\\n\\n    /** @dev minimum total fee to charge, if rate fees do not add up to this amount */\\n    uint256 public paymentFeeMin;\\n\\n    /** @dev min and max percentage to charge on payments, in bps. 50% = 5000. */\\n    uint256 public paymentFeeRateMin; // floor if full discount applied\\n    uint256 public paymentFeeRateMax; // fee if no discount applied\\n\\n    /** @dev factor used to reduce payment fee based on qty of staked CASK */\\n    uint256 public stakeTargetFactor;\\n\\n    /** @dev size (in seconds) of buckets to group subscriptions into for processing */\\n    uint32 public processBucketSize;\\n\\n    /** @dev map used to track when subscriptions need attention next */\\n    mapping(CheckType => mapping(uint32 => uint256[])) private processQueue; // renewal bucket => subscriptionId[]\\n    mapping(CheckType => uint32) private processingBucket; // current bucket being processed\\n\\n\\n    modifier onlySubscriptions() {\\n        require(_msgSender() == address(subscriptions), \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n    function initialize(\\n        address _vault,\\n        address _subscriptionPlans,\\n        address _subscriptions\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n\\n        subscriptionPlans = ICaskSubscriptionPlans(_subscriptionPlans);\\n        subscriptions = ICaskSubscriptions(_subscriptions);\\n        vault = ICaskVault(_vault);\\n\\n        // parameter defaults\\n        paymentFeeMin = 0;\\n        paymentFeeRateMin = 0;\\n        paymentFeeRateMax = 0;\\n        stakeTargetFactor = 0;\\n        processBucketSize = 300;\\n\\n        processingBucket[CheckType.Active] = _currentBucket();\\n        processingBucket[CheckType.PastDue] = _currentBucket();\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function _parsePlanData(\\n        bytes32 _planData\\n    ) internal pure returns(ICaskSubscriptions.PlanInfo memory) {\\n        bytes1 options = bytes1(_planData << 248);\\n        return ICaskSubscriptions.PlanInfo({\\n        price: uint256(_planData >> 160),\\n        planId: uint32(bytes4(_planData << 96)),\\n        period: uint32(bytes4(_planData << 128)),\\n        freeTrial: uint32(bytes4(_planData << 160)),\\n        maxActive: uint32(bytes4(_planData << 192)),\\n        minPeriods: uint16(bytes2(_planData << 224)),\\n        gracePeriod: uint8(bytes1(_planData << 240)),\\n        canPause: options & 0x01 == 0x01,\\n        canTransfer: options & 0x02 == 0x02\\n        });\\n    }\\n\\n    function _planDataPrice(\\n        bytes32 _planData\\n    ) internal pure returns(uint256) {\\n        return uint256(_planData >> 160);\\n    }\\n\\n    function _parseNetworkData(\\n        bytes32 _networkData\\n    ) internal pure returns(ICaskSubscriptions.NetworkInfo memory) {\\n        return ICaskSubscriptions.NetworkInfo({\\n            network: address(bytes20(_networkData)),\\n            feeBps: uint16(bytes2(_networkData << 160))\\n        });\\n    }\\n\\n    function _parseDiscountData(\\n        bytes32 _discountData\\n    ) internal pure returns(ICaskSubscriptionPlans.Discount memory) {\\n        bytes2 options = bytes2(_discountData << 240);\\n        return ICaskSubscriptionPlans.Discount({\\n            value: uint256(_discountData >> 160),\\n            validAfter: uint32(bytes4(_discountData << 96)),\\n            expiresAt: uint32(bytes4(_discountData << 128)),\\n            maxRedemptions: uint32(bytes4(_discountData << 160)),\\n            planId: uint32(bytes4(_discountData << 192)),\\n            applyPeriods: uint16(bytes2(_discountData << 224)),\\n            isFixed: options & 0x0001 == 0x0001\\n        });\\n    }\\n\\n    function processSinglePayment(\\n        address _consumer,\\n        address _provider,\\n        uint256 _subscriptionId,\\n        uint256 _value\\n    ) external onlySubscriptions {\\n        _processPayment(_consumer, _provider, _subscriptionId, _value);\\n    }\\n\\n    function _processPayment(\\n        address _consumer,\\n        address _provider,\\n        uint256 _subscriptionId,\\n        uint256 _value\\n    ) internal {\\n        require(vault.currentValueOf(_consumer) >= _value, \\\"!BALANCE\\\");\\n\\n        (ICaskSubscriptions.Subscription memory subscription,) = subscriptions.getSubscription(_subscriptionId);\\n\\n        uint256 paymentFeeRateAdjusted = paymentFeeRateMax;\\n\\n        if (stakeTargetFactor > 0) {\\n            // TODO: reduce fee based on staked balance\\n            //        uint256 stakedBalance = ICaskStakeManager(stakeManager).providerStakeBalanceOf(_provider);\\n            uint256 stakedBalance = 0;\\n\\n            ICaskSubscriptions.PlanInfo memory planData = _parsePlanData(subscription.planData);\\n\\n            if (stakedBalance > 0) {\\n                uint256 loadFactor = 365 / (planData.period / 1 days);\\n                uint256 noFeeTarget = subscriptions.getProviderSubscriptionCount(subscription.provider, false, 0) *\\n                stakeTargetFactor * loadFactor;\\n\\n                paymentFeeRateAdjusted = paymentFeeRateMax - (paymentFeeRateMax * (stakedBalance / noFeeTarget));\\n                if (paymentFeeRateAdjusted < paymentFeeRateMin) {\\n                    paymentFeeRateAdjusted = paymentFeeRateMin;\\n                }\\n            }\\n        }\\n\\n        ICaskSubscriptionPlans.Provider memory providerProfile = subscriptionPlans.getProviderProfile(_provider);\\n\\n        address paymentAddress = _provider;\\n        if (providerProfile.paymentAddress != address(0)) {\\n            paymentAddress = providerProfile.paymentAddress;\\n        }\\n\\n        _sendPayment(subscription, _consumer, paymentAddress, _value, paymentFeeRateAdjusted);\\n    }\\n\\n    function _sendPayment(\\n        ICaskSubscriptions.Subscription memory _subscription,\\n        address _consumer,\\n        address _paymentAddress,\\n        uint256 _value,\\n        uint256 _protocolFeeBps\\n    ) internal {\\n        uint256 protocolFee = _value * _protocolFeeBps / 10000;\\n        if (protocolFee < paymentFeeMin) {\\n            protocolFee = paymentFeeMin;\\n        }\\n        if (_subscription.networkData > 0) {\\n            ICaskSubscriptions.NetworkInfo memory networkData = _parseNetworkData(_subscription.networkData);\\n            vault.protocolPayment(_consumer, _paymentAddress, _value, protocolFee,\\n                networkData.network, _value * networkData.feeBps / 10000);\\n        } else {\\n            vault.protocolPayment(_consumer, _paymentAddress, _value, protocolFee);\\n        }\\n    }\\n\\n    function _bucketAt(\\n        uint32 _timestamp\\n    ) internal view returns(uint32) {\\n        return _timestamp - (_timestamp % processBucketSize) + processBucketSize;\\n    }\\n\\n    function _currentBucket() internal view returns(uint32) {\\n        uint32 timestamp = uint32(block.timestamp);\\n        return timestamp - (timestamp % processBucketSize);\\n    }\\n\\n    function queueItem(\\n        CheckType _checkType,\\n        uint32 _bucket,\\n        uint256 _idx\\n    ) external view returns(uint256) {\\n        return processQueue[_checkType][_bucket][_idx];\\n    }\\n\\n    function queueSize(\\n        CheckType _checkType,\\n        uint32 _bucket\\n    ) external view returns(uint256) {\\n        return processQueue[_checkType][_bucket].length;\\n    }\\n\\n    function queuePosition(\\n        CheckType _checkType\\n    ) external view returns(uint32) {\\n        return processingBucket[_checkType];\\n    }\\n\\n    function checkUpkeep(\\n        bytes calldata checkData\\n    ) external view override returns(bool upkeepNeeded, bytes memory performData) {\\n        (\\n        uint256 limit,\\n        uint256 minDepth,\\n        CheckType checkType\\n        ) = abi.decode(checkData, (uint256, uint256, CheckType));\\n\\n        uint32 currentBucket = _currentBucket();\\n        upkeepNeeded = false;\\n\\n        uint32 checkBucket = processingBucket[checkType];\\n        if (checkBucket == 0) {\\n            checkBucket = currentBucket;\\n        }\\n\\n        // if queue is more than an hour old, all hands on deck\\n        if (currentBucket >= checkBucket && currentBucket - checkBucket > 1 hours) {\\n            upkeepNeeded = true;\\n        } else {\\n            while (checkBucket <= currentBucket) {\\n                if (processQueue[checkType][checkBucket].length > 0 &&\\n                    processQueue[checkType][checkBucket].length >= minDepth)\\n                {\\n                    upkeepNeeded = true;\\n                    break;\\n                }\\n                checkBucket += processBucketSize;\\n            }\\n        }\\n\\n        performData = abi.encode(limit, processQueue[checkType][checkBucket].length, checkType);\\n    }\\n\\n\\n    function performUpkeep(\\n        bytes calldata performData\\n    ) external override whenNotPaused {\\n        (\\n        uint256 limit,\\n        uint256 depth,\\n        CheckType checkType\\n        ) = abi.decode(performData, (uint256, uint256, CheckType));\\n\\n        uint32 currentBucket = _currentBucket();\\n        uint256 renewals = 0;\\n        uint256 maxBucketChecks = limit * 5;\\n\\n        if (processingBucket[checkType] == 0) {\\n            processingBucket[checkType] = currentBucket;\\n        }\\n\\n        while (renewals < limit && maxBucketChecks > 0 && processingBucket[checkType] <= currentBucket) {\\n            uint256 queueLen = processQueue[checkType][processingBucket[checkType]].length;\\n            if (queueLen > 0) {\\n                uint256 subscriptionId = processQueue[checkType][processingBucket[checkType]][queueLen-1];\\n                processQueue[checkType][processingBucket[checkType]].pop();\\n                _renewSubscription(subscriptionId);\\n                renewals += 1;\\n            } else {\\n                if (processingBucket[checkType] < currentBucket) {\\n                    processingBucket[checkType] += processBucketSize;\\n                    maxBucketChecks -= 1;\\n                } else {\\n                    break; // nothing left to do\\n                }\\n            }\\n        }\\n\\n        emit SubscriptionManagerReport(limit, renewals, depth, checkType,\\n            processQueue[checkType][processingBucket[checkType]].length, processingBucket[checkType]);\\n    }\\n\\n    function renewSubscription(\\n        uint256 _subscriptionId\\n    ) external override whenNotPaused {\\n        _renewSubscription(_subscriptionId);\\n    }\\n\\n    function _renewSubscription(\\n        uint256 _subscriptionId\\n    ) internal {\\n        (\\n        ICaskSubscriptions.Subscription memory subscription,\\n        address consumer\\n        ) = subscriptions.getSubscription(_subscriptionId);\\n\\n        uint32 timestamp = uint32(block.timestamp);\\n\\n        // will be re-queued when resumed\\n        if (subscription.status == ICaskSubscriptions.SubscriptionStatus.Paused) {\\n            return;\\n        }\\n\\n        // not time to renew yet, re-queue for renewal time\\n        if (subscription.renewAt > timestamp) {\\n            processQueue[CheckType.Active][_bucketAt(subscription.renewAt)].push(_subscriptionId);\\n            return;\\n        }\\n\\n        // subscription scheduled to be canceled by consumer or has hit its cancelAt time\\n        if ((subscription.cancelAt > 0 && subscription.cancelAt <= timestamp) ||\\n            (subscriptionPlans.getPlanStatus(subscription.provider, subscription.planId) ==\\n                ICaskSubscriptionPlans.PlanStatus.EndOfLife &&\\n                subscriptionPlans.getPlanEOL(subscription.provider, subscription.planId) <= timestamp))\\n        {\\n            subscriptions.managerCommand(_subscriptionId, ICaskSubscriptions.ManagerCommand.Cancel);\\n            return;\\n        }\\n\\n        // if a plan change is pending, switch to use new plan info\\n        if (subscriptions.getPendingPlanChange(_subscriptionId) > 0) {\\n            subscriptions.managerCommand(_subscriptionId, ICaskSubscriptions.ManagerCommand.PlanChange);\\n            (subscription,) = subscriptions.getSubscription(_subscriptionId); // refresh\\n        }\\n\\n        ICaskSubscriptions.PlanInfo memory planInfo = _parsePlanData(subscription.planData);\\n        uint256 chargePrice = planInfo.price;\\n\\n        // maybe apply discount\\n        if (subscription.discountId > 0) {\\n            ICaskSubscriptionPlans.Discount memory discountInfo = _parseDiscountData(subscription.discountData);\\n\\n            if(discountInfo.applyPeriods == 0 || subscription.createdAt +\\n                (planInfo.period * discountInfo.applyPeriods) < timestamp)\\n            {\\n                if (discountInfo.isFixed) {\\n                    chargePrice = chargePrice - discountInfo.value;\\n                } else {\\n                    chargePrice = chargePrice - (chargePrice * discountInfo.value / 10000);\\n                }\\n            } else {\\n                subscriptions.managerCommand(_subscriptionId, ICaskSubscriptions.ManagerCommand.ClearDiscount);\\n            }\\n        }\\n\\n        // consumer does not have enough balance to cover payment\\n        if (chargePrice > 0 && vault.currentValueOf(consumer) < chargePrice) {\\n            // if have not been able to renew for up to `gracePeriod` days, cancel subscription\\n            if (subscription.renewAt < timestamp - (planInfo.gracePeriod * 1 days)) {\\n                subscriptions.managerCommand(_subscriptionId, ICaskSubscriptions.ManagerCommand.Cancel);\\n            } else if (subscription.status != ICaskSubscriptions.SubscriptionStatus.PastDue) {\\n                processQueue[CheckType.PastDue][_bucketAt(timestamp + 4 hours)].push(_subscriptionId);\\n                subscriptions.managerCommand(_subscriptionId, ICaskSubscriptions.ManagerCommand.PastDue);\\n            } else {\\n                processQueue[CheckType.PastDue][_bucketAt(timestamp + 4 hours)].push(_subscriptionId);\\n            }\\n\\n        } else if (chargePrice > 0) {\\n            _processPayment(consumer, subscription.provider, _subscriptionId, chargePrice);\\n\\n            if (subscription.renewAt + planInfo.period < timestamp) {\\n                // subscription is still behind, put in next queue bucket\\n                processQueue[CheckType.PastDue][_bucketAt(timestamp)].push(_subscriptionId);\\n            } else {\\n                processQueue[CheckType.Active][_bucketAt(subscription.renewAt + planInfo.period)].push(_subscriptionId);\\n            }\\n\\n            subscriptions.managerCommand(_subscriptionId, ICaskSubscriptions.ManagerCommand.Renew);\\n\\n        } else { // no charge, move along now\\n            processQueue[CheckType.Active][_bucketAt(subscription.renewAt + planInfo.period)].push(_subscriptionId);\\n            subscriptions.managerCommand(_subscriptionId, ICaskSubscriptions.ManagerCommand.Renew);\\n        }\\n\\n    }\\n\\n\\n\\n    /************************** ADMIN FUNCTIONS **************************/\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setParameters(\\n        uint256 _paymentFeeMin,\\n        uint256 _paymentFeeRateMin,\\n        uint256 _paymentFeeRateMax,\\n        uint256 _stakeTargetFactor,\\n        uint32 _processBucketSize\\n    ) external onlyOwner {\\n        paymentFeeMin = _paymentFeeMin;\\n        paymentFeeRateMin = _paymentFeeRateMin;\\n        paymentFeeRateMax = _paymentFeeRateMax;\\n        stakeTargetFactor = _stakeTargetFactor;\\n        processBucketSize = _processBucketSize;\\n\\n        // re-map to new bucket size\\n        processingBucket[CheckType.Active] = _bucketAt(processingBucket[CheckType.Active]);\\n        processingBucket[CheckType.PastDue] = _bucketAt(processingBucket[CheckType.PastDue]);\\n    }\\n\\n    function setProcessingBucket(\\n        CheckType _checkType,\\n        uint32 _timestamp\\n    ) external onlyOwner {\\n        processingBucket[_checkType] = _bucketAt(_timestamp);\\n    }\\n\\n}\",\"keccak256\":\"0xc57361d5d133a81fd4ad15d7c0f21f5dc4f6876c1cd29f23d582cb24cdc4cb18\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b620010be1760201c565b15905090565b3b151590565b612d2980620001126000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80638fe17b16116100c3578063c0c53b8b1161007c578063c0c53b8b146102be578063c54c58c4146102d1578063c83cbe89146102e4578063d71bb37b146102ed578063f2fde38b14610300578063fbfa77cf1461031357600080fd5b80638fe17b161461025957806393357f581461026c578063a76d67b81461027c578063aa878f761461028f578063b8e381e5146102a2578063badf4b3e146102b557600080fd5b80635c975abb116101155780635c975abb146101da5780636e04ff0d146101f05780637040cbb114610211578063715018a6146102245780638456cb591461022c5780638da5cb5b1461023457600080fd5b806308e27a991461015d57806314fad707146101795780631c39033c1461018c578063219e24c5146101b45780633f4ba83a146101bd5780634585e33b146101c7575b600080fd5b610166609d5481565b6040519081526020015b60405180910390f35b6101666101873660046123f4565b610326565b61019f61019a366004612435565b61039f565b60405163ffffffff9091168152602001610170565b610166609b5481565b6101c56103e5565b005b6101c56101d5366004612459565b610422565b60655460ff166040519015158152602001610170565b6102036101fe366004612459565b61096d565b6040516101709291906124f7565b6101c561021f366004612533565b610b71565b6101c5610c98565b6101c5610ccc565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610170565b609754610241906001600160a01b031681565b609e5461019f9063ffffffff1681565b6101c561028a366004612580565b610cfe565b61016661029d366004612580565b610d88565b609854610241906001600160a01b031681565b610166609c5481565b6101c56102cc3660046125ce565b610ddd565b6101c56102df366004612619565b610fa0565b610166609a5481565b6101c56102fb36600461265f565b610ff7565b6101c561030e366004612678565b611026565b609954610241906001600160a01b031681565b6000609f600085600281111561033e5761033e612695565b600281111561034f5761034f612695565b815260200190815260200160002060008463ffffffff1663ffffffff168152602001908152602001600020828154811061038b5761038b6126ab565b906000526020600020015490509392505050565b600060a060008360028111156103b7576103b7612695565b60028111156103c8576103c8612695565b815260208101919091526040016000205463ffffffff1692915050565b6033546001600160a01b031633146104185760405162461bcd60e51b815260040161040f906126c1565b60405180910390fd5b6104206110c4565b565b60655460ff16156104455760405162461bcd60e51b815260040161040f906126f6565b6000808061045584860186612720565b9250925092506000610465611157565b9050600080610475866005612764565b905060a0600085600281111561048d5761048d612695565b600281111561049e5761049e612695565b815260208101919091526040016000205463ffffffff1661050e578260a060008660028111156104d0576104d0612695565b60028111156104e1576104e1612695565b815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055505b858210801561051d5750600081115b801561056c57508263ffffffff1660a0600086600281111561054157610541612695565b600281111561055257610552612695565b815260208101919091526040016000205463ffffffff1611155b1561085d576000609f600086600281111561058957610589612695565b600281111561059a5761059a612695565b8152602001908152602001600020600060a060008860028111156105c0576105c0612695565b60028111156105d1576105d1612695565b8152602080820192909252604090810160009081205463ffffffff1684529183019390935291019020549050801561077c576000609f600087600281111561061b5761061b612695565b600281111561062c5761062c612695565b8152602001908152602001600020600060a0600089600281111561065257610652612695565b600281111561066357610663612695565b8152602080820192909252604090810160009081205463ffffffff1684529183019390935291019020610697600184612783565b815481106106a7576106a76126ab565b90600052602060002001549050609f60008760028111156106ca576106ca612695565b60028111156106db576106db612695565b8152602001908152602001600020600060a0600089600281111561070157610701612695565b600281111561071257610712612695565b8152602080820192909252604090810160009081205463ffffffff168452918301939093529101902080548061074a5761074a61279a565b600190038181906000526020600020016000905590556107698161117f565b6107746001856127b0565b935050610857565b8363ffffffff1660a0600087600281111561079957610799612695565b60028111156107aa576107aa612695565b815260208101919091526040016000205463ffffffff16101561085157609e5463ffffffff1660a060008760028111156107e6576107e6612695565b60028111156107f7576107f7612695565b815260208101919091526040016000908120805490919061081f90849063ffffffff166127c8565b92506101000a81548163ffffffff021916908363ffffffff16021790555060018261084a9190612783565b9150610857565b5061085d565b5061050e565b7f75a64c7d044cacf7f5733a40d9f770446e4a977483bf14d9e58752255a62785386838787609f60008a600281111561089857610898612695565b60028111156108a9576108a9612695565b8152602001908152602001600020600060a060008c60028111156108cf576108cf612695565b60028111156108e0576108e0612695565b8152602080820192909252604090810160009081205463ffffffff1684529183019390935291018120549060a0908b600281111561092057610920612695565b600281111561093157610931612695565b81526020810191909152604090810160002054905161095b96959493929163ffffffff1690612804565b60405180910390a15050505050505050565b6000606081808061098086880188612720565b9250925092506000610990611157565b905060009550600060a060008460028111156109ae576109ae612695565b60028111156109bf576109bf612695565b815260208101919091526040016000205463ffffffff169050806109e05750805b8063ffffffff168263ffffffff1610158015610a0c5750610e10610a048284612843565b63ffffffff16115b15610a1a5760019650610af9565b8163ffffffff168163ffffffff1611610af9576000609f6000856002811115610a4557610a45612695565b6002811115610a5657610a56612695565b81526020808201929092526040908101600090812063ffffffff86168252909252902054118015610ad1575083609f6000856002811115610a9957610a99612695565b6002811115610aaa57610aaa612695565b81526020808201929092526040908101600090812063ffffffff8616825290925290205410155b15610adf5760019650610af9565b609e54610af29063ffffffff16826127c8565b9050610a1a565b84609f6000856002811115610b1057610b10612695565b6002811115610b2157610b21612695565b81526020808201929092526040908101600090812063ffffffff861682528352819020549051610b549392879101612868565b604051602081830303815290604052955050505050509250929050565b6033546001600160a01b03163314610b9b5760405162461bcd60e51b815260040161040f906126c1565b609a859055609b849055609c839055609d829055609e805463ffffffff191663ffffffff8316179055610bfb60a0600060015b6002811115610bdf57610bdf612695565b815260208101919091526040016000205463ffffffff16611c81565b6001600090815260a060208190527f5e4aa62fc514c001129aba2f8cfdadfdbf7b1cca3faf4a1fee3af14b1315f0dd805463ffffffff191663ffffffff9490941693909317909255610c4f91906002610bce565b600260005260a06020527e3e94880a29ff53e6a8208a04e96e212c12922b7bda6b10d8c1979e9844e678805463ffffffff191663ffffffff929092169190911790555050505050565b6033546001600160a01b03163314610cc25760405162461bcd60e51b815260040161040f906126c1565b6104206000611cb1565b6033546001600160a01b03163314610cf65760405162461bcd60e51b815260040161040f906126c1565b610420611d03565b6033546001600160a01b03163314610d285760405162461bcd60e51b815260040161040f906126c1565b610d3181611c81565b60a06000846002811115610d4757610d47612695565b6002811115610d5857610d58612695565b815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055505050565b6000609f6000846002811115610da057610da0612695565b6002811115610db157610db1612695565b81526020808201929092526040908101600090812063ffffffff86168252909252902054905092915050565b600054610100900460ff16610df85760005460ff1615610dfc565b303b155b610e5f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161040f565b600054610100900460ff16158015610e81576000805461ffff19166101011790555b610e89611d5b565b610e91611d92565b609780546001600160a01b038086166001600160a01b0319928316179092556098805485841690831617905560998054928716929091169190911790556000609a819055609b819055609c819055609d55609e805463ffffffff191661012c179055610efb611157565b600160005260a06020527f5e4aa62fc514c001129aba2f8cfdadfdbf7b1cca3faf4a1fee3af14b1315f0dd805463ffffffff191663ffffffff92909216919091179055610f46611157565b600260005260a06020527e3e94880a29ff53e6a8208a04e96e212c12922b7bda6b10d8c1979e9844e678805463ffffffff191663ffffffff929092169190911790558015610f9a576000805461ff00191690555b50505050565b6098546001600160a01b0316336001600160a01b031614610feb5760405162461bcd60e51b815260206004820152600560248201526404282aaa8960db1b604482015260640161040f565b610f9a84848484611dc9565b60655460ff161561101a5760405162461bcd60e51b815260040161040f906126f6565b6110238161117f565b50565b6033546001600160a01b031633146110505760405162461bcd60e51b815260040161040f906126c1565b6001600160a01b0381166110b55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161040f565b61102381611cb1565b3b151590565b60655460ff1661110d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161040f565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b609e54600090429061116f9063ffffffff16826128a1565b6111799082612843565b91505090565b60985460405163dc311dd360e01b81526004810183905260009182916001600160a01b039091169063dc311dd39060240160006040518083038186803b1580156111c857600080fd5b505afa1580156111dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261120491908101906129b6565b90925090504260038360c00151600581111561122257611222612695565b141561122e5750505050565b8063ffffffff1683610120015163ffffffff1611156112b65760016000908152609f6020526101208401517fd8ebc4b3e3fc84fb7267bc9651f22e5107e8b4ddef6b7d4ac503c1ca7368470b919061128590611c81565b63ffffffff168152602080820192909252604001600090812080546001810182559082529190200193909355505050565b600083610160015163ffffffff161180156112e257508063ffffffff1683610160015163ffffffff1611155b806114475750600260975460a085015160e086015160405163b6ab359f60e01b81526001600160a01b03928316600482015263ffffffff909116602482015291169063b6ab359f9060440160206040518083038186803b15801561134557600080fd5b505afa158015611359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137d9190612b0c565b600281111561138e5761138e612695565b148015611447575060975460a084015160e085015160405163025b687560e01b815263ffffffff8516936001600160a01b03169263025b6875926113ee926004016001600160a01b0392909216825263ffffffff16602082015260400190565b60206040518083038186803b15801561140657600080fd5b505afa15801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143e9190612b29565b63ffffffff1611155b156114b757609854604051633efbd95560e11b81526001600160a01b0390911690637df7b2aa9061147f908790600290600401612b46565b600060405180830381600087803b15801561149957600080fd5b505af11580156114ad573d6000803e3d6000fd5b5050505050505050565b60985460405163321b9a5560e21b8152600481018690526000916001600160a01b03169063c86e69549060240160206040518083038186803b1580156114fc57600080fd5b505afa158015611510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115349190612b6a565b111561162357609854604051633efbd95560e11b81526001600160a01b0390911690637df7b2aa9061156d908790600190600401612b46565b600060405180830381600087803b15801561158757600080fd5b505af115801561159b573d6000803e3d6000fd5b505060985460405163dc311dd360e01b8152600481018890526001600160a01b03909116925063dc311dd3915060240160006040518083038186803b1580156115e357600080fd5b505afa1580156115f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261161f91908101906129b6565b5092505b600061163284600001516120e7565b8051604086015191925090156117f15760006116f886606001516040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e08101825260a083811c825263ffffffff608085811c8216602080860191909152606087811c8416868801529587901c8316958501959095529385901c169282019290925261ffff601084901c1691810191909152600160f01b60f09290921b821690911460c082015290565b90508060a0015161ffff166000148061174357508363ffffffff168160a0015161ffff16846040015161172b9190612b83565b87610100015161173b91906127c8565b63ffffffff16105b15611789578060c001511561176557805161175e9083612783565b91506117ef565b8051612710906117759084612764565b61177f9190612baf565b61175e9083612783565b609854604051633efbd95560e11b81526001600160a01b0390911690637df7b2aa906117bc908a90600590600401612b46565b600060405180830381600087803b1580156117d657600080fd5b505af11580156117ea573d6000803e3d6000fd5b505050505b505b60008111801561187b575060995460405163597435cb60e01b81526001600160a01b0386811660048301528392169063597435cb9060240160206040518083038186803b15801561184157600080fd5b505afa158015611855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118799190612b6a565b105b15611a535760c08201516118959060ff1662015180612bc3565b6118a49062ffffff1684612843565b63ffffffff1685610120015163ffffffff16101561192657609854604051633efbd95560e11b81526001600160a01b0390911690637df7b2aa906118ef908990600290600401612b46565b600060405180830381600087803b15801561190957600080fd5b505af115801561191d573d6000803e3d6000fd5b50505050611c79565b60058560c00151600581111561193e5761193e612695565b146119e65760026000908152609f6020527f95684aba87c7afc0cb0825ce802e59a0c43a91e65441705f8ec2d377a306a58790611985611980866138406127c8565b611c81565b63ffffffff1681526020808201929092526040908101600090812080546001810182559082529290209091018790556098549051633efbd95560e11b81526001600160a01b0390911690637df7b2aa906118ef908990600390600401612b46565b60026000908152609f6020527f95684aba87c7afc0cb0825ce802e59a0c43a91e65441705f8ec2d377a306a58790611a23611980866138406127c8565b63ffffffff1681526020808201929092526040016000908120805460018101825590825291902001869055611c79565b8015611b9e57611a69848660a001518884611dc9565b8263ffffffff168260400151866101200151611a8591906127c8565b63ffffffff161015611af85760026000908152609f6020527f95684aba87c7afc0cb0825ce802e59a0c43a91e65441705f8ec2d377a306a58790611ac885611c81565b63ffffffff1681526020808201929092526040016000908120805460018101825590825291902001869055611b6c565b60016000908152609f60205260408301516101208701517fd8ebc4b3e3fc84fb7267bc9651f22e5107e8b4ddef6b7d4ac503c1ca7368470b9291611b409161198091906127c8565b63ffffffff16815260208082019290925260400160009081208054600181018255908252919020018690555b609854604051633efbd95560e11b81526001600160a01b0390911690637df7b2aa906118ef9089906004908101612b46565b60016000908152609f60205260408301516101208701517fd8ebc4b3e3fc84fb7267bc9651f22e5107e8b4ddef6b7d4ac503c1ca7368470b9291611be69161198091906127c8565b63ffffffff1681526020808201929092526040908101600090812080546001810182559082529290209091018790556098549051633efbd95560e11b81526001600160a01b0390911690637df7b2aa90611c469089906004908101612b46565b600060405180830381600087803b158015611c6057600080fd5b505af1158015611c74573d6000803e3d6000fd5b505050505b505050505050565b609e5460009063ffffffff16611c9781846128a1565b611ca19084612843565b611cab91906127c8565b92915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff1615611d265760405162461bcd60e51b815260040161040f906126f6565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861113a3390565b600054610100900460ff16611d825760405162461bcd60e51b815260040161040f90612be5565b611d8a6121c2565b6104206121e9565b600054610100900460ff16611db95760405162461bcd60e51b815260040161040f90612be5565b611dc16121c2565b610420612219565b60995460405163597435cb60e01b81526001600160a01b0386811660048301528392169063597435cb9060240160206040518083038186803b158015611e0e57600080fd5b505afa158015611e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e469190612b6a565b1015611e7f5760405162461bcd60e51b81526020600482015260086024820152672142414c414e434560c01b604482015260640161040f565b60985460405163dc311dd360e01b8152600481018490526000916001600160a01b03169063dc311dd39060240160006040518083038186803b158015611ec457600080fd5b505afa158015611ed8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f0091908101906129b6565b50609c54609d54919250901561203f57600080611f2084600001516120e7565b9050811561203c576000620151808260400151611f3d9190612c30565b611f499061016d612c30565b609d5460985460a08801516040516374c1443960e01b81526001600160a01b0391821660048201526000602482018190526044820181905263ffffffff95909516955085939291909116906374c144399060640160206040518083038186803b158015611fb557600080fd5b505afa158015611fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fed9190612b6a565b611ff79190612764565b6120019190612764565b905061200d8185612baf565b609c5461201a9190612764565b609c546120279190612783565b9450609b5485101561203957609b5494505b50505b50505b609754604051630782fb5960e31b81526001600160a01b0387811660048301526000921690633c17dac89060240160006040518083038186803b15801561208557600080fd5b505afa158015612099573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120c19190810190612c53565b805190915086906001600160a01b0316156120da575080515b6114ad848983888761224c565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915250604080516101208101825260a083811c8252608084811c63ffffffff908116602080860191909152606087811c8316868801529587901c8216958501959095529385901c90931692820192909252601083901c61ffff1691810191909152600882901c60ff1660c082015260f89190911b600160f81b8181161460e0830152600160f91b9081161461010082015290565b600054610100900460ff166104205760405162461bcd60e51b815260040161040f90612be5565b600054610100900460ff166122105760405162461bcd60e51b815260040161040f90612be5565b61042033611cb1565b600054610100900460ff166122405760405162461bcd60e51b815260040161040f90612be5565b6065805460ff19169055565b600061271061225b8385612764565b6122659190612baf565b9050609a548110156122765750609a545b60208601511561238d5760006122c2876020015160408051808201909152600080825260208201525060408051808201909152606082901c815260509190911c61ffff16602082015290565b609954815160208301519293506001600160a01b03909116916379b2125f91899189918991889190612710906122fc9061ffff1685612764565b6123069190612baf565b60405160e088901b6001600160e01b03191681526001600160a01b039687166004820152948616602486015260448501939093526064840191909152909216608482015260a481019190915260c401600060405180830381600087803b15801561236f57600080fd5b505af1158015612383573d6000803e3d6000fd5b5050505050611c79565b60995460405163fcd6a25b60e01b81526001600160a01b038781166004830152868116602483015260448201869052606482018490529091169063fcd6a25b90608401611c46565b6003811061102357600080fd5b63ffffffff8116811461102357600080fd5b60008060006060848603121561240957600080fd5b8335612414816123d5565b92506020840135612424816123e2565b929592945050506040919091013590565b60006020828403121561244757600080fd5b8135612452816123d5565b9392505050565b6000806020838503121561246c57600080fd5b823567ffffffffffffffff8082111561248457600080fd5b818501915085601f83011261249857600080fd5b8135818111156124a757600080fd5b8660208285010111156124b957600080fd5b60209290920196919550909350505050565b60005b838110156124e65781810151838201526020016124ce565b83811115610f9a5750506000910152565b8215158152604060208201526000825180604084015261251e8160608501602087016124cb565b601f01601f1916919091016060019392505050565b600080600080600060a0868803121561254b57600080fd5b853594506020860135935060408601359250606086013591506080860135612572816123e2565b809150509295509295909350565b6000806040838503121561259357600080fd5b823561259e816123d5565b915060208301356125ae816123e2565b809150509250929050565b6001600160a01b038116811461102357600080fd5b6000806000606084860312156125e357600080fd5b83356125ee816125b9565b925060208401356125fe816125b9565b9150604084013561260e816125b9565b809150509250925092565b6000806000806080858703121561262f57600080fd5b843561263a816125b9565b9350602085013561264a816125b9565b93969395505050506040820135916060013590565b60006020828403121561267157600080fd5b5035919050565b60006020828403121561268a57600080fd5b8135612452816125b9565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60008060006060848603121561273557600080fd5b8335925060208401359150604084013561260e816123d5565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561277e5761277e61274e565b500290565b6000828210156127955761279561274e565b500390565b634e487b7160e01b600052603160045260246000fd5b600082198211156127c3576127c361274e565b500190565b600063ffffffff8083168185168083038211156127e7576127e761274e565b01949350505050565b6003811061280057612800612695565b9052565b868152602081018690526040810185905260c0810161282660608301866127f0565b83608083015263ffffffff831660a0830152979650505050505050565b600063ffffffff838116908316818110156128605761286061274e565b039392505050565b838152602081018390526060810161288360408301846127f0565b949350505050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff808416806128b8576128b861288b565b92169190910692915050565b634e487b7160e01b600052604160045260246000fd5b6040516101c0810167ffffffffffffffff811182821017156128fe576128fe6128c4565b60405290565b805161290f816125b9565b919050565b80516006811061290f57600080fd5b805161290f816123e2565b600082601f83011261293f57600080fd5b815167ffffffffffffffff8082111561295a5761295a6128c4565b604051601f8301601f19908116603f01168101908282118183101715612982576129826128c4565b8160405283815286602085880101111561299b57600080fd5b6129ac8460208301602089016124cb565b9695505050505050565b600080604083850312156129c957600080fd5b825167ffffffffffffffff808211156129e157600080fd5b908401906101c082870312156129f657600080fd5b6129fe6128da565b8251815260208301516020820152604083015160408201526060830151606082015260808301516080820152612a3660a08401612904565b60a0820152612a4760c08401612914565b60c0820152612a5860e08401612923565b60e0820152610100612a6b818501612923565b90820152610120612a7d848201612923565b90820152610140612a8f848201612923565b90820152610160612aa1848201612923565b908201526101808381015183811115612ab957600080fd5b612ac58982870161292e565b8284015250506101a08084015183811115612adf57600080fd5b612aeb8982870161292e565b828401525050809450505050612b0360208401612904565b90509250929050565b600060208284031215612b1e57600080fd5b8151612452816123d5565b600060208284031215612b3b57600080fd5b8151612452816123e2565b8281526040810160068310612b5d57612b5d612695565b8260208301529392505050565b600060208284031215612b7c57600080fd5b5051919050565b600063ffffffff80831681851681830481118215151615612ba657612ba661274e565b02949350505050565b600082612bbe57612bbe61288b565b500490565b600062ffffff80831681851681830481118215151615612ba657612ba661274e565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600063ffffffff80841680612c4757612c4761288b565b92169190910492915050565b600060208284031215612c6557600080fd5b815167ffffffffffffffff80821115612c7d57600080fd5b9083019060608286031215612c9157600080fd5b604051606081018181108382111715612cac57612cac6128c4565b6040528251612cba816125b9565b815260208381015190820152604083015182811115612cd857600080fd5b612ce48782860161292e565b6040830152509594505050505056fea2646970667358221220fec0bc7a9f85b690eabd094d9e2fb704ed880514fcec701c315eb06142640fbd64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c80638fe17b16116100c3578063c0c53b8b1161007c578063c0c53b8b146102be578063c54c58c4146102d1578063c83cbe89146102e4578063d71bb37b146102ed578063f2fde38b14610300578063fbfa77cf1461031357600080fd5b80638fe17b161461025957806393357f581461026c578063a76d67b81461027c578063aa878f761461028f578063b8e381e5146102a2578063badf4b3e146102b557600080fd5b80635c975abb116101155780635c975abb146101da5780636e04ff0d146101f05780637040cbb114610211578063715018a6146102245780638456cb591461022c5780638da5cb5b1461023457600080fd5b806308e27a991461015d57806314fad707146101795780631c39033c1461018c578063219e24c5146101b45780633f4ba83a146101bd5780634585e33b146101c7575b600080fd5b610166609d5481565b6040519081526020015b60405180910390f35b6101666101873660046123f4565b610326565b61019f61019a366004612435565b61039f565b60405163ffffffff9091168152602001610170565b610166609b5481565b6101c56103e5565b005b6101c56101d5366004612459565b610422565b60655460ff166040519015158152602001610170565b6102036101fe366004612459565b61096d565b6040516101709291906124f7565b6101c561021f366004612533565b610b71565b6101c5610c98565b6101c5610ccc565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610170565b609754610241906001600160a01b031681565b609e5461019f9063ffffffff1681565b6101c561028a366004612580565b610cfe565b61016661029d366004612580565b610d88565b609854610241906001600160a01b031681565b610166609c5481565b6101c56102cc3660046125ce565b610ddd565b6101c56102df366004612619565b610fa0565b610166609a5481565b6101c56102fb36600461265f565b610ff7565b6101c561030e366004612678565b611026565b609954610241906001600160a01b031681565b6000609f600085600281111561033e5761033e612695565b600281111561034f5761034f612695565b815260200190815260200160002060008463ffffffff1663ffffffff168152602001908152602001600020828154811061038b5761038b6126ab565b906000526020600020015490509392505050565b600060a060008360028111156103b7576103b7612695565b60028111156103c8576103c8612695565b815260208101919091526040016000205463ffffffff1692915050565b6033546001600160a01b031633146104185760405162461bcd60e51b815260040161040f906126c1565b60405180910390fd5b6104206110c4565b565b60655460ff16156104455760405162461bcd60e51b815260040161040f906126f6565b6000808061045584860186612720565b9250925092506000610465611157565b9050600080610475866005612764565b905060a0600085600281111561048d5761048d612695565b600281111561049e5761049e612695565b815260208101919091526040016000205463ffffffff1661050e578260a060008660028111156104d0576104d0612695565b60028111156104e1576104e1612695565b815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055505b858210801561051d5750600081115b801561056c57508263ffffffff1660a0600086600281111561054157610541612695565b600281111561055257610552612695565b815260208101919091526040016000205463ffffffff1611155b1561085d576000609f600086600281111561058957610589612695565b600281111561059a5761059a612695565b8152602001908152602001600020600060a060008860028111156105c0576105c0612695565b60028111156105d1576105d1612695565b8152602080820192909252604090810160009081205463ffffffff1684529183019390935291019020549050801561077c576000609f600087600281111561061b5761061b612695565b600281111561062c5761062c612695565b8152602001908152602001600020600060a0600089600281111561065257610652612695565b600281111561066357610663612695565b8152602080820192909252604090810160009081205463ffffffff1684529183019390935291019020610697600184612783565b815481106106a7576106a76126ab565b90600052602060002001549050609f60008760028111156106ca576106ca612695565b60028111156106db576106db612695565b8152602001908152602001600020600060a0600089600281111561070157610701612695565b600281111561071257610712612695565b8152602080820192909252604090810160009081205463ffffffff168452918301939093529101902080548061074a5761074a61279a565b600190038181906000526020600020016000905590556107698161117f565b6107746001856127b0565b935050610857565b8363ffffffff1660a0600087600281111561079957610799612695565b60028111156107aa576107aa612695565b815260208101919091526040016000205463ffffffff16101561085157609e5463ffffffff1660a060008760028111156107e6576107e6612695565b60028111156107f7576107f7612695565b815260208101919091526040016000908120805490919061081f90849063ffffffff166127c8565b92506101000a81548163ffffffff021916908363ffffffff16021790555060018261084a9190612783565b9150610857565b5061085d565b5061050e565b7f75a64c7d044cacf7f5733a40d9f770446e4a977483bf14d9e58752255a62785386838787609f60008a600281111561089857610898612695565b60028111156108a9576108a9612695565b8152602001908152602001600020600060a060008c60028111156108cf576108cf612695565b60028111156108e0576108e0612695565b8152602080820192909252604090810160009081205463ffffffff1684529183019390935291018120549060a0908b600281111561092057610920612695565b600281111561093157610931612695565b81526020810191909152604090810160002054905161095b96959493929163ffffffff1690612804565b60405180910390a15050505050505050565b6000606081808061098086880188612720565b9250925092506000610990611157565b905060009550600060a060008460028111156109ae576109ae612695565b60028111156109bf576109bf612695565b815260208101919091526040016000205463ffffffff169050806109e05750805b8063ffffffff168263ffffffff1610158015610a0c5750610e10610a048284612843565b63ffffffff16115b15610a1a5760019650610af9565b8163ffffffff168163ffffffff1611610af9576000609f6000856002811115610a4557610a45612695565b6002811115610a5657610a56612695565b81526020808201929092526040908101600090812063ffffffff86168252909252902054118015610ad1575083609f6000856002811115610a9957610a99612695565b6002811115610aaa57610aaa612695565b81526020808201929092526040908101600090812063ffffffff8616825290925290205410155b15610adf5760019650610af9565b609e54610af29063ffffffff16826127c8565b9050610a1a565b84609f6000856002811115610b1057610b10612695565b6002811115610b2157610b21612695565b81526020808201929092526040908101600090812063ffffffff861682528352819020549051610b549392879101612868565b604051602081830303815290604052955050505050509250929050565b6033546001600160a01b03163314610b9b5760405162461bcd60e51b815260040161040f906126c1565b609a859055609b849055609c839055609d829055609e805463ffffffff191663ffffffff8316179055610bfb60a0600060015b6002811115610bdf57610bdf612695565b815260208101919091526040016000205463ffffffff16611c81565b6001600090815260a060208190527f5e4aa62fc514c001129aba2f8cfdadfdbf7b1cca3faf4a1fee3af14b1315f0dd805463ffffffff191663ffffffff9490941693909317909255610c4f91906002610bce565b600260005260a06020527e3e94880a29ff53e6a8208a04e96e212c12922b7bda6b10d8c1979e9844e678805463ffffffff191663ffffffff929092169190911790555050505050565b6033546001600160a01b03163314610cc25760405162461bcd60e51b815260040161040f906126c1565b6104206000611cb1565b6033546001600160a01b03163314610cf65760405162461bcd60e51b815260040161040f906126c1565b610420611d03565b6033546001600160a01b03163314610d285760405162461bcd60e51b815260040161040f906126c1565b610d3181611c81565b60a06000846002811115610d4757610d47612695565b6002811115610d5857610d58612695565b815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055505050565b6000609f6000846002811115610da057610da0612695565b6002811115610db157610db1612695565b81526020808201929092526040908101600090812063ffffffff86168252909252902054905092915050565b600054610100900460ff16610df85760005460ff1615610dfc565b303b155b610e5f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161040f565b600054610100900460ff16158015610e81576000805461ffff19166101011790555b610e89611d5b565b610e91611d92565b609780546001600160a01b038086166001600160a01b0319928316179092556098805485841690831617905560998054928716929091169190911790556000609a819055609b819055609c819055609d55609e805463ffffffff191661012c179055610efb611157565b600160005260a06020527f5e4aa62fc514c001129aba2f8cfdadfdbf7b1cca3faf4a1fee3af14b1315f0dd805463ffffffff191663ffffffff92909216919091179055610f46611157565b600260005260a06020527e3e94880a29ff53e6a8208a04e96e212c12922b7bda6b10d8c1979e9844e678805463ffffffff191663ffffffff929092169190911790558015610f9a576000805461ff00191690555b50505050565b6098546001600160a01b0316336001600160a01b031614610feb5760405162461bcd60e51b815260206004820152600560248201526404282aaa8960db1b604482015260640161040f565b610f9a84848484611dc9565b60655460ff161561101a5760405162461bcd60e51b815260040161040f906126f6565b6110238161117f565b50565b6033546001600160a01b031633146110505760405162461bcd60e51b815260040161040f906126c1565b6001600160a01b0381166110b55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161040f565b61102381611cb1565b3b151590565b60655460ff1661110d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161040f565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b609e54600090429061116f9063ffffffff16826128a1565b6111799082612843565b91505090565b60985460405163dc311dd360e01b81526004810183905260009182916001600160a01b039091169063dc311dd39060240160006040518083038186803b1580156111c857600080fd5b505afa1580156111dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261120491908101906129b6565b90925090504260038360c00151600581111561122257611222612695565b141561122e5750505050565b8063ffffffff1683610120015163ffffffff1611156112b65760016000908152609f6020526101208401517fd8ebc4b3e3fc84fb7267bc9651f22e5107e8b4ddef6b7d4ac503c1ca7368470b919061128590611c81565b63ffffffff168152602080820192909252604001600090812080546001810182559082529190200193909355505050565b600083610160015163ffffffff161180156112e257508063ffffffff1683610160015163ffffffff1611155b806114475750600260975460a085015160e086015160405163b6ab359f60e01b81526001600160a01b03928316600482015263ffffffff909116602482015291169063b6ab359f9060440160206040518083038186803b15801561134557600080fd5b505afa158015611359573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137d9190612b0c565b600281111561138e5761138e612695565b148015611447575060975460a084015160e085015160405163025b687560e01b815263ffffffff8516936001600160a01b03169263025b6875926113ee926004016001600160a01b0392909216825263ffffffff16602082015260400190565b60206040518083038186803b15801561140657600080fd5b505afa15801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143e9190612b29565b63ffffffff1611155b156114b757609854604051633efbd95560e11b81526001600160a01b0390911690637df7b2aa9061147f908790600290600401612b46565b600060405180830381600087803b15801561149957600080fd5b505af11580156114ad573d6000803e3d6000fd5b5050505050505050565b60985460405163321b9a5560e21b8152600481018690526000916001600160a01b03169063c86e69549060240160206040518083038186803b1580156114fc57600080fd5b505afa158015611510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115349190612b6a565b111561162357609854604051633efbd95560e11b81526001600160a01b0390911690637df7b2aa9061156d908790600190600401612b46565b600060405180830381600087803b15801561158757600080fd5b505af115801561159b573d6000803e3d6000fd5b505060985460405163dc311dd360e01b8152600481018890526001600160a01b03909116925063dc311dd3915060240160006040518083038186803b1580156115e357600080fd5b505afa1580156115f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261161f91908101906129b6565b5092505b600061163284600001516120e7565b8051604086015191925090156117f15760006116f886606001516040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e08101825260a083811c825263ffffffff608085811c8216602080860191909152606087811c8416868801529587901c8316958501959095529385901c169282019290925261ffff601084901c1691810191909152600160f01b60f09290921b821690911460c082015290565b90508060a0015161ffff166000148061174357508363ffffffff168160a0015161ffff16846040015161172b9190612b83565b87610100015161173b91906127c8565b63ffffffff16105b15611789578060c001511561176557805161175e9083612783565b91506117ef565b8051612710906117759084612764565b61177f9190612baf565b61175e9083612783565b609854604051633efbd95560e11b81526001600160a01b0390911690637df7b2aa906117bc908a90600590600401612b46565b600060405180830381600087803b1580156117d657600080fd5b505af11580156117ea573d6000803e3d6000fd5b505050505b505b60008111801561187b575060995460405163597435cb60e01b81526001600160a01b0386811660048301528392169063597435cb9060240160206040518083038186803b15801561184157600080fd5b505afa158015611855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118799190612b6a565b105b15611a535760c08201516118959060ff1662015180612bc3565b6118a49062ffffff1684612843565b63ffffffff1685610120015163ffffffff16101561192657609854604051633efbd95560e11b81526001600160a01b0390911690637df7b2aa906118ef908990600290600401612b46565b600060405180830381600087803b15801561190957600080fd5b505af115801561191d573d6000803e3d6000fd5b50505050611c79565b60058560c00151600581111561193e5761193e612695565b146119e65760026000908152609f6020527f95684aba87c7afc0cb0825ce802e59a0c43a91e65441705f8ec2d377a306a58790611985611980866138406127c8565b611c81565b63ffffffff1681526020808201929092526040908101600090812080546001810182559082529290209091018790556098549051633efbd95560e11b81526001600160a01b0390911690637df7b2aa906118ef908990600390600401612b46565b60026000908152609f6020527f95684aba87c7afc0cb0825ce802e59a0c43a91e65441705f8ec2d377a306a58790611a23611980866138406127c8565b63ffffffff1681526020808201929092526040016000908120805460018101825590825291902001869055611c79565b8015611b9e57611a69848660a001518884611dc9565b8263ffffffff168260400151866101200151611a8591906127c8565b63ffffffff161015611af85760026000908152609f6020527f95684aba87c7afc0cb0825ce802e59a0c43a91e65441705f8ec2d377a306a58790611ac885611c81565b63ffffffff1681526020808201929092526040016000908120805460018101825590825291902001869055611b6c565b60016000908152609f60205260408301516101208701517fd8ebc4b3e3fc84fb7267bc9651f22e5107e8b4ddef6b7d4ac503c1ca7368470b9291611b409161198091906127c8565b63ffffffff16815260208082019290925260400160009081208054600181018255908252919020018690555b609854604051633efbd95560e11b81526001600160a01b0390911690637df7b2aa906118ef9089906004908101612b46565b60016000908152609f60205260408301516101208701517fd8ebc4b3e3fc84fb7267bc9651f22e5107e8b4ddef6b7d4ac503c1ca7368470b9291611be69161198091906127c8565b63ffffffff1681526020808201929092526040908101600090812080546001810182559082529290209091018790556098549051633efbd95560e11b81526001600160a01b0390911690637df7b2aa90611c469089906004908101612b46565b600060405180830381600087803b158015611c6057600080fd5b505af1158015611c74573d6000803e3d6000fd5b505050505b505050505050565b609e5460009063ffffffff16611c9781846128a1565b611ca19084612843565b611cab91906127c8565b92915050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff1615611d265760405162461bcd60e51b815260040161040f906126f6565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861113a3390565b600054610100900460ff16611d825760405162461bcd60e51b815260040161040f90612be5565b611d8a6121c2565b6104206121e9565b600054610100900460ff16611db95760405162461bcd60e51b815260040161040f90612be5565b611dc16121c2565b610420612219565b60995460405163597435cb60e01b81526001600160a01b0386811660048301528392169063597435cb9060240160206040518083038186803b158015611e0e57600080fd5b505afa158015611e22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e469190612b6a565b1015611e7f5760405162461bcd60e51b81526020600482015260086024820152672142414c414e434560c01b604482015260640161040f565b60985460405163dc311dd360e01b8152600481018490526000916001600160a01b03169063dc311dd39060240160006040518083038186803b158015611ec457600080fd5b505afa158015611ed8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f0091908101906129b6565b50609c54609d54919250901561203f57600080611f2084600001516120e7565b9050811561203c576000620151808260400151611f3d9190612c30565b611f499061016d612c30565b609d5460985460a08801516040516374c1443960e01b81526001600160a01b0391821660048201526000602482018190526044820181905263ffffffff95909516955085939291909116906374c144399060640160206040518083038186803b158015611fb557600080fd5b505afa158015611fc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fed9190612b6a565b611ff79190612764565b6120019190612764565b905061200d8185612baf565b609c5461201a9190612764565b609c546120279190612783565b9450609b5485101561203957609b5494505b50505b50505b609754604051630782fb5960e31b81526001600160a01b0387811660048301526000921690633c17dac89060240160006040518083038186803b15801561208557600080fd5b505afa158015612099573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526120c19190810190612c53565b805190915086906001600160a01b0316156120da575080515b6114ad848983888761224c565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081019190915250604080516101208101825260a083811c8252608084811c63ffffffff908116602080860191909152606087811c8316868801529587901c8216958501959095529385901c90931692820192909252601083901c61ffff1691810191909152600882901c60ff1660c082015260f89190911b600160f81b8181161460e0830152600160f91b9081161461010082015290565b600054610100900460ff166104205760405162461bcd60e51b815260040161040f90612be5565b600054610100900460ff166122105760405162461bcd60e51b815260040161040f90612be5565b61042033611cb1565b600054610100900460ff166122405760405162461bcd60e51b815260040161040f90612be5565b6065805460ff19169055565b600061271061225b8385612764565b6122659190612baf565b9050609a548110156122765750609a545b60208601511561238d5760006122c2876020015160408051808201909152600080825260208201525060408051808201909152606082901c815260509190911c61ffff16602082015290565b609954815160208301519293506001600160a01b03909116916379b2125f91899189918991889190612710906122fc9061ffff1685612764565b6123069190612baf565b60405160e088901b6001600160e01b03191681526001600160a01b039687166004820152948616602486015260448501939093526064840191909152909216608482015260a481019190915260c401600060405180830381600087803b15801561236f57600080fd5b505af1158015612383573d6000803e3d6000fd5b5050505050611c79565b60995460405163fcd6a25b60e01b81526001600160a01b038781166004830152868116602483015260448201869052606482018490529091169063fcd6a25b90608401611c46565b6003811061102357600080fd5b63ffffffff8116811461102357600080fd5b60008060006060848603121561240957600080fd5b8335612414816123d5565b92506020840135612424816123e2565b929592945050506040919091013590565b60006020828403121561244757600080fd5b8135612452816123d5565b9392505050565b6000806020838503121561246c57600080fd5b823567ffffffffffffffff8082111561248457600080fd5b818501915085601f83011261249857600080fd5b8135818111156124a757600080fd5b8660208285010111156124b957600080fd5b60209290920196919550909350505050565b60005b838110156124e65781810151838201526020016124ce565b83811115610f9a5750506000910152565b8215158152604060208201526000825180604084015261251e8160608501602087016124cb565b601f01601f1916919091016060019392505050565b600080600080600060a0868803121561254b57600080fd5b853594506020860135935060408601359250606086013591506080860135612572816123e2565b809150509295509295909350565b6000806040838503121561259357600080fd5b823561259e816123d5565b915060208301356125ae816123e2565b809150509250929050565b6001600160a01b038116811461102357600080fd5b6000806000606084860312156125e357600080fd5b83356125ee816125b9565b925060208401356125fe816125b9565b9150604084013561260e816125b9565b809150509250925092565b6000806000806080858703121561262f57600080fd5b843561263a816125b9565b9350602085013561264a816125b9565b93969395505050506040820135916060013590565b60006020828403121561267157600080fd5b5035919050565b60006020828403121561268a57600080fd5b8135612452816125b9565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60008060006060848603121561273557600080fd5b8335925060208401359150604084013561260e816123d5565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561277e5761277e61274e565b500290565b6000828210156127955761279561274e565b500390565b634e487b7160e01b600052603160045260246000fd5b600082198211156127c3576127c361274e565b500190565b600063ffffffff8083168185168083038211156127e7576127e761274e565b01949350505050565b6003811061280057612800612695565b9052565b868152602081018690526040810185905260c0810161282660608301866127f0565b83608083015263ffffffff831660a0830152979650505050505050565b600063ffffffff838116908316818110156128605761286061274e565b039392505050565b838152602081018390526060810161288360408301846127f0565b949350505050565b634e487b7160e01b600052601260045260246000fd5b600063ffffffff808416806128b8576128b861288b565b92169190910692915050565b634e487b7160e01b600052604160045260246000fd5b6040516101c0810167ffffffffffffffff811182821017156128fe576128fe6128c4565b60405290565b805161290f816125b9565b919050565b80516006811061290f57600080fd5b805161290f816123e2565b600082601f83011261293f57600080fd5b815167ffffffffffffffff8082111561295a5761295a6128c4565b604051601f8301601f19908116603f01168101908282118183101715612982576129826128c4565b8160405283815286602085880101111561299b57600080fd5b6129ac8460208301602089016124cb565b9695505050505050565b600080604083850312156129c957600080fd5b825167ffffffffffffffff808211156129e157600080fd5b908401906101c082870312156129f657600080fd5b6129fe6128da565b8251815260208301516020820152604083015160408201526060830151606082015260808301516080820152612a3660a08401612904565b60a0820152612a4760c08401612914565b60c0820152612a5860e08401612923565b60e0820152610100612a6b818501612923565b90820152610120612a7d848201612923565b90820152610140612a8f848201612923565b90820152610160612aa1848201612923565b908201526101808381015183811115612ab957600080fd5b612ac58982870161292e565b8284015250506101a08084015183811115612adf57600080fd5b612aeb8982870161292e565b828401525050809450505050612b0360208401612904565b90509250929050565b600060208284031215612b1e57600080fd5b8151612452816123d5565b600060208284031215612b3b57600080fd5b8151612452816123e2565b8281526040810160068310612b5d57612b5d612695565b8260208301529392505050565b600060208284031215612b7c57600080fd5b5051919050565b600063ffffffff80831681851681830481118215151615612ba657612ba661274e565b02949350505050565b600082612bbe57612bbe61288b565b500490565b600062ffffff80831681851681830481118215151615612ba657612ba661274e565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600063ffffffff80841680612c4757612c4761288b565b92169190910492915050565b600060208284031215612c6557600080fd5b815167ffffffffffffffff80821115612c7d57600080fd5b9083019060608286031215612c9157600080fd5b604051606081018181108382111715612cac57612cac6128c4565b6040528251612cba816125b9565b815260208381015190820152604083015182811115612cd857600080fd5b612ce48782860161292e565b6040830152509594505050505056fea2646970667358221220fec0bc7a9f85b690eabd094d9e2fb704ed880514fcec701c315eb06142640fbd64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.",
        "params": {
          "checkData": "specified in the upkeep registration so it is always the same for a registered upkeep. This can easilly be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."
        },
        "returns": {
          "performData": "bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.",
          "upkeepNeeded": "boolean to indicate whether the keeper should call performUpkeep or not."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "paymentFeeMin": {
        "details": "minimum total fee to charge, if rate fees do not add up to this amount "
      },
      "paymentFeeRateMin": {
        "details": "min and max percentage to charge on payments, in bps. 50% = 5000. "
      },
      "processBucketSize": {
        "details": "size (in seconds) of buckets to group subscriptions into for processing "
      },
      "processQueue": {
        "details": "map used to track when subscriptions need attention next "
      },
      "stakeTargetFactor": {
        "details": "factor used to reduce payment fee based on qty of staked CASK "
      },
      "subscriptionPlans": {
        "details": "contract to manage subscription plan definitions. "
      },
      "vault": {
        "details": "vault to use for payments. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."
      },
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 327,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 330,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2551,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 205,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 319,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 415,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 506,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8687,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "subscriptionPlans",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(ICaskSubscriptionPlans)7485"
      },
      {
        "astId": 8690,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "subscriptions",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(ICaskSubscriptions)7846"
      },
      {
        "astId": 8694,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "vault",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(ICaskVault)8115"
      },
      {
        "astId": 8697,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "paymentFeeMin",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 8700,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "paymentFeeRateMin",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 8702,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "paymentFeeRateMax",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 8705,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "stakeTargetFactor",
        "offset": 0,
        "slot": "157",
        "type": "t_uint256"
      },
      {
        "astId": 8708,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "processBucketSize",
        "offset": 0,
        "slot": "158",
        "type": "t_uint32"
      },
      {
        "astId": 8717,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "processQueue",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_enum(CheckType)7247,t_mapping(t_uint32,t_array(t_uint256)dyn_storage))"
      },
      {
        "astId": 8722,
        "contract": "contracts/protocol/CaskSubscriptionManager.sol:CaskSubscriptionManager",
        "label": "processingBucket",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_enum(CheckType)7247,t_uint32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICaskSubscriptionPlans)7485": {
        "encoding": "inplace",
        "label": "contract ICaskSubscriptionPlans",
        "numberOfBytes": "20"
      },
      "t_contract(ICaskSubscriptions)7846": {
        "encoding": "inplace",
        "label": "contract ICaskSubscriptions",
        "numberOfBytes": "20"
      },
      "t_contract(ICaskVault)8115": {
        "encoding": "inplace",
        "label": "contract ICaskVault",
        "numberOfBytes": "20"
      },
      "t_enum(CheckType)7247": {
        "encoding": "inplace",
        "label": "enum ICaskSubscriptionManager.CheckType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(CheckType)7247,t_mapping(t_uint32,t_array(t_uint256)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_enum(CheckType)7247",
        "label": "mapping(enum ICaskSubscriptionManager.CheckType => mapping(uint32 => uint256[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_array(t_uint256)dyn_storage)"
      },
      "t_mapping(t_enum(CheckType)7247,t_uint32)": {
        "encoding": "mapping",
        "key": "t_enum(CheckType)7247",
        "label": "mapping(enum ICaskSubscriptionManager.CheckType => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint32,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}