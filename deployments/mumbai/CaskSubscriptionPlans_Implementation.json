{
  "address": "0x031FcD5848cd7a302D59D3099BC8DfDf23B56a00",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "PlanDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "eolAt",
          "type": "uint32"
        }
      ],
      "name": "PlanEOL",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "PlanEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_planPeriod",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_subscriptionCreatedAt",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_discountId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_discountData",
          "type": "bytes32"
        }
      ],
      "name": "consumeDiscount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "disablePlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "enablePlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "getPlanEOL",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "getPlanStatus",
      "outputs": [
        {
          "internalType": "enum ICaskSubscriptionPlans.PlanStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "getProviderProfile",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "paymentAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            }
          ],
          "internalType": "struct ICaskSubscriptionPlans.Provider",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_eolAt",
          "type": "uint32"
        }
      ],
      "name": "killPlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subscriptionManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        }
      ],
      "name": "setProviderProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_discountId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_discountData",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyDiscount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_planData",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyPlan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3334738e8aaf81d7e7c747d9639cbcf1ad6e8336251c7d8227a9cb4f21dfac8",
  "receipt": {
    "to": null,
    "from": "0x83e50cD4123bAA60f6d6c8A83ca85Ac72e826bD0",
    "contractAddress": "0x031FcD5848cd7a302D59D3099BC8DfDf23B56a00",
    "transactionIndex": 0,
    "gasUsed": "1323320",
    "logsBloom": "0x
    "blockHash": "0xbd1fd016d2916d694895037d88c1dc8d9e0fdd2aabf01fe5644d24f862ec4f49",
    "transactionHash": "0xe3334738e8aaf81d7e7c747d9639cbcf1ad6e8336251c7d8227a9cb4f21dfac8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24733437,
        "transactionHash": "0xe3334738e8aaf81d7e7c747d9639cbcf1ad6e8336251c7d8227a9cb4f21dfac8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000083e50cd4123baa60f6d6c8a83ca85ac72e826bd0",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000259c6b92ee6c80000000000000000000000000000000000000000000000000088efc7a0536700000000000000000000000000000000000000000000000067bdadbbeffa0f0cd130000000000000000000000000000000000000000000000000869600e7248038000000000000000000000000000000000000000000000067bdb015b6b33df3993",
        "logIndex": 0,
        "blockHash": "0xbd1fd016d2916d694895037d88c1dc8d9e0fdd2aabf01fe5644d24f862ec4f49"
      }
    ],
    "blockNumber": 24733437,
    "cumulativeGasUsed": "1323320",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "05372b4b96a0a02c64a17bf31d22afb6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"PlanDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eolAt\",\"type\":\"uint32\"}],\"name\":\"PlanEOL\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"PlanEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_planPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_subscriptionCreatedAt\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_discountId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_discountData\",\"type\":\"bytes32\"}],\"name\":\"consumeDiscount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"disablePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"enablePlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"getPlanEOL\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"getPlanStatus\",\"outputs\":[{\"internalType\":\"enum ICaskSubscriptionPlans.PlanStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderProfile\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"paymentAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"internalType\":\"struct ICaskSubscriptionPlans.Provider\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_eolAt\",\"type\":\"uint32\"}],\"name\":\"killPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriptionManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"setProviderProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_discountId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_discountData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyDiscount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_planData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyPlan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"discountUses\":{\"details\":\"Maps for discounts. \"},\"planStatus\":{\"details\":\"Map for current plan status. \"},\"providerProfiles\":{\"details\":\"Map for provider to profile info. \"},\"subscriptionManager\":{\"details\":\"Address of subscription manager. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/CaskSubscriptionPlans.sol\":\"CaskSubscriptionPlans\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n        }\\n        return computedHash;\\n    }\\n}\\n\",\"keccak256\":\"0x9c35727c74a6ffd8d02237b414e7bfb532c0323b1088709def98ea5c628157de\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskSubscriptionPlans.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskSubscriptionPlans {\\n\\n    enum PlanStatus {\\n        Enabled,\\n        Disabled,\\n        EndOfLife\\n    }\\n\\n    struct Discount {\\n        uint256 value;\\n        uint32 validAfter;\\n        uint32 expiresAt;\\n        uint32 maxUses;\\n        uint32 planId;\\n        uint16 applyPeriods;\\n        bool isFixed;\\n    }\\n\\n    struct Provider {\\n        address paymentAddress;\\n        string cid;\\n    }\\n\\n    function setProviderProfile(address _paymentAddress, string calldata _cid) external;\\n\\n    function getProviderProfile(address _provider) external view returns(Provider memory);\\n\\n    function consumeDiscount(address _provider, uint32 _planId, uint32 _planPeriod, uint32 _subscriptionCreatedAt,\\n        bytes32 _discountId, bytes32 _discountData) external returns(bool);\\n\\n    function getPlanStatus(address _provider, uint32 _planId) external view returns (PlanStatus);\\n\\n    function getPlanEOL(address _provider, uint32 _planId) external view returns (uint32);\\n\\n    function disablePlan(uint32 _planId) external;\\n\\n    function enablePlan(uint32 _planId) external;\\n\\n    function killPlan(uint32 _planId, uint32 _eolAt) external;\\n\\n    function verifyPlan(bytes32 _planData, bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof) external view returns(bool);\\n\\n    function verifyDiscount(address _provider, uint32 _planId, bytes32 _discountId, bytes32 _discountData,\\n        bytes32 _merkleRoot, bytes32[] calldata _merkleProof) external view returns(bool);\\n\\n\\n    /** @dev Emitted when `provider` disables a subscription plan */\\n    event PlanDisabled(address indexed provider, uint32 indexed planId);\\n\\n    /** @dev Emitted when `provider` enables a subscription plan */\\n    event PlanEnabled(address indexed provider, uint32 indexed planId);\\n\\n    /** @dev Emitted when `provider` end-of-lifes a subscription plan */\\n    event PlanEOL(address indexed provider, uint32 indexed planId, uint32 eolAt);\\n\\n}\",\"keccak256\":\"0x7d3469dbaf33f3be8ea5551a66452acd7adfaf89d7ff3ae5b46db21826de27aa\",\"license\":\"MIT\"},\"contracts/protocol/CaskSubscriptionPlans.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nimport \\\"../interfaces/ICaskSubscriptionPlans.sol\\\";\\n\\ncontract CaskSubscriptionPlans is\\nICaskSubscriptionPlans,\\nInitializable,\\nOwnableUpgradeable,\\nPausableUpgradeable\\n{\\n    /** @dev Address of subscription manager. */\\n    address public subscriptionManager;\\n\\n    /** @dev Map for provider to profile info. */\\n    mapping(address => Provider) internal providerProfiles;\\n\\n    /** @dev Map for current plan status. */\\n    // provider->planId => Plan\\n    mapping(address => mapping(uint32 => PlanStatus)) internal planStatus;\\n    mapping(address => mapping(uint32 => uint32)) internal planEol;\\n\\n    /** @dev Maps for discounts. */\\n    mapping(address => mapping(uint32 => mapping(bytes32 => uint256))) internal discountUses;\\n\\n    modifier onlyManager() {\\n        require(msg.sender == subscriptionManager, \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n\\n    function setProviderProfile(\\n        address _paymentAddress,\\n        string calldata _cid\\n    ) external override {\\n        Provider storage profile = providerProfiles[msg.sender];\\n        profile.paymentAddress = _paymentAddress;\\n        profile.cid = _cid;\\n    }\\n\\n    function getProviderProfile(\\n        address _provider\\n    ) external override view returns(Provider memory) {\\n        return providerProfiles[_provider];\\n    }\\n\\n    function verifyPlan(\\n        bytes32 _planData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof\\n    ) external override pure returns(bool) {\\n        return MerkleProof.verify(_merkleProof, _merkleRoot, keccak256(abi.encode(_planData)));\\n    }\\n\\n    function verifyDiscount(\\n        address _provider,\\n        uint32 _planId,\\n        bytes32 _discountId,\\n        bytes32 _discountData,\\n        bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof\\n    ) external override view returns(bool) {\\n        if (MerkleProof.verify(_merkleProof, _merkleRoot,\\n            keccak256(abi.encode(_discountId, _discountData))))\\n        {\\n            Discount memory discountInfo = _parseDiscountData(_discountData);\\n            require(discountInfo.planId == 0 || discountInfo.planId == _planId, \\\"!INVALID(planId)\\\");\\n\\n            return ( (discountInfo.maxUses == 0 ||\\n                     discountUses[_provider][discountInfo.planId][_discountId] < discountInfo.maxUses) &&\\n                     (discountInfo.validAfter == 0 || discountInfo.validAfter >= uint32(block.timestamp)) &&\\n                     (discountInfo.expiresAt == 0 || discountInfo.expiresAt < uint32(block.timestamp)) );\\n        }\\n\\n        return false;\\n    }\\n\\n    function consumeDiscount(\\n        address _provider,\\n        uint32 _planId,\\n        uint32 _planPeriod,\\n        uint32 _subscriptionCreatedAt,\\n        bytes32 _discountId,\\n        bytes32 _discountData\\n    ) external override onlyManager returns(bool) {\\n        Discount memory discountInfo = _parseDiscountData(_discountData);\\n\\n        require(discountInfo.maxUses == 0 ||\\n            discountUses[_provider][_planId][_discountId] < discountInfo.maxUses, \\\"!DISCOUNT_MAX_USES\\\");\\n        require(discountInfo.validAfter == 0 ||\\n            discountInfo.validAfter >= uint32(block.timestamp), \\\"!DISCOUNT_NOT_VALID_YET\\\");\\n        require(discountInfo.applyPeriods == 0 || _subscriptionCreatedAt +\\n                    (_planPeriod * discountInfo.applyPeriods) < uint32(block.timestamp), \\\"!DISCOUNT_EXHAUSTED\\\");\\n\\n        discountUses[_provider][_planId][_discountId] += 1;\\n\\n        return discountInfo.maxUses == 0 || discountUses[_provider][_planId][_discountId] < discountInfo.maxUses;\\n    }\\n\\n    function getPlanStatus(\\n        address _provider,\\n        uint32 _planId\\n    ) external view returns (PlanStatus) {\\n        return planStatus[_provider][_planId];\\n    }\\n\\n    function getPlanEOL(\\n        address _provider,\\n        uint32 _planId\\n    ) external view returns (uint32) {\\n        return planEol[_provider][_planId];\\n    }\\n\\n    function disablePlan(\\n        uint32 _planId\\n    ) external override {\\n        require(planStatus[msg.sender][_planId] == PlanStatus.Enabled, \\\"!NOT_ENABLED\\\");\\n\\n        planStatus[msg.sender][_planId] = PlanStatus.Disabled;\\n\\n        emit PlanDisabled(msg.sender, _planId);\\n    }\\n\\n    function enablePlan(\\n        uint32 _planId\\n    ) external override {\\n        require(planStatus[msg.sender][_planId] == PlanStatus.Disabled, \\\"!NOT_DISABLED\\\");\\n\\n        planStatus[msg.sender][_planId] = PlanStatus.Enabled;\\n\\n        emit PlanEnabled(msg.sender, _planId);\\n    }\\n\\n    function killPlan(\\n        uint32 _planId,\\n        uint32 _eolAt\\n    ) external override {\\n        planStatus[msg.sender][_planId] = PlanStatus.EndOfLife;\\n        planEol[msg.sender][_planId] = _eolAt;\\n\\n        emit PlanEOL(msg.sender, _planId, _eolAt);\\n    }\\n\\n    /************************** ADMIN FUNCTIONS **************************/\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setManager(\\n        address _subscriptionManager\\n    ) external onlyOwner {\\n        subscriptionManager = _subscriptionManager;\\n    }\\n\\n\\n\\n    function _parseDiscountData(\\n        bytes32 _discountData\\n    ) internal pure returns(Discount memory) {\\n        bytes2 options = bytes2(_discountData << 240);\\n        return Discount({\\n            value: uint256(_discountData >> 160),\\n            validAfter: uint32(bytes4(_discountData << 96)),\\n            expiresAt: uint32(bytes4(_discountData << 128)),\\n            maxUses: uint32(bytes4(_discountData << 160)),\\n            planId: uint32(bytes4(_discountData << 192)),\\n            applyPeriods: uint16(bytes2(_discountData << 224)),\\n            isFixed: options & 0x0001 == 0x0001\\n        });\\n    }\\n\\n}\",\"keccak256\":\"0x3551aaf2726899c70aa24d6ca6c881527ab3218b8b0d0adcba1af1fb2a3d49e7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806372212e76116100ad578063b6ab359f11610071578063b6ab359f14610273578063bf158fd2146102c1578063d0ebdbe7146102d4578063f2fde38b146102e7578063fdfca0d3146102fa57600080fd5b806372212e76146102185780638129fc1c1461022b5780638456cb59146102335780638da5cb5b1461023b5780639c5c3eb41461026057600080fd5b80633f4ba83a116100f45780633f4ba83a146101c7578063551d937f146101cf5780635c975abb146101f2578063715018a6146101fd57806371ce3e661461020557600080fd5b8063025b6875146101265780631bc569b51461017f578063256c6ba9146101945780633c17dac8146101a7575b600080fd5b610165610134366004611198565b6001600160a01b03919091166000908152609a6020908152604080832063ffffffff94851684529091529020541690565b60405163ffffffff90911681526020015b60405180910390f35b61019261018d3660046111cb565b61030d565b005b6101926101a23660046111cb565b6103d9565b6101ba6101b53660046111ed565b6104a0565b6040516101769190611208565b61019261057c565b6101e26101dd366004611277565b6105b0565b6040519015158152602001610176565b60655460ff166101e2565b61019261082a565b6101e2610213366004611329565b61085e565b6101e261022636600461137c565b6108ca565b610192610a5e565b610192610b27565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610176565b61019261026e3660046113fe565b610b59565b6102b4610281366004611198565b6001600160a01b038216600090815260996020908152604080832063ffffffff8516845290915290205460ff1692915050565b6040516101769190611430565b609754610248906001600160a01b031681565b6101926102e23660046111ed565b610be2565b6101926102f53660046111ed565b610c2e565b610192610308366004611458565b610cc6565b33600090815260996020908152604080832063ffffffff8516845290915281205460ff1660028111156103425761034261141a565b146103835760405162461bcd60e51b815260206004820152600c60248201526b085393d517d153905093115160a21b60448201526064015b60405180910390fd5b33600081815260996020908152604080832063ffffffff86168085529252808320805460ff19166001179055519092917f50ec551c598cd517a78f91d12398f4f1d95e0171a4393505d01401f8b6c940a791a350565b600133600090815260996020908152604080832063ffffffff8616845290915290205460ff1660028111156104105761041061141a565b1461044d5760405162461bcd60e51b815260206004820152600d60248201526c085393d517d11254d050931151609a1b604482015260640161037a565b33600081815260996020908152604080832063ffffffff86168085529252808320805460ff19169055519092917fb6af1d2951898e17e763c18b77daf0ada2f2753802d37868e67797e87991a29891a350565b604080518082018252600080825260606020808401919091526001600160a01b0385811683526098825291849020845180860190955280549092168452600182018054939493918401916104f3906114db565b80601f016020809104026020016040519081016040528092919081815260200182805461051f906114db565b801561056c5780601f106105415761010080835404028352916020019161056c565b820191906000526020600020905b81548152906001019060200180831161054f57829003601f168201915b5050505050815250509050919050565b6033546001600160a01b031633146105a65760405162461bcd60e51b815260040161037a90611516565b6105ae610d09565b565b6097546000906001600160a01b031633146105f55760405162461bcd60e51b815260206004820152600560248201526404282aaa8960db1b604482015260640161037a565b600061060083610d9c565b9050806060015163ffffffff1660001480610654575060608101516001600160a01b0389166000908152609b6020908152604080832063ffffffff8c81168552908352818420898552909252909120549116115b6106955760405162461bcd60e51b815260206004820152601260248201527121444953434f554e545f4d41585f5553455360701b604482015260640161037a565b602081015163ffffffff1615806106bc57504263ffffffff16816020015163ffffffff1610155b6107085760405162461bcd60e51b815260206004820152601760248201527f21444953434f554e545f4e4f545f56414c49445f594554000000000000000000604482015260640161037a565b60a081015161ffff16158061074557504263ffffffff168160a0015161ffff16876107339190611561565b61073d908761158d565b63ffffffff16105b6107875760405162461bcd60e51b815260206004820152601360248201527208511254d0d3d5539517d15612105554d51151606a1b604482015260640161037a565b6001600160a01b0388166000908152609b6020908152604080832063ffffffff8b168452825280832087845290915281208054600192906107c99084906115b5565b9091555050606081015163ffffffff16158061081e575060608101516001600160a01b0389166000908152609b6020908152604080832063ffffffff8c81168552908352818420898552909252909120549116115b98975050505050505050565b6033546001600160a01b031633146108545760405162461bcd60e51b815260040161037a90611516565b6105ae6000610e48565b60006108c18383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602081018b90528993500190505b60405160208183030381529060405280519060200120610e9a565b95945050505050565b600061091e8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602081018c90529081018a905288925060600190506108a6565b15610a4f57600061092e86610d9c565b9050806080015163ffffffff166000148061095857508763ffffffff16816080015163ffffffff16145b6109975760405162461bcd60e51b815260206004820152601060248201526f21494e56414c494428706c616e49642960801b604482015260640161037a565b606081015163ffffffff1615806109ec575060608101516001600160a01b038a166000908152609b60209081526040808320608086015163ffffffff90811685529083528184208c8552909252909120549116115b8015610a1a5750602081015163ffffffff161580610a1a57504263ffffffff16816020015163ffffffff1610155b8015610a475750604081015163ffffffff161580610a4757504263ffffffff16816040015163ffffffff16105b915050610a53565b5060005b979650505050505050565b600054610100900460ff16610a795760005460ff1615610a7d565b303b155b610ae05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161037a565b600054610100900460ff16158015610b02576000805461ffff19166101011790555b610b0a610eb0565b610b12610ee7565b8015610b24576000805461ff00191690555b50565b6033546001600160a01b03163314610b515760405162461bcd60e51b815260040161037a90611516565b6105ae610f1e565b33600081815260996020908152604080832063ffffffff878116808652918452828520805460ff19166002179055858552609a8452828520828652845293829020805494871663ffffffff1990951685179055905192835292917f4594a2f1d5b5d27b7b29f7c73ec2f5f23b7a97269ec277e84619bcfffe9c13dc910160405180910390a35050565b6033546001600160a01b03163314610c0c5760405162461bcd60e51b815260040161037a90611516565b609780546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610c585760405162461bcd60e51b815260040161037a90611516565b6001600160a01b038116610cbd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161037a565b610b2481610e48565b33600090815260986020526040902080546001600160a01b0319166001600160a01b038516178155610cfc6001820184846110cf565b5050505050565b3b151590565b60655460ff16610d525760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161037a565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e08101825260a083811c825263ffffffff608085811c8216602080860191909152606087811c8416868801529587901c8316958501959095529385901c169282019290925261ffff601084901c1691810191909152600160f01b60f09290921b821690911460c082015290565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600082610ea78584610f99565b14949350505050565b600054610100900460ff16610ed75760405162461bcd60e51b815260040161037a906115cd565b610edf611045565b6105ae61106c565b600054610100900460ff16610f0e5760405162461bcd60e51b815260040161037a906115cd565b610f16611045565b6105ae61109c565b60655460ff1615610f645760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161037a565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610d7f3390565b600081815b845181101561103d576000858281518110610fbb57610fbb611618565b60200260200101519050808311610ffd57604080516020810185905290810182905260600160405160208183030381529060405280519060200120925061102a565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806110358161162e565b915050610f9e565b509392505050565b600054610100900460ff166105ae5760405162461bcd60e51b815260040161037a906115cd565b600054610100900460ff166110935760405162461bcd60e51b815260040161037a906115cd565b6105ae33610e48565b600054610100900460ff166110c35760405162461bcd60e51b815260040161037a906115cd565b6065805460ff19169055565b8280546110db906114db565b90600052602060002090601f0160209004810192826110fd5760008555611143565b82601f106111165782800160ff19823516178555611143565b82800160010185558215611143579182015b82811115611143578235825591602001919060010190611128565b5061114f929150611153565b5090565b5b8082111561114f5760008155600101611154565b80356001600160a01b038116811461117f57600080fd5b919050565b803563ffffffff8116811461117f57600080fd5b600080604083850312156111ab57600080fd5b6111b483611168565b91506111c260208401611184565b90509250929050565b6000602082840312156111dd57600080fd5b6111e682611184565b9392505050565b6000602082840312156111ff57600080fd5b6111e682611168565b6000602080835260018060a01b038451168184015280840151604080850152805180606086015260005b8181101561124e57828101840151868201608001528301611232565b81811115611260576000608083880101525b50601f01601f191693909301608001949350505050565b60008060008060008060c0878903121561129057600080fd5b61129987611168565b95506112a760208801611184565b94506112b560408801611184565b93506112c360608801611184565b92506080870135915060a087013590509295509295509295565b60008083601f8401126112ef57600080fd5b50813567ffffffffffffffff81111561130757600080fd5b6020830191508360208260051b850101111561132257600080fd5b9250929050565b6000806000806060858703121561133f57600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561136457600080fd5b611370878288016112dd565b95989497509550505050565b600080600080600080600060c0888a03121561139757600080fd5b6113a088611168565b96506113ae60208901611184565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff8111156113df57600080fd5b6113eb8a828b016112dd565b989b979a50959850939692959293505050565b6000806040838503121561141157600080fd5b6111b483611184565b634e487b7160e01b600052602160045260246000fd5b602081016003831061145257634e487b7160e01b600052602160045260246000fd5b91905290565b60008060006040848603121561146d57600080fd5b61147684611168565b9250602084013567ffffffffffffffff8082111561149357600080fd5b818601915086601f8301126114a757600080fd5b8135818111156114b657600080fd5b8760208285010111156114c857600080fd5b6020830194508093505050509250925092565b600181811c908216806114ef57607f821691505b6020821081141561151057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600063ffffffff808316818516818304811182151516156115845761158461154b565b02949350505050565b600063ffffffff8083168185168083038211156115ac576115ac61154b565b01949350505050565b600082198211156115c8576115c861154b565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156116425761164261154b565b506001019056fea2646970667358221220be58a2b2cd23804eeb4d10c0aa04b7810b6caa840c54c8f299720a3ce0e0bd1b64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "discountUses": {
        "details": "Maps for discounts. "
      },
      "planStatus": {
        "details": "Map for current plan status. "
      },
      "providerProfiles": {
        "details": "Map for provider to profile info. "
      },
      "subscriptionManager": {
        "details": "Address of subscription manager. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 788,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 791,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2336,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 666,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 780,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 876,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 967,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10388,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "subscriptionManager",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 10394,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "providerProfiles",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_struct(Provider)7979_storage)"
      },
      {
        "astId": 10402,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "planStatus",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_enum(PlanStatus)7959))"
      },
      {
        "astId": 10408,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "planEol",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_uint32))"
      },
      {
        "astId": 10417,
        "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
        "label": "discountUses",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_bytes32,t_uint256)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(PlanStatus)7959": {
        "encoding": "inplace",
        "label": "enum ICaskSubscriptionPlans.PlanStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_enum(PlanStatus)7959))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => enum ICaskSubscriptionPlans.PlanStatus))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_enum(PlanStatus)7959)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_mapping(t_bytes32,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => mapping(bytes32 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_mapping(t_bytes32,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_uint32))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => uint32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_uint32)"
      },
      "t_mapping(t_address,t_struct(Provider)7979_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICaskSubscriptionPlans.Provider)",
        "numberOfBytes": "32",
        "value": "t_struct(Provider)7979_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_enum(PlanStatus)7959)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => enum ICaskSubscriptionPlans.PlanStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(PlanStatus)7959"
      },
      "t_mapping(t_uint32,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Provider)7979_storage": {
        "encoding": "inplace",
        "label": "struct ICaskSubscriptionPlans.Provider",
        "members": [
          {
            "astId": 7976,
            "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
            "label": "paymentAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7978,
            "contract": "contracts/protocol/CaskSubscriptionPlans.sol:CaskSubscriptionPlans",
            "label": "cid",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}