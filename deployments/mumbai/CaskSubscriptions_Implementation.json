{
  "address": "0xCf5EA5cBe519F7a6eEaD217c32df9E3b5E526841",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "discountId",
          "type": "bytes32"
        }
      ],
      "name": "SubscriptionChangedDiscount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "prevPlanId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "discountId",
          "type": "bytes32"
        }
      ],
      "name": "SubscriptionChangedPlan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "discountId",
          "type": "bytes32"
        }
      ],
      "name": "SubscriptionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionPastDue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionPendingCancel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "prevPlanId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionPendingChangePlan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionRenewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionResumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "ref",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "planId",
          "type": "uint32"
        }
      ],
      "name": "SubscriptionTrialEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "cancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_cancelAt",
          "type": "uint32"
        }
      ],
      "name": "changeSubscriptionCancelAt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_discountProof",
          "type": "bytes32[]"
        }
      ],
      "name": "changeSubscriptionDiscount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "_planProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_discountProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "_providerSignature",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        }
      ],
      "name": "changeSubscriptionPlan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_planProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_discountProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32",
          "name": "_networkData",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_cancelAt",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_providerSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_networkSignature",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        }
      ],
      "name": "createNetworkSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_planProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "_discountProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint32",
          "name": "_cancelAt",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_providerSignature",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "_cid",
          "type": "string"
        }
      ],
      "name": "createSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasRefundLimitCancelSubscription",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasRefundLimitChangeSubscription",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasRefundLimitCreateSubscription",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasRefundLimitOther",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllSubscriptions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllSubscriptionsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "getConsumerSubscriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getConsumerSubscriptions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "getPendingPlanChange",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "getProviderActiveSubscriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_planId",
          "type": "uint32"
        }
      ],
      "name": "getProviderPlanActiveSubscriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "getProviderSubscriptionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "limit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offset",
          "type": "uint256"
        }
      ],
      "name": "getProviderSubscriptions",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "getSubscription",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "planData",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "networkData",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "discountId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "discountData",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "ref",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "enum ICaskSubscriptions.SubscriptionStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "planId",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "createdAt",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "renewAt",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "minTermAt",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "cancelAt",
              "type": "uint32"
            },
            {
              "internalType": "string",
              "name": "cid",
              "type": "string"
            }
          ],
          "internalType": "struct ICaskSubscriptions.Subscription",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subscriptionPlans",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "managerCancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "managerClearDiscount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "managerPastDueSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "managerPlanChange",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "managerRenewSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "pauseSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "resumeSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_subscriptionManager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gasRefundLimitCreateSubscription",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasRefundLimitChangeSubscription",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasRefundLimitCancelSubscription",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasRefundLimitOther",
          "type": "uint256"
        }
      ],
      "name": "setParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionManager",
      "outputs": [
        {
          "internalType": "contract ICaskSubscriptionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionPlans",
      "outputs": [
        {
          "internalType": "contract ICaskSubscriptionPlans",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_subscriptionId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe0a6d711e296d4fd2ecf06bbd03a1b656a143f5ba5295d00774751e042ee8b94",
  "receipt": {
    "to": null,
    "from": "0x83e50cD4123bAA60f6d6c8A83ca85Ac72e826bD0",
    "contractAddress": "0xCf5EA5cBe519F7a6eEaD217c32df9E3b5E526841",
    "transactionIndex": 0,
    "gasUsed": "5058822",
    "logsBloom": "0x
    "blockHash": "0x7a1169ed02e05c39d3e162e80fd40b3906e23c76ba5f767f995d5741d56dea29",
    "transactionHash": "0xe0a6d711e296d4fd2ecf06bbd03a1b656a143f5ba5295d00774751e042ee8b94",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24735956,
        "transactionHash": "0xe0a6d711e296d4fd2ecf06bbd03a1b656a143f5ba5295d00774751e042ee8b94",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000083e50cd4123baa60f6d6c8a83ca85ac72e826bd0",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000008fc7c63f9f26ca000000000000000000000000000000000000000000000000070b6dadbe5f500000000000000000000000000000000000000000000000067d8a37bc76e8be00a0000000000000000000000000000000000000000000000000067ba5e77ec0293600000000000000000000000000000000000000000000067d8ac7843d285d276a",
        "logIndex": 0,
        "blockHash": "0x7a1169ed02e05c39d3e162e80fd40b3906e23c76ba5f767f995d5741d56dea29"
      }
    ],
    "blockNumber": 24735956,
    "cumulativeGasUsed": "5058822",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "05372b4b96a0a02c64a17bf31d22afb6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"discountId\",\"type\":\"bytes32\"}],\"name\":\"SubscriptionChangedDiscount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevPlanId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"discountId\",\"type\":\"bytes32\"}],\"name\":\"SubscriptionChangedPlan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"discountId\",\"type\":\"bytes32\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionPastDue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionPendingCancel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevPlanId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionPendingChangePlan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionResumed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"}],\"name\":\"SubscriptionTrialEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_cancelAt\",\"type\":\"uint32\"}],\"name\":\"changeSubscriptionCancelAt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_discountProof\",\"type\":\"bytes32[]\"}],\"name\":\"changeSubscriptionDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_planProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_discountProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"_providerSignature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"changeSubscriptionPlan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_planProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_discountProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"_networkData\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_cancelAt\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_providerSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_networkSignature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"createNetworkSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_planProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_discountProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint32\",\"name\":\"_cancelAt\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_providerSignature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"_cid\",\"type\":\"string\"}],\"name\":\"createSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasRefundLimitCancelSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasRefundLimitChangeSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasRefundLimitCreateSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasRefundLimitOther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSubscriptions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllSubscriptionsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"getConsumerSubscriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getConsumerSubscriptions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"getPendingPlanChange\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderActiveSubscriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_planId\",\"type\":\"uint32\"}],\"name\":\"getProviderPlanActiveSubscriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"getProviderSubscriptionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offset\",\"type\":\"uint256\"}],\"name\":\"getProviderSubscriptions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"getSubscription\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"planData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"networkData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"discountId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"discountData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ref\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"enum ICaskSubscriptions.SubscriptionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"planId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"renewAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"minTermAt\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cancelAt\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"internalType\":\"struct ICaskSubscriptions.Subscription\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriptionPlans\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"managerCancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"managerClearDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"managerPastDueSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"managerPlanChange\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"managerRenewSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"pauseSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"resumeSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_subscriptionManager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasRefundLimitCreateSubscription\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasRefundLimitChangeSubscription\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasRefundLimitCancelSubscription\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasRefundLimitOther\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionManager\",\"outputs\":[{\"internalType\":\"contract ICaskSubscriptionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionPlans\",\"outputs\":[{\"internalType\":\"contract ICaskSubscriptionPlans\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subscriptionId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"consumerSubscriptions\":{\"details\":\"Maps for consumer to list of subscriptions. \"},\"gasRefundLimitCreateSubscription\":{\"details\":\"max gas refund for transactions, in wei \"},\"providerSubscriptions\":{\"details\":\"Maps for provider to list of subscriptions and plans. \"},\"subscriptionManager\":{\"details\":\"contract to manage subscription plan definitions. \"},\"subscriptionPlans\":{\"details\":\"contract to manage subscription plan definitions. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/CaskSubscriptions.sol\":\"CaskSubscriptions\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x6c25d4211724a6f4cdc8d25397edc780f48d951fc81c1d507f59b3edb22afaf7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskSubscriptionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskSubscriptionManager {\\n\\n    function processSinglePayment(address _consumer, address _provider, uint256 _subscriptionId, uint256 _amount) external;\\n\\n    function renewSubscription(uint256 _subscriptionId) external;\\n\\n    function rebateGas(uint256 _initialGasLeft, uint256 _gasRefundLimit) external;\\n\\n}\\n\",\"keccak256\":\"0xd2cbb5e93f3a35df220ea872bc50bed2a093084221e18666b41a82b382170dc6\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskSubscriptionPlans.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICaskSubscriptionPlans {\\n\\n    enum PlanStatus {\\n        Enabled,\\n        Disabled,\\n        EndOfLife\\n    }\\n\\n    struct Discount {\\n        uint256 value;\\n        uint32 validAfter;\\n        uint32 expiresAt;\\n        uint32 maxUses;\\n        uint32 planId;\\n        uint16 applyPeriods;\\n        bool isFixed;\\n    }\\n\\n    struct Provider {\\n        address paymentAddress;\\n        string cid;\\n    }\\n\\n    function setProviderProfile(address _paymentAddress, string calldata _cid) external;\\n\\n    function getProviderProfile(address _provider) external view returns(Provider memory);\\n\\n    function consumeDiscount(address _provider, uint32 _planId, uint32 _planPeriod, uint32 _subscriptionCreatedAt,\\n        bytes32 _discountId, bytes32 _discountData) external returns(bool);\\n\\n    function getPlanStatus(address _provider, uint32 _planId) external view returns (PlanStatus);\\n\\n    function getPlanEOL(address _provider, uint32 _planId) external view returns (uint32);\\n\\n    function disablePlan(uint32 _planId) external;\\n\\n    function enablePlan(uint32 _planId) external;\\n\\n    function killPlan(uint32 _planId, uint32 _eolAt) external;\\n\\n    function verifyPlan(bytes32 _planData, bytes32 _merkleRoot,\\n        bytes32[] calldata _merkleProof) external view returns(bool);\\n\\n    function verifyDiscount(address _provider, uint32 _planId, bytes32 _discountId, bytes32 _discountData,\\n        bytes32 _merkleRoot, bytes32[] calldata _merkleProof) external view returns(bool);\\n\\n\\n    /** @dev Emitted when `provider` disables a subscription plan */\\n    event PlanDisabled(address indexed provider, uint32 indexed planId);\\n\\n    /** @dev Emitted when `provider` enables a subscription plan */\\n    event PlanEnabled(address indexed provider, uint32 indexed planId);\\n\\n    /** @dev Emitted when `provider` end-of-lifes a subscription plan */\\n    event PlanEOL(address indexed provider, uint32 indexed planId, uint32 eolAt);\\n\\n}\",\"keccak256\":\"0x7d3469dbaf33f3be8ea5551a66452acd7adfaf89d7ff3ae5b46db21826de27aa\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\n\\ninterface ICaskSubscriptions is IERC721Upgradeable {\\n\\n    enum SubscriptionStatus {\\n        None,\\n        Trialing,\\n        Active,\\n        Paused,\\n        Canceled,\\n        PendingCancel,\\n        PastDue\\n    }\\n\\n    struct Subscription {\\n        bytes32 planData;\\n        bytes32 networkData;\\n        bytes32 discountId;\\n        bytes32 discountData;\\n        bytes32 ref;\\n        address provider;\\n        SubscriptionStatus status;\\n        uint32 planId;\\n        uint32 createdAt;\\n        uint32 renewAt;\\n        uint32 minTermAt;\\n        uint32 cancelAt;\\n        string cid;\\n    }\\n\\n    struct PlanInfo {\\n        uint256 price;\\n        uint32 planId;\\n        uint32 period;\\n        uint32 freeTrial;\\n        uint32 maxActive;\\n        uint16 minPeriods;\\n        bool canPause;\\n        bool canTransfer;\\n    }\\n\\n    struct NetworkInfo {\\n        address network;\\n        uint16 feeBps;\\n    }\\n\\n    /************************** SUBSCRIPTION INSTANCE METHODS **************************/\\n\\n    function createSubscription(\\n        bytes32[] calldata _planProof,\\n        bytes32[] calldata _discountProof,\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) external;\\n\\n    function createNetworkSubscription(\\n        bytes32[] calldata _planProof,\\n        bytes32[] calldata _discountProof,\\n        bytes32 _networkData,\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        bytes memory _networkSignature,\\n        string calldata _cid\\n    ) external;\\n\\n    function changeSubscriptionPlan(\\n        uint256 _subscriptionId,\\n        bytes32[] calldata _planProof,\\n        bytes32[] calldata _discountProof,\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) external;\\n\\n    function changeSubscriptionCancelAt(uint256 _subscriptionId, uint32 _cancelAt) external;\\n\\n    function changeSubscriptionDiscount(uint256 _subscriptionId, bytes32[] calldata _discountProof) external;\\n\\n    function pauseSubscription(uint256 _subscriptionId) external;\\n\\n    function resumeSubscription(uint256 _subscriptionId) external;\\n\\n    function cancelSubscription(uint256 _subscriptionId) external;\\n\\n    function managerPlanChange(uint256 _subscriptionId) external;\\n\\n    function managerCancelSubscription(uint256 _subscriptionId) external;\\n\\n    function managerPastDueSubscription(uint256 _subscriptionId) external;\\n\\n    function managerRenewSubscription(uint256 _subscriptionId) external;\\n\\n    function managerClearDiscount(uint256 _subscriptionId) external;\\n\\n    function getSubscription(uint256 _subscriptionId) external view returns (Subscription memory);\\n\\n    function getConsumerSubscriptions(address _consumer, uint256 limit,\\n        uint256 offset) external view returns (uint256[] memory);\\n\\n    function getConsumerSubscriptionCount(address _consumer) external view returns (uint256);\\n\\n    function getProviderSubscriptions(address _provider, uint256 limit,\\n        uint256 offset) external view returns (uint256[] memory);\\n\\n    function getProviderSubscriptionCount(address _provider) external view returns (uint256);\\n\\n    function getProviderActiveSubscriptionCount(address _provider) external view returns (uint256);\\n\\n    function getProviderPlanActiveSubscriptionCount(address _provider, uint32 _planId) external view returns (uint256);\\n\\n    function getPendingPlanChange(uint256 _subscriptionId) external view returns (bytes32);\\n\\n    function getAllSubscriptionsCount() external view returns (uint256);\\n\\n    function getAllSubscriptions() external view returns (uint256[] memory);\\n\\n\\n    /************************** SUBSCRIPTION EVENTS **************************/\\n\\n    /** @dev Emitted when `consumer` subscribes to `provider` plan `planId` */\\n    event SubscriptionCreated(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId, bytes32 discountId);\\n\\n    /** @dev Emitted when `consumer` changes the plan to `provider` on subscription `subscriptionId` */\\n    event SubscriptionChangedPlan(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 prevPlanId, uint32 planId, bytes32 discountId);\\n\\n    /** @dev Emitted when `consumer` changes the plan to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPendingChangePlan(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 prevPlanId, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` changes the discount on subscription `subscriptionId` */\\n    event SubscriptionChangedDiscount(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId, bytes32 discountId);\\n\\n    /** @dev Emitted when `consumer` pauses the subscription to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPaused(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` resumes the subscription to `provider` on subscription `subscriptionId` */\\n    event SubscriptionResumed(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` unsubscribes to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPendingCancel(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` has canceled and the current period is over on subscription `subscriptionId` */\\n    event SubscriptionCanceled(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` successfully renews to `provider` on subscription `subscriptionId` */\\n    event SubscriptionRenewed(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` subscription trial ends and goes active to `provider` on subscription `subscriptionId` */\\n    event SubscriptionTrialEnded(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n    /** @dev Emitted when `consumer` renewal fails to `provider` on subscription `subscriptionId` */\\n    event SubscriptionPastDue(address indexed consumer, address indexed provider,\\n        uint256 indexed subscriptionId, bytes32 ref, uint32 planId);\\n\\n}\\n\\n\",\"keccak256\":\"0x2f39d7f2849c1d5b6a8e745e35668b96bfcf834061d3bb86bc13bfd332829919\",\"license\":\"MIT\"},\"contracts/protocol/CaskSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"../interfaces/ICaskSubscriptionManager.sol\\\";\\nimport \\\"../interfaces/ICaskSubscriptions.sol\\\";\\nimport \\\"../interfaces/ICaskSubscriptionPlans.sol\\\";\\n\\ncontract CaskSubscriptions is\\nICaskSubscriptions,\\nERC721Upgradeable,\\nOwnableUpgradeable,\\nPausableUpgradeable\\n{\\n    using ECDSA for bytes32;\\n\\n    /************************** PARAMETERS **************************/\\n\\n    /** @dev contract to manage subscription plan definitions. */\\n    ICaskSubscriptionManager public subscriptionManager;\\n\\n    /** @dev contract to manage subscription plan definitions. */\\n    ICaskSubscriptionPlans public subscriptionPlans;\\n\\n    /** @dev max gas refund for transactions, in wei */\\n    uint256 public gasRefundLimitCreateSubscription;\\n    uint256 public gasRefundLimitChangeSubscription;\\n    uint256 public gasRefundLimitCancelSubscription;\\n    uint256 public gasRefundLimitOther;\\n\\n\\n    /************************** STATE **************************/\\n\\n    uint256[] private allSubscriptions;\\n\\n    /** @dev Maps for consumer to list of subscriptions. */\\n    mapping(address => uint256[]) private consumerSubscriptions; // consumer => subscriptionId[]\\n    mapping(uint256 => Subscription) private subscriptions; // subscriptionId => Subscription\\n    mapping(uint256 => bytes32) private pendingPlanChanges; // subscriptionId => planData\\n\\n    /** @dev Maps for provider to list of subscriptions and plans. */\\n    mapping(address => uint256[]) private providerSubscriptions; // provider => subscriptionId[]\\n    mapping(address => uint256) private providerActiveSubscriptionCount; // provider => count\\n    mapping(address => mapping(uint32 => uint256)) private planActiveSubscriptionCount; // provider => planId => count\\n\\n\\n    modifier onlyManager() {\\n        require(msg.sender == address(subscriptionManager), \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n    modifier onlySubscriber(uint256 _subscriptionId) {\\n        require(msg.sender == ownerOf(_subscriptionId), \\\"!AUTH\\\");\\n        _;\\n    }\\n\\n    modifier onlySubscriberOrProvider(uint256 _subscriptionId) {\\n        require(\\n            msg.sender == ownerOf(_subscriptionId) ||\\n            msg.sender == subscriptions[_subscriptionId].provider,\\n            \\\"!AUTH\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(\\n        address _subscriptionPlans\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ERC721_init(\\\"Cask Subscriptions\\\",\\\"CASKSUBS\\\");\\n\\n        subscriptionPlans = ICaskSubscriptionPlans(_subscriptionPlans);\\n\\n        // parameter defaults\\n        gasRefundLimitCreateSubscription = 0;\\n        gasRefundLimitChangeSubscription = 0;\\n        gasRefundLimitCancelSubscription = 0;\\n        gasRefundLimitOther = 0;\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n\\n    function tokenURI(uint256 _subscriptionId) public view override returns (string memory) {\\n        require(_exists(_subscriptionId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        Subscription memory subscription = subscriptions[_subscriptionId];\\n\\n        // TODO: do we want the token to point to provider CID or subscription CID?\\n//        ICaskSubscriptionPlans.Provider memory profile = subscriptionPlans.getProviderProfile(subscription.provider);\\n//        return string(abi.encodePacked(\\\"ipfs://\\\", profile.cid, \\\"/token\\\"));\\n\\n        return string(abi.encodePacked(\\\"ipfs://\\\", subscription.cid));\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _subscriptionId\\n    ) internal override {\\n        if (_from != address(0) && _to != address(0)) { // only non-mint/burn transfers\\n            Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n            PlanInfo memory planInfo = _parsePlanData(subscription.planData);\\n            require(planInfo.canTransfer, \\\"!NOT_TRANSFERRABLE\\\");\\n\\n            require(subscription.minTermAt == 0 || uint32(block.timestamp) >= subscription.minTermAt, \\\"!MIN_TERM\\\");\\n\\n            // on transfer, set subscription to cancel at next renewal until new owner accepts subscription\\n            subscription.cancelAt = subscription.renewAt;\\n        }\\n    }\\n\\n    /************************** SUBSCRIPTION METHODS **************************/\\n\\n    function createNetworkSubscription(\\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n        bytes32 _networkData,\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        bytes memory _networkSignature,\\n        string calldata _cid\\n    ) external override whenNotPaused {\\n        uint256 initialGasLeft = gasleft();\\n        uint256 subscriptionId = _createSubscription(_planProof, _discountProof, _cancelAt,\\n            _providerSignature, _cid);\\n\\n        _verifyNetworkData(_networkData, _networkSignature);\\n\\n        Subscription storage subscription = subscriptions[subscriptionId];\\n        subscription.networkData = _networkData;\\n        subscriptionManager.rebateGas(initialGasLeft, gasRefundLimitCreateSubscription);\\n    }\\n\\n    function createSubscription(\\n        bytes32[] calldata _planProof, // [provider, ref, planData, merkleRoot, merkleProof...]\\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) external override whenNotPaused {\\n        uint256 initialGasLeft = gasleft();\\n        _createSubscription(_planProof, _discountProof, _cancelAt, _providerSignature, _cid);\\n        subscriptionManager.rebateGas(initialGasLeft, gasRefundLimitCreateSubscription);\\n    }\\n\\n    function changeSubscriptionPlan(\\n        uint256 _subscriptionId,\\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) external override onlySubscriber(_subscriptionId) whenNotPaused {\\n        uint256 initialGasLeft = gasleft();\\n        _changeSubscriptionPlan(_subscriptionId, _planProof, _discountProof, _providerSignature, _cid);\\n        subscriptionManager.rebateGas(initialGasLeft, gasRefundLimitChangeSubscription);\\n    }\\n\\n    function changeSubscriptionCancelAt(\\n        uint256 _subscriptionId,\\n        uint32 _cancelAt\\n    ) external override onlySubscriber(_subscriptionId) whenNotPaused {\\n        uint256 initialGasLeft = gasleft();\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        require(subscription.minTermAt == 0 || _cancelAt >= subscription.minTermAt, \\\"!MIN_TERM\\\");\\n\\n        subscription.cancelAt = _cancelAt;\\n\\n        subscriptionManager.rebateGas(initialGasLeft, gasRefundLimitOther);\\n    }\\n\\n    function changeSubscriptionDiscount(\\n        uint256 _subscriptionId,\\n        bytes32[] calldata _discountProof // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n    ) external override onlySubscriberOrProvider(_subscriptionId) whenNotPaused {\\n        uint256 initialGasLeft = gasleft();\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n        require(subscription.discountId == 0, \\\"!EXISTING_DISCOUNT\\\");\\n\\n        if (pendingPlanChanges[_subscriptionId] > 0) {\\n            PlanInfo memory newPlanInfo = _parsePlanData(pendingPlanChanges[_subscriptionId]);\\n            // pending plan change, get discount for new plan\\n            (\\n            subscription.discountId,\\n            subscription.discountData\\n            ) = _verifyDiscountProof(subscription.provider, newPlanInfo.planId, _discountProof);\\n        } else {\\n            (\\n            subscription.discountId,\\n            subscription.discountData\\n            ) = _verifyDiscountProof(subscription.provider, subscription.planId, _discountProof);\\n        }\\n\\n        emit SubscriptionChangedDiscount(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId, subscription.discountData);\\n\\n        if (msg.sender == ownerOf(_subscriptionId)) {\\n            subscriptionManager.rebateGas(initialGasLeft, gasRefundLimitOther);\\n        }\\n    }\\n\\n    function pauseSubscription(\\n        uint256 _subscriptionId\\n    ) external override onlySubscriberOrProvider(_subscriptionId) whenNotPaused {\\n        uint256 initialGasLeft = gasleft();\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        require(subscription.status != SubscriptionStatus.Paused &&\\n                subscription.status != SubscriptionStatus.PastDue &&\\n                subscription.status != SubscriptionStatus.Canceled &&\\n                subscription.status != SubscriptionStatus.PendingCancel, \\\"!INVALID(status)\\\");\\n\\n        require(subscription.minTermAt == 0 || uint32(block.timestamp) >= subscription.minTermAt, \\\"!MIN_TERM\\\");\\n\\n        PlanInfo memory planInfo = _parsePlanData(subscription.planData);\\n        require(planInfo.canPause, \\\"!NOT_PAUSABLE\\\");\\n\\n        subscription.status = SubscriptionStatus.Paused;\\n\\n        planActiveSubscriptionCount[subscription.provider][subscription.planId] -= 1;\\n\\n        emit SubscriptionPaused(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId);\\n\\n        if (msg.sender == ownerOf(_subscriptionId)) {\\n            subscriptionManager.rebateGas(initialGasLeft, gasRefundLimitOther);\\n        }\\n    }\\n\\n    function resumeSubscription(\\n        uint256 _subscriptionId\\n    ) external override onlySubscriber(_subscriptionId) whenNotPaused {\\n        uint256 initialGasLeft = gasleft();\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n        require(subscription.status == SubscriptionStatus.Paused, \\\"!NOT_PAUSED\\\");\\n\\n        PlanInfo memory planInfo = _parsePlanData(subscription.planData);\\n\\n        require(planInfo.maxActive == 0 ||\\n            planActiveSubscriptionCount[subscription.provider][planInfo.planId] < planInfo.maxActive, \\\"!MAX_ACTIVE\\\");\\n\\n        subscription.status = SubscriptionStatus.Active;\\n\\n        planActiveSubscriptionCount[subscription.provider][subscription.planId] += 1;\\n\\n        // if renewal date has already passed, set it to now so consumer is not charged for the time it was paused\\n        if (subscription.renewAt < uint32(block.timestamp)) {\\n            subscription.renewAt = uint32(block.timestamp);\\n        }\\n\\n        emit SubscriptionResumed(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId);\\n\\n        subscriptionManager.rebateGas(initialGasLeft, gasRefundLimitOther);\\n    }\\n\\n    function cancelSubscription(\\n        uint256 _subscriptionId\\n    ) external override onlySubscriberOrProvider(_subscriptionId) whenNotPaused {\\n        uint256 initialGasLeft = gasleft();\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        require(subscription.status != SubscriptionStatus.PendingCancel &&\\n                subscription.status != SubscriptionStatus.Canceled, \\\"!INVALID(status)\\\");\\n\\n        require(subscription.minTermAt == 0 || uint32(block.timestamp) >= subscription.minTermAt, \\\"!MIN_TERM\\\");\\n\\n        subscription.status = SubscriptionStatus.PendingCancel;\\n\\n        emit SubscriptionPendingCancel(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId);\\n\\n        if (msg.sender == ownerOf(_subscriptionId)) {\\n            subscriptionManager.rebateGas(initialGasLeft, gasRefundLimitCancelSubscription);\\n        }\\n    }\\n\\n    function managerPlanChange(\\n        uint256 _subscriptionId\\n    ) external override onlyManager whenNotPaused {\\n        bytes32 pendingPlanData = pendingPlanChanges[_subscriptionId];\\n        require(pendingPlanData > 0, \\\"!INVALID(pendingPlanData)\\\");\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n        PlanInfo memory newPlanInfo = _parsePlanData(pendingPlanData);\\n\\n        emit SubscriptionChangedPlan(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId, newPlanInfo.planId, subscription.discountId);\\n\\n        subscription.planId = newPlanInfo.planId;\\n        subscription.planData = pendingPlanData;\\n\\n        if (newPlanInfo.minPeriods > 0) {\\n            subscription.minTermAt = uint32(block.timestamp + (newPlanInfo.period * newPlanInfo.minPeriods));\\n        }\\n\\n        delete pendingPlanChanges[_subscriptionId]; // free up memory\\n    }\\n\\n    function managerCancelSubscription(\\n        uint256 _subscriptionId\\n    ) external override onlyManager whenNotPaused {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        subscription.status = SubscriptionStatus.Canceled;\\n\\n        providerActiveSubscriptionCount[subscription.provider] -= 1;\\n        planActiveSubscriptionCount[subscription.provider][subscription.planId] -= 1;\\n\\n        emit SubscriptionCanceled(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId);\\n\\n        _burn(_subscriptionId);\\n    }\\n\\n    function managerPastDueSubscription(\\n        uint256 _subscriptionId\\n    ) external override onlyManager whenNotPaused {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        subscription.status = SubscriptionStatus.PastDue;\\n\\n        emit SubscriptionPastDue(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId);\\n    }\\n\\n    function managerRenewSubscription(\\n        uint256 _subscriptionId\\n    ) external override onlyManager whenNotPaused {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n        PlanInfo memory planInfo = _parsePlanData(subscription.planData);\\n\\n        if (subscription.status == SubscriptionStatus.Trialing) {\\n            emit SubscriptionTrialEnded(ownerOf(_subscriptionId), subscription.provider,\\n                _subscriptionId, subscription.ref, subscription.planId);\\n        }\\n\\n        subscription.status = SubscriptionStatus.Active; // just in case it was something else previously\\n        subscription.renewAt = subscription.renewAt + planInfo.period;\\n\\n        emit SubscriptionRenewed(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId);\\n    }\\n\\n    function managerClearDiscount(\\n        uint256 _subscriptionId\\n    ) external override onlyManager whenNotPaused {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n        subscription.discountData = 0;\\n    }\\n\\n    function getAllSubscriptionsCount() external view returns (uint256) {\\n        return allSubscriptions.length;\\n    }\\n\\n    function getAllSubscriptions() external override view returns (uint256[] memory) {\\n        return allSubscriptions;\\n    }\\n\\n    function getSubscription(\\n        uint256 _subscriptionId\\n    ) external override view returns (Subscription memory) {\\n        return subscriptions[_subscriptionId];\\n    }\\n\\n    function getConsumerSubscriptions(\\n        address _consumer,\\n        uint256 limit,\\n        uint256 offset\\n    ) external override view returns (uint256[] memory) {\\n        uint256[] memory subscriptionIds = new uint256[](limit);\\n        for (uint256 i = 0; i < limit; i++) {\\n            subscriptionIds[i] = consumerSubscriptions[_consumer][i+offset];\\n        }\\n        return subscriptionIds;\\n    }\\n\\n    function getConsumerSubscriptionCount(\\n        address _consumer\\n    ) external override view returns (uint256) {\\n        return consumerSubscriptions[_consumer].length;\\n    }\\n\\n    function getProviderSubscriptions(\\n        address _provider,\\n        uint256 limit,\\n        uint256 offset\\n    ) external override view returns (uint256[] memory) {\\n        uint256[] memory subscriptionIds = new uint256[](limit);\\n        for (uint256 i = 0; i < limit; i++) {\\n            subscriptionIds[i] = providerSubscriptions[_provider][i+offset];\\n        }\\n        return subscriptionIds;\\n    }\\n\\n    function getProviderSubscriptionCount(\\n        address _provider\\n    ) external override view returns (uint256) {\\n        return providerSubscriptions[_provider].length;\\n    }\\n\\n    function getProviderActiveSubscriptionCount(\\n        address _provider\\n    ) external override view returns (uint256) {\\n        return providerActiveSubscriptionCount[_provider];\\n    }\\n\\n    function getProviderPlanActiveSubscriptionCount(\\n        address _provider,\\n        uint32 _planId\\n    ) external override view returns (uint256) {\\n        return planActiveSubscriptionCount[_provider][_planId];\\n    }\\n\\n    function getPendingPlanChange(\\n        uint256 _subscriptionId\\n    ) external override view returns (bytes32) {\\n        return pendingPlanChanges[_subscriptionId];\\n    }\\n\\n    function _createSubscription(\\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n        uint32 _cancelAt,\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) internal returns(uint256) {\\n        require(_planProof.length >= 4, \\\"!INVALID(planProofLen)\\\");\\n\\n        // confirms merkleroots are in fact the ones provider committed to\\n        address provider;\\n        if (_discountProof.length >= 3) {\\n            provider = _verifyMerkleRoots(_planProof[0], _providerSignature, _planProof[3], _discountProof[2]);\\n        } else {\\n            provider = _verifyMerkleRoots(_planProof[0], _providerSignature, _planProof[3], 0);\\n        }\\n\\n        // confirms plan data is included in merkle root\\n        require(_verifyPlanProof(_planProof), \\\"!INVALID(planProof)\\\");\\n\\n        // decode planData bytes32 into PlanInfo\\n        PlanInfo memory planInfo = _parsePlanData(_planProof[2]);\\n\\n        // generate subscriptionId from plan info and ref\\n        uint256 subscriptionId = _generateSubscriptionId(_planProof[0], _planProof[1], _planProof[2]);\\n\\n        require(planInfo.maxActive == 0 ||\\n            planActiveSubscriptionCount[provider][planInfo.planId] < planInfo.maxActive, \\\"!MAX_ACTIVE\\\");\\n        require(subscriptionPlans.getPlanStatus(provider, planInfo.planId) ==\\n            ICaskSubscriptionPlans.PlanStatus.Enabled, \\\"!NOT_ENABLED\\\");\\n\\n        _safeMint(msg.sender, subscriptionId);\\n\\n        Subscription storage subscription = subscriptions[subscriptionId];\\n\\n        subscription.provider = provider;\\n        subscription.planId = planInfo.planId;\\n        subscription.ref = _planProof[1];\\n        subscription.planData = _planProof[2];\\n        subscription.cancelAt = _cancelAt;\\n        subscription.cid = _cid;\\n        subscription.createdAt = uint32(block.timestamp);\\n\\n        if (planInfo.minPeriods > 0) {\\n            subscription.minTermAt = uint32(block.timestamp + (planInfo.period * planInfo.minPeriods));\\n        }\\n\\n        if (planInfo.freeTrial > 0) {\\n            // if no trial period, charge now. If trial period, charge will happen after trial is over\\n            subscription.status = SubscriptionStatus.Trialing;\\n            subscription.renewAt = uint32(block.timestamp) + planInfo.freeTrial;\\n        }\\n\\n        (\\n        subscription.discountId,\\n        subscription.discountData\\n        ) = _verifyDiscountProof(subscription.provider, planInfo.planId, _discountProof);\\n\\n        if (subscription.renewAt <= uint32(block.timestamp)) {\\n            subscriptionManager.renewSubscription(subscriptionId);\\n        }\\n\\n        emit SubscriptionCreated(ownerOf(subscriptionId), subscription.provider, subscriptionId,\\n            subscription.ref, subscription.planId, subscription.discountId);\\n\\n        consumerSubscriptions[msg.sender].push(subscriptionId);\\n        providerSubscriptions[provider].push(subscriptionId);\\n        providerActiveSubscriptionCount[provider] += 1;\\n        planActiveSubscriptionCount[provider][planInfo.planId] += 1;\\n        allSubscriptions.push(subscriptionId);\\n\\n        return subscriptionId;\\n    }\\n\\n    function _changeSubscriptionPlan(\\n        uint256 _subscriptionId,\\n        bytes32[] calldata _planProof,  // [provider, ref, planData, merkleRoot, merkleProof...]\\n        bytes32[] calldata _discountProof, // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n        bytes memory _providerSignature,\\n        string calldata _cid\\n    ) internal {\\n        require(_planProof.length >= 4, \\\"!INVALID(planProof)\\\");\\n\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        require(subscription.renewAt > uint32(block.timestamp), \\\"!NEED_RENEWAL\\\");\\n        require(subscription.status == SubscriptionStatus.Active ||\\n            subscription.status == SubscriptionStatus.Trialing, \\\"!INVALID(status)\\\");\\n\\n        // confirms merkleroots are in fact the ones provider committed to\\n        address provider;\\n        if (_discountProof.length >= 3) {\\n            provider = _verifyMerkleRoots(_planProof[0], _providerSignature, _planProof[3], _discountProof[2]);\\n        } else {\\n            provider = _verifyMerkleRoots(_planProof[0], _providerSignature, _planProof[3], 0);\\n        }\\n\\n        // confirms plan data is included in merkle root\\n        require(_verifyPlanProof(_planProof), \\\"!INVALID(planProof)\\\");\\n\\n        // decode planData bytes32 into PlanInfo\\n        PlanInfo memory newPlanInfo = _parsePlanData(_planProof[2]);\\n\\n        require(subscription.provider == provider, \\\"!INVALID(provider)\\\");\\n\\n        subscription.cid = _cid;\\n\\n        if (subscription.discountId == 0 && _discountProof.length >= 3 && _discountProof[0] > 0) {\\n            (\\n            subscription.discountId,\\n            subscription.discountData\\n            ) = _verifyDiscountProof(subscription.provider, newPlanInfo.planId, _discountProof);\\n        }\\n\\n        if (subscription.planId != newPlanInfo.planId) {\\n            require(subscriptionPlans.getPlanStatus(provider, newPlanInfo.planId) ==\\n                ICaskSubscriptionPlans.PlanStatus.Enabled, \\\"!NOT_ENABLED\\\");\\n            _performPlanChange(_subscriptionId, newPlanInfo, _planProof[2]);\\n        }\\n    }\\n\\n    function _performPlanChange(\\n        uint256 _subscriptionId,\\n        PlanInfo memory _newPlanInfo,\\n        bytes32 _planData\\n    ) internal {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        PlanInfo memory currentPlanInfo = _parsePlanData(subscription.planData);\\n\\n        if (subscription.status == SubscriptionStatus.Trialing) { // still in trial, just change now\\n\\n            _swapTrialingPlan(_subscriptionId, currentPlanInfo, _newPlanInfo, _planData);\\n\\n        } else if (_newPlanInfo.price / _newPlanInfo.period ==\\n            currentPlanInfo.price / currentPlanInfo.period)\\n        { // straight swap\\n\\n            _swapPlan(_subscriptionId, _newPlanInfo, _planData);\\n\\n        } else if (_newPlanInfo.price / _newPlanInfo.period >\\n            currentPlanInfo.price / currentPlanInfo.period)\\n        { // upgrade\\n\\n            _upgradePlan(_subscriptionId, currentPlanInfo, _newPlanInfo, _planData);\\n\\n        } else { // downgrade - to take affect at next renewal\\n\\n            _scheduleSwapPlan(_subscriptionId, _newPlanInfo.planId, _planData);\\n        }\\n    }\\n\\n    function _verifyDiscountProof(\\n        address _provider,\\n        uint32 _planId,\\n        bytes32[] calldata _discountProof // [discountCodeProof, discountData, merkleRoot, merkleProof...]\\n    ) internal view returns(bytes32, bytes32) {\\n        if (_discountProof.length > 3 && _discountProof[0] > 0) {\\n            bytes32 discountId = keccak256(abi.encode(_discountProof[0]));\\n            if (subscriptionPlans.verifyDiscount(_provider, _planId, discountId,\\n                _discountProof[1], _discountProof[2], _discountProof[3:]))\\n            {\\n                return (discountId, _discountProof[1]);\\n            }\\n        }\\n        return (0,0);\\n    }\\n\\n    function _verifyPlanProof(\\n        bytes32[] calldata _planProof // [provider, ref, planData, merkleRoot, merkleProof...]\\n    ) internal view returns(bool) {\\n        return subscriptionPlans.verifyPlan(_planProof[2], _planProof[3], _planProof[4:]);\\n    }\\n\\n    function _generateSubscriptionId(\\n        bytes32 _providerAddr,\\n        bytes32 _ref,\\n        bytes32 _planData\\n    ) internal view returns(uint256) {\\n        return uint256(keccak256(abi.encodePacked(msg.sender, _providerAddr, _planData, _ref, block.number)));\\n    }\\n\\n    function _parsePlanData(\\n        bytes32 _planData\\n    ) internal pure returns(PlanInfo memory) {\\n        bytes2 options = bytes2(_planData << 240);\\n        return PlanInfo({\\n            price: uint256(_planData >> 160),\\n            planId: uint32(bytes4(_planData << 96)),\\n            period: uint32(bytes4(_planData << 128)),\\n            freeTrial: uint32(bytes4(_planData << 160)),\\n            maxActive: uint32(bytes4(_planData << 192)),\\n            minPeriods: uint16(bytes2(_planData << 224)),\\n            canPause: options & 0x0001 == 0x0001,\\n            canTransfer: options & 0x0002 == 0x0002\\n        });\\n    }\\n\\n    function _parseNetworkData(\\n        bytes32 _networkData\\n    ) internal pure returns(NetworkInfo memory) {\\n        return NetworkInfo({\\n            network: address(bytes20(_networkData)),\\n            feeBps: uint16(bytes2(_networkData << 160))\\n        });\\n    }\\n\\n    function _swapTrialingPlan(\\n        uint256 _subscriptionId,\\n        PlanInfo memory _currentPlanInfo,\\n        PlanInfo memory _newPlanInfo,\\n        bytes32 _newPlanData\\n    ) internal {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        // adjust renewal based on new plan trial length\\n        subscription.renewAt = subscription.renewAt - _currentPlanInfo.freeTrial + _newPlanInfo.freeTrial;\\n\\n        // if new plan trial length would have caused trial to already be over, end trial as of now\\n        // subscription will be charged and converted to active during next keeper run\\n        if (subscription.renewAt <= uint32(block.timestamp)) {\\n            subscription.renewAt = uint32(block.timestamp);\\n        }\\n\\n        _swapPlan(_subscriptionId, _newPlanInfo, _newPlanData);\\n    }\\n\\n    function _scheduleSwapPlan(\\n        uint256 _subscriptionId,\\n        uint32 newPlanId,\\n        bytes32 _newPlanData\\n    ) internal {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        pendingPlanChanges[_subscriptionId] = _newPlanData;\\n\\n        emit SubscriptionPendingChangePlan(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId, newPlanId);\\n    }\\n\\n    function _swapPlan(\\n        uint256 _subscriptionId,\\n        PlanInfo memory _newPlanInfo,\\n        bytes32 _newPlanData\\n    ) internal {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        emit SubscriptionChangedPlan(ownerOf(_subscriptionId), subscription.provider, _subscriptionId,\\n            subscription.ref, subscription.planId, _newPlanInfo.planId, subscription.discountId);\\n\\n        if (_newPlanInfo.minPeriods > 0) {\\n            subscription.minTermAt = uint32(block.timestamp + (_newPlanInfo.period * _newPlanInfo.minPeriods));\\n        }\\n\\n        subscription.planId = _newPlanInfo.planId;\\n        subscription.planData = _newPlanData;\\n    }\\n\\n    function _upgradePlan(\\n        uint256 _subscriptionId,\\n        PlanInfo memory _currentPlanInfo,\\n        PlanInfo memory _newPlanInfo,\\n        bytes32 _newPlanData\\n    ) internal {\\n        Subscription storage subscription = subscriptions[_subscriptionId];\\n\\n        uint256 newAmount = ((_newPlanInfo.price / _newPlanInfo.period) -\\n            (_currentPlanInfo.price / _currentPlanInfo.period)) *\\n            (subscription.renewAt - uint32(block.timestamp));\\n\\n        subscriptionManager.processSinglePayment(ownerOf(_subscriptionId), subscription.provider,\\n            _subscriptionId, newAmount);\\n\\n        _swapPlan(_subscriptionId, _newPlanInfo, _newPlanData);\\n    }\\n\\n\\n    /************************** ADMIN FUNCTIONS **************************/\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setManager(\\n        address _subscriptionManager\\n    ) external onlyOwner {\\n        subscriptionManager = ICaskSubscriptionManager(_subscriptionManager);\\n    }\\n\\n    function setParameters(\\n        uint256 _gasRefundLimitCreateSubscription,\\n        uint256 _gasRefundLimitChangeSubscription,\\n        uint256 _gasRefundLimitCancelSubscription,\\n        uint256 _gasRefundLimitOther\\n    ) external onlyOwner {\\n        gasRefundLimitCreateSubscription = _gasRefundLimitCreateSubscription;\\n        gasRefundLimitChangeSubscription = _gasRefundLimitChangeSubscription;\\n        gasRefundLimitCancelSubscription = _gasRefundLimitCancelSubscription;\\n        gasRefundLimitOther = _gasRefundLimitOther;\\n    }\\n\\n    function _verifyMerkleRoots(\\n        bytes32 providerAddr,\\n        bytes memory _providerSignature,\\n        bytes32 _planMerkleRoot,\\n        bytes32 _discountMerkleRoot\\n    ) internal pure returns (address) {\\n        address recovered = keccak256(abi.encode(_planMerkleRoot, _discountMerkleRoot))\\n            .toEthSignedMessageHash()\\n            .recover(_providerSignature);\\n        require(address(bytes20(providerAddr << 96)) == recovered, \\\"!INVALID(proof)\\\");\\n        return recovered;\\n    }\\n\\n    function _verifyNetworkData(\\n        bytes32 _networkData,\\n        bytes memory _networkSignature\\n    ) internal pure returns (address) {\\n        address network = keccak256(abi.encode(_networkData))\\n            .toEthSignedMessageHash()\\n            .recover(_networkSignature);\\n        NetworkInfo memory networkInfo = _parseNetworkData(_networkData);\\n        require(networkInfo.network == network, \\\"!INVALID(network)\\\");\\n        return network;\\n    }\\n\\n}\",\"keccak256\":\"0x6f27e36478148d5315512f53029756e2f61d617fffd3cdca657cf4f9fe3d93b0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b620029881760201c565b15905090565b3b151590565b615a0b80620001126000396000f3fe608060405234801561001057600080fd5b50600436106102f15760003560e01c80638e814f111161019d578063c7a687bf116100e9578063e985e9c5116100a2578063f2fde38b1161007c578063f2fde38b14610708578063f6189f0e1461071b578063fb288e151461072e578063fcd9da441461073757600080fd5b8063e985e9c514610699578063ef5e668d146106d5578063f268f53e146106de57600080fd5b8063c7a687bf146105f5578063c86e69541461061f578063c87b56dd14610640578063d0ebdbe714610653578063dbb4520b14610666578063dc311dd31461067957600080fd5b8063a746df7011610156578063ba4bf1b611610130578063ba4bf1b6146105a9578063bf158fd2146105bc578063c0159f6f146105cf578063c4d66de8146105e257600080fd5b8063a746df7014610570578063ab5f8b7c14610583578063b88d4fde1461059657600080fd5b80638e814f11146104dd5780638fe17b16146104f05780639377877d1461050357806395d89b4114610542578063a0936cb11461054a578063a22cb4651461055d57600080fd5b8063406907071161025c5780636352211e11610215578063715018a6116101ef578063715018a6146104a95780638456cb59146104b157806385e25ad4146104b95780638da5cb5b146104cc57600080fd5b80636352211e146104705780636c4f70df1461048357806370a082311461049657600080fd5b8063406907071461040e57806341f23f0a1461042157806342842e0e1461043457806343e6a6ee1461044757806356eb00a1146104505780635c975abb1461046557600080fd5b806313406f6f116102ae57806313406f6f1461039957806316020d21146103ac57806321235083146103b657806323b872dd146103c9578063291b9a3f146103dc5780633f4ba83a1461040657600080fd5b806301ffc9a7146102f6578063023a584e1461031e57806306fdde0314610333578063081812fc1461034857806308e7250314610373578063095ea7b314610386575b600080fd5b610309610304366004614cc2565b61074a565b60405190151581526020015b60405180910390f35b61033161032c366004614cdf565b61079c565b005b61033b610a83565b6040516103159190614d50565b61035b610356366004614cdf565b610b15565b6040516001600160a01b039091168152602001610315565b610101545b604051908152602001610315565b610331610394366004614d7f565b610baa565b6103316103a7366004614ee7565b610cc0565b6103786101005481565b6103316103c4366004614cdf565b610d98565b6103316103d7366004614fea565b611003565b6103786103ea366004615026565b6001600160a01b03166000908152610102602052604090205490565b610331611034565b61033161041c366004614cdf565b611068565b61033161042f366004614cdf565b61125a565b610331610442366004614fea565b611590565b61037860fd5481565b6104586115ab565b6040516103159190615041565b60c95460ff16610309565b61035b61047e366004614cdf565b611603565b610331610491366004614cdf565b61167a565b6103786104a4366004615026565b611761565b6103316117e8565b61033161181c565b6103316104c7366004615085565b61184e565b6097546001600160a01b031661035b565b6103316104eb366004614cdf565b61196d565b60fc5461035b906001600160a01b031681565b6103786105113660046150b1565b6001600160a01b03821660009081526101076020908152604080832063ffffffff8516845290915290205492915050565b61033b611b3c565b610331610558366004614cdf565b611b4b565b61033161056b3660046150e9565b611bad565b61033161057e366004615120565b611bbc565b6104586105913660046151e8565b611ca3565b6103316105a436600461521b565b611d6d565b6103316105b7366004615283565b611d9f565b60fb5461035b906001600160a01b031681565b6103316105dd3660046152cf565b612028565b6103316105f0366004615026565b6120d5565b610378610603366004615026565b6001600160a01b03166000908152610106602052604090205490565b61037861062d366004614cdf565b6000908152610104602052604090205490565b61033b61064e366004614cdf565b612222565b610331610661366004615026565b612448565b610331610674366004614cdf565b612494565b61068c610687366004614cdf565b6125ff565b6040516103159190615396565b6103096106a7366004615490565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b61037860ff5481565b6103786106ec366004615026565b6001600160a01b03166000908152610105602052604090205490565b610331610716366004615026565b6127ed565b6104586107293660046151e8565b612888565b61037860fe5481565b6103316107453660046154ba565b612949565b60006001600160e01b031982166380ac58cd60e01b148061077b57506001600160e01b03198216635b5e139f60e01b145b8061079657506301ffc9a760e01b6001600160e01b03198316145b92915050565b806107a681611603565b6001600160a01b0316336001600160a01b0316146107df5760405162461bcd60e51b81526004016107d6906154ec565b60405180910390fd5b60c95460ff16156108025760405162461bcd60e51b81526004016107d69061550b565b60005a60008481526101036020526040902090915060036005820154600160a01b900460ff1660068111156108395761083961535e565b146108745760405162461bcd60e51b815260206004820152600b60248201526a085393d517d4105554d15160aa1b60448201526064016107d6565b6000610883826000015461298e565b9050806080015163ffffffff16600014806108d65750608081015160058301546001600160a01b03166000908152610107602090815260408083208286015163ffffffff90811685529252909120549116115b6109105760405162461bcd60e51b815260206004820152600b60248201526a214d41585f41435449564560a81b60448201526064016107d6565b60058201805460ff60a01b198116600160a11b17918290556001600160a01b0316600090815261010760209081526040808320600160a81b90940463ffffffff16835292905290812080546001929061096a90849061554b565b9091555050600682015463ffffffff4281169116101561099c5760068201805463ffffffff19164263ffffffff161790555b600582015485906001600160a01b03166109b582611603565b6004850154600586015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917f7ee0fc3eab7021686f891346ebbf5bab192d6f9995fcc66021f4551888dc1481910160405180910390a460fb5461010054604051632fe329ff60e21b81526004810186905260248101919091526001600160a01b039091169063bf8ca7fc906044015b600060405180830381600087803b158015610a6457600080fd5b505af1158015610a78573d6000803e3d6000fd5b505050505050505050565b606060658054610a9290615563565b80601f0160208091040260200160405190810160405280929190818152602001828054610abe90615563565b8015610b0b5780601f10610ae057610100808354040283529160200191610b0b565b820191906000526020600020905b815481529060010190602001808311610aee57829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b0316610b8e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107d6565b506000908152606960205260409020546001600160a01b031690565b6000610bb582611603565b9050806001600160a01b0316836001600160a01b03161415610c235760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016107d6565b336001600160a01b0382161480610c3f5750610c3f81336106a7565b610cb15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016107d6565b610cbb8383612a53565b505050565b60c95460ff1615610ce35760405162461bcd60e51b81526004016107d69061550b565b60005a90506000610cfa8c8c8c8c8b8b8a8a612ac1565b9050610d0688866131b7565b506000818152610103602052604090819020600181018a905560fb5460fd549251632fe329ff60e21b815260048101869052602481019390935290916001600160a01b039091169063bf8ca7fc90604401600060405180830381600087803b158015610d7157600080fd5b505af1158015610d85573d6000803e3d6000fd5b5050505050505050505050505050505050565b80610da281611603565b6001600160a01b0316336001600160a01b03161480610ddb5750600081815261010360205260409020600501546001600160a01b031633145b610df75760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff1615610e1a5760405162461bcd60e51b81526004016107d69061550b565b60005a600084815261010360205260409020909150600580820154600160a01b900460ff166006811115610e5057610e5061535e565b14158015610e7e575060046005820154600160a01b900460ff166006811115610e7b57610e7b61535e565b14155b610e9a5760405162461bcd60e51b81526004016107d69061559e565b6006810154600160201b900463ffffffff161580610ece5750600681015463ffffffff600160201b90910481164290911610155b610eea5760405162461bcd60e51b81526004016107d6906155c8565b600581018054600560a01b60ff60a01b1982161790915584906001600160a01b0316610f1582611603565b6004840154600585015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917f83217e17a62745245734031007583a7faee757904c6d101fc0003df8e0b541d4910160405180910390a4610f7a84611603565b6001600160a01b0316336001600160a01b03161415610ffd5760fb5460ff54604051632fe329ff60e21b81526004810185905260248101919091526001600160a01b039091169063bf8ca7fc90604401600060405180830381600087803b158015610fe457600080fd5b505af1158015610ff8573d6000803e3d6000fd5b505050505b50505050565b61100d33826132dd565b6110295760405162461bcd60e51b81526004016107d6906155eb565b610cbb8383836133d4565b6097546001600160a01b0316331461105e5760405162461bcd60e51b81526004016107d69061563c565b61106661357f565b565b60fb546001600160a01b031633146110925760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff16156110b55760405162461bcd60e51b81526004016107d69061550b565b60008181526101046020526040902054806111125760405162461bcd60e51b815260206004820152601960248201527f21494e56414c49442870656e64696e67506c616e44617461290000000000000060448201526064016107d6565b6000828152610103602052604081209061112b8361298e565b600583015490915084906001600160a01b031661114782611603565b6004850154600586015460208087015160028901546040805195865263ffffffff600160a81b90950485169386019390935292169083015260608201526001600160a01b0391909116907fe17e61be0a4aac2f0b6fece72cedc2ab9ca554634d5af864a9282095206a0c2b9060800160405180910390a4602081015160058301805463ffffffff909216600160a81b0263ffffffff60a81b1990921691909117905582825560a081015161ffff1615611245578060a0015161ffff1681604001516112129190615671565b6112229063ffffffff164261554b565b8260060160046101000a81548163ffffffff021916908363ffffffff1602179055505b50505060009081526101046020526040812055565b8061126481611603565b6001600160a01b0316336001600160a01b0316148061129d5750600081815261010360205260409020600501546001600160a01b031633145b6112b95760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff16156112dc5760405162461bcd60e51b81526004016107d69061550b565b60005a60008481526101036020526040902090915060036005820154600160a01b900460ff1660068111156113135761131361535e565b14158015611341575060066005820154600160a01b900460ff16600681111561133e5761133e61535e565b14155b801561136d575060046005820154600160a01b900460ff16600681111561136a5761136a61535e565b14155b80156113985750600580820154600160a01b900460ff1660068111156113955761139561535e565b14155b6113b45760405162461bcd60e51b81526004016107d69061559e565b6006810154600160201b900463ffffffff1615806113e85750600681015463ffffffff600160201b90910481164290911610155b6114045760405162461bcd60e51b81526004016107d6906155c8565b6000611413826000015461298e565b90508060c001516114565760405162461bcd60e51b815260206004820152600d60248201526c214e4f545f5041555341424c4560981b60448201526064016107d6565b60058201805460ff60a01b198116600360a01b17918290556001600160a01b0316600090815261010760209081526040808320600160a81b90940463ffffffff1683529290529081208054600192906114b090849061569d565b9091555050600582015485906001600160a01b03166114ce82611603565b6004850154600586015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917f7afd3b59e582bb56b590409b808e910ae787056cb10b682b9bdefa44c8eb940d910160405180910390a461153385611603565b6001600160a01b0316336001600160a01b031614156115895760fb5461010054604051632fe329ff60e21b81526004810186905260248101919091526001600160a01b039091169063bf8ca7fc90604401610a4a565b5050505050565b610cbb83838360405180602001604052806000815250611d6d565b6060610101805480602002602001604051908101604052809291908181526020018280548015610b0b57602002820191906000526020600020905b8154815260200190600101908083116115e6575050505050905090565b6000818152606760205260408120546001600160a01b0316806107965760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016107d6565b60fb546001600160a01b031633146116a45760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff16156116c75760405162461bcd60e51b81526004016107d69061550b565b600081815261010360205260409020600581018054600360a11b60ff60a01b1982161790915582906001600160a01b031661170182611603565b6004840154600585015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917f44abb4f4529fdbcacc1ee98eef9318eaf9a12044d6925a2dc2c702959d9352f1910160405180910390a45050565b60006001600160a01b0382166117cc5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016107d6565b506001600160a01b031660009081526068602052604090205490565b6097546001600160a01b031633146118125760405162461bcd60e51b81526004016107d69061563c565b6110666000613612565b6097546001600160a01b031633146118465760405162461bcd60e51b81526004016107d69061563c565b611066613664565b8161185881611603565b6001600160a01b0316336001600160a01b0316146118885760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff16156118ab5760405162461bcd60e51b81526004016107d69061550b565b60005a600085815261010360205260409020600681015491925090600160201b900463ffffffff1615806118f45750600681015463ffffffff600160201b909104811690851610155b6119105760405162461bcd60e51b81526004016107d6906155c8565b60068101805463ffffffff60401b1916600160401b63ffffffff87160217905560fb5461010054604051632fe329ff60e21b81526004810185905260248101919091526001600160a01b039091169063bf8ca7fc90604401610a4a565b60fb546001600160a01b031633146119975760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff16156119ba5760405162461bcd60e51b81526004016107d69061550b565b60008181526101036020526040812080549091906119d79061298e565b905060016005830154600160a01b900460ff1660068111156119fb576119fb61535e565b1415611a7757600582015483906001600160a01b0316611a1a82611603565b6004850154600586015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917ff42e506093cb49dad3d3349cf7a2b390140be665daecb2c820e903afd12b1df7910160405180910390a45b60058201805460ff60a01b1916600160a11b17905560408101516006830154611aa6919063ffffffff166156b4565b60068301805463ffffffff191663ffffffff92909216919091179055600582015483906001600160a01b0316611adb82611603565b6004850154600586015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917fcdd2eee203a384f2c6e81f39021f7e3ebef3a21ccd0d0f6dd117387ab61b6b54910160405180910390a4505050565b606060668054610a9290615563565b60fb546001600160a01b03163314611b755760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff1615611b985760405162461bcd60e51b81526004016107d69061550b565b60009081526101036020526040812060030155565b611bb83383836136bc565b5050565b87611bc681611603565b6001600160a01b0316336001600160a01b031614611bf65760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff1615611c195760405162461bcd60e51b81526004016107d69061550b565b60005a9050611c2e8a8a8a8a8a8a8a8a61378b565b60fb5460fe54604051632fe329ff60e21b81526004810184905260248101919091526001600160a01b039091169063bf8ca7fc90604401600060405180830381600087803b158015611c7f57600080fd5b505af1158015611c93573d6000803e3d6000fd5b5050505050505050505050505050565b606060008367ffffffffffffffff811115611cc057611cc0614e02565b604051908082528060200260200182016040528015611ce9578160200160208202803683370190505b50905060005b84811015611d64576001600160a01b038616600090815261010260205260409020611d1a858361554b565b81548110611d2a57611d2a6156dc565b9060005260206000200154828281518110611d4757611d476156dc565b602090810291909101015280611d5c816156f2565b915050611cef565b50949350505050565b611d7733836132dd565b611d935760405162461bcd60e51b81526004016107d6906155eb565b610ffd84848484613b36565b82611da981611603565b6001600160a01b0316336001600160a01b03161480611de25750600081815261010360205260409020600501546001600160a01b031633145b611dfe5760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff1615611e215760405162461bcd60e51b81526004016107d69061550b565b60005a60008681526101036020526040902060028101549192509015611e7e5760405162461bcd60e51b81526020600482015260126024820152710851561254d5125391d7d11254d0d3d5539560721b60448201526064016107d6565b6000868152610104602052604090205415611ee05760008681526101046020526040812054611eac9061298e565b60058301546020820151919250611ed0916001600160a01b03909116908888613b69565b6003840155600283015550611f13565b6005810154611f08906001600160a01b03811690600160a81b900463ffffffff168787613b69565b600383015560028201555b600581015486906001600160a01b0316611f2c82611603565b60048401546005850154600386015460408051938452600160a81b90920463ffffffff166020840152908201526001600160a01b0391909116907f23be24e2f5bdda1a165ef44cb730243e3f79e09d3c28086b166ab914c79750609060600160405180910390a4611f9c86611603565b6001600160a01b0316336001600160a01b031614156120205760fb5461010054604051632fe329ff60e21b81526004810185905260248101919091526001600160a01b039091169063bf8ca7fc90604401600060405180830381600087803b15801561200757600080fd5b505af115801561201b573d6000803e3d6000fd5b505050505b505050505050565b60c95460ff161561204b5760405162461bcd60e51b81526004016107d69061550b565b60005a90506120608989898989898989612ac1565b5060fb5460fd54604051632fe329ff60e21b81526004810184905260248101919091526001600160a01b039091169063bf8ca7fc90604401600060405180830381600087803b1580156120b257600080fd5b505af11580156120c6573d6000803e3d6000fd5b50505050505050505050505050565b600054610100900460ff166120f05760005460ff16156120f4565b303b155b6121575760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107d6565b600054610100900460ff16158015612179576000805461ffff19166101011790555b612181613ce6565b612189613d1d565b6121dd604051806040016040528060128152602001714361736b20537562736372697074696f6e7360701b815250604051806040016040528060088152602001674341534b5355425360c01b815250613d54565b60fc80546001600160a01b0319166001600160a01b038416179055600060fd81905560fe81905560ff819055610100558015611bb8576000805461ff00191690555050565b6000818152606760205260409020546060906001600160a01b03166122a15760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016107d6565b60008281526101036020908152604080832081516101a08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004810154608083015260058101546001600160a01b03811660a084015260c0830190600160a01b900460ff1660068111156123205761232061535e565b60068111156123315761233161535e565b8152600582015463ffffffff600160a81b820481166020840152600160c81b9091048116604083015260068301548082166060840152600160201b810482166080840152600160401b90041660a082015260078201805460c09092019161239790615563565b80601f01602080910402602001604051908101604052809291908181526020018280546123c390615563565b80156124105780601f106123e557610100808354040283529160200191612410565b820191906000526020600020905b8154815290600101906020018083116123f357829003601f168201915b5050505050815250509050806101800151604051602001612431919061570d565b604051602081830303815290604052915050919050565b6097546001600160a01b031633146124725760405162461bcd60e51b81526004016107d69061563c565b60fb80546001600160a01b0319166001600160a01b0392909216919091179055565b60fb546001600160a01b031633146124be5760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff16156124e15760405162461bcd60e51b81526004016107d69061550b565b600081815261010360209081526040808320600581018054600160a21b60ff60a01b198216179091556001600160a01b0316845261010690925282208054919260019261252f90849061569d565b909155505060058101546001600160a01b038116600090815261010760209081526040808320600160a81b90940463ffffffff16835292905290812080546001929061257c90849061569d565b9091555050600581015482906001600160a01b031661259a82611603565b6004840154600585015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917f58e4414596fd750dbb9dabfe65b97bf5add2061f5902f34e2b82a9c25bd79f98910160405180910390a4611bb882613d95565b604080516101a08101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e082018390526101008201839052610120820183905261014082018390526101608201929092526101808101919091526000828152610103602090815260409182902082516101a08101845281548152600182015492810192909252600281015492820192909252600382015460608201526004820154608082015260058201546001600160a01b03811660a083015290919060c0830190600160a01b900460ff1660068111156126ed576126ed61535e565b60068111156126fe576126fe61535e565b8152600582015463ffffffff600160a81b820481166020840152600160c81b9091048116604083015260068301548082166060840152600160201b810482166080840152600160401b90041660a082015260078201805460c09092019161276490615563565b80601f016020809104026020016040519081016040528092919081815260200182805461279090615563565b80156127dd5780601f106127b2576101008083540402835291602001916127dd565b820191906000526020600020905b8154815290600101906020018083116127c057829003601f168201915b5050505050815250509050919050565b6097546001600160a01b031633146128175760405162461bcd60e51b81526004016107d69061563c565b6001600160a01b03811661287c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107d6565b61288581613612565b50565b606060008367ffffffffffffffff8111156128a5576128a5614e02565b6040519080825280602002602001820160405280156128ce578160200160208202803683370190505b50905060005b84811015611d64576001600160a01b0386166000908152610105602052604090206128ff858361554b565b8154811061290f5761290f6156dc565b906000526020600020015482828151811061292c5761292c6156dc565b602090810291909101015280612941816156f2565b9150506128d4565b6097546001600160a01b031633146129735760405162461bcd60e51b81526004016107d69061563c565b60fd9390935560fe9190915560ff5561010055565b3b151590565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915250604080516101008101825260a083811c8252608084811c63ffffffff908116602080860191909152606087811c8316868801529587901c8216958501959095529385901c90931692820192909252601083901c61ffff169181019190915260f09190911b600160f01b8181161460c0830152600160f11b9081161460e082015290565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612a8882611603565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006004881015612b0d5760405162461bcd60e51b815260206004820152601660248201527521494e56414c494428706c616e50726f6f664c656e2960501b60448201526064016107d6565b600060038710612b7557612b6e8a8a6000818110612b2d57612b2d6156dc565b90506020020135868c8c6003818110612b4857612b486156dc565b905060200201358b8b6002818110612b6257612b626156dc565b90506020020135613e3c565b9050612bb9565b612bb68a8a6000818110612b8b57612b8b6156dc565b90506020020135868c8c6003818110612ba657612ba66156dc565b905060200201356000801b613e3c565b90505b612bc38a8a613eba565b612bdf5760405162461bcd60e51b81526004016107d69061573c565b6000612c038b8b6002818110612bf757612bf76156dc565b9050602002013561298e565b90506000612cb48c8c6000818110612c1d57612c1d6156dc565b905060200201358d8d6001818110612c3757612c376156dc565b905060200201358e8e6002818110612c5157612c516156dc565b905060200201356040516bffffffffffffffffffffffff193360601b16602082015260348101849052605481018290526074810183905243609482015260009060b40160408051601f198184030181529190528051602090910120949350505050565b9050816080015163ffffffff1660001480612d03575060808201516001600160a01b0384166000908152610107602090815260408083208287015163ffffffff90811685529252909120549116115b612d3d5760405162461bcd60e51b815260206004820152600b60248201526a214d41585f41435449564560a81b60448201526064016107d6565b600060fc54602084015160405163b6ab359f60e01b81526001600160a01b03878116600483015263ffffffff909216602482015291169063b6ab359f9060440160206040518083038186803b158015612d9557600080fd5b505afa158015612da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dcd9190615769565b6002811115612dde57612dde61535e565b14612e1a5760405162461bcd60e51b815260206004820152600c60248201526b085393d517d153905093115160a21b60448201526064016107d6565b612e243382613f88565b6000818152610103602090815260409091206005810180549285015163ffffffff16600160a81b02600164ffffffff0160a01b03199093166001600160a01b03871617929092179091558c8c6001818110612e8157612e816156dc565b60200291909101356004830155508c8c6002818110612ea257612ea26156dc565b602002919091013582555060068101805463ffffffff60401b1916600160401b63ffffffff8c1602179055612edb600782018888614b9f565b5060058101805463ffffffff60c81b1916600160c81b4263ffffffff160217905560a083015161ffff1615612f55578260a0015161ffff168360400151612f229190615671565b612f329063ffffffff164261554b565b8160060160046101000a81548163ffffffff021916908363ffffffff1602179055505b606083015163ffffffff1615612fa65760058101805460ff60a01b1916600160a01b1790556060830151612f8990426156b4565b60068201805463ffffffff191663ffffffff929092169190911790555b60058101546020840151612fc5916001600160a01b0316908d8d613b69565b60038301556002820155600681015463ffffffff4281169116116130425760fb5460405163d71bb37b60e01b8152600481018490526001600160a01b039091169063d71bb37b90602401600060405180830381600087803b15801561302957600080fd5b505af115801561303d573d6000803e3d6000fd5b505050505b600581015482906001600160a01b031661305b82611603565b60048401546005850154600286015460408051938452600160a81b90920463ffffffff166020840152908201526001600160a01b0391909116907f9fb45eab820cdd481e286e8c699e1c01031bb833c58f7cfba3ca8d1db6d98d819060600160405180910390a433600090815261010260209081526040808320805460018181018355918552838520018690556001600160a01b038816808552610105845282852080548084018255908652848620018790558452610106909252822080549192909161312990849061554b565b90915550506001600160a01b0384166000908152610107602090815260408083208683015163ffffffff168452909152812080546001929061316c90849061554b565b909155505061010180546001810182556000919091527f109ea3cebb188b9c1b9fc5bb3920be60dfdc8699098dff92f3d80daaca74768901829055509b9a5050505050505050505050565b60008061323a83613234866040516020016131d491815260200190565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b90613fa2565b9050600061327a8560408051808201909152600080825260208201525060408051808201909152606082901c815260509190911c61ffff16602082015290565b9050816001600160a01b031681600001516001600160a01b0316146132d55760405162461bcd60e51b815260206004820152601160248201527021494e56414c4944286e6574776f726b2960781b60448201526064016107d6565b509392505050565b6000818152606760205260408120546001600160a01b03166133565760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107d6565b600061336183611603565b9050806001600160a01b0316846001600160a01b0316148061339c5750836001600160a01b031661339184610b15565b6001600160a01b0316145b806133cc57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166133e782611603565b6001600160a01b03161461344f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016107d6565b6001600160a01b0382166134b15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107d6565b6134bc838383613fbe565b6134c7600082612a53565b6001600160a01b03831660009081526068602052604081208054600192906134f090849061569d565b90915550506001600160a01b038216600090815260686020526040812080546001929061351e90849061554b565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60c95460ff166135c85760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107d6565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60c95460ff16156136875760405162461bcd60e51b81526004016107d69061550b565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586135f53390565b816001600160a01b0316836001600160a01b0316141561371e5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107d6565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60048610156137ac5760405162461bcd60e51b81526004016107d69061573c565b600088815261010360205260409020600681015463ffffffff4281169116116138075760405162461bcd60e51b815260206004820152600d60248201526c085391515117d491539155d053609a1b60448201526064016107d6565b60026005820154600160a01b900460ff1660068111156138295761382961535e565b1480613854575060016005820154600160a01b900460ff1660068111156138525761385261535e565b145b6138705760405162461bcd60e51b81526004016107d69061559e565b6000600386106138cc576138c589896000818110613890576138906156dc565b90506020020135868b8b60038181106138ab576138ab6156dc565b905060200201358a8a6002818110612b6257612b626156dc565b9050613900565b6138fd898960008181106138e2576138e26156dc565b90506020020135868b8b6003818110612ba657612ba66156dc565b90505b61390a8989613eba565b6139265760405162461bcd60e51b81526004016107d69061573c565b600061393e8a8a6002818110612bf757612bf76156dc565b60058401549091506001600160a01b038381169116146139955760405162461bcd60e51b815260206004820152601260248201527121494e56414c49442870726f76696465722960701b60448201526064016107d6565b6139a3600784018686614b9f565b5060028301541580156139b7575060038710155b80156139d957506000888882816139d0576139d06156dc565b90506020020135115b15613a0857600583015460208201516139fd916001600160a01b0316908a8a613b69565b600385015560028401555b60208101516005840154600160a81b900463ffffffff908116911614613b2957600060fc54602083015160405163b6ab359f60e01b81526001600160a01b03868116600483015263ffffffff909216602482015291169063b6ab359f9060440160206040518083038186803b158015613a8057600080fd5b505afa158015613a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab89190615769565b6002811115613ac957613ac961535e565b14613b055760405162461bcd60e51b815260206004820152600c60248201526b085393d517d153905093115160a21b60448201526064016107d6565b613b298b828c8c6002818110613b1d57613b1d6156dc565b905060200201356140bf565b5050505050505050505050565b613b418484846133d4565b613b4d848484846141a5565b610ffd5760405162461bcd60e51b81526004016107d69061578a565b600080600383118015613b925750600084848281613b8957613b896156dc565b90506020020135115b15613cd657600084846000818110613bac57613bac6156dc565b90506020020135604051602001613bc591815260200190565b60408051601f19818403018152919052805160209091012060fc549091506001600160a01b03166372212e7688888489896001818110613c0757613c076156dc565b905060200201358a8a6002818110613c2157613c216156dc565b60200291909101359050613c388b6003818f6157dc565b6040518863ffffffff1660e01b8152600401613c5a9796959493929190615840565b60206040518083038186803b158015613c7257600080fd5b505afa158015613c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613caa919061588d565b15613cd4578085856001818110613cc357613cc36156dc565b905060200201359250925050613cdd565b505b5060009050805b94509492505050565b600054610100900460ff16613d0d5760405162461bcd60e51b81526004016107d6906158aa565b613d156142af565b6110666142d6565b600054610100900460ff16613d445760405162461bcd60e51b81526004016107d6906158aa565b613d4c6142af565b611066614306565b600054610100900460ff16613d7b5760405162461bcd60e51b81526004016107d6906158aa565b613d836142af565b613d8b6142af565b611bb88282614339565b6000613da082611603565b9050613dae81600084613fbe565b613db9600083612a53565b6001600160a01b0381166000908152606860205260408120805460019290613de290849061569d565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600080613e628561323486866040516020016131d4929190918252602082015260400190565b90506001600160a01b0386811690821614613eb15760405162461bcd60e51b815260206004820152600f60248201526e21494e56414c49442870726f6f662960881b60448201526064016107d6565b95945050505050565b60fc546000906001600160a01b03166371ce3e6684846002818110613ee157613ee16156dc565b9050602002013585856003818110613efb57613efb6156dc565b60200291909101359050613f12866004818a6157dc565b6040518563ffffffff1660e01b8152600401613f3194939291906158f5565b60206040518083038186803b158015613f4957600080fd5b505afa158015613f5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f81919061588d565b9392505050565b611bb8828260405180602001604052806000815250614387565b6000806000613fb185856143ba565b915091506132d58161442a565b6001600160a01b03831615801590613fde57506001600160a01b03821615155b15610cbb5760008181526101036020526040812080549091906140009061298e565b90508060e001516140485760405162461bcd60e51b8152602060048201526012602482015271214e4f545f5452414e534645525241424c4560701b60448201526064016107d6565b6006820154600160201b900463ffffffff16158061407c5750600682015463ffffffff600160201b90910481164290911610155b6140985760405162461bcd60e51b81526004016107d6906155c8565b506006018054600160401b63ffffffff82160263ffffffff60401b19909116179055505050565b60008381526101036020526040812080549091906140dc9061298e565b905060016005830154600160a01b900460ff1660068111156141005761410061535e565b141561411757614112858286866145e5565b611589565b6040810151815161412e9163ffffffff169061591f565b604085015185516141459163ffffffff169061591f565b141561415657614112858585614660565b6040810151815161416d9163ffffffff169061591f565b604085015185516141849163ffffffff169061591f565b11156141965761411285828686614789565b61158985856020015185614897565b60006001600160a01b0384163b156142a757604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906141e9903390899088908890600401615941565b602060405180830381600087803b15801561420357600080fd5b505af1925050508015614233575060408051601f3d908101601f1916820190925261423091810190615974565b60015b61428d573d808015614261576040519150601f19603f3d011682016040523d82523d6000602084013e614266565b606091505b5080516142855760405162461bcd60e51b81526004016107d69061578a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506133cc565b5060016133cc565b600054610100900460ff166110665760405162461bcd60e51b81526004016107d6906158aa565b600054610100900460ff166142fd5760405162461bcd60e51b81526004016107d6906158aa565b61106633613612565b600054610100900460ff1661432d5760405162461bcd60e51b81526004016107d6906158aa565b60c9805460ff19169055565b600054610100900460ff166143605760405162461bcd60e51b81526004016107d6906158aa565b8151614373906065906020850190614c23565b508051610cbb906066906020840190614c23565b6143918383614938565b61439e60008484846141a5565b610cbb5760405162461bcd60e51b81526004016107d69061578a565b6000808251604114156143f15760208301516040840151606085015160001a6143e587828585614a86565b94509450505050614423565b82516040141561441b5760208301516040840151614410868383614b70565b935093505050614423565b506000905060025b9250929050565b600081600481111561443e5761443e61535e565b14156144475750565b600181600481111561445b5761445b61535e565b14156144a95760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016107d6565b60028160048111156144bd576144bd61535e565b141561450b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016107d6565b600381600481111561451f5761451f61535e565b14156145785760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016107d6565b600481600481111561458c5761458c61535e565b14156128855760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016107d6565b600084815261010360205260409020606080840151908501516006830154614613919063ffffffff16615991565b61461d91906156b4565b60068201805463ffffffff191663ffffffff92831690811790915542909116106146595760068101805463ffffffff19164263ffffffff161790555b6115898584845b600083815261010360205260409020600581015484906001600160a01b031661468882611603565b6004840154600585015460208089015160028801546040805195865263ffffffff600160a81b90950485169386019390935292169083015260608201526001600160a01b0391909116907fe17e61be0a4aac2f0b6fece72cedc2ab9ca554634d5af864a9282095206a0c2b9060800160405180910390a460a083015161ffff1615614758578260a0015161ffff1683604001516147259190615671565b6147359063ffffffff164261554b565b8160060160046101000a81548163ffffffff021916908363ffffffff1602179055505b60209092015160058301805463ffffffff909216600160a81b0263ffffffff60a81b19909216919091179055905550565b60008481526101036020526040812060068101549091906147b190429063ffffffff16615991565b63ffffffff16856040015163ffffffff1686600001516147d1919061591f565b604086015186516147e89163ffffffff169061591f565b6147f2919061569d565b6147fc91906159b6565b60fb549091506001600160a01b031663c54c58c461481988611603565b600585015460405160e084901b6001600160e01b03191681526001600160a01b039283166004820152911660248201526044810189905260648101849052608401600060405180830381600087803b15801561487457600080fd5b505af1158015614888573d6000803e3d6000fd5b50505050612020868585614660565b600083815261010360209081526040808320610104909252909120829055600581015484906001600160a01b03166148ce82611603565b6004840154600585015460408051928352600160a81b90910463ffffffff9081166020840152881682820152516001600160a01b0392909216917f3d051466fe86e1bd842d67e98121d69a930caccf48fc2ae2c83119b5a7b71af69181900360600190a450505050565b6001600160a01b03821661498e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107d6565b6000818152606760205260409020546001600160a01b0316156149f35760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107d6565b6149ff60008383613fbe565b6001600160a01b0382166000908152606860205260408120805460019290614a2890849061554b565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115614abd5750600090506003613cdd565b8460ff16601b14158015614ad557508460ff16601c14155b15614ae65750600090506004613cdd565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614b3a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614b6357600060019250925050613cdd565b9660009650945050505050565b6000806001600160ff1b03831660ff84901c601b01614b9187828885614a86565b935093505050935093915050565b828054614bab90615563565b90600052602060002090601f016020900481019282614bcd5760008555614c13565b82601f10614be65782800160ff19823516178555614c13565b82800160010185558215614c13579182015b82811115614c13578235825591602001919060010190614bf8565b50614c1f929150614c97565b5090565b828054614c2f90615563565b90600052602060002090601f016020900481019282614c515760008555614c13565b82601f10614c6a57805160ff1916838001178555614c13565b82800160010185558215614c13579182015b82811115614c13578251825591602001919060010190614c7c565b5b80821115614c1f5760008155600101614c98565b6001600160e01b03198116811461288557600080fd5b600060208284031215614cd457600080fd5b8135613f8181614cac565b600060208284031215614cf157600080fd5b5035919050565b60005b83811015614d13578181015183820152602001614cfb565b83811115610ffd5750506000910152565b60008151808452614d3c816020860160208601614cf8565b601f01601f19169290920160200192915050565b602081526000613f816020830184614d24565b80356001600160a01b0381168114614d7a57600080fd5b919050565b60008060408385031215614d9257600080fd5b614d9b83614d63565b946020939093013593505050565b60008083601f840112614dbb57600080fd5b50813567ffffffffffffffff811115614dd357600080fd5b6020830191508360208260051b850101111561442357600080fd5b803563ffffffff81168114614d7a57600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f830112614e2957600080fd5b813567ffffffffffffffff80821115614e4457614e44614e02565b604051601f8301601f19908116603f01168101908282118183101715614e6c57614e6c614e02565b81604052838152866020858801011115614e8557600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f840112614eb757600080fd5b50813567ffffffffffffffff811115614ecf57600080fd5b60208301915083602082850101111561442357600080fd5b60008060008060008060008060008060e08b8d031215614f0657600080fd5b8a3567ffffffffffffffff80821115614f1e57600080fd5b614f2a8e838f01614da9565b909c509a5060208d0135915080821115614f4357600080fd5b614f4f8e838f01614da9565b909a50985060408d01359750889150614f6a60608e01614dee565b965060808d0135915080821115614f8057600080fd5b614f8c8e838f01614e18565b955060a08d0135915080821115614fa257600080fd5b614fae8e838f01614e18565b945060c08d0135915080821115614fc457600080fd5b50614fd18d828e01614ea5565b915080935050809150509295989b9194979a5092959850565b600080600060608486031215614fff57600080fd5b61500884614d63565b925061501660208501614d63565b9150604084013590509250925092565b60006020828403121561503857600080fd5b613f8182614d63565b6020808252825182820181905260009190848201906040850190845b818110156150795783518352928401929184019160010161505d565b50909695505050505050565b6000806040838503121561509857600080fd5b823591506150a860208401614dee565b90509250929050565b600080604083850312156150c457600080fd5b6150cd83614d63565b91506150a860208401614dee565b801515811461288557600080fd5b600080604083850312156150fc57600080fd5b61510583614d63565b91506020830135615115816150db565b809150509250929050565b60008060008060008060008060a0898b03121561513c57600080fd5b88359750602089013567ffffffffffffffff8082111561515b57600080fd5b6151678c838d01614da9565b909950975060408b013591508082111561518057600080fd5b61518c8c838d01614da9565b909750955060608b01359150808211156151a557600080fd5b6151b18c838d01614e18565b945060808b01359150808211156151c757600080fd5b506151d48b828c01614ea5565b999c989b5096995094979396929594505050565b6000806000606084860312156151fd57600080fd5b61520684614d63565b95602085013595506040909401359392505050565b6000806000806080858703121561523157600080fd5b61523a85614d63565b935061524860208601614d63565b925060408501359150606085013567ffffffffffffffff81111561526b57600080fd5b61527787828801614e18565b91505092959194509250565b60008060006040848603121561529857600080fd5b83359250602084013567ffffffffffffffff8111156152b657600080fd5b6152c286828701614da9565b9497909650939450505050565b60008060008060008060008060a0898b0312156152eb57600080fd5b883567ffffffffffffffff8082111561530357600080fd5b61530f8c838d01614da9565b909a50985060208b013591508082111561532857600080fd5b6153348c838d01614da9565b909850965086915061534860408c01614dee565b955060608b01359150808211156151a557600080fd5b634e487b7160e01b600052602160045260246000fd5b6007811061539257634e487b7160e01b600052602160045260246000fd5b9052565b6020815281516020820152602082015160408201526040820151606082015260608201516080820152608082015160a0820152600060a08301516153e560c08401826001600160a01b03169052565b5060c08301516153f860e0840182615374565b5060e08301516101006154128185018363ffffffff169052565b840151905061012061542b8482018363ffffffff169052565b84015190506101406154448482018363ffffffff169052565b840151905061016061545d8482018363ffffffff169052565b84015190506101806154768482018363ffffffff169052565b8401516101a08481015290506133cc6101c0840182614d24565b600080604083850312156154a357600080fd5b6154ac83614d63565b91506150a860208401614d63565b600080600080608085870312156154d057600080fd5b5050823594602084013594506040840135936060013592509050565b60208082526005908201526404282aaa8960db1b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561555e5761555e615535565b500190565b600181811c9082168061557757607f821691505b6020821081141561559857634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526010908201526f21494e56414c4944287374617475732960801b604082015260600190565b602080825260099082015268214d494e5f5445524d60b81b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600063ffffffff8083168185168183048111821515161561569457615694615535565b02949350505050565b6000828210156156af576156af615535565b500390565b600063ffffffff8083168185168083038211156156d3576156d3615535565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561570657615706615535565b5060010190565b66697066733a2f2f60c81b81526000825161572f816007850160208701614cf8565b9190910160070192915050565b60208082526013908201527221494e56414c494428706c616e50726f6f662960681b604082015260600190565b60006020828403121561577b57600080fd5b815160038110613f8157600080fd5b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600080858511156157ec57600080fd5b838611156157f957600080fd5b5050600583901b0193919092039150565b81835260006001600160fb1b0383111561582357600080fd5b8260051b8083602087013760009401602001938452509192915050565b60018060a01b038816815263ffffffff8716602082015285604082015284606082015283608082015260c060a0820152600061588060c08301848661580a565b9998505050505050505050565b60006020828403121561589f57600080fd5b8151613f81816150db565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b84815283602082015260606040820152600061591560608301848661580a565b9695505050505050565b60008261593c57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061591590830184614d24565b60006020828403121561598657600080fd5b8151613f8181614cac565b600063ffffffff838116908316818110156159ae576159ae615535565b039392505050565b60008160001904831182151516156159d0576159d0615535565b50029056fea2646970667358221220361f97b752c43221efd67e59d443dfb5a916e208b427fe0baec6850af128267664736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102f15760003560e01c80638e814f111161019d578063c7a687bf116100e9578063e985e9c5116100a2578063f2fde38b1161007c578063f2fde38b14610708578063f6189f0e1461071b578063fb288e151461072e578063fcd9da441461073757600080fd5b8063e985e9c514610699578063ef5e668d146106d5578063f268f53e146106de57600080fd5b8063c7a687bf146105f5578063c86e69541461061f578063c87b56dd14610640578063d0ebdbe714610653578063dbb4520b14610666578063dc311dd31461067957600080fd5b8063a746df7011610156578063ba4bf1b611610130578063ba4bf1b6146105a9578063bf158fd2146105bc578063c0159f6f146105cf578063c4d66de8146105e257600080fd5b8063a746df7014610570578063ab5f8b7c14610583578063b88d4fde1461059657600080fd5b80638e814f11146104dd5780638fe17b16146104f05780639377877d1461050357806395d89b4114610542578063a0936cb11461054a578063a22cb4651461055d57600080fd5b8063406907071161025c5780636352211e11610215578063715018a6116101ef578063715018a6146104a95780638456cb59146104b157806385e25ad4146104b95780638da5cb5b146104cc57600080fd5b80636352211e146104705780636c4f70df1461048357806370a082311461049657600080fd5b8063406907071461040e57806341f23f0a1461042157806342842e0e1461043457806343e6a6ee1461044757806356eb00a1146104505780635c975abb1461046557600080fd5b806313406f6f116102ae57806313406f6f1461039957806316020d21146103ac57806321235083146103b657806323b872dd146103c9578063291b9a3f146103dc5780633f4ba83a1461040657600080fd5b806301ffc9a7146102f6578063023a584e1461031e57806306fdde0314610333578063081812fc1461034857806308e7250314610373578063095ea7b314610386575b600080fd5b610309610304366004614cc2565b61074a565b60405190151581526020015b60405180910390f35b61033161032c366004614cdf565b61079c565b005b61033b610a83565b6040516103159190614d50565b61035b610356366004614cdf565b610b15565b6040516001600160a01b039091168152602001610315565b610101545b604051908152602001610315565b610331610394366004614d7f565b610baa565b6103316103a7366004614ee7565b610cc0565b6103786101005481565b6103316103c4366004614cdf565b610d98565b6103316103d7366004614fea565b611003565b6103786103ea366004615026565b6001600160a01b03166000908152610102602052604090205490565b610331611034565b61033161041c366004614cdf565b611068565b61033161042f366004614cdf565b61125a565b610331610442366004614fea565b611590565b61037860fd5481565b6104586115ab565b6040516103159190615041565b60c95460ff16610309565b61035b61047e366004614cdf565b611603565b610331610491366004614cdf565b61167a565b6103786104a4366004615026565b611761565b6103316117e8565b61033161181c565b6103316104c7366004615085565b61184e565b6097546001600160a01b031661035b565b6103316104eb366004614cdf565b61196d565b60fc5461035b906001600160a01b031681565b6103786105113660046150b1565b6001600160a01b03821660009081526101076020908152604080832063ffffffff8516845290915290205492915050565b61033b611b3c565b610331610558366004614cdf565b611b4b565b61033161056b3660046150e9565b611bad565b61033161057e366004615120565b611bbc565b6104586105913660046151e8565b611ca3565b6103316105a436600461521b565b611d6d565b6103316105b7366004615283565b611d9f565b60fb5461035b906001600160a01b031681565b6103316105dd3660046152cf565b612028565b6103316105f0366004615026565b6120d5565b610378610603366004615026565b6001600160a01b03166000908152610106602052604090205490565b61037861062d366004614cdf565b6000908152610104602052604090205490565b61033b61064e366004614cdf565b612222565b610331610661366004615026565b612448565b610331610674366004614cdf565b612494565b61068c610687366004614cdf565b6125ff565b6040516103159190615396565b6103096106a7366004615490565b6001600160a01b039182166000908152606a6020908152604080832093909416825291909152205460ff1690565b61037860ff5481565b6103786106ec366004615026565b6001600160a01b03166000908152610105602052604090205490565b610331610716366004615026565b6127ed565b6104586107293660046151e8565b612888565b61037860fe5481565b6103316107453660046154ba565b612949565b60006001600160e01b031982166380ac58cd60e01b148061077b57506001600160e01b03198216635b5e139f60e01b145b8061079657506301ffc9a760e01b6001600160e01b03198316145b92915050565b806107a681611603565b6001600160a01b0316336001600160a01b0316146107df5760405162461bcd60e51b81526004016107d6906154ec565b60405180910390fd5b60c95460ff16156108025760405162461bcd60e51b81526004016107d69061550b565b60005a60008481526101036020526040902090915060036005820154600160a01b900460ff1660068111156108395761083961535e565b146108745760405162461bcd60e51b815260206004820152600b60248201526a085393d517d4105554d15160aa1b60448201526064016107d6565b6000610883826000015461298e565b9050806080015163ffffffff16600014806108d65750608081015160058301546001600160a01b03166000908152610107602090815260408083208286015163ffffffff90811685529252909120549116115b6109105760405162461bcd60e51b815260206004820152600b60248201526a214d41585f41435449564560a81b60448201526064016107d6565b60058201805460ff60a01b198116600160a11b17918290556001600160a01b0316600090815261010760209081526040808320600160a81b90940463ffffffff16835292905290812080546001929061096a90849061554b565b9091555050600682015463ffffffff4281169116101561099c5760068201805463ffffffff19164263ffffffff161790555b600582015485906001600160a01b03166109b582611603565b6004850154600586015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917f7ee0fc3eab7021686f891346ebbf5bab192d6f9995fcc66021f4551888dc1481910160405180910390a460fb5461010054604051632fe329ff60e21b81526004810186905260248101919091526001600160a01b039091169063bf8ca7fc906044015b600060405180830381600087803b158015610a6457600080fd5b505af1158015610a78573d6000803e3d6000fd5b505050505050505050565b606060658054610a9290615563565b80601f0160208091040260200160405190810160405280929190818152602001828054610abe90615563565b8015610b0b5780601f10610ae057610100808354040283529160200191610b0b565b820191906000526020600020905b815481529060010190602001808311610aee57829003601f168201915b5050505050905090565b6000818152606760205260408120546001600160a01b0316610b8e5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107d6565b506000908152606960205260409020546001600160a01b031690565b6000610bb582611603565b9050806001600160a01b0316836001600160a01b03161415610c235760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016107d6565b336001600160a01b0382161480610c3f5750610c3f81336106a7565b610cb15760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016107d6565b610cbb8383612a53565b505050565b60c95460ff1615610ce35760405162461bcd60e51b81526004016107d69061550b565b60005a90506000610cfa8c8c8c8c8b8b8a8a612ac1565b9050610d0688866131b7565b506000818152610103602052604090819020600181018a905560fb5460fd549251632fe329ff60e21b815260048101869052602481019390935290916001600160a01b039091169063bf8ca7fc90604401600060405180830381600087803b158015610d7157600080fd5b505af1158015610d85573d6000803e3d6000fd5b5050505050505050505050505050505050565b80610da281611603565b6001600160a01b0316336001600160a01b03161480610ddb5750600081815261010360205260409020600501546001600160a01b031633145b610df75760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff1615610e1a5760405162461bcd60e51b81526004016107d69061550b565b60005a600084815261010360205260409020909150600580820154600160a01b900460ff166006811115610e5057610e5061535e565b14158015610e7e575060046005820154600160a01b900460ff166006811115610e7b57610e7b61535e565b14155b610e9a5760405162461bcd60e51b81526004016107d69061559e565b6006810154600160201b900463ffffffff161580610ece5750600681015463ffffffff600160201b90910481164290911610155b610eea5760405162461bcd60e51b81526004016107d6906155c8565b600581018054600560a01b60ff60a01b1982161790915584906001600160a01b0316610f1582611603565b6004840154600585015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917f83217e17a62745245734031007583a7faee757904c6d101fc0003df8e0b541d4910160405180910390a4610f7a84611603565b6001600160a01b0316336001600160a01b03161415610ffd5760fb5460ff54604051632fe329ff60e21b81526004810185905260248101919091526001600160a01b039091169063bf8ca7fc90604401600060405180830381600087803b158015610fe457600080fd5b505af1158015610ff8573d6000803e3d6000fd5b505050505b50505050565b61100d33826132dd565b6110295760405162461bcd60e51b81526004016107d6906155eb565b610cbb8383836133d4565b6097546001600160a01b0316331461105e5760405162461bcd60e51b81526004016107d69061563c565b61106661357f565b565b60fb546001600160a01b031633146110925760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff16156110b55760405162461bcd60e51b81526004016107d69061550b565b60008181526101046020526040902054806111125760405162461bcd60e51b815260206004820152601960248201527f21494e56414c49442870656e64696e67506c616e44617461290000000000000060448201526064016107d6565b6000828152610103602052604081209061112b8361298e565b600583015490915084906001600160a01b031661114782611603565b6004850154600586015460208087015160028901546040805195865263ffffffff600160a81b90950485169386019390935292169083015260608201526001600160a01b0391909116907fe17e61be0a4aac2f0b6fece72cedc2ab9ca554634d5af864a9282095206a0c2b9060800160405180910390a4602081015160058301805463ffffffff909216600160a81b0263ffffffff60a81b1990921691909117905582825560a081015161ffff1615611245578060a0015161ffff1681604001516112129190615671565b6112229063ffffffff164261554b565b8260060160046101000a81548163ffffffff021916908363ffffffff1602179055505b50505060009081526101046020526040812055565b8061126481611603565b6001600160a01b0316336001600160a01b0316148061129d5750600081815261010360205260409020600501546001600160a01b031633145b6112b95760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff16156112dc5760405162461bcd60e51b81526004016107d69061550b565b60005a60008481526101036020526040902090915060036005820154600160a01b900460ff1660068111156113135761131361535e565b14158015611341575060066005820154600160a01b900460ff16600681111561133e5761133e61535e565b14155b801561136d575060046005820154600160a01b900460ff16600681111561136a5761136a61535e565b14155b80156113985750600580820154600160a01b900460ff1660068111156113955761139561535e565b14155b6113b45760405162461bcd60e51b81526004016107d69061559e565b6006810154600160201b900463ffffffff1615806113e85750600681015463ffffffff600160201b90910481164290911610155b6114045760405162461bcd60e51b81526004016107d6906155c8565b6000611413826000015461298e565b90508060c001516114565760405162461bcd60e51b815260206004820152600d60248201526c214e4f545f5041555341424c4560981b60448201526064016107d6565b60058201805460ff60a01b198116600360a01b17918290556001600160a01b0316600090815261010760209081526040808320600160a81b90940463ffffffff1683529290529081208054600192906114b090849061569d565b9091555050600582015485906001600160a01b03166114ce82611603565b6004850154600586015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917f7afd3b59e582bb56b590409b808e910ae787056cb10b682b9bdefa44c8eb940d910160405180910390a461153385611603565b6001600160a01b0316336001600160a01b031614156115895760fb5461010054604051632fe329ff60e21b81526004810186905260248101919091526001600160a01b039091169063bf8ca7fc90604401610a4a565b5050505050565b610cbb83838360405180602001604052806000815250611d6d565b6060610101805480602002602001604051908101604052809291908181526020018280548015610b0b57602002820191906000526020600020905b8154815260200190600101908083116115e6575050505050905090565b6000818152606760205260408120546001600160a01b0316806107965760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016107d6565b60fb546001600160a01b031633146116a45760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff16156116c75760405162461bcd60e51b81526004016107d69061550b565b600081815261010360205260409020600581018054600360a11b60ff60a01b1982161790915582906001600160a01b031661170182611603565b6004840154600585015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917f44abb4f4529fdbcacc1ee98eef9318eaf9a12044d6925a2dc2c702959d9352f1910160405180910390a45050565b60006001600160a01b0382166117cc5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016107d6565b506001600160a01b031660009081526068602052604090205490565b6097546001600160a01b031633146118125760405162461bcd60e51b81526004016107d69061563c565b6110666000613612565b6097546001600160a01b031633146118465760405162461bcd60e51b81526004016107d69061563c565b611066613664565b8161185881611603565b6001600160a01b0316336001600160a01b0316146118885760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff16156118ab5760405162461bcd60e51b81526004016107d69061550b565b60005a600085815261010360205260409020600681015491925090600160201b900463ffffffff1615806118f45750600681015463ffffffff600160201b909104811690851610155b6119105760405162461bcd60e51b81526004016107d6906155c8565b60068101805463ffffffff60401b1916600160401b63ffffffff87160217905560fb5461010054604051632fe329ff60e21b81526004810185905260248101919091526001600160a01b039091169063bf8ca7fc90604401610a4a565b60fb546001600160a01b031633146119975760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff16156119ba5760405162461bcd60e51b81526004016107d69061550b565b60008181526101036020526040812080549091906119d79061298e565b905060016005830154600160a01b900460ff1660068111156119fb576119fb61535e565b1415611a7757600582015483906001600160a01b0316611a1a82611603565b6004850154600586015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917ff42e506093cb49dad3d3349cf7a2b390140be665daecb2c820e903afd12b1df7910160405180910390a45b60058201805460ff60a01b1916600160a11b17905560408101516006830154611aa6919063ffffffff166156b4565b60068301805463ffffffff191663ffffffff92909216919091179055600582015483906001600160a01b0316611adb82611603565b6004850154600586015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917fcdd2eee203a384f2c6e81f39021f7e3ebef3a21ccd0d0f6dd117387ab61b6b54910160405180910390a4505050565b606060668054610a9290615563565b60fb546001600160a01b03163314611b755760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff1615611b985760405162461bcd60e51b81526004016107d69061550b565b60009081526101036020526040812060030155565b611bb83383836136bc565b5050565b87611bc681611603565b6001600160a01b0316336001600160a01b031614611bf65760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff1615611c195760405162461bcd60e51b81526004016107d69061550b565b60005a9050611c2e8a8a8a8a8a8a8a8a61378b565b60fb5460fe54604051632fe329ff60e21b81526004810184905260248101919091526001600160a01b039091169063bf8ca7fc90604401600060405180830381600087803b158015611c7f57600080fd5b505af1158015611c93573d6000803e3d6000fd5b5050505050505050505050505050565b606060008367ffffffffffffffff811115611cc057611cc0614e02565b604051908082528060200260200182016040528015611ce9578160200160208202803683370190505b50905060005b84811015611d64576001600160a01b038616600090815261010260205260409020611d1a858361554b565b81548110611d2a57611d2a6156dc565b9060005260206000200154828281518110611d4757611d476156dc565b602090810291909101015280611d5c816156f2565b915050611cef565b50949350505050565b611d7733836132dd565b611d935760405162461bcd60e51b81526004016107d6906155eb565b610ffd84848484613b36565b82611da981611603565b6001600160a01b0316336001600160a01b03161480611de25750600081815261010360205260409020600501546001600160a01b031633145b611dfe5760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff1615611e215760405162461bcd60e51b81526004016107d69061550b565b60005a60008681526101036020526040902060028101549192509015611e7e5760405162461bcd60e51b81526020600482015260126024820152710851561254d5125391d7d11254d0d3d5539560721b60448201526064016107d6565b6000868152610104602052604090205415611ee05760008681526101046020526040812054611eac9061298e565b60058301546020820151919250611ed0916001600160a01b03909116908888613b69565b6003840155600283015550611f13565b6005810154611f08906001600160a01b03811690600160a81b900463ffffffff168787613b69565b600383015560028201555b600581015486906001600160a01b0316611f2c82611603565b60048401546005850154600386015460408051938452600160a81b90920463ffffffff166020840152908201526001600160a01b0391909116907f23be24e2f5bdda1a165ef44cb730243e3f79e09d3c28086b166ab914c79750609060600160405180910390a4611f9c86611603565b6001600160a01b0316336001600160a01b031614156120205760fb5461010054604051632fe329ff60e21b81526004810185905260248101919091526001600160a01b039091169063bf8ca7fc90604401600060405180830381600087803b15801561200757600080fd5b505af115801561201b573d6000803e3d6000fd5b505050505b505050505050565b60c95460ff161561204b5760405162461bcd60e51b81526004016107d69061550b565b60005a90506120608989898989898989612ac1565b5060fb5460fd54604051632fe329ff60e21b81526004810184905260248101919091526001600160a01b039091169063bf8ca7fc90604401600060405180830381600087803b1580156120b257600080fd5b505af11580156120c6573d6000803e3d6000fd5b50505050505050505050505050565b600054610100900460ff166120f05760005460ff16156120f4565b303b155b6121575760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016107d6565b600054610100900460ff16158015612179576000805461ffff19166101011790555b612181613ce6565b612189613d1d565b6121dd604051806040016040528060128152602001714361736b20537562736372697074696f6e7360701b815250604051806040016040528060088152602001674341534b5355425360c01b815250613d54565b60fc80546001600160a01b0319166001600160a01b038416179055600060fd81905560fe81905560ff819055610100558015611bb8576000805461ff00191690555050565b6000818152606760205260409020546060906001600160a01b03166122a15760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016107d6565b60008281526101036020908152604080832081516101a08101835281548152600182015493810193909352600281015491830191909152600381015460608301526004810154608083015260058101546001600160a01b03811660a084015260c0830190600160a01b900460ff1660068111156123205761232061535e565b60068111156123315761233161535e565b8152600582015463ffffffff600160a81b820481166020840152600160c81b9091048116604083015260068301548082166060840152600160201b810482166080840152600160401b90041660a082015260078201805460c09092019161239790615563565b80601f01602080910402602001604051908101604052809291908181526020018280546123c390615563565b80156124105780601f106123e557610100808354040283529160200191612410565b820191906000526020600020905b8154815290600101906020018083116123f357829003601f168201915b5050505050815250509050806101800151604051602001612431919061570d565b604051602081830303815290604052915050919050565b6097546001600160a01b031633146124725760405162461bcd60e51b81526004016107d69061563c565b60fb80546001600160a01b0319166001600160a01b0392909216919091179055565b60fb546001600160a01b031633146124be5760405162461bcd60e51b81526004016107d6906154ec565b60c95460ff16156124e15760405162461bcd60e51b81526004016107d69061550b565b600081815261010360209081526040808320600581018054600160a21b60ff60a01b198216179091556001600160a01b0316845261010690925282208054919260019261252f90849061569d565b909155505060058101546001600160a01b038116600090815261010760209081526040808320600160a81b90940463ffffffff16835292905290812080546001929061257c90849061569d565b9091555050600581015482906001600160a01b031661259a82611603565b6004840154600585015460408051928352600160a81b90910463ffffffff1660208301526001600160a01b0392909216917f58e4414596fd750dbb9dabfe65b97bf5add2061f5902f34e2b82a9c25bd79f98910160405180910390a4611bb882613d95565b604080516101a08101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e082018390526101008201839052610120820183905261014082018390526101608201929092526101808101919091526000828152610103602090815260409182902082516101a08101845281548152600182015492810192909252600281015492820192909252600382015460608201526004820154608082015260058201546001600160a01b03811660a083015290919060c0830190600160a01b900460ff1660068111156126ed576126ed61535e565b60068111156126fe576126fe61535e565b8152600582015463ffffffff600160a81b820481166020840152600160c81b9091048116604083015260068301548082166060840152600160201b810482166080840152600160401b90041660a082015260078201805460c09092019161276490615563565b80601f016020809104026020016040519081016040528092919081815260200182805461279090615563565b80156127dd5780601f106127b2576101008083540402835291602001916127dd565b820191906000526020600020905b8154815290600101906020018083116127c057829003601f168201915b5050505050815250509050919050565b6097546001600160a01b031633146128175760405162461bcd60e51b81526004016107d69061563c565b6001600160a01b03811661287c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107d6565b61288581613612565b50565b606060008367ffffffffffffffff8111156128a5576128a5614e02565b6040519080825280602002602001820160405280156128ce578160200160208202803683370190505b50905060005b84811015611d64576001600160a01b0386166000908152610105602052604090206128ff858361554b565b8154811061290f5761290f6156dc565b906000526020600020015482828151811061292c5761292c6156dc565b602090810291909101015280612941816156f2565b9150506128d4565b6097546001600160a01b031633146129735760405162461bcd60e51b81526004016107d69061563c565b60fd9390935560fe9190915560ff5561010055565b3b151590565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915250604080516101008101825260a083811c8252608084811c63ffffffff908116602080860191909152606087811c8316868801529587901c8216958501959095529385901c90931692820192909252601083901c61ffff169181019190915260f09190911b600160f01b8181161460c0830152600160f11b9081161460e082015290565b600081815260696020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612a8882611603565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006004881015612b0d5760405162461bcd60e51b815260206004820152601660248201527521494e56414c494428706c616e50726f6f664c656e2960501b60448201526064016107d6565b600060038710612b7557612b6e8a8a6000818110612b2d57612b2d6156dc565b90506020020135868c8c6003818110612b4857612b486156dc565b905060200201358b8b6002818110612b6257612b626156dc565b90506020020135613e3c565b9050612bb9565b612bb68a8a6000818110612b8b57612b8b6156dc565b90506020020135868c8c6003818110612ba657612ba66156dc565b905060200201356000801b613e3c565b90505b612bc38a8a613eba565b612bdf5760405162461bcd60e51b81526004016107d69061573c565b6000612c038b8b6002818110612bf757612bf76156dc565b9050602002013561298e565b90506000612cb48c8c6000818110612c1d57612c1d6156dc565b905060200201358d8d6001818110612c3757612c376156dc565b905060200201358e8e6002818110612c5157612c516156dc565b905060200201356040516bffffffffffffffffffffffff193360601b16602082015260348101849052605481018290526074810183905243609482015260009060b40160408051601f198184030181529190528051602090910120949350505050565b9050816080015163ffffffff1660001480612d03575060808201516001600160a01b0384166000908152610107602090815260408083208287015163ffffffff90811685529252909120549116115b612d3d5760405162461bcd60e51b815260206004820152600b60248201526a214d41585f41435449564560a81b60448201526064016107d6565b600060fc54602084015160405163b6ab359f60e01b81526001600160a01b03878116600483015263ffffffff909216602482015291169063b6ab359f9060440160206040518083038186803b158015612d9557600080fd5b505afa158015612da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dcd9190615769565b6002811115612dde57612dde61535e565b14612e1a5760405162461bcd60e51b815260206004820152600c60248201526b085393d517d153905093115160a21b60448201526064016107d6565b612e243382613f88565b6000818152610103602090815260409091206005810180549285015163ffffffff16600160a81b02600164ffffffff0160a01b03199093166001600160a01b03871617929092179091558c8c6001818110612e8157612e816156dc565b60200291909101356004830155508c8c6002818110612ea257612ea26156dc565b602002919091013582555060068101805463ffffffff60401b1916600160401b63ffffffff8c1602179055612edb600782018888614b9f565b5060058101805463ffffffff60c81b1916600160c81b4263ffffffff160217905560a083015161ffff1615612f55578260a0015161ffff168360400151612f229190615671565b612f329063ffffffff164261554b565b8160060160046101000a81548163ffffffff021916908363ffffffff1602179055505b606083015163ffffffff1615612fa65760058101805460ff60a01b1916600160a01b1790556060830151612f8990426156b4565b60068201805463ffffffff191663ffffffff929092169190911790555b60058101546020840151612fc5916001600160a01b0316908d8d613b69565b60038301556002820155600681015463ffffffff4281169116116130425760fb5460405163d71bb37b60e01b8152600481018490526001600160a01b039091169063d71bb37b90602401600060405180830381600087803b15801561302957600080fd5b505af115801561303d573d6000803e3d6000fd5b505050505b600581015482906001600160a01b031661305b82611603565b60048401546005850154600286015460408051938452600160a81b90920463ffffffff166020840152908201526001600160a01b0391909116907f9fb45eab820cdd481e286e8c699e1c01031bb833c58f7cfba3ca8d1db6d98d819060600160405180910390a433600090815261010260209081526040808320805460018181018355918552838520018690556001600160a01b038816808552610105845282852080548084018255908652848620018790558452610106909252822080549192909161312990849061554b565b90915550506001600160a01b0384166000908152610107602090815260408083208683015163ffffffff168452909152812080546001929061316c90849061554b565b909155505061010180546001810182556000919091527f109ea3cebb188b9c1b9fc5bb3920be60dfdc8699098dff92f3d80daaca74768901829055509b9a5050505050505050505050565b60008061323a83613234866040516020016131d491815260200190565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b90613fa2565b9050600061327a8560408051808201909152600080825260208201525060408051808201909152606082901c815260509190911c61ffff16602082015290565b9050816001600160a01b031681600001516001600160a01b0316146132d55760405162461bcd60e51b815260206004820152601160248201527021494e56414c4944286e6574776f726b2960781b60448201526064016107d6565b509392505050565b6000818152606760205260408120546001600160a01b03166133565760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016107d6565b600061336183611603565b9050806001600160a01b0316846001600160a01b0316148061339c5750836001600160a01b031661339184610b15565b6001600160a01b0316145b806133cc57506001600160a01b038082166000908152606a602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166133e782611603565b6001600160a01b03161461344f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016107d6565b6001600160a01b0382166134b15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016107d6565b6134bc838383613fbe565b6134c7600082612a53565b6001600160a01b03831660009081526068602052604081208054600192906134f090849061569d565b90915550506001600160a01b038216600090815260686020526040812080546001929061351e90849061554b565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60c95460ff166135c85760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016107d6565b60c9805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60c95460ff16156136875760405162461bcd60e51b81526004016107d69061550b565b60c9805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586135f53390565b816001600160a01b0316836001600160a01b0316141561371e5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016107d6565b6001600160a01b038381166000818152606a6020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60048610156137ac5760405162461bcd60e51b81526004016107d69061573c565b600088815261010360205260409020600681015463ffffffff4281169116116138075760405162461bcd60e51b815260206004820152600d60248201526c085391515117d491539155d053609a1b60448201526064016107d6565b60026005820154600160a01b900460ff1660068111156138295761382961535e565b1480613854575060016005820154600160a01b900460ff1660068111156138525761385261535e565b145b6138705760405162461bcd60e51b81526004016107d69061559e565b6000600386106138cc576138c589896000818110613890576138906156dc565b90506020020135868b8b60038181106138ab576138ab6156dc565b905060200201358a8a6002818110612b6257612b626156dc565b9050613900565b6138fd898960008181106138e2576138e26156dc565b90506020020135868b8b6003818110612ba657612ba66156dc565b90505b61390a8989613eba565b6139265760405162461bcd60e51b81526004016107d69061573c565b600061393e8a8a6002818110612bf757612bf76156dc565b60058401549091506001600160a01b038381169116146139955760405162461bcd60e51b815260206004820152601260248201527121494e56414c49442870726f76696465722960701b60448201526064016107d6565b6139a3600784018686614b9f565b5060028301541580156139b7575060038710155b80156139d957506000888882816139d0576139d06156dc565b90506020020135115b15613a0857600583015460208201516139fd916001600160a01b0316908a8a613b69565b600385015560028401555b60208101516005840154600160a81b900463ffffffff908116911614613b2957600060fc54602083015160405163b6ab359f60e01b81526001600160a01b03868116600483015263ffffffff909216602482015291169063b6ab359f9060440160206040518083038186803b158015613a8057600080fd5b505afa158015613a94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ab89190615769565b6002811115613ac957613ac961535e565b14613b055760405162461bcd60e51b815260206004820152600c60248201526b085393d517d153905093115160a21b60448201526064016107d6565b613b298b828c8c6002818110613b1d57613b1d6156dc565b905060200201356140bf565b5050505050505050505050565b613b418484846133d4565b613b4d848484846141a5565b610ffd5760405162461bcd60e51b81526004016107d69061578a565b600080600383118015613b925750600084848281613b8957613b896156dc565b90506020020135115b15613cd657600084846000818110613bac57613bac6156dc565b90506020020135604051602001613bc591815260200190565b60408051601f19818403018152919052805160209091012060fc549091506001600160a01b03166372212e7688888489896001818110613c0757613c076156dc565b905060200201358a8a6002818110613c2157613c216156dc565b60200291909101359050613c388b6003818f6157dc565b6040518863ffffffff1660e01b8152600401613c5a9796959493929190615840565b60206040518083038186803b158015613c7257600080fd5b505afa158015613c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613caa919061588d565b15613cd4578085856001818110613cc357613cc36156dc565b905060200201359250925050613cdd565b505b5060009050805b94509492505050565b600054610100900460ff16613d0d5760405162461bcd60e51b81526004016107d6906158aa565b613d156142af565b6110666142d6565b600054610100900460ff16613d445760405162461bcd60e51b81526004016107d6906158aa565b613d4c6142af565b611066614306565b600054610100900460ff16613d7b5760405162461bcd60e51b81526004016107d6906158aa565b613d836142af565b613d8b6142af565b611bb88282614339565b6000613da082611603565b9050613dae81600084613fbe565b613db9600083612a53565b6001600160a01b0381166000908152606860205260408120805460019290613de290849061569d565b909155505060008281526067602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600080613e628561323486866040516020016131d4929190918252602082015260400190565b90506001600160a01b0386811690821614613eb15760405162461bcd60e51b815260206004820152600f60248201526e21494e56414c49442870726f6f662960881b60448201526064016107d6565b95945050505050565b60fc546000906001600160a01b03166371ce3e6684846002818110613ee157613ee16156dc565b9050602002013585856003818110613efb57613efb6156dc565b60200291909101359050613f12866004818a6157dc565b6040518563ffffffff1660e01b8152600401613f3194939291906158f5565b60206040518083038186803b158015613f4957600080fd5b505afa158015613f5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f81919061588d565b9392505050565b611bb8828260405180602001604052806000815250614387565b6000806000613fb185856143ba565b915091506132d58161442a565b6001600160a01b03831615801590613fde57506001600160a01b03821615155b15610cbb5760008181526101036020526040812080549091906140009061298e565b90508060e001516140485760405162461bcd60e51b8152602060048201526012602482015271214e4f545f5452414e534645525241424c4560701b60448201526064016107d6565b6006820154600160201b900463ffffffff16158061407c5750600682015463ffffffff600160201b90910481164290911610155b6140985760405162461bcd60e51b81526004016107d6906155c8565b506006018054600160401b63ffffffff82160263ffffffff60401b19909116179055505050565b60008381526101036020526040812080549091906140dc9061298e565b905060016005830154600160a01b900460ff1660068111156141005761410061535e565b141561411757614112858286866145e5565b611589565b6040810151815161412e9163ffffffff169061591f565b604085015185516141459163ffffffff169061591f565b141561415657614112858585614660565b6040810151815161416d9163ffffffff169061591f565b604085015185516141849163ffffffff169061591f565b11156141965761411285828686614789565b61158985856020015185614897565b60006001600160a01b0384163b156142a757604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906141e9903390899088908890600401615941565b602060405180830381600087803b15801561420357600080fd5b505af1925050508015614233575060408051601f3d908101601f1916820190925261423091810190615974565b60015b61428d573d808015614261576040519150601f19603f3d011682016040523d82523d6000602084013e614266565b606091505b5080516142855760405162461bcd60e51b81526004016107d69061578a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506133cc565b5060016133cc565b600054610100900460ff166110665760405162461bcd60e51b81526004016107d6906158aa565b600054610100900460ff166142fd5760405162461bcd60e51b81526004016107d6906158aa565b61106633613612565b600054610100900460ff1661432d5760405162461bcd60e51b81526004016107d6906158aa565b60c9805460ff19169055565b600054610100900460ff166143605760405162461bcd60e51b81526004016107d6906158aa565b8151614373906065906020850190614c23565b508051610cbb906066906020840190614c23565b6143918383614938565b61439e60008484846141a5565b610cbb5760405162461bcd60e51b81526004016107d69061578a565b6000808251604114156143f15760208301516040840151606085015160001a6143e587828585614a86565b94509450505050614423565b82516040141561441b5760208301516040840151614410868383614b70565b935093505050614423565b506000905060025b9250929050565b600081600481111561443e5761443e61535e565b14156144475750565b600181600481111561445b5761445b61535e565b14156144a95760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016107d6565b60028160048111156144bd576144bd61535e565b141561450b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016107d6565b600381600481111561451f5761451f61535e565b14156145785760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016107d6565b600481600481111561458c5761458c61535e565b14156128855760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016107d6565b600084815261010360205260409020606080840151908501516006830154614613919063ffffffff16615991565b61461d91906156b4565b60068201805463ffffffff191663ffffffff92831690811790915542909116106146595760068101805463ffffffff19164263ffffffff161790555b6115898584845b600083815261010360205260409020600581015484906001600160a01b031661468882611603565b6004840154600585015460208089015160028801546040805195865263ffffffff600160a81b90950485169386019390935292169083015260608201526001600160a01b0391909116907fe17e61be0a4aac2f0b6fece72cedc2ab9ca554634d5af864a9282095206a0c2b9060800160405180910390a460a083015161ffff1615614758578260a0015161ffff1683604001516147259190615671565b6147359063ffffffff164261554b565b8160060160046101000a81548163ffffffff021916908363ffffffff1602179055505b60209092015160058301805463ffffffff909216600160a81b0263ffffffff60a81b19909216919091179055905550565b60008481526101036020526040812060068101549091906147b190429063ffffffff16615991565b63ffffffff16856040015163ffffffff1686600001516147d1919061591f565b604086015186516147e89163ffffffff169061591f565b6147f2919061569d565b6147fc91906159b6565b60fb549091506001600160a01b031663c54c58c461481988611603565b600585015460405160e084901b6001600160e01b03191681526001600160a01b039283166004820152911660248201526044810189905260648101849052608401600060405180830381600087803b15801561487457600080fd5b505af1158015614888573d6000803e3d6000fd5b50505050612020868585614660565b600083815261010360209081526040808320610104909252909120829055600581015484906001600160a01b03166148ce82611603565b6004840154600585015460408051928352600160a81b90910463ffffffff9081166020840152881682820152516001600160a01b0392909216917f3d051466fe86e1bd842d67e98121d69a930caccf48fc2ae2c83119b5a7b71af69181900360600190a450505050565b6001600160a01b03821661498e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016107d6565b6000818152606760205260409020546001600160a01b0316156149f35760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016107d6565b6149ff60008383613fbe565b6001600160a01b0382166000908152606860205260408120805460019290614a2890849061554b565b909155505060008181526067602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115614abd5750600090506003613cdd565b8460ff16601b14158015614ad557508460ff16601c14155b15614ae65750600090506004613cdd565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614b3a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614b6357600060019250925050613cdd565b9660009650945050505050565b6000806001600160ff1b03831660ff84901c601b01614b9187828885614a86565b935093505050935093915050565b828054614bab90615563565b90600052602060002090601f016020900481019282614bcd5760008555614c13565b82601f10614be65782800160ff19823516178555614c13565b82800160010185558215614c13579182015b82811115614c13578235825591602001919060010190614bf8565b50614c1f929150614c97565b5090565b828054614c2f90615563565b90600052602060002090601f016020900481019282614c515760008555614c13565b82601f10614c6a57805160ff1916838001178555614c13565b82800160010185558215614c13579182015b82811115614c13578251825591602001919060010190614c7c565b5b80821115614c1f5760008155600101614c98565b6001600160e01b03198116811461288557600080fd5b600060208284031215614cd457600080fd5b8135613f8181614cac565b600060208284031215614cf157600080fd5b5035919050565b60005b83811015614d13578181015183820152602001614cfb565b83811115610ffd5750506000910152565b60008151808452614d3c816020860160208601614cf8565b601f01601f19169290920160200192915050565b602081526000613f816020830184614d24565b80356001600160a01b0381168114614d7a57600080fd5b919050565b60008060408385031215614d9257600080fd5b614d9b83614d63565b946020939093013593505050565b60008083601f840112614dbb57600080fd5b50813567ffffffffffffffff811115614dd357600080fd5b6020830191508360208260051b850101111561442357600080fd5b803563ffffffff81168114614d7a57600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f830112614e2957600080fd5b813567ffffffffffffffff80821115614e4457614e44614e02565b604051601f8301601f19908116603f01168101908282118183101715614e6c57614e6c614e02565b81604052838152866020858801011115614e8557600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f840112614eb757600080fd5b50813567ffffffffffffffff811115614ecf57600080fd5b60208301915083602082850101111561442357600080fd5b60008060008060008060008060008060e08b8d031215614f0657600080fd5b8a3567ffffffffffffffff80821115614f1e57600080fd5b614f2a8e838f01614da9565b909c509a5060208d0135915080821115614f4357600080fd5b614f4f8e838f01614da9565b909a50985060408d01359750889150614f6a60608e01614dee565b965060808d0135915080821115614f8057600080fd5b614f8c8e838f01614e18565b955060a08d0135915080821115614fa257600080fd5b614fae8e838f01614e18565b945060c08d0135915080821115614fc457600080fd5b50614fd18d828e01614ea5565b915080935050809150509295989b9194979a5092959850565b600080600060608486031215614fff57600080fd5b61500884614d63565b925061501660208501614d63565b9150604084013590509250925092565b60006020828403121561503857600080fd5b613f8182614d63565b6020808252825182820181905260009190848201906040850190845b818110156150795783518352928401929184019160010161505d565b50909695505050505050565b6000806040838503121561509857600080fd5b823591506150a860208401614dee565b90509250929050565b600080604083850312156150c457600080fd5b6150cd83614d63565b91506150a860208401614dee565b801515811461288557600080fd5b600080604083850312156150fc57600080fd5b61510583614d63565b91506020830135615115816150db565b809150509250929050565b60008060008060008060008060a0898b03121561513c57600080fd5b88359750602089013567ffffffffffffffff8082111561515b57600080fd5b6151678c838d01614da9565b909950975060408b013591508082111561518057600080fd5b61518c8c838d01614da9565b909750955060608b01359150808211156151a557600080fd5b6151b18c838d01614e18565b945060808b01359150808211156151c757600080fd5b506151d48b828c01614ea5565b999c989b5096995094979396929594505050565b6000806000606084860312156151fd57600080fd5b61520684614d63565b95602085013595506040909401359392505050565b6000806000806080858703121561523157600080fd5b61523a85614d63565b935061524860208601614d63565b925060408501359150606085013567ffffffffffffffff81111561526b57600080fd5b61527787828801614e18565b91505092959194509250565b60008060006040848603121561529857600080fd5b83359250602084013567ffffffffffffffff8111156152b657600080fd5b6152c286828701614da9565b9497909650939450505050565b60008060008060008060008060a0898b0312156152eb57600080fd5b883567ffffffffffffffff8082111561530357600080fd5b61530f8c838d01614da9565b909a50985060208b013591508082111561532857600080fd5b6153348c838d01614da9565b909850965086915061534860408c01614dee565b955060608b01359150808211156151a557600080fd5b634e487b7160e01b600052602160045260246000fd5b6007811061539257634e487b7160e01b600052602160045260246000fd5b9052565b6020815281516020820152602082015160408201526040820151606082015260608201516080820152608082015160a0820152600060a08301516153e560c08401826001600160a01b03169052565b5060c08301516153f860e0840182615374565b5060e08301516101006154128185018363ffffffff169052565b840151905061012061542b8482018363ffffffff169052565b84015190506101406154448482018363ffffffff169052565b840151905061016061545d8482018363ffffffff169052565b84015190506101806154768482018363ffffffff169052565b8401516101a08481015290506133cc6101c0840182614d24565b600080604083850312156154a357600080fd5b6154ac83614d63565b91506150a860208401614d63565b600080600080608085870312156154d057600080fd5b5050823594602084013594506040840135936060013592509050565b60208082526005908201526404282aaa8960db1b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561555e5761555e615535565b500190565b600181811c9082168061557757607f821691505b6020821081141561559857634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526010908201526f21494e56414c4944287374617475732960801b604082015260600190565b602080825260099082015268214d494e5f5445524d60b81b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600063ffffffff8083168185168183048111821515161561569457615694615535565b02949350505050565b6000828210156156af576156af615535565b500390565b600063ffffffff8083168185168083038211156156d3576156d3615535565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561570657615706615535565b5060010190565b66697066733a2f2f60c81b81526000825161572f816007850160208701614cf8565b9190910160070192915050565b60208082526013908201527221494e56414c494428706c616e50726f6f662960681b604082015260600190565b60006020828403121561577b57600080fd5b815160038110613f8157600080fd5b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b600080858511156157ec57600080fd5b838611156157f957600080fd5b5050600583901b0193919092039150565b81835260006001600160fb1b0383111561582357600080fd5b8260051b8083602087013760009401602001938452509192915050565b60018060a01b038816815263ffffffff8716602082015285604082015284606082015283608082015260c060a0820152600061588060c08301848661580a565b9998505050505050505050565b60006020828403121561589f57600080fd5b8151613f81816150db565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b84815283602082015260606040820152600061591560608301848661580a565b9695505050505050565b60008261593c57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061591590830184614d24565b60006020828403121561598657600080fd5b8151613f8181614cac565b600063ffffffff838116908316818110156159ae576159ae615535565b039392505050565b60008160001904831182151516156159d0576159d0615535565b50029056fea2646970667358221220361f97b752c43221efd67e59d443dfb5a916e208b427fe0baec6850af128267664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "consumerSubscriptions": {
        "details": "Maps for consumer to list of subscriptions. "
      },
      "gasRefundLimitCreateSubscription": {
        "details": "max gas refund for transactions, in wei "
      },
      "providerSubscriptions": {
        "details": "Maps for provider to list of subscriptions and plans. "
      },
      "subscriptionManager": {
        "details": "contract to manage subscription plan definitions. "
      },
      "subscriptionPlans": {
        "details": "contract to manage subscription plan definitions. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 788,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 791,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2336,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2585,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1055,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 1057,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 1061,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1065,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1069,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1075,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1886,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 666,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 780,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 876,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "_paused",
        "offset": 0,
        "slot": "201",
        "type": "t_bool"
      },
      {
        "astId": 967,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11006,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "subscriptionManager",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(ICaskSubscriptionManager)7953"
      },
      {
        "astId": 11010,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "subscriptionPlans",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(ICaskSubscriptionPlans)8101"
      },
      {
        "astId": 11013,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "gasRefundLimitCreateSubscription",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 11015,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "gasRefundLimitChangeSubscription",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 11017,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "gasRefundLimitCancelSubscription",
        "offset": 0,
        "slot": "255",
        "type": "t_uint256"
      },
      {
        "astId": 11019,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "gasRefundLimitOther",
        "offset": 0,
        "slot": "256",
        "type": "t_uint256"
      },
      {
        "astId": 11022,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "allSubscriptions",
        "offset": 0,
        "slot": "257",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 11028,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "consumerSubscriptions",
        "offset": 0,
        "slot": "258",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 11033,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "subscriptions",
        "offset": 0,
        "slot": "259",
        "type": "t_mapping(t_uint256,t_struct(Subscription)8142_storage)"
      },
      {
        "astId": 11037,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "pendingPlanChanges",
        "offset": 0,
        "slot": "260",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 11043,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "providerSubscriptions",
        "offset": 0,
        "slot": "261",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 11047,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "providerActiveSubscriptionCount",
        "offset": 0,
        "slot": "262",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11053,
        "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
        "label": "planActiveSubscriptionCount",
        "offset": 0,
        "slot": "263",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICaskSubscriptionManager)7953": {
        "encoding": "inplace",
        "label": "contract ICaskSubscriptionManager",
        "numberOfBytes": "20"
      },
      "t_contract(ICaskSubscriptionPlans)8101": {
        "encoding": "inplace",
        "label": "contract ICaskSubscriptionPlans",
        "numberOfBytes": "20"
      },
      "t_enum(SubscriptionStatus)8114": {
        "encoding": "inplace",
        "label": "enum ICaskSubscriptions.SubscriptionStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(Subscription)8142_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ICaskSubscriptions.Subscription)",
        "numberOfBytes": "32",
        "value": "t_struct(Subscription)8142_storage"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Subscription)8142_storage": {
        "encoding": "inplace",
        "label": "struct ICaskSubscriptions.Subscription",
        "members": [
          {
            "astId": 8116,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "planData",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 8118,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "networkData",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 8120,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "discountId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 8122,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "discountData",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 8124,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "ref",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 8126,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "provider",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 8129,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "status",
            "offset": 20,
            "slot": "5",
            "type": "t_enum(SubscriptionStatus)8114"
          },
          {
            "astId": 8131,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "planId",
            "offset": 21,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 8133,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "createdAt",
            "offset": 25,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 8135,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "renewAt",
            "offset": 0,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 8137,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "minTermAt",
            "offset": 4,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 8139,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "cancelAt",
            "offset": 8,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 8141,
            "contract": "contracts/protocol/CaskSubscriptions.sol:CaskSubscriptions",
            "label": "cid",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}