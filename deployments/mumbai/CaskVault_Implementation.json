{
  "address": "0x719f8773B91613Ac742ef05635A9984a308814D1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        }
      ],
      "name": "AllocatedToStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AllowedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "AssetDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "participant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "AssetWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseAssetFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Payment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "addOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        }
      ],
      "name": "allocateToStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippageBps",
          "type": "uint256"
        }
      ],
      "name": "allowAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fromAmount",
          "type": "uint256"
        }
      ],
      "name": "convertPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "currentValueOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        }
      ],
      "name": "depositTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getAsset",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "priceFeed",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "slippageBps",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "depositLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "assetDecimals",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "priceFeedDecimals",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "allowed",
              "type": "bool"
            }
          ],
          "internalType": "struct ICaskVault.Asset",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vaultAdmin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_baseAsset",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operatorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "operators",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseAssetAmount",
          "type": "uint256"
        }
      ],
      "name": "payment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseAssetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseAssetFee",
          "type": "uint256"
        }
      ],
      "name": "protocolPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "removeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseAsset",
          "type": "address"
        }
      ],
      "name": "setBaseAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_transferFeeFixed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_transferFeeRate",
          "type": "uint256"
        }
      ],
      "name": "setParameters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "supportsAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "totalAssetBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFeeFixed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFeeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sharesAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd32f3154f3d512d4c0f62ea68857095c339a5ab0b58d5501ef373bf873749f19",
  "receipt": {
    "to": null,
    "from": "0x83e50cD4123bAA60f6d6c8A83ca85Ac72e826bD0",
    "contractAddress": "0x719f8773B91613Ac742ef05635A9984a308814D1",
    "transactionIndex": 0,
    "gasUsed": "2454584",
    "logsBloom": "0x
    "blockHash": "0xc10a072d94e2e2e6aa2dae64c276e076d69abf54a1d82c93621219ad46affdd5",
    "transactionHash": "0xd32f3154f3d512d4c0f62ea68857095c339a5ab0b58d5501ef373bf873749f19",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24497440,
        "transactionHash": "0xd32f3154f3d512d4c0f62ea68857095c339a5ab0b58d5501ef373bf873749f19",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000083e50cd4123baa60f6d6c8a83ca85ac72e826bd0",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000045c372f9f5de400000000000000000000000000000000000000000000000000a32446494e0f000000000000000000000000000000000000000000000000606cc7b3b06daf33b4100000000000000000000000000000000000000000000000009ec80f19aeb11c0000000000000000000000000000000000000000000000606ccc0fe79d4e91981",
        "logIndex": 0,
        "blockHash": "0xc10a072d94e2e2e6aa2dae64c276e076d69abf54a1d82c93621219ad46affdd5"
      }
    ],
    "blockNumber": 24497440,
    "cumulativeGasUsed": "2454584",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "872f962c3f8fbc5ed0805e7318b51c15",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"name\":\"AllocatedToStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AllowedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"AssetDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"AssetWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseAssetFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Payment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"}],\"name\":\"allocateToStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippageBps\",\"type\":\"uint256\"}],\"name\":\"allowAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fromAmount\",\"type\":\"uint256\"}],\"name\":\"convertPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"currentValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getAsset\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slippageBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"assetDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"priceFeedDecimals\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"internalType\":\"struct ICaskVault.Asset\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseAsset\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseAssetAmount\",\"type\":\"uint256\"}],\"name\":\"payment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseAssetFee\",\"type\":\"uint256\"}],\"name\":\"protocolPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseAsset\",\"type\":\"address\"}],\"name\":\"setBaseAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferFeeFixed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_transferFeeRate\",\"type\":\"uint256\"}],\"name\":\"setParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"supportsAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"totalAssetBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeFixed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allocateToStrategy(address,address,uint256)\":{\"details\":\"Send an amount of asset to a strategy\",\"params\":{\"_asset\":\"Address of asset\",\"_assetAmount\":\"Amount of asset to send\"}},\"allowAsset(address,address,uint256,uint256)\":{\"details\":\"Add an allowed asset to be deposited into the vault\",\"params\":{\"_asset\":\"Address of new ERC20 asset\",\"_priceFeed\":\"Address of a chainlink-compatible price oracle for the asset\",\"_slippageBps\":\"Slippage basis points to use when depositing/withdrawing this asset\"}},\"balanceOf(address)\":{\"details\":\"Get current balance of shares for an address\",\"params\":{\"_address\":\"Address to check\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"currentValueOf(address)\":{\"details\":\"Get current vault value of `_address` denominated in `baseAsset`\",\"params\":{\"_address\":\"Address to check\"}},\"deposit(address,uint256)\":{\"details\":\"Deposit an amount of `_asset` into the vault and credit the equal value of `baseAsset`\",\"params\":{\"_asset\":\"Address of incoming asset\",\"_assetAmount\":\"Amount of asset to deposit\"}},\"depositTo(address,address,uint256)\":{\"details\":\"Deposit an amount of `_asset` into the vault and credit the equal value of `baseAsset`\",\"params\":{\"_asset\":\"Address of incoming asset\",\"_assetAmount\":\"Amount of asset to deposit\",\"_to\":\"Recipient of funds\"}},\"getAllAssets()\":{\"details\":\"Get all the assets supported by the vault.\"},\"getAsset(address)\":{\"details\":\"Get asset details\",\"params\":{\"_asset\":\"Asset address\"},\"returns\":{\"_0\":\"Asset Asset details\"}},\"getBaseAsset()\":{\"details\":\"Get base asset of vault.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"payment(address,uint256)\":{\"details\":\"Pay `_baseAssetAmount` of `baseAsset` directly from a sender to `_to`\",\"params\":{\"_baseAssetAmount\":\"Amount of asset to transfer\",\"_to\":\"To address\"}},\"protocolPayment(address,address,uint256,uint256)\":{\"details\":\"Pay `_baseAssetAmount` of `baseAsset` from `_from` to `_to`\",\"params\":{\"_baseAssetAmount\":\"Amount of baseAsset to transfer\",\"_baseAssetFee\":\"Fee to deduct from `_baseAssetAmount`\",\"_from\":\"From address\",\"_to\":\"To address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsAsset(address)\":{\"details\":\"Check if the vault supports an asset\",\"params\":{\"_asset\":\"Asset address\"},\"returns\":{\"_0\":\"bool `true` if asset supported, `false` otherwise\"}},\"totalAssetBalance(address)\":{\"details\":\"Get total amount of an asset held in vault and managed by admin\",\"params\":{\"_asset\":\"Address of asset\"}},\"totalSupply()\":{\"details\":\"Get total shares of vault\"},\"totalValue()\":{\"details\":\"Get total value in vault and managed by admin - denominated in `baseAsset`\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,uint256)\":{\"details\":\"Withdraw an amount of shares from the vault in the form of `_asset`\",\"params\":{\"_asset\":\"Address of outgoing asset\",\"_shares\":\"Amount of shares to withdraw\"}},\"withdrawFees(address,uint256)\":{\"details\":\"Withdraw an amount of accumulated share fees in the form of `baseAsset`\",\"params\":{\"_recipient\":\"Recipient who will receive the withdrawn assets\",\"_sharesAmount\":\"Amount of shares to withdraw\"}},\"withdrawTo(address,address,uint256)\":{\"details\":\"Withdraw an amount of shares from the vault in the form of `_asset`\",\"params\":{\"_asset\":\"Address of outgoing asset\",\"_recipient\":\"Recipient who will receive the withdrawn assets\",\"_shares\":\"Amount of shares to withdraw\"}}},\"stateVariables\":{\"feeBalance\":{\"details\":\"total fees collected by vault - denominated in vault shares \"},\"transferFeeFixed\":{\"details\":\"fixed fee to charge recipient on direct transfer, in baseAsset decimal units. \"},\"transferFeeRate\":{\"details\":\"percentage to charge recipient on direct transfer, in bps. 50% = 5000. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"CaskVault is where: - the approved asset list lives - users deposit/withdraw approved assets which results in a mint/burn of the vault token - a minimum reserve rate is enforced - vault operators can tell the vault to send unallocated assets to strategies - protocols can process a payment between parties - one can query the value of all unallocated assets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/CaskVault.sol\":\"CaskVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf3a9b766b0d0456f79d9402db4b49bb16c414f3f9d65244475c0704b6c66dcf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n /**\\n  * @title  Interface for yield earning strategies.\\n  */\\n\\ninterface ICaskStrategy {\\n    /**\\n     * @dev Deposit an amount of asset into the strategy\\n     * @param _asset Asset address\\n     * @param _amount Amount of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Deposit all assets in the contract to the strategy\\n     */\\n    function depositAll() external;\\n\\n    /**\\n     * @dev Withdraw an amount of asset from the strategy\\n     * @param _recipient Recipient of asset being withdrawn\\n     * @param _asset Asset address\\n     * @param _amount Amount of asset to withdraw\\n     */\\n    function withdraw(address _recipient, address _asset, uint256 _amount) external;\\n\\n    /**\\n     * @dev Withdraw all assets from the strategy and send to the vault\\n     */\\n    function withdrawAll() external;\\n\\n    /**\\n     * @dev Get the current balance of an asset in the strategy\\n     * @param _asset Asset address\\n     * @return balance Total balance of asset currently in the strategy\\n     */\\n    function assetBalance(address _asset) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Check if the strategy supports an asset\\n     * @param _asset Asset address\\n     * @return bool `true` if asset supported, `false` otherwise\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n}\",\"keccak256\":\"0xad4a06b8a51199757b1028765ee6576c87e9eeddaa19dc6f30b73693bc3ad398\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title  Interface for vault\\n  */\\n\\ninterface ICaskVault {\\n\\n    // whitelisted stablecoin assets supported by the vault\\n    struct Asset {\\n        address priceFeed;\\n        uint256 slippageBps;\\n        uint256 depositLimit;\\n        uint8 assetDecimals;\\n        uint8 priceFeedDecimals;\\n        bool allowed;\\n    }\\n\\n\\n    /**\\n      * @dev Get base asset of vault.\\n     */\\n    function getBaseAsset() external view returns (address);\\n\\n    /**\\n      * @dev Get all the assets supported by the vault.\\n     */\\n    function getAllAssets() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Get asset details\\n     * @param _asset Asset address\\n     * @return Asset Asset details\\n     */\\n    function getAsset(address _asset) external view returns(Asset memory);\\n\\n    /**\\n     * @dev Check if the vault supports an asset\\n     * @param _asset Asset address\\n     * @return bool `true` if asset supported, `false` otherwise\\n     */\\n    function supportsAsset(address _asset) external view returns (bool);\\n\\n    /**\\n     * @dev Pay `_baseAssetAmount` of `baseAsset` from `_from` to `_to` initiated by an authorized protocol\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _baseAssetAmount Amount of asset to transfer\\n     * @param _baseAssetFee Fee to deduct from `_baseAssetAmount`\\n     */\\n    function protocolPayment(address _from, address _to, uint256 _baseAssetAmount, uint256 _baseAssetFee) external;\\n\\n    /**\\n     * @dev Pay `_baseAssetAmount` of `baseAsset` directly from a sender to `_to`\\n     * @param _to To address\\n     * @param _baseAssetAmount Amount of asset to transfer\\n     */\\n    function payment(address _to, uint256 _baseAssetAmount) external;\\n\\n    /**\\n     * @dev Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\\n     * @param _asset Address of incoming asset\\n     * @param _assetAmount Amount of asset to deposit\\n     */\\n    function deposit(address _asset, uint256 _assetAmount) external;\\n\\n    /**\\n     * @dev Deposit `_assetAmount` of `_asset` into the vault and credit the equivalent value of `baseAsset`\\n     * @param _to Recipient of funds\\n     * @param _asset Address of incoming asset\\n     * @param _assetAmount Amount of asset to deposit\\n     */\\n    function depositTo(address _to, address _asset, uint256 _assetAmount) external;\\n\\n    /**\\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\\n     * @param _asset Address of outgoing asset\\n     * @param _shares Amount of shares to withdraw\\n     */\\n    function withdraw(address _asset, uint256 _shares) external;\\n\\n    /**\\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\\n     * @param _recipient Recipient who will receive the withdrawn assets\\n     * @param _asset Address of outgoing asset\\n     * @param _shares Amount of shares to withdraw\\n     */\\n    function withdrawTo(address _recipient, address _asset, uint256 _shares) external;\\n\\n    /**\\n     * @dev Get total shares of vault\\n     */\\n    function totalSupply() external view returns(uint256);\\n\\n    /**\\n     * @dev Get current balance of shares for an address\\n     * @param _address Address to check\\n     */\\n    function balanceOf(address _address) external view returns(uint256);\\n\\n    /**\\n     * @dev Get current vault value of `_address` denominated in `baseAsset`\\n     * @param _address Address to check\\n     */\\n    function currentValueOf(address _address) external view returns(uint256);\\n\\n    /**\\n     * @dev Get total value in vault and managed by admin - denominated in `baseAsset`\\n     */\\n    function totalValue() external view returns(uint256);\\n\\n    /**\\n     * @dev Get total amount of an asset held in vault and managed by admin\\n     * @param _asset Address of asset\\n     */\\n    function totalAssetBalance(address _asset) external view returns(uint256);\\n\\n    /**\\n     * @dev Send an amount of asset to a strategy\\n     * @param _asset Address of strategy\\n     * @param _asset Address of asset\\n     * @param _assetAmount Amount of asset to send\\n     */\\n    function allocateToStrategy(address _strategy, address _asset, uint256 _assetAmount) external;\\n\\n\\n    /************************** EVENTS **************************/\\n\\n    /** @dev Emitted when an amount of `baseAsset` is paid from `from` to `to` within the vault */\\n    event Payment(address indexed from, address indexed to, uint256 baseAssetAmount, uint256 baseAssetFee,\\n        uint256 shares);\\n\\n    /** @dev Emitted when `asset` is added as a new supported asset */\\n    event AllowedAsset(address indexed asset);\\n\\n    /** @dev Emitted when `participant` deposits `asset` */\\n    event AssetDeposited(address indexed participant, address indexed asset, uint256 assetAmount,\\n        uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when `participant` withdraws `asset` */\\n    event AssetWithdrawn(address indexed participant, address indexed asset, uint256 assetAmount,\\n        uint256 baseAssetAmount, uint256 shares);\\n\\n    /** @dev Emitted when `asset` is allocated to strategy `strategy` */\\n    event AllocatedToStrategy(address indexed strategy, address indexed asset, uint256 assetAmount);\\n\\n}\",\"keccak256\":\"0x73af5ab15f669f7124f77448f04ef610407d6c82d728e7f6e3cd2652cb5b8125\",\"license\":\"MIT\"},\"contracts/interfaces/ICaskVaultAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title  Interface for vault admin\\n  */\\n\\ninterface ICaskVaultAdmin {\\n\\n    /**\\n      * @dev total value of `_asset` managed by admin - denominated in native asset\\n     */\\n    function assetBalanceManaged(address _asset) external view returns(uint256);\\n\\n}\\n\",\"keccak256\":\"0xb3cde56cf31fd00842264020cea87e964013235635111bff99cc1ba1bf67bea1\",\"license\":\"MIT\"},\"contracts/vault/CaskVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n\\nimport \\\"../interfaces/ICaskVault.sol\\\";\\nimport \\\"../interfaces/ICaskVaultAdmin.sol\\\";\\nimport \\\"../interfaces/ICaskStrategy.sol\\\";\\n\\n/**\\nCaskVault is where:\\n\\n- the approved asset list lives\\n- users deposit/withdraw approved assets which results in a mint/burn of the vault token\\n- a minimum reserve rate is enforced\\n- vault operators can tell the vault to send unallocated assets to strategies\\n- protocols can process a payment between parties\\n- one can query the value of all unallocated assets\\n\\n*/\\n\\ncontract CaskVault is\\nICaskVault,\\nOwnableUpgradeable,\\nPausableUpgradeable,\\nReentrancyGuardUpgradeable\\n{\\n    using SafeERC20 for IERC20;\\n\\n    modifier onlyOperator {\\n        bool isOperator = false;\\n        for (uint256 i = 0; i < operators.length; i++) {\\n            if (msg.sender == operators[i]) {\\n                isOperator = true;\\n                break;\\n            }\\n        }\\n        require(isOperator, \\\"!auth\\\");\\n        _;\\n    }\\n\\n    /************************** PARAMETERS **************************/\\n\\n    /** @dev fixed fee to charge recipient on direct transfer, in baseAsset decimal units. */\\n    uint256 public transferFeeFixed;\\n\\n    /** @dev percentage to charge recipient on direct transfer, in bps. 50% = 5000. */\\n    uint256 public transferFeeRate;\\n\\n\\n\\n    /************************** STATE **************************/\\n\\n    // address of ICaskVaultAdmin that administers the vault\\n    address public vaultAdmin;\\n\\n    // base asset for vault - much is denominated in this\\n    address public baseAsset;\\n\\n    // share balance handling\\n    mapping(address => uint256) internal balances;\\n    uint256 internal supply;\\n\\n    // assets supported by vault\\n    mapping(address => Asset) internal assets;\\n    address[] internal allAssets;\\n\\n    /** @dev total fees collected by vault - denominated in vault shares */\\n    uint256 public feeBalance;\\n\\n\\n    address[] public operators;\\n\\n    function initialize(\\n        address _vaultAdmin,\\n        address _baseAsset\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        vaultAdmin = _vaultAdmin;\\n        baseAsset = _baseAsset; // TODO: require price feed address in ctor? fix issues with allAssets and baseAsset\\n\\n        // parameter defaults\\n        transferFeeFixed = 0;\\n        transferFeeRate = 0;\\n\\n        feeBalance = 0;\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n\\n    /**\\n     * @dev Pay `_baseAssetAmount` of `baseAsset` from `_from` to `_to`\\n     * @param _from From address\\n     * @param _to To address\\n     * @param _baseAssetAmount Amount of baseAsset to transfer\\n     * @param _baseAssetFee Fee to deduct from `_baseAssetAmount`\\n     */\\n    function protocolPayment(\\n        address _from,\\n        address _to,\\n        uint256 _baseAssetAmount,\\n        uint256 _baseAssetFee\\n    ) external override nonReentrant onlyOperator {\\n        uint256 shares = _sharesForAmount(_baseAssetAmount);\\n        require(balances[_from] >= shares, \\\"!balance\\\");\\n\\n        uint256 feeShares = _sharesForAmount(_baseAssetFee);\\n\\n        balances[_from] = balances[_from] - shares;\\n        balances[_to] = balances[_to] + shares - feeShares;\\n\\n        feeBalance = feeBalance + feeShares; // add fee to total fees owed to protocol\\n\\n        emit Payment(_from, _to, _baseAssetAmount, _baseAssetFee, shares);\\n    }\\n\\n    function payment(\\n        address _to,\\n        uint256 _baseAssetAmount\\n    ) external override nonReentrant {\\n        uint256 shares = _sharesForAmount(_baseAssetAmount);\\n        require(balances[msg.sender] >= shares, \\\"!balance\\\");\\n\\n        uint256 baseAssetFee = transferFeeFixed + (_baseAssetAmount * transferFeeRate / 10000);\\n        uint256 feeShares = _sharesForAmount(baseAssetFee);\\n\\n        balances[msg.sender] = balances[msg.sender] - shares;\\n        balances[_to] = balances[_to] + shares - feeShares;\\n\\n        feeBalance = feeBalance + feeShares; // add fee to total fees owed to protocol\\n\\n        emit Payment(msg.sender, _to, _baseAssetAmount, baseAssetFee, shares);\\n    }\\n\\n    /**\\n     * @dev Deposit an amount of `_asset` into the vault and credit the equal value of `baseAsset`\\n     * @param _asset Address of incoming asset\\n     * @param _assetAmount Amount of asset to deposit\\n     */\\n    function deposit(\\n        address _asset,\\n        uint256 _assetAmount\\n    ) external override nonReentrant {\\n        _depositTo(msg.sender, _asset, _assetAmount);\\n    }\\n\\n    /**\\n     * @dev Deposit an amount of `_asset` into the vault and credit the equal value of `baseAsset`\\n     * @param _to Recipient of funds\\n     * @param _asset Address of incoming asset\\n     * @param _assetAmount Amount of asset to deposit\\n     */\\n    function depositTo(\\n        address _to,\\n        address _asset,\\n        uint256 _assetAmount\\n    ) external override nonReentrant {\\n        _depositTo(_to, _asset, _assetAmount);\\n    }\\n\\n    function _depositTo(\\n        address _to,\\n        address _asset,\\n        uint256 _assetAmount\\n    ) internal {\\n        require(_asset == baseAsset || assets[_asset].allowed, \\\"!invalid(_asset)\\\");\\n        require(_assetAmount > 0, \\\"!invalid(_assetAmount)\\\");\\n\\n        // calculate shares before transferring new asset into vault\\n        uint256 shares = _sharesForAmount(_assetAmount);\\n\\n        IERC20(_asset).safeTransferFrom(msg.sender, address(this), _assetAmount);\\n\\n        uint256 baseAssetAmount;\\n        if (_asset != baseAsset) {\\n            Asset storage asset = assets[_asset];\\n\\n            // subtract slippage bps from deposited amount\\n            uint256 slippage = _assetAmount * asset.slippageBps / 10000;\\n\\n            baseAssetAmount = _convertPrice(_asset, baseAsset, _assetAmount - slippage);\\n        } else {\\n            baseAssetAmount = _assetAmount;\\n        }\\n\\n        supply = supply + shares;\\n        balances[_to] = balances[_to] + shares;\\n\\n        emit AssetDeposited(_to, _asset, _assetAmount, baseAssetAmount, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\\n     * @param _asset Address of outgoing asset\\n     * @param _shares Amount of shares to withdraw\\n     */\\n    function withdraw(\\n        address _asset,\\n        uint256 _shares\\n    ) external override nonReentrant {\\n        _withdrawTo(msg.sender, _asset, _shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw an amount of shares from the vault in the form of `_asset`\\n     * @param _recipient Recipient who will receive the withdrawn assets\\n     * @param _asset Address of outgoing asset\\n     * @param _shares Amount of shares to withdraw\\n     */\\n    function withdrawTo(\\n        address _recipient,\\n        address _asset,\\n        uint256 _shares\\n    ) external override nonReentrant {\\n        _withdrawTo(_recipient, _asset, _shares);\\n    }\\n\\n    function _withdrawTo(\\n        address _recipient,\\n        address _asset,\\n        uint256 _shares\\n    ) internal {\\n        require(assets[_asset].allowed, \\\"!invalid(_asset)\\\");\\n        require(_shares > 0, \\\"!invalid(_sharesAmount)\\\");\\n\\n        require(balances[msg.sender] >= _shares, \\\"!balance\\\");\\n\\n        // calculate amount before supply adjustment\\n        uint256 baseAmount = _shareValue(_shares);\\n\\n        supply = supply - _shares;\\n        balances[msg.sender] = balances[msg.sender] - _shares;\\n\\n        uint256 assetAmount;\\n        if (_asset != baseAsset) {\\n            Asset storage asset = assets[_asset];\\n\\n            assetAmount = _convertPrice(baseAsset, _asset, baseAmount);\\n\\n            // subtract slippage bps from withdrawing amount\\n            uint256 slippage = assetAmount * asset.slippageBps / 10000;\\n            assetAmount = assetAmount - slippage;\\n        } else {\\n            assetAmount = baseAmount;\\n        }\\n\\n        // transfer requested stablecoin to _recipient\\n        IERC20(_asset).safeTransfer(_recipient, assetAmount);\\n\\n        emit AssetWithdrawn(_recipient, _asset, assetAmount, baseAmount, _shares);\\n    }\\n\\n    function totalSupply() external override view returns(uint256) {\\n        return supply;\\n    }\\n\\n    function balanceOf(\\n        address _address\\n    ) external override view returns(uint256) {\\n        return balances[_address];\\n    }\\n\\n    function currentValueOf(\\n        address _address\\n    ) external override view returns(uint256) {\\n        return _shareValue(balances[_address]);\\n    }\\n\\n    /************************** SHARES FUNCTIONS **************************/\\n\\n    function _sharesForAmount(\\n        uint256 _amount\\n    ) internal view returns(uint256) {\\n        if (_totalValue() > 0) {\\n            return _amount * supply / _totalValue();\\n        } else {\\n            return _amount;\\n        }\\n    }\\n\\n    function _shareValue(\\n        uint256 _shares\\n    ) internal view returns(uint256) {\\n        if (supply == 0) {\\n            return _shares;\\n        }\\n        return _shares * _totalValue() / supply;\\n    }\\n\\n\\n    function totalValue() external override view returns(uint256) {\\n        return _totalValue();\\n    }\\n    function _totalValue() internal view returns(uint256) {\\n        uint256 total = 0;\\n\\n        for (uint256 i = 0; i < allAssets.length; i++) {\\n            if (allAssets[i] == baseAsset) {\\n                total = total + _totalAssetBalance(baseAsset);\\n            } else {\\n                total = total + _convertPrice(allAssets[i], baseAsset, _totalAssetBalance(allAssets[i]));\\n            }\\n        }\\n\\n        return total;\\n    }\\n    function totalAssetBalance(\\n        address _asset\\n    ) external override view returns(uint256) {\\n        return _totalAssetBalance(_asset);\\n    }\\n    function _totalAssetBalance(\\n        address _asset\\n    ) internal view returns(uint256) {\\n        return IERC20(_asset).balanceOf(address(this)) + ICaskVaultAdmin(vaultAdmin).assetBalanceManaged(_asset);\\n    }\\n\\n    function allocateToStrategy(\\n        address _strategy,\\n        address _asset,\\n        uint256 _assetAmount\\n    ) external override onlyOperator {\\n        require(assets[_asset].allowed, \\\"!allowed\\\");\\n        IERC20(_asset).safeTransfer(_strategy, _assetAmount);\\n        emit AllocatedToStrategy(_strategy, _asset, _assetAmount);\\n    }\\n\\n\\n    /************************** ADMIN FUNCTIONS **************************/\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function addOperator(\\n        address _operator\\n    ) external onlyOwner {\\n        operators.push(_operator);\\n    }\\n\\n    function removeOperator(\\n        address _operator\\n    ) external onlyOwner {\\n        uint256 idx = operators.length;\\n        for (uint256 i = 0; i < operators.length; i++) {\\n            if (operators[i] == _operator) {\\n                idx = i;\\n                break;\\n            }\\n        }\\n        if (idx < operators.length) {\\n            operators[idx] = operators[operators.length - 1];\\n            operators.pop();\\n        }\\n    }\\n\\n    function operatorCount() external view returns(uint256) {\\n        return operators.length;\\n    }\\n\\n    /**\\n    * @dev Withdraw an amount of accumulated share fees in the form of `baseAsset`\\n     * @param _recipient Recipient who will receive the withdrawn assets\\n     * @param _sharesAmount Amount of shares to withdraw\\n     */\\n    function withdrawFees(\\n        address _recipient,\\n        uint256 _sharesAmount\\n    ) external onlyOwner {\\n        require(_sharesAmount <= feeBalance, \\\"!balance\\\");\\n\\n        // calculate amount before supply adjustment\\n        uint256 baseAmount = _shareValue(_sharesAmount);\\n\\n        supply = supply - _sharesAmount; // reduce supply\\n        feeBalance = feeBalance - _sharesAmount; // reduce owed fees\\n\\n        // transfer fees in the form of baseAsset to _recipient\\n        IERC20(baseAsset).safeTransfer(_recipient, baseAmount);\\n\\n        emit AssetWithdrawn(_recipient, baseAsset, baseAmount, baseAmount, _sharesAmount);\\n    }\\n\\n    function setParameters(\\n        uint256 _transferFeeFixed,\\n        uint256 _transferFeeRate\\n    ) external onlyOwner {\\n        transferFeeFixed = _transferFeeFixed;\\n        transferFeeRate = _transferFeeRate;\\n    }\\n\\n\\n    /************************** ASSET FUNCTIONS **************************/\\n\\n    function setBaseAsset(\\n        address _baseAsset\\n    ) external onlyOwner {\\n        baseAsset = _baseAsset;\\n    }\\n\\n    function getBaseAsset() external view override returns(address) {\\n        return baseAsset;\\n    }\\n\\n    function getAllAssets() external view override returns(address[] memory) {\\n        return allAssets;\\n    }\\n\\n    function getAsset(\\n        address _asset\\n    ) external view override returns(Asset memory) {\\n        return assets[_asset];\\n    }\\n\\n    /**\\n     * @dev Check if the vault supports an asset\\n     * @param _asset Asset address\\n     * @return bool `true` if asset supported, `false` otherwise\\n     */\\n    function supportsAsset(\\n        address _asset\\n    ) external view override returns (bool) {\\n        return assets[_asset].allowed;\\n    }\\n\\n    /**\\n     * @dev Add an allowed asset to be deposited into the vault\\n     * @param _asset Address of new ERC20 asset\\n     * @param _priceFeed Address of a chainlink-compatible price oracle for the asset\\n     * @param _slippageBps Slippage basis points to use when depositing/withdrawing this asset\\n     */\\n    function allowAsset(\\n        address _asset,\\n        address _priceFeed,\\n        uint256 _depositLimit,\\n        uint256 _slippageBps\\n    ) external onlyOwner {\\n        require(IERC20Metadata(_asset).decimals() > 0, \\\"!invalid(_asset)\\\");\\n        require(AggregatorV3Interface(_priceFeed).decimals() > 0, \\\"!invalid(_priceFeed)\\\");\\n\\n        Asset storage asset = assets[_asset];\\n        asset.priceFeed = _priceFeed;\\n        asset.depositLimit = _depositLimit;\\n        asset.slippageBps = _slippageBps;\\n\\n        asset.assetDecimals = IERC20Metadata(_asset).decimals();\\n        asset.priceFeedDecimals = AggregatorV3Interface(_priceFeed).decimals();\\n\\n        if (!asset.allowed) {\\n            asset.allowed = true;\\n            allAssets.push(_asset); // just once\\n        }\\n\\n        emit AllowedAsset(_asset);\\n    }\\n\\n    function convertPrice(\\n        address _fromAsset,\\n        address _toAsset,\\n        uint256 _fromAmount\\n    ) external view returns(uint256) {\\n        return _convertPrice(_fromAsset, _toAsset, _fromAmount);\\n    }\\n\\n    /**\\n     * @dev Convert _amount from one asset price to another\\n     */\\n    function _convertPrice(\\n        address _fromAsset,\\n        address _toAsset,\\n        uint256 _fromAmount\\n    ) internal view returns(uint256) {\\n        require(_fromAsset != _toAsset, \\\"!invalid\\\");\\n        require(assets[_fromAsset].allowed, \\\"!invalid(_fromAsset)\\\");\\n        require(assets[_toAsset].allowed, \\\"!invalid(_toAsset)\\\");\\n\\n        if (_fromAmount == 0) {\\n            return 0;\\n        }\\n\\n        int256 oraclePrice;\\n\\n        ( , oraclePrice, , , ) = AggregatorV3Interface(assets[_fromAsset].priceFeed).latestRoundData();\\n        uint256 fromOraclePrice = uint256(oraclePrice);\\n        ( , oraclePrice, , , ) = AggregatorV3Interface(assets[_toAsset].priceFeed).latestRoundData();\\n        uint256 toOraclePrice = uint256(oraclePrice);\\n\\n        if (assets[_fromAsset].priceFeedDecimals != assets[_toAsset].priceFeedDecimals) {\\n            // since oracle precision is different, scale everything\\n            // to _toAsset precision and do conversion\\n            return _scalePrice(_fromAmount, assets[_fromAsset].assetDecimals, assets[_toAsset].assetDecimals) *\\n                    _scalePrice(fromOraclePrice, assets[_fromAsset].priceFeedDecimals, assets[_toAsset].assetDecimals) /\\n                    _scalePrice(toOraclePrice, assets[_toAsset].priceFeedDecimals, assets[_toAsset].assetDecimals);\\n        } else {\\n            // oracles are already in same precision, so just scale _amount to oracle precision,\\n            // do the price conversion and convert back to _toAsset precision\\n            return _scalePrice(\\n                    _scalePrice(_fromAmount, assets[_fromAsset].assetDecimals, assets[_toAsset].priceFeedDecimals) *\\n                            fromOraclePrice / toOraclePrice,\\n                        assets[_toAsset].priceFeedDecimals,\\n                        assets[_toAsset].assetDecimals\\n            );\\n        }\\n    }\\n\\n    function _scalePrice(\\n        uint256 _price,\\n        uint8 _priceDecimals,\\n        uint8 _decimals\\n    ) internal pure returns (uint256){\\n        if (_priceDecimals < _decimals) {\\n            return _price * uint256(10 ** uint256(_decimals - _priceDecimals));\\n        } else if (_priceDecimals > _decimals) {\\n            return _price / uint256(10 ** uint256(_priceDecimals - _decimals));\\n        }\\n        return _price;\\n    }\\n\\n}\",\"keccak256\":\"0x19b6647aec4fe8801cb7472397d6cf6f283146ebcb32e15fde50835d069afb90\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b6200154f1760201c565b15905090565b3b151590565b612af680620001126000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80637c6f315811610130578063c3b35a7e116100b8578063e7f6f2251161007c578063e7f6f22514610585578063f213159c14610598578063f2fde38b146105ab578063f3fef3a3146105be578063fcd6a25b146105d157600080fd5b8063c3b35a7e14610531578063cdf456e114610544578063d4c3eea014610557578063e28d49061461055f578063e51303221461057257600080fd5b80638da5cb5b116100ff5780638da5cb5b146104b25780639870d7fe146104c3578063aa388af6146104d6578063ac8a584a1461050b578063ad3b1b471461051e57600080fd5b80637c6f31581461046a5780638456cb5914610472578063884870c71461047a5780638d3a4af61461048d57600080fd5b80634bb846e1116101b357806360b71d4e1161018257806360b71d4e1461041457806367a09c231461041d57806368c6541f1461043057806370a0823114610439578063715018a61461046257600080fd5b80634bb846e1146103c45780635517575d146103d7578063597435cb146103ea5780635c975abb146103fd57600080fd5b8063351bf518116101fa578063351bf5181461037a5780633606b26c146103835780633f4ba83a1461039657806347e7ef241461039e578063485cc955146103b157600080fd5b806318160ddd1461022c5780631e377d39146102435780632acada4d1461025857806330b8b2c61461026d575b600080fd5b60ce545b6040519081526020015b60405180910390f35b61025661025136600461251c565b6105e4565b005b610260610959565b60405161023a919061255e565b61031e61027b3660046125ab565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506001600160a01b03908116600090815260cf6020908152604091829020825160c081018452815490941684526001810154918401919091526002810154918301919091526003015460ff80821660608401526101008204811660808401526201000090910416151560a082015290565b60405161023a9190600060c08201905060018060a01b038351168252602083015160208301526040830151604083015260ff606084015116606083015260ff608084015116608083015260a0830151151560a083015292915050565b61023060ca5481565b6102566103913660046125ab565b6109bb565b610256610a07565b6102566103ac3660046125c6565b610a3b565b6102566103bf3660046125f0565b610a77565b6102306103d2366004612623565b610b89565b6102306103e53660046125ab565b610ba0565b6102306103f83660046125ab565b610bb1565b60655460ff165b604051901515815260200161023a565b61023060d15481565b61025661042b3660046125c6565b610bd3565b61023060c95481565b6102306104473660046125ab565b6001600160a01b0316600090815260cd602052604090205490565b610256610d4a565b60d254610230565b610256610d7e565b61025661048836600461265f565b610db0565b60cc546001600160a01b03165b6040516001600160a01b03909116815260200161023a565b6033546001600160a01b031661049a565b6102566104d13660046125ab565b610de5565b6104046104e43660046125ab565b6001600160a01b0316600090815260cf602052604090206003015462010000900460ff1690565b6102566105193660046125ab565b610e61565b61025661052c3660046125c6565b610faa565b61025661053f366004612623565b611094565b60cc5461049a906001600160a01b031681565b6102306110d1565b61049a61056d366004612681565b6110e0565b610256610580366004612623565b61110a565b60cb5461049a906001600160a01b031681565b6102566105a6366004612623565b61125b565b6102566105b93660046125ab565b61128e565b6102566105cc3660046125c6565b611329565b6102566105df36600461251c565b61135c565b6033546001600160a01b031633146106175760405162461bcd60e51b815260040161060e9061269a565b60405180910390fd5b6000846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561065257600080fd5b505afa158015610666573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068a91906126cf565b60ff16116106aa5760405162461bcd60e51b815260040161060e906126f2565b6000836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106e557600080fd5b505afa1580156106f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071d91906126cf565b60ff16116107645760405162461bcd60e51b815260206004820152601460248201527321696e76616c6964285f7072696365466565642960601b604482015260640161060e565b6001600160a01b03848116600081815260cf602090815260409182902080546001600160a01b0319169488169490941784556002840186905560018401859055815163313ce56760e01b8152915163313ce567926004808201939291829003018186803b1580156107d457600080fd5b505afa1580156107e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080c91906126cf565b8160030160006101000a81548160ff021916908360ff160217905550836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089991906126cf565b60038201805461ff00191661010060ff9384160217908190556201000090041661091e5760038101805462ff000019166201000017905560d080546001810182556000919091527fe89d44c8fd6a9bac8af33ce47f56337617d449bf7ff3956b618c646de829cbcb0180546001600160a01b0387166001600160a01b03199091161790555b6040516001600160a01b038616907f06a94869c30cb7089f57f8d4a5ff251ac74a8c2bc361e7f91bda209898de8ead90600090a25050505050565b606060d08054806020026020016040519081016040528092919081815260200182805480156109b157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610993575b5050505050905090565b6033546001600160a01b031633146109e55760405162461bcd60e51b815260040161060e9061269a565b60cc80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610a315760405162461bcd60e51b815260040161060e9061269a565b610a39611555565b565b60026097541415610a5e5760405162461bcd60e51b815260040161060e9061271c565b6002609755610a6e3383836115e8565b50506001609755565b600054610100900460ff16610a925760005460ff1615610a96565b303b155b610af95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161060e565b600054610100900460ff16158015610b1b576000805461ffff19166101011790555b610b236117cb565b610b2b611802565b610b33611839565b60cb80546001600160a01b038086166001600160a01b03199283161790925560cc805492851692909116919091179055600060c981905560ca81905560d1558015610b84576000805461ff00191690555b505050565b6000610b96848484611868565b90505b9392505050565b6000610bab82611c4d565b92915050565b6001600160a01b038116600090815260cd6020526040812054610bab90611d4c565b60026097541415610bf65760405162461bcd60e51b815260040161060e9061271c565b60026097556000610c0682611d7c565b33600090815260cd6020526040902054909150811115610c385760405162461bcd60e51b815260040161060e90612753565b600061271060ca5484610c4b919061278b565b610c5591906127aa565b60c954610c6291906127cc565b90506000610c6f82611d7c565b33600090815260cd6020526040902054909150610c8d9084906127e4565b33600090815260cd6020526040808220929092556001600160a01b038716815220548190610cbc9085906127cc565b610cc691906127e4565b6001600160a01b038616600090815260cd602052604090205560d154610ced9082906127cc565b60d15560408051858152602081018490529081018490526001600160a01b0386169033907ffc8dd32b1cfbf2c565436049e9e556251a12304b0c3e624bc5e3b205692cf2dc9060600160405180910390a350506001609755505050565b6033546001600160a01b03163314610d745760405162461bcd60e51b815260040161060e9061269a565b610a396000611dab565b6033546001600160a01b03163314610da85760405162461bcd60e51b815260040161060e9061269a565b610a39611dfd565b6033546001600160a01b03163314610dda5760405162461bcd60e51b815260040161060e9061269a565b60c99190915560ca55565b6033546001600160a01b03163314610e0f5760405162461bcd60e51b815260040161060e9061269a565b60d280546001810182556000919091527ff2192e1030363415d7b4fb0406540a0060e8e2fc8982f3f32289379e11fa65460180546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610e8b5760405162461bcd60e51b815260040161060e9061269a565b60d25460005b60d254811015610eed57826001600160a01b031660d28281548110610eb857610eb86127fb565b6000918252602090912001546001600160a01b03161415610edb57809150610eed565b80610ee581612811565b915050610e91565b5060d254811015610fa65760d28054610f08906001906127e4565b81548110610f1857610f186127fb565b60009182526020909120015460d280546001600160a01b039092169183908110610f4457610f446127fb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060d2805480610f8357610f8361282c565b600082815260209020810160001990810180546001600160a01b03191690550190555b5050565b6033546001600160a01b03163314610fd45760405162461bcd60e51b815260040161060e9061269a565b60d154811115610ff65760405162461bcd60e51b815260040161060e90612753565b600061100182611d4c565b90508160ce5461101191906127e4565b60ce5560d1546110229083906127e4565b60d15560cc5461103c906001600160a01b03168483611e78565b60cc5460408051838152602081018490529081018490526001600160a01b03918216918516907fc90b5405a6805d53680586ef15168b1d791e67ceebe68fa62eefdb81478763cc9060600160405180910390a3505050565b600260975414156110b75760405162461bcd60e51b815260040161060e9061271c565b60026097556110c7838383611edb565b5050600160975550565b60006110db6120c1565b905090565b60d281815481106110f057600080fd5b6000918252602090912001546001600160a01b0316905081565b6000805b60d2548110156111625760d2818154811061112b5761112b6127fb565b6000918252602090912001546001600160a01b03163314156111505760019150611162565b8061115a81612811565b91505061110e565b50806111985760405162461bcd60e51b8152602060048201526005602482015264042c2eae8d60db1b604482015260640161060e565b6001600160a01b038316600090815260cf602052604090206003015462010000900460ff166111f45760405162461bcd60e51b815260206004820152600860248201526708585b1b1bddd95960c21b604482015260640161060e565b6112086001600160a01b0384168584611e78565b826001600160a01b0316846001600160a01b03167f4d0df46bea966973af88bd9f2ec263268a205e0a196a519fca0aded1b05256488460405161124d91815260200190565b60405180910390a350505050565b6002609754141561127e5760405162461bcd60e51b815260040161060e9061271c565b60026097556110c78383836115e8565b6033546001600160a01b031633146112b85760405162461bcd60e51b815260040161060e9061269a565b6001600160a01b03811661131d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161060e565b61132681611dab565b50565b6002609754141561134c5760405162461bcd60e51b815260040161060e9061271c565b6002609755610a6e338383611edb565b6002609754141561137f5760405162461bcd60e51b815260040161060e9061271c565b60026097556000805b60d2548110156113dc5760d281815481106113a5576113a56127fb565b6000918252602090912001546001600160a01b03163314156113ca57600191506113dc565b806113d481612811565b915050611388565b50806114125760405162461bcd60e51b8152602060048201526005602482015264042c2eae8d60db1b604482015260640161060e565b600061141d84611d7c565b6001600160a01b038716600090815260cd60205260409020549091508111156114585760405162461bcd60e51b815260040161060e90612753565b600061146384611d7c565b6001600160a01b038816600090815260cd602052604090205490915061148a9083906127e4565b6001600160a01b03808916600090815260cd6020526040808220939093559088168152205481906114bc9084906127cc565b6114c691906127e4565b6001600160a01b038716600090815260cd602052604090205560d1546114ed9082906127cc565b60d15560408051868152602081018690529081018390526001600160a01b0380881691908916907ffc8dd32b1cfbf2c565436049e9e556251a12304b0c3e624bc5e3b205692cf2dc9060600160405180910390a3505060016097555050505050565b3b151590565b60655460ff1661159e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161060e565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60cc546001600160a01b038381169116148061162557506001600160a01b038216600090815260cf602052604090206003015462010000900460ff165b6116415760405162461bcd60e51b815260040161060e906126f2565b6000811161168a5760405162461bcd60e51b815260206004820152601660248201527521696e76616c6964285f6173736574416d6f756e742960501b604482015260640161060e565b600061169582611d7c565b90506116ac6001600160a01b0384163330856121c1565b60cc546000906001600160a01b03858116911614611729576001600160a01b038416600090815260cf602052604081206001810154909190612710906116f2908761278b565b6116fc91906127aa565b60cc549091506117209087906001600160a01b031661171b84896127e4565b611868565b9250505061172c565b50815b8160ce5461173a91906127cc565b60ce556001600160a01b038516600090815260cd60205260409020546117619083906127cc565b6001600160a01b03868116600081815260cd60209081526040918290209490945580518781529384018590528301859052908616917fbef68d45f01f5e2c114616dc4840e7a543da6ec57afc5700e4be96056a899b4e906060015b60405180910390a35050505050565b600054610100900460ff166117f25760405162461bcd60e51b815260040161060e90612842565b6117fa6121ff565b610a39612226565b600054610100900460ff166118295760405162461bcd60e51b815260040161060e90612842565b6118316121ff565b610a39612256565b600054610100900460ff166118605760405162461bcd60e51b815260040161060e90612842565b610a39612289565b6000826001600160a01b0316846001600160a01b031614156118b75760405162461bcd60e51b8152602060048201526008602482015267085a5b9d985b1a5960c21b604482015260640161060e565b6001600160a01b038416600090815260cf602052604090206003015462010000900460ff1661191f5760405162461bcd60e51b815260206004820152601460248201527321696e76616c6964285f66726f6d41737365742960601b604482015260640161060e565b6001600160a01b038316600090815260cf602052604090206003015462010000900460ff166119855760405162461bcd60e51b815260206004820152601260248201527121696e76616c6964285f746f41737365742960701b604482015260640161060e565b8161199257506000610b99565b6001600160a01b03808516600090815260cf6020526040808220548151633fabe5a360e21b815291519293169163feaf968c9160048082019260a092909190829003018186803b1580156119e557600080fd5b505afa1580156119f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1d91906128a7565b5050506001600160a01b03808716600090815260cf602052604090819020548151633fabe5a360e21b815291519395508594509091169163feaf968c9160048082019260a092909190829003018186803b158015611a7a57600080fd5b505afa158015611a8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab291906128a7565b5050506001600160a01b03808816600090815260cf6020526040808220600390810154938c168352912001549194508492506101009182900460ff908116929091041614611bc5576001600160a01b038616600090815260cf6020526040902060030154611b2c90829060ff6101008204811691166122b7565b6001600160a01b03808916600090815260cf6020526040808220600390810154938b16835291200154611b6c91859160ff610100909204821691166122b7565b6001600160a01b03808a16600090815260cf6020526040808220600390810154938c16835291200154611ba791899160ff91821691166122b7565b611bb1919061278b565b611bbb91906127aa565b9350505050610b99565b6001600160a01b03808816600090815260cf6020526040808220600390810154938a16835291200154611bbb9183918591611c0d918a9160ff908116916101009004166122b7565b611c17919061278b565b611c2191906127aa565b6001600160a01b038816600090815260cf602052604090206003015460ff6101008204811691166122b7565b60cb5460405163368317c160e21b81526001600160a01b038381166004830152600092169063da0c5f049060240160206040518083038186803b158015611c9357600080fd5b505afa158015611ca7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ccb91906128f7565b6040516370a0823160e01b81523060048201526001600160a01b038416906370a082319060240160206040518083038186803b158015611d0a57600080fd5b505afa158015611d1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4291906128f7565b610bab91906127cc565b600060ce5460001415611d5d575090565b60ce54611d686120c1565b611d72908461278b565b610bab91906127aa565b600080611d876120c1565b1115611da257611d956120c1565b60ce54611d72908461278b565b5090565b919050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff1615611e435760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161060e565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586115cb3390565b6040516001600160a01b038316602482015260448101829052610b8490849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612328565b6001600160a01b038216600090815260cf602052604090206003015462010000900460ff16611f1c5760405162461bcd60e51b815260040161060e906126f2565b60008111611f6c5760405162461bcd60e51b815260206004820152601760248201527f21696e76616c6964285f736861726573416d6f756e7429000000000000000000604482015260640161060e565b33600090815260cd6020526040902054811115611f9b5760405162461bcd60e51b815260040161060e90612753565b6000611fa682611d4c565b90508160ce54611fb691906127e4565b60ce5533600090815260cd6020526040902054611fd49083906127e4565b33600090815260cd602052604081209190915560cc546001600160a01b0385811691161461205c576001600160a01b03808516600090815260cf6020526040902060cc54909161202691168685611868565b9150600061271082600101548461203d919061278b565b61204791906127aa565b905061205381846127e4565b9250505061205f565b50805b6120736001600160a01b0385168683611e78565b60408051828152602081018490529081018490526001600160a01b0380861691908716907fc90b5405a6805d53680586ef15168b1d791e67ceebe68fa62eefdb81478763cc906060016117bc565b600080805b60d0548110156121bb5760cc5460d080546001600160a01b0390921691839081106120f3576120f36127fb565b6000918252602090912001546001600160a01b031614156121345760cc54612123906001600160a01b0316611c4d565b61212d90836127cc565b91506121a9565b61219c60d0828154811061214a5761214a6127fb565b60009182526020909120015460cc5460d080546001600160a01b03938416939092169161171b919086908110612182576121826127fb565b6000918252602090912001546001600160a01b0316611c4d565b6121a690836127cc565b91505b806121b381612811565b9150506120c6565b50919050565b6040516001600160a01b03808516602483015283166044820152606481018290526121f99085906323b872dd60e01b90608401611ea4565b50505050565b600054610100900460ff16610a395760405162461bcd60e51b815260040161060e90612842565b600054610100900460ff1661224d5760405162461bcd60e51b815260040161060e90612842565b610a3933611dab565b600054610100900460ff1661227d5760405162461bcd60e51b815260040161060e90612842565b6065805460ff19169055565b600054610100900460ff166122b05760405162461bcd60e51b815260040161060e90612842565b6001609755565b60008160ff168360ff1610156122f0576122d18383612910565b6122df9060ff16600a612a17565b6122e9908561278b565b9050610b99565b8160ff168360ff161115612320576123088284612910565b6123169060ff16600a612a17565b6122e990856127aa565b509192915050565b600061237d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123fa9092919063ffffffff16565b805190915015610b84578080602001905181019061239b9190612a23565b610b845760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161060e565b6060610b96848460008585843b6124535760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161060e565b600080866001600160a01b0316858760405161246f9190612a71565b60006040518083038185875af1925050503d80600081146124ac576040519150601f19603f3d011682016040523d82523d6000602084013e6124b1565b606091505b50915091506124c18282866124cc565b979650505050505050565b606083156124db575081610b99565b8251156124eb5782518084602001fd5b8160405162461bcd60e51b815260040161060e9190612a8d565b80356001600160a01b0381168114611da657600080fd5b6000806000806080858703121561253257600080fd5b61253b85612505565b935061254960208601612505565b93969395505050506040820135916060013590565b6020808252825182820181905260009190848201906040850190845b8181101561259f5783516001600160a01b03168352928401929184019160010161257a565b50909695505050505050565b6000602082840312156125bd57600080fd5b610b9982612505565b600080604083850312156125d957600080fd5b6125e283612505565b946020939093013593505050565b6000806040838503121561260357600080fd5b61260c83612505565b915061261a60208401612505565b90509250929050565b60008060006060848603121561263857600080fd5b61264184612505565b925061264f60208501612505565b9150604084013590509250925092565b6000806040838503121561267257600080fd5b50508035926020909101359150565b60006020828403121561269357600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156126e157600080fd5b815160ff81168114610b9957600080fd5b60208082526010908201526f21696e76616c6964285f61737365742960801b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600890820152672162616c616e636560c01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156127a5576127a5612775565b500290565b6000826127c757634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156127df576127df612775565b500190565b6000828210156127f6576127f6612775565b500390565b634e487b7160e01b600052603260045260246000fd5b600060001982141561282557612825612775565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b805169ffffffffffffffffffff81168114611da657600080fd5b600080600080600060a086880312156128bf57600080fd5b6128c88661288d565b94506020860151935060408601519250606086015191506128eb6080870161288d565b90509295509295909350565b60006020828403121561290957600080fd5b5051919050565b600060ff821660ff84168082101561292a5761292a612775565b90039392505050565b600181815b8085111561296e57816000190482111561295457612954612775565b8085161561296157918102915b93841c9390800290612938565b509250929050565b60008261298557506001610bab565b8161299257506000610bab565b81600181146129a857600281146129b2576129ce565b6001915050610bab565b60ff8411156129c3576129c3612775565b50506001821b610bab565b5060208310610133831016604e8410600b84101617156129f1575081810a610bab565b6129fb8383612933565b8060001904821115612a0f57612a0f612775565b029392505050565b6000610b998383612976565b600060208284031215612a3557600080fd5b81518015158114610b9957600080fd5b60005b83811015612a60578181015183820152602001612a48565b838111156121f95750506000910152565b60008251612a83818460208701612a45565b9190910192915050565b6020815260008251806020840152612aac816040850160208701612a45565b601f01601f1916919091016040019291505056fea2646970667358221220e56567cbf64cc9c66091ac7d96beb5127468c91067d3815fbaa466cc268b61bd64736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allocateToStrategy(address,address,uint256)": {
        "details": "Send an amount of asset to a strategy",
        "params": {
          "_asset": "Address of asset",
          "_assetAmount": "Amount of asset to send"
        }
      },
      "allowAsset(address,address,uint256,uint256)": {
        "details": "Add an allowed asset to be deposited into the vault",
        "params": {
          "_asset": "Address of new ERC20 asset",
          "_priceFeed": "Address of a chainlink-compatible price oracle for the asset",
          "_slippageBps": "Slippage basis points to use when depositing/withdrawing this asset"
        }
      },
      "balanceOf(address)": {
        "details": "Get current balance of shares for an address",
        "params": {
          "_address": "Address to check"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "currentValueOf(address)": {
        "details": "Get current vault value of `_address` denominated in `baseAsset`",
        "params": {
          "_address": "Address to check"
        }
      },
      "deposit(address,uint256)": {
        "details": "Deposit an amount of `_asset` into the vault and credit the equal value of `baseAsset`",
        "params": {
          "_asset": "Address of incoming asset",
          "_assetAmount": "Amount of asset to deposit"
        }
      },
      "depositTo(address,address,uint256)": {
        "details": "Deposit an amount of `_asset` into the vault and credit the equal value of `baseAsset`",
        "params": {
          "_asset": "Address of incoming asset",
          "_assetAmount": "Amount of asset to deposit",
          "_to": "Recipient of funds"
        }
      },
      "getAllAssets()": {
        "details": "Get all the assets supported by the vault."
      },
      "getAsset(address)": {
        "details": "Get asset details",
        "params": {
          "_asset": "Asset address"
        },
        "returns": {
          "_0": "Asset Asset details"
        }
      },
      "getBaseAsset()": {
        "details": "Get base asset of vault."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "payment(address,uint256)": {
        "details": "Pay `_baseAssetAmount` of `baseAsset` directly from a sender to `_to`",
        "params": {
          "_baseAssetAmount": "Amount of asset to transfer",
          "_to": "To address"
        }
      },
      "protocolPayment(address,address,uint256,uint256)": {
        "details": "Pay `_baseAssetAmount` of `baseAsset` from `_from` to `_to`",
        "params": {
          "_baseAssetAmount": "Amount of baseAsset to transfer",
          "_baseAssetFee": "Fee to deduct from `_baseAssetAmount`",
          "_from": "From address",
          "_to": "To address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsAsset(address)": {
        "details": "Check if the vault supports an asset",
        "params": {
          "_asset": "Asset address"
        },
        "returns": {
          "_0": "bool `true` if asset supported, `false` otherwise"
        }
      },
      "totalAssetBalance(address)": {
        "details": "Get total amount of an asset held in vault and managed by admin",
        "params": {
          "_asset": "Address of asset"
        }
      },
      "totalSupply()": {
        "details": "Get total shares of vault"
      },
      "totalValue()": {
        "details": "Get total value in vault and managed by admin - denominated in `baseAsset`"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,uint256)": {
        "details": "Withdraw an amount of shares from the vault in the form of `_asset`",
        "params": {
          "_asset": "Address of outgoing asset",
          "_shares": "Amount of shares to withdraw"
        }
      },
      "withdrawFees(address,uint256)": {
        "details": "Withdraw an amount of accumulated share fees in the form of `baseAsset`",
        "params": {
          "_recipient": "Recipient who will receive the withdrawn assets",
          "_sharesAmount": "Amount of shares to withdraw"
        }
      },
      "withdrawTo(address,address,uint256)": {
        "details": "Withdraw an amount of shares from the vault in the form of `_asset`",
        "params": {
          "_asset": "Address of outgoing asset",
          "_recipient": "Recipient who will receive the withdrawn assets",
          "_shares": "Amount of shares to withdraw"
        }
      }
    },
    "stateVariables": {
      "feeBalance": {
        "details": "total fees collected by vault - denominated in vault shares "
      },
      "transferFeeFixed": {
        "details": "fixed fee to charge recipient on direct transfer, in baseAsset decimal units. "
      },
      "transferFeeRate": {
        "details": "percentage to charge recipient on direct transfer, in bps. 50% = 5000. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "CaskVault is where: - the approved asset list lives - users deposit/withdraw approved assets which results in a mint/burn of the vault token - a minimum reserve rate is enforced - vault operators can tell the vault to send unallocated assets to strategies - protocols can process a payment between parties - one can query the value of all unallocated assets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 788,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 791,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2336,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 666,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 780,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 876,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 967,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 982,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "_status",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 1025,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 13761,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "transferFeeFixed",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 13764,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "transferFeeRate",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 13766,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "vaultAdmin",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 13768,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "baseAsset",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 13772,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "balances",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13774,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "supply",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 13779,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "assets",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_struct(Asset)8514_storage)"
      },
      {
        "astId": 13782,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "allAssets",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 13785,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "feeBalance",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 13788,
        "contract": "contracts/vault/CaskVault.sol:CaskVault",
        "label": "operators",
        "offset": 0,
        "slot": "210",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Asset)8514_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICaskVault.Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)8514_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Asset)8514_storage": {
        "encoding": "inplace",
        "label": "struct ICaskVault.Asset",
        "members": [
          {
            "astId": 8503,
            "contract": "contracts/vault/CaskVault.sol:CaskVault",
            "label": "priceFeed",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8505,
            "contract": "contracts/vault/CaskVault.sol:CaskVault",
            "label": "slippageBps",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8507,
            "contract": "contracts/vault/CaskVault.sol:CaskVault",
            "label": "depositLimit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8509,
            "contract": "contracts/vault/CaskVault.sol:CaskVault",
            "label": "assetDecimals",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 8511,
            "contract": "contracts/vault/CaskVault.sol:CaskVault",
            "label": "priceFeedDecimals",
            "offset": 1,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 8513,
            "contract": "contracts/vault/CaskVault.sol:CaskVault",
            "label": "allowed",
            "offset": 2,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}